/// <reference types="node" />
import { WebSocket } from './IsomorphicWebSocket';
import { InteractionContext } from './Connection';
import { Block, BlockAllegra, BlockAlonzo, BlockBabbage, BlockByron, BlockMary, BlockShelley, EpochBoundaryBlock, Metadatum, Point, ProtocolParametersAlonzo, ProtocolParametersBabbage, ProtocolParametersShelley, StandardBlock } from '@cardano-ogmios/schema';
import { EventEmitter } from 'events';
export declare const safeJSON: {
    $: any;
    sanitize(json: any, parentKey?: string): any;
    sanitizeFields(json: any, fields: string[]): any;
    sanitizeAdditionalFields(json: any): any;
    parse(raw: string): any;
    stringify(...args: any[]): string;
};
export declare const createPointFromCurrentTip: (context?: InteractionContext) => Promise<Point>;
export declare const ensureSocketIsOpen: (socket: WebSocket) => void;
export declare function eventEmitterToGenerator<T>(eventEmitter: EventEmitter, eventName: string, match: (e: string) => T | null): () => AsyncGenerator<unknown, never, unknown>;
export declare function unsafeMetadatumAsJSON(metadatum: Metadatum): any;
export declare const isAllegraBlock: (block: Block) => block is {
    allegra: BlockAllegra;
};
export declare const isAlonzoBlock: (block: Block) => block is {
    alonzo: BlockAlonzo;
};
export declare const isBabbageBlock: (block: Block) => block is {
    babbage: BlockBabbage;
};
export declare const isByronBlock: (block: Block) => block is {
    byron: BlockByron;
};
export declare const isByronStandardBlock: (block: Block) => block is {
    byron: StandardBlock;
};
export declare const isByronEpochBoundaryBlock: (block: Block) => block is {
    byron: EpochBoundaryBlock;
};
export declare const isMaryBlock: (block: Block) => block is {
    mary: BlockMary;
};
export declare const isShelleyBlock: (block: Block) => block is {
    shelley: BlockShelley;
};
export declare const isEmptyObject: (obj: Object) => boolean;
export declare const isShelleyProtocolParameters: (params: ProtocolParametersShelley | ProtocolParametersAlonzo | ProtocolParametersBabbage) => params is ProtocolParametersShelley;
export declare const isAlonzoProtocolParameters: (params: ProtocolParametersShelley | ProtocolParametersAlonzo | ProtocolParametersBabbage) => params is ProtocolParametersAlonzo;
export declare const isBabbageProtocolParameters: (params: ProtocolParametersShelley | ProtocolParametersAlonzo | ProtocolParametersBabbage) => params is ProtocolParametersBabbage;
//# sourceMappingURL=util.d.ts.map