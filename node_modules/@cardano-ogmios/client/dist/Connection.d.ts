import { WebSocket, CloseEvent } from './IsomorphicWebSocket';
export interface ConnectionConfig {
    host?: string;
    port?: number;
    tls?: boolean;
    maxPayload?: number;
}
export interface Connection extends Required<ConnectionConfig> {
    maxPayload: number;
    address: {
        http: string;
        webSocket: string;
    };
}
export interface InteractionContext {
    connection: Connection;
    socket: WebSocket;
    afterEach: (cb: () => void) => void;
}
export declare type InteractionType = ('LongRunning' | 'OneTime');
export declare type WebSocketErrorHandler = (error: Error) => void;
export declare type WebSocketCloseHandler = (code: CloseEvent['code'], reason: CloseEvent['reason']) => void;
export declare const createConnectionObject: (config?: ConnectionConfig) => Connection;
export declare const createInteractionContext: (errorHandler: WebSocketErrorHandler, closeHandler: WebSocketCloseHandler, options?: {
    connection?: ConnectionConfig;
    interactionType?: InteractionType;
}) => Promise<InteractionContext>;
//# sourceMappingURL=Connection.d.ts.map