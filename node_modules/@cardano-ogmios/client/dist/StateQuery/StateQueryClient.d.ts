import { Address, DigestBlake2BCredential, Lovelace, PointOrOrigin, PoolId, TxIn } from '@cardano-ogmios/schema';
import { InteractionContext } from '../Connection';
import { blockHeight, chainTip, currentEpoch, currentProtocolParameters, delegationsAndRewards, eraStart, eraSummaries, genesisConfig, ledgerTip, nonMyopicMemberRewards, poolIds, poolParameters, poolsRanking, proposedProtocolParameters, rewardsProvenance, rewardsProvenanceNew, stakeDistribution, systemStart, utxo } from './queries';
export interface StateQueryClient {
    context: InteractionContext;
    acquire: (point: PointOrOrigin) => Promise<StateQueryClient>;
    release: () => Promise<void>;
    shutdown: () => Promise<void>;
    blockHeight: () => ReturnType<typeof blockHeight>;
    chainTip: () => ReturnType<typeof chainTip>;
    currentEpoch: () => ReturnType<typeof currentEpoch>;
    currentProtocolParameters: () => ReturnType<typeof currentProtocolParameters>;
    delegationsAndRewards: (stakeKeyHashes: DigestBlake2BCredential[]) => ReturnType<typeof delegationsAndRewards>;
    eraStart: () => ReturnType<typeof eraStart>;
    eraSummaries: () => ReturnType<typeof eraSummaries>;
    genesisConfig: () => ReturnType<typeof genesisConfig>;
    ledgerTip: () => ReturnType<typeof ledgerTip>;
    nonMyopicMemberRewards: (input: Lovelace[] | DigestBlake2BCredential[]) => ReturnType<typeof nonMyopicMemberRewards>;
    poolIds: () => ReturnType<typeof poolIds>;
    poolParameters: (pools: PoolId[]) => ReturnType<typeof poolParameters>;
    poolsRanking: () => ReturnType<typeof poolsRanking>;
    proposedProtocolParameters: () => ReturnType<typeof proposedProtocolParameters>;
    rewardsProvenance: () => ReturnType<typeof rewardsProvenance>;
    rewardsProvenanceNew: () => ReturnType<typeof rewardsProvenanceNew>;
    stakeDistribution: () => ReturnType<typeof stakeDistribution>;
    systemStart: () => ReturnType<typeof systemStart>;
    utxo: (filter?: Address[] | TxIn[]) => ReturnType<typeof utxo>;
}
export declare const createStateQueryClient: (context: InteractionContext, options?: {
    point?: PointOrOrigin;
}) => Promise<StateQueryClient>;
//# sourceMappingURL=StateQueryClient.d.ts.map