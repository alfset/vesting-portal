"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utxo = void 0;
const errors_1 = require("../../errors");
const Query_1 = require("../Query");
const isEraMismatch = (result) => result.eraMismatch !== undefined;
const isArrayOfUtxo = (result) => {
    if (!Array.isArray(result)) {
        return false;
    }
    else if (Array.isArray(result) && result.length === 0) {
        return true;
    }
    const item = result[0];
    return 'index' in item[0] || typeof item[1].value.coins === 'number';
};
const utxo = (context, filters) => (0, Query_1.Query)({
    methodName: 'Query',
    args: {
        query: Array.isArray(filters) && filters.length > 0 && filters[0] !== null
            ? { utxo: filters }
            : 'utxo'
    }
}, {
    handler: (response, resolve, reject) => {
        if (response.result === 'QueryUnavailableInCurrentEra') {
            return reject(new errors_1.QueryUnavailableInCurrentEraError('utxo'));
        }
        else if (isEraMismatch(response.result)) {
            const { eraMismatch } = response.result;
            const { ledgerEra, queryEra } = eraMismatch;
            return reject(new errors_1.EraMismatchError(queryEra, ledgerEra));
        }
        else if (isArrayOfUtxo(response.result)) {
            return resolve(response.result);
        }
        else {
            return reject(new errors_1.UnknownResultError(response.result));
        }
    }
}, context);
exports.utxo = utxo;
//# sourceMappingURL=utxo.js.map