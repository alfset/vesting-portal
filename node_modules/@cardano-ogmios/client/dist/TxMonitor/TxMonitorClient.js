"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTxMonitorClient = void 0;
const util_1 = require("../util");
const Request_1 = require("../Request");
const awaitAcquire_1 = require("./awaitAcquire");
const hasTx_1 = require("./hasTx");
const nextTx_1 = require("./nextTx");
const release_1 = require("./release");
const sizeAndCapacity_1 = require("./sizeAndCapacity");
const createTxMonitorClient = async (context) => {
    const { socket } = context;
    const matchAny = (data) => {
        const json = util_1.safeJSON.parse(data);
        const methods = ['AwaitAcquire', 'HasTx', 'NextTx', 'SizeAndCapacity', 'ReleaseMempool'];
        if (json.type !== 'jsonwsp/fault' && !methods.includes(json.methodname)) {
            return null;
        }
        return json;
    };
    const response = (0, util_1.eventEmitterToGenerator)(socket, 'message', matchAny)();
    return Promise.resolve({
        context,
        awaitAcquire: (args) => {
            (0, util_1.ensureSocketIsOpen)(socket);
            return (0, Request_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Request_1.baseRequest,
                    methodname: 'AwaitAcquire',
                    args: args
                }));
                return (0, awaitAcquire_1.handleAwaitAcquireResponse)((await response.next()).value);
            }, context);
        },
        hasTx: (id) => {
            (0, util_1.ensureSocketIsOpen)(socket);
            return (0, Request_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Request_1.baseRequest,
                    methodname: 'HasTx',
                    args: { id }
                }));
                return (0, hasTx_1.handleHasTxResponse)((await response.next()).value);
            }, context);
        },
        nextTx: (args) => {
            (0, util_1.ensureSocketIsOpen)(socket);
            return (0, Request_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Request_1.baseRequest,
                    methodname: 'NextTx',
                    args: args || {}
                }));
                return (0, nextTx_1.handleNextTxResponse)((await response.next()).value, args);
            }, context);
        },
        sizeAndCapacity: (args) => {
            (0, util_1.ensureSocketIsOpen)(socket);
            return (0, Request_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Request_1.baseRequest,
                    methodname: 'SizeAndCapacity',
                    args: args
                }));
                return (0, sizeAndCapacity_1.handleSizeAndCapacityResponse)((await response.next()).value);
            }, context);
        },
        release: (args) => {
            (0, util_1.ensureSocketIsOpen)(socket);
            return (0, Request_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Request_1.baseRequest,
                    methodname: 'ReleaseMempool',
                    args: args
                }));
                return (0, release_1.handleReleaseResponse)((await response.next()).value);
            }, context);
        },
        shutdown: () => new Promise(resolve => {
            (0, util_1.ensureSocketIsOpen)(socket);
            socket.once('close', resolve);
            socket.close();
        })
    });
};
exports.createTxMonitorClient = createTxMonitorClient;
//# sourceMappingURL=TxMonitorClient.js.map