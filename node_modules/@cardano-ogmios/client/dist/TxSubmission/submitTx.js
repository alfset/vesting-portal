"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleSubmitTxResponse = exports.submitTx = exports.isTxId = void 0;
const errors_1 = require("../errors");
const submissionErrors_1 = require("./submissionErrors");
const StateQuery_1 = require("../StateQuery");
const isTxId = (result) => (typeof result === 'string');
exports.isTxId = isTxId;
const submitTx = (context, bytes) => (0, StateQuery_1.Query)({
    methodName: 'SubmitTx',
    args: { submit: bytes }
}, {
    handler: (response, resolve, reject) => {
        const result = (0, exports.handleSubmitTxResponse)(response);
        if ((0, exports.isTxId)(result)) {
            return resolve(result);
        }
        else {
            return reject(result);
        }
    }
}, context);
exports.submitTx = submitTx;
const handleSubmitTxResponse = (response) => {
    try {
        const { result } = response;
        if ('SubmitSuccess' in result) {
            const { SubmitSuccess } = result;
            return SubmitSuccess.txId;
        }
        else if ('SubmitFail' in result) {
            const { SubmitFail } = result;
            if (Array.isArray(SubmitFail)) {
                return SubmitFail.map(failure => {
                    if (submissionErrors_1.errors.EraMismatch.assert(failure)) {
                        return new submissionErrors_1.errors.EraMismatch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.InvalidWitnesses.assert(failure)) {
                        return new submissionErrors_1.errors.InvalidWitnesses.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingVkWitnesses.assert(failure)) {
                        return new submissionErrors_1.errors.MissingVkWitnesses.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingScriptWitnesses.assert(failure)) {
                        return new submissionErrors_1.errors.MissingScriptWitnesses.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ScriptWitnessNotValidating.assert(failure)) {
                        return new submissionErrors_1.errors.ScriptWitnessNotValidating.Error(failure);
                    }
                    else if (submissionErrors_1.errors.InsufficientGenesisSignatures.assert(failure)) {
                        return new submissionErrors_1.errors.InsufficientGenesisSignatures.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingTxMetadata.assert(failure)) {
                        return new submissionErrors_1.errors.MissingTxMetadata.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingTxMetadataHash.assert(failure)) {
                        return new submissionErrors_1.errors.MissingTxMetadataHash.Error(failure);
                    }
                    else if (submissionErrors_1.errors.TxMetadataHashMismatch.assert(failure)) {
                        return new submissionErrors_1.errors.TxMetadataHashMismatch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.BadInputs.assert(failure)) {
                        return new submissionErrors_1.errors.BadInputs.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ExpiredUtxo.assert(failure)) {
                        return new submissionErrors_1.errors.ExpiredUtxo.Error(failure);
                    }
                    else if (submissionErrors_1.errors.TxTooLarge.assert(failure)) {
                        return new submissionErrors_1.errors.TxTooLarge.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingAtLeastOneInputUtxo.assert(failure)) {
                        return new submissionErrors_1.errors.MissingAtLeastOneInputUtxo.Error(failure);
                    }
                    else if (submissionErrors_1.errors.InvalidMetadata.assert(failure)) {
                        return new submissionErrors_1.errors.InvalidMetadata.Error(failure);
                    }
                    else if (submissionErrors_1.errors.FeeTooSmall.assert(failure)) {
                        return new submissionErrors_1.errors.FeeTooSmall.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ValueNotConserved.assert(failure)) {
                        return new submissionErrors_1.errors.ValueNotConserved.Error(failure);
                    }
                    else if (submissionErrors_1.errors.NetworkMismatch.assert(failure)) {
                        return new submissionErrors_1.errors.NetworkMismatch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.OutputTooSmall.assert(failure)) {
                        return new submissionErrors_1.errors.OutputTooSmall.Error(failure);
                    }
                    else if (submissionErrors_1.errors.AddressAttributesTooLarge.assert(failure)) {
                        return new submissionErrors_1.errors.AddressAttributesTooLarge.Error(failure);
                    }
                    else if (submissionErrors_1.errors.DelegateNotRegistered.assert(failure)) {
                        return new submissionErrors_1.errors.DelegateNotRegistered.Error(failure);
                    }
                    else if (submissionErrors_1.errors.UnknownOrIncompleteWithdrawals.assert(failure)) {
                        return new submissionErrors_1.errors.UnknownOrIncompleteWithdrawals.Error(failure);
                    }
                    else if (submissionErrors_1.errors.StakePoolNotRegistered.assert(failure)) {
                        return new submissionErrors_1.errors.StakePoolNotRegistered.Error(failure);
                    }
                    else if (submissionErrors_1.errors.WrongRetirementEpoch.assert(failure)) {
                        return new submissionErrors_1.errors.WrongRetirementEpoch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.WrongPoolCertificate.assert(failure)) {
                        return new submissionErrors_1.errors.WrongPoolCertificate.Error(failure);
                    }
                    else if (submissionErrors_1.errors.StakeKeyAlreadyRegistered.assert(failure)) {
                        return new submissionErrors_1.errors.StakeKeyAlreadyRegistered.Error(failure);
                    }
                    else if (submissionErrors_1.errors.PoolCostTooSmall.assert(failure)) {
                        return new submissionErrors_1.errors.PoolCostTooSmall.Error(failure);
                    }
                    else if (submissionErrors_1.errors.StakeKeyNotRegistered.assert(failure)) {
                        return new submissionErrors_1.errors.StakeKeyNotRegistered.Error(failure);
                    }
                    else if (submissionErrors_1.errors.RewardAccountNotExisting.assert(failure)) {
                        return new submissionErrors_1.errors.RewardAccountNotExisting.Error(failure);
                    }
                    else if (submissionErrors_1.errors.RewardAccountNotEmpty.assert(failure)) {
                        return new submissionErrors_1.errors.RewardAccountNotEmpty.Error(failure);
                    }
                    else if (submissionErrors_1.errors.WrongCertificateType.assert(failure)) {
                        return new submissionErrors_1.errors.WrongCertificateType.Error(failure);
                    }
                    else if (submissionErrors_1.errors.UnknownGenesisKey.assert(failure)) {
                        return new submissionErrors_1.errors.UnknownGenesisKey.Error(failure);
                    }
                    else if (submissionErrors_1.errors.AlreadyDelegating.assert(failure)) {
                        return new submissionErrors_1.errors.AlreadyDelegating.Error(failure);
                    }
                    else if (submissionErrors_1.errors.InsufficientFundsForMir.assert(failure)) {
                        return new submissionErrors_1.errors.InsufficientFundsForMir.Error(failure);
                    }
                    else if (submissionErrors_1.errors.TooLateForMir.assert(failure)) {
                        return new submissionErrors_1.errors.TooLateForMir.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MirTransferNotCurrentlyAllowed.assert(failure)) {
                        return new submissionErrors_1.errors.MirTransferNotCurrentlyAllowed.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MirNegativeTransferNotCurrentlyAllowed.assert(failure)) {
                        return new submissionErrors_1.errors.MirNegativeTransferNotCurrentlyAllowed.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MirProducesNegativeUpdate.assert(failure)) {
                        return new submissionErrors_1.errors.MirProducesNegativeUpdate.Error(failure);
                    }
                    else if (submissionErrors_1.errors.DuplicateGenesisVrf.assert(failure)) {
                        return new submissionErrors_1.errors.DuplicateGenesisVrf.Error(failure);
                    }
                    else if (submissionErrors_1.errors.NonGenesisVoters.assert(failure)) {
                        return new submissionErrors_1.errors.NonGenesisVoters.Error(failure);
                    }
                    else if (submissionErrors_1.errors.UpdateWrongEpoch.assert(failure)) {
                        return new submissionErrors_1.errors.UpdateWrongEpoch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ProtocolVersionCannotFollow.assert(failure)) {
                        return new submissionErrors_1.errors.ProtocolVersionCannotFollow.Error(failure);
                    }
                    else if (submissionErrors_1.errors.OutsideOfValidityInterval.assert(failure)) {
                        return new submissionErrors_1.errors.OutsideOfValidityInterval.Error(failure);
                    }
                    else if (submissionErrors_1.errors.TriesToForgeAda.assert(failure)) {
                        return new submissionErrors_1.errors.TriesToForgeAda.Error(failure);
                    }
                    else if (submissionErrors_1.errors.TooManyAssetsInOutput.assert(failure)) {
                        return new submissionErrors_1.errors.TooManyAssetsInOutput.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingRequiredRedeemers.assert(failure)) {
                        return new submissionErrors_1.errors.MissingRequiredRedeemers.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ExtraDataMismatch.assert(failure)) {
                        return new submissionErrors_1.errors.ExtraDataMismatch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingRequiredSignatures.assert(failure)) {
                        return new submissionErrors_1.errors.MissingRequiredSignatures.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingDatumHashesForInputs.assert(failure)) {
                        return new submissionErrors_1.errors.MissingDatumHashesForInputs.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingCollateralInputs.assert(failure)) {
                        return new submissionErrors_1.errors.MissingCollateralInputs.Error(failure);
                    }
                    else if (submissionErrors_1.errors.CollateralTooSmall.assert(failure)) {
                        return new submissionErrors_1.errors.CollateralTooSmall.Error(failure);
                    }
                    else if (submissionErrors_1.errors.CollateralIsScript.assert(failure)) {
                        return new submissionErrors_1.errors.CollateralIsScript.Error(failure);
                    }
                    else if (submissionErrors_1.errors.CollateralHasNonAdaAssets.assert(failure)) {
                        return new submissionErrors_1.errors.CollateralHasNonAdaAssets.Error(failure);
                    }
                    else if (submissionErrors_1.errors.TooManyCollateralInputs.assert(failure)) {
                        return new submissionErrors_1.errors.TooManyCollateralInputs.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ExecutionUnitsTooLarge.assert(failure)) {
                        return new submissionErrors_1.errors.ExecutionUnitsTooLarge.Error(failure);
                    }
                    else if (submissionErrors_1.errors.OutsideForecast.assert(failure)) {
                        return new submissionErrors_1.errors.OutsideForecast.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ValidationTagMismatch.assert(failure)) {
                        return new submissionErrors_1.errors.ValidationTagMismatch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.CollectErrors.assert(failure)) {
                        return new submissionErrors_1.errors.CollectErrors.Error(failure);
                    }
                    else if (submissionErrors_1.errors.PoolMetadataHashTooBig.assert(failure)) {
                        return new submissionErrors_1.errors.PoolMetadataHashTooBig.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MissingRequiredDatums.assert(failure)) {
                        return new submissionErrors_1.errors.MissingRequiredDatums.Error(failure);
                    }
                    else if (submissionErrors_1.errors.UnspendableDatums.assert(failure)) {
                        return new submissionErrors_1.errors.UnspendableDatums.Error(failure);
                    }
                    else if (submissionErrors_1.errors.UnspendableScriptInputs.assert(failure)) {
                        return new submissionErrors_1.errors.UnspendableScriptInputs.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ExtraRedeemers.assert(failure)) {
                        return new submissionErrors_1.errors.ExtraRedeemers.Error(failure);
                    }
                    else if (submissionErrors_1.errors.ExtraScriptWitnesses.assert(failure)) {
                        return new submissionErrors_1.errors.ExtraScriptWitnesses.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MirNegativeTransfer.assert(failure)) {
                        return new submissionErrors_1.errors.MirNegativeTransfer.Error(failure);
                    }
                    else if (submissionErrors_1.errors.TotalCollateralMismatch.assert(failure)) {
                        return new submissionErrors_1.errors.TotalCollateralMismatch.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MalformedReferenceScripts.assert(failure)) {
                        return new submissionErrors_1.errors.MalformedReferenceScripts.Error(failure);
                    }
                    else if (submissionErrors_1.errors.MalformedScriptWitnesses.assert(failure)) {
                        return new submissionErrors_1.errors.MalformedScriptWitnesses.Error(failure);
                    }
                    else {
                        return new Error(failure);
                    }
                });
            }
        }
        else {
            return [new errors_1.UnknownResultError(response)];
        }
    }
    catch (e) {
        return [new errors_1.UnknownResultError(response)];
    }
};
exports.handleSubmitTxResponse = handleSubmitTxResponse;
//# sourceMappingURL=submitTx.js.map