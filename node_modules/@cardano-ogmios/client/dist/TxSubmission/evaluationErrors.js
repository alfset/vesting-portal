"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errors = void 0;
const ts_custom_error_1 = require("ts-custom-error");
const util_1 = require("../util");
exports.errors = {
    AdditionalUtxoOverlap: {
        assert: (item) => item.AdditionalUtxoOverlap !== undefined,
        Error: class AdditionalUtxoOverlapError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.AdditionalUtxoOverlap);
            }
        }
    },
    ExtraRedeemers: {
        assert: (item) => item.extraRedeemers !== undefined,
        Error: class ExtraRedeemersError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.extraRedeemers);
            }
        }
    },
    IllFormedExecutionBudget: {
        assert: (item) => item.illFormedExecutionBudget !== undefined,
        Error: class IllFormedExecutionBudgetError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.illFormedExecutionBudget);
            }
        }
    },
    IncompatibleEra: {
        assert: (item) => item.IncompatibleEra !== undefined,
        Error: class IncompatibleEraError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.IncompatibleEra);
            }
        }
    },
    MissingRequiredDatums: {
        assert: (item) => item.missingRequiredDatums !== undefined,
        Error: class MissingRequiredDatumsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingRequiredDatums);
            }
        }
    },
    MissingRequiredScripts: {
        assert: (item) => item.missingRequiredScripts !== undefined,
        Error: class MissingRequiredScriptsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingRequiredScripts);
            }
        }
    },
    NoCostModelForLanguage: {
        assert: (item) => item.noCostModelForLanguage !== undefined,
        Error: class NoCostModelForLanguageError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.noCostModelForLanguage);
            }
        }
    },
    NonScriptInputReferencedByRedeemer: {
        assert: (item) => item.nonScriptInputReferencedByRedeemer !== undefined,
        Error: class NonScriptInputReferencedByRedeemerError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.nonScriptInputReferencedByRedeemer);
            }
        }
    },
    UnknownInputReferencedByRedeemer: {
        assert: (item) => item.unknownInputReferencedByRedeemer !== undefined,
        Error: class UnknownInputReferencedByRedeemerError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.unknownInputReferencedByRedeemer);
            }
        }
    },
    ValidatorFailed: {
        assert: (item) => item.validatorFailed !== undefined,
        Error: class ValidatorFailedError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.validatorFailed);
            }
        }
    },
    NotEnoughSynced: {
        assert: (item) => item.NotEnoughSynced !== undefined,
        Error: class NotEnoughSyncedError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.NotEnoughSynced);
            }
        }
    },
    CannotCreateEvaluationContext: {
        assert: (item) => item.CannotCreateEvaluationContext !== undefined,
        Error: class CannotCreateEvaluationContextError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.CannotCreateEvaluationContext);
            }
        }
    }
};
//# sourceMappingURL=evaluationErrors.js.map