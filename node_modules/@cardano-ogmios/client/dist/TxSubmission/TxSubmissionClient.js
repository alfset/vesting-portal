"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTxSubmissionClient = void 0;
const util_1 = require("../util");
const submitTx_1 = require("./submitTx");
const evaluateTx_1 = require("./evaluateTx");
const Request_1 = require("../Request");
const matchSubmitTx = (data) => {
    const response = util_1.safeJSON.parse(data);
    if (response.type !== 'jsonwsp/fault' && response.methodname !== 'SubmitTx') {
        return null;
    }
    return response;
};
const matchEvaluateTx = (data) => {
    const response = util_1.safeJSON.parse(data);
    if (response.type !== 'jsonwsp/fault' && response.methodname !== 'EvaluateTx') {
        return null;
    }
    return response;
};
const createTxSubmissionClient = async (context) => {
    const { socket } = context;
    const submitTxResponse = (0, util_1.eventEmitterToGenerator)(socket, 'message', matchSubmitTx)();
    const evaluateTxResponse = (0, util_1.eventEmitterToGenerator)(socket, 'message', matchEvaluateTx)();
    return Promise.resolve({
        context,
        evaluateTx: (bytes, additionalUtxoSet) => {
            (0, util_1.ensureSocketIsOpen)(socket);
            return (0, Request_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Request_1.baseRequest,
                    methodname: 'EvaluateTx',
                    args: {
                        ...(additionalUtxoSet !== undefined ? { additionalUtxoSet } : {}),
                        evaluate: bytes
                    }
                }));
                const response = (0, evaluateTx_1.handleEvaluateTxResponse)((await evaluateTxResponse.next()).value);
                if ((0, evaluateTx_1.isEvaluationResult)(response)) {
                    return response;
                }
                else {
                    throw response;
                }
            }, context);
        },
        submitTx: async (bytes) => {
            (0, util_1.ensureSocketIsOpen)(socket);
            return (0, Request_1.send)(async (socket) => {
                socket.send(util_1.safeJSON.stringify({
                    ...Request_1.baseRequest,
                    methodname: 'SubmitTx',
                    args: { submit: bytes }
                }));
                const response = (0, submitTx_1.handleSubmitTxResponse)((await submitTxResponse.next()).value);
                if ((0, submitTx_1.isTxId)(response)) {
                    return response;
                }
                else {
                    throw response;
                }
            }, context);
        },
        shutdown: () => new Promise(resolve => {
            (0, util_1.ensureSocketIsOpen)(socket);
            socket.once('close', resolve);
            socket.close();
        })
    });
};
exports.createTxSubmissionClient = createTxSubmissionClient;
//# sourceMappingURL=TxSubmissionClient.js.map