"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errors = void 0;
const ts_custom_error_1 = require("ts-custom-error");
const util_1 = require("../util");
exports.errors = {
    EraMismatch: {
        assert: (item) => item.eraMismatch !== undefined,
        Error: class EraMismatchError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.eraMismatch);
            }
        }
    },
    InvalidWitnesses: {
        assert: (item) => item.invalidWitnesses !== undefined,
        Error: class InvalidWitnessesError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.invalidWitnesses);
            }
        }
    },
    MissingVkWitnesses: {
        assert: (item) => item.missingVkWitnesses !== undefined,
        Error: class MissingVkWitnessesError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingVkWitnesses);
            }
        }
    },
    MissingScriptWitnesses: {
        assert: (item) => item.missingScriptWitnesses !== undefined,
        Error: class MissingScriptWitnessesError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingScriptWitnesses);
            }
        }
    },
    ScriptWitnessNotValidating: {
        assert: (item) => item.scriptWitnessNotValidating !== undefined,
        Error: class ScriptWitnessNotValidatingError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.scriptWitnessNotValidating);
            }
        }
    },
    InsufficientGenesisSignatures: {
        assert: (item) => item.insufficientGenesisSignatures !== undefined,
        Error: class InsufficientGenesisSignaturesError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.insufficientGenesisSignatures);
            }
        }
    },
    MissingTxMetadata: {
        assert: (item) => item.missingTxMetadata !== undefined,
        Error: class MissingTxMetadataError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingTxMetadata);
            }
        }
    },
    MissingTxMetadataHash: {
        assert: (item) => item.missingTxMetadataHash !== undefined,
        Error: class MissingTxMetadataHashError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingTxMetadataHash);
            }
        }
    },
    TxMetadataHashMismatch: {
        assert: (item) => item.txMetadataHashMismatch !== undefined,
        Error: class TxMetadataHashMismatchError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.txMetadataHashMismatch);
            }
        }
    },
    BadInputs: {
        assert: (item) => item.badInputs !== undefined,
        Error: class BadInputsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.badInputs);
            }
        }
    },
    ExpiredUtxo: {
        assert: (item) => item.expiredUtxo !== undefined,
        Error: class ExpiredUtxoError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.expiredUtxo);
            }
        }
    },
    TxTooLarge: {
        assert: (item) => item.txTooLarge !== undefined,
        Error: class TxTooLargeError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.txTooLarge);
            }
        }
    },
    MissingAtLeastOneInputUtxo: {
        assert: (item) => item.missingAtLeastOneInputUtxo !== undefined,
        Error: class MissingAtLeastOneInputUtxoError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    InvalidMetadata: {
        assert: (item) => item.invalidMetadata !== undefined,
        Error: class InvalidMetadataError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    FeeTooSmall: {
        assert: (item) => item.feeTooSmall !== undefined,
        Error: class FeeTooSmallError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.feeTooSmall);
            }
        }
    },
    ValueNotConserved: {
        assert: (item) => item.valueNotConserved !== undefined,
        Error: class ValueNotConservedError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.valueNotConserved);
            }
        }
    },
    NetworkMismatch: {
        assert: (item) => item.networkMismatch !== undefined,
        Error: class NetworkMismatchError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.networkMismatch);
            }
        }
    },
    OutputTooSmall: {
        assert: (item) => item.outputTooSmall !== undefined,
        Error: class OutputTooSmallError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.outputTooSmall);
            }
        }
    },
    AddressAttributesTooLarge: {
        assert: (item) => item.addressAttributesTooLarge !== undefined,
        Error: class AddressAttributesTooLargeError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.addressAttributesTooLarge);
            }
        }
    },
    DelegateNotRegistered: {
        assert: (item) => item.delegateNotRegistered !== undefined,
        Error: class DelegateNotRegisteredError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.delegateNotRegistered);
            }
        }
    },
    UnknownOrIncompleteWithdrawals: {
        assert: (item) => item.unknownOrIncompleteWithdrawals !== undefined,
        Error: class UnknownOrIncompleteWithdrawalsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.unknownOrIncompleteWithdrawals);
            }
        }
    },
    StakePoolNotRegistered: {
        assert: (item) => item.stakePoolNotRegistered !== undefined,
        Error: class StakePoolNotRegisteredError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.stakePoolNotRegistered);
            }
        }
    },
    WrongRetirementEpoch: {
        assert: (item) => item.wrongRetirementEpoch !== undefined,
        Error: class WrongRetirementEpochError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.wrongRetirementEpoch);
            }
        }
    },
    WrongPoolCertificate: {
        assert: (item) => item.wrongPoolCertificate !== undefined,
        Error: class WrongPoolCertificateError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.wrongPoolCertificate);
            }
        }
    },
    StakeKeyAlreadyRegistered: {
        assert: (item) => item.stakeKeyAlreadyRegistered !== undefined,
        Error: class StakeKeyAlreadyRegisteredError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.stakeKeyAlreadyRegistered);
            }
        }
    },
    PoolCostTooSmall: {
        assert: (item) => item.poolCostTooSmall !== undefined,
        Error: class PoolCostTooSmallError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.poolCostTooSmall);
            }
        }
    },
    StakeKeyNotRegistered: {
        assert: (item) => item.stakeKeyNotRegistered !== undefined,
        Error: class StakeKeyNotRegisteredError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.stakeKeyNotRegistered);
            }
        }
    },
    RewardAccountNotExisting: {
        assert: (item) => item.rewardAccountNotExisting !== undefined,
        Error: class RewardAccountNotExistingError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    RewardAccountNotEmpty: {
        assert: (item) => item.rewardAccountNotEmpty !== undefined,
        Error: class RewardAccountNotEmptyError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.rewardAccountNotEmpty);
            }
        }
    },
    WrongCertificateType: {
        assert: (item) => item.wrongCertificateType !== undefined,
        Error: class WrongCertificateTypeError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    UnknownGenesisKey: {
        assert: (item) => item.unknownGenesisKey !== undefined,
        Error: class UnknownGenesisKeyError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.unknownGenesisKey);
            }
        }
    },
    AlreadyDelegating: {
        assert: (item) => item.alreadyDelegating !== undefined,
        Error: class AlreadyDelegatingError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.alreadyDelegating);
            }
        }
    },
    InsufficientFundsForMir: {
        assert: (item) => item.insufficientFundsForMir !== undefined,
        Error: class InsufficientFundsForMirError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.insufficientFundsForMir);
            }
        }
    },
    TooLateForMir: {
        assert: (item) => item.tooLateForMir !== undefined,
        Error: class TooLateForMirError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.tooLateForMir);
            }
        }
    },
    MirTransferNotCurrentlyAllowed: {
        assert: (item) => item.mirTransferNotCurrentlyAllowed !== undefined,
        Error: class MirTransferNotCurrentlyAllowedError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    MirNegativeTransferNotCurrentlyAllowed: {
        assert: (item) => item.mirNegativeTransferNotCurrentlyAllowed !== undefined,
        Error: class MirNegativeTransferNotCurrentlyAllowedError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    MirProducesNegativeUpdate: {
        assert: (item) => item.mirProducesNegativeUpdate !== undefined,
        Error: class MirProducesNegativeUpdateError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    DuplicateGenesisVrf: {
        assert: (item) => item.duplicateGenesisVrf !== undefined,
        Error: class DuplicateGenesisVrfError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.duplicateGenesisVrf);
            }
        }
    },
    NonGenesisVoters: {
        assert: (item) => item.nonGenesisVoters !== undefined,
        Error: class NonGenesisVotersError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.nonGenesisVoters);
            }
        }
    },
    UpdateWrongEpoch: {
        assert: (item) => item.updateWrongEpoch !== undefined,
        Error: class UpdateWrongEpochError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.updateWrongEpoch);
            }
        }
    },
    ProtocolVersionCannotFollow: {
        assert: (item) => item.protocolVersionCannotFollow !== undefined,
        Error: class ProtocolVersionCannotFollowError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.protocolVersionCannotFollow);
            }
        }
    },
    OutsideOfValidityInterval: {
        assert: (item) => item.outsideOfValidityInterval !== undefined,
        Error: class OutsideOfValidityIntervalError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.outsideOfValidityInterval);
            }
        }
    },
    TriesToForgeAda: {
        assert: (item) => item.triesToForgeAda !== undefined,
        Error: class TriesToForgeAdaError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    TooManyAssetsInOutput: {
        assert: (item) => item.tooManyAssetsInOutput !== undefined,
        Error: class TooManyAssetsInOutputError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.tooManyAssetsInOutput);
            }
        }
    },
    MissingRequiredRedeemers: {
        assert: (item) => item.missingRequiredRedeemers !== undefined,
        Error: class MissingRequiredRedeemersError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingRequiredRedeemers);
            }
        }
    },
    ExtraDataMismatch: {
        assert: (item) => item.extraDataMismatch !== undefined,
        Error: class ExtraDataMismatchError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.extraDataMismatch);
            }
        }
    },
    MissingRequiredSignatures: {
        assert: (item) => item.missingRequiredSignatures !== undefined,
        Error: class MissingRequiredSignaturesError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingRequiredSignatures);
            }
        }
    },
    MissingDatumHashesForInputs: {
        assert: (item) => item.missingDatumHashesForInputs !== undefined,
        Error: class MissingDatumHashesForInputsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingDatumHashesForInputs);
            }
        }
    },
    MissingCollateralInputs: {
        assert: (item) => item.missingCollateralInputs !== undefined,
        Error: class MissingCollateralInputsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    CollateralTooSmall: {
        assert: (item) => item.collateralTooSmall !== undefined,
        Error: class CollateralTooSmallError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.collateralTooSmall);
            }
        }
    },
    CollateralIsScript: {
        assert: (item) => item.collateralIsScript !== undefined,
        Error: class CollateralIsScriptError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.collateralIsScript);
            }
        }
    },
    CollateralHasNonAdaAssets: {
        assert: (item) => item.collateralHasNonAdaAssets !== undefined,
        Error: class CollateralHasNonAdaAssetsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.collateralHasNonAdaAssets);
            }
        }
    },
    TooManyCollateralInputs: {
        assert: (item) => item.tooManyCollateralInputs !== undefined,
        Error: class TooManyCollateralInputsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.tooManyCollateralInputs);
            }
        }
    },
    ExecutionUnitsTooLarge: {
        assert: (item) => item.executionUnitsTooLarge !== undefined,
        Error: class ExecutionUnitsTooLargeError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.executionUnitsTooLarge);
            }
        }
    },
    OutsideForecast: {
        assert: (item) => item.outsideForecast !== undefined,
        Error: class OutsideForecastError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.outsideForecast);
            }
        }
    },
    ValidationTagMismatch: {
        assert: (item) => item.validationTagMismatch !== undefined,
        Error: class ValidationTagMismatchError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError);
            }
        }
    },
    CollectErrors: {
        assert: (item) => item.collectErrors !== undefined,
        Error: class CollectErrorsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.collectErrors);
            }
        }
    },
    PoolMetadataHashTooBig: {
        assert: (item) => item.poolMetadataHashTooBig !== undefined,
        Error: class PoolMetadataHashTooBigError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.poolMetadataHashTooBig);
            }
        }
    },
    MissingRequiredDatums: {
        assert: (item) => item.missingRequiredDatums !== undefined,
        Error: class MissingRequiredDatumsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.missingRequiredDatums);
            }
        }
    },
    UnspendableDatums: {
        assert: (item) => item.unspendableDatums !== undefined,
        Error: class UnspendableDatumsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.unspendableDatums);
            }
        }
    },
    UnspendableScriptInputs: {
        assert: (item) => item.unspendableScriptInputs !== undefined,
        Error: class UnspendableScriptInputsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.unspendableScriptInputs);
            }
        }
    },
    ExtraRedeemers: {
        assert: (item) => item.extraRedeemers !== undefined,
        Error: class ExtraRedeemersError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.extraRedeemers);
            }
        }
    },
    ExtraScriptWitnesses: {
        assert: (item) => item.extraScriptWitnesses !== undefined,
        Error: class ExtraScriptWitnessesError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.extraScriptWitnesses);
            }
        }
    },
    MirNegativeTransfer: {
        assert: (item) => item.mirNegativeTransfer !== undefined,
        Error: class MirNegativeTransferError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.mirNegativeTransfer);
            }
        }
    },
    TotalCollateralMismatch: {
        assert: (item) => item.totalCollateralMismatch !== undefined,
        Error: class TotalCollateralMismatchError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.totalCollateralMismatch);
            }
        }
    },
    MalformedReferenceScripts: {
        assert: (item) => item.malformedReferenceScripts !== undefined,
        Error: class MalformedReferenceScriptsError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.malformedReferenceScripts);
            }
        }
    },
    MalformedScriptWitnesses: {
        assert: (item) => item.malformedScriptWitnesses !== undefined,
        Error: class MalformedScriptWitnessesError extends ts_custom_error_1.CustomError {
            constructor(rawError) {
                super();
                this.message = util_1.safeJSON.stringify(rawError.malformedScriptWitnesses);
            }
        }
    }
};
//# sourceMappingURL=submissionErrors.js.map