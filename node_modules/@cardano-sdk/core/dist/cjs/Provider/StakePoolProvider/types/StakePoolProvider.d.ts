import { Cardano, Provider } from '../../..';
import { Paginated, PaginationArgs } from '../../types/Pagination';
import { SortFields } from '../util';
declare type FilterCondition = 'and' | 'or';
declare type SortOrder = 'asc' | 'desc';
export declare type SortField = typeof SortFields[number];
interface StakePoolSortOptions {
    order: SortOrder;
    field: SortField;
}
export interface MultipleChoiceSearchFilter<T> {
    _condition?: FilterCondition;
    values: T[];
}
export interface QueryStakePoolsArgs {
    sort?: StakePoolSortOptions;
    filters?: {
        _condition?: FilterCondition;
        identifier?: MultipleChoiceSearchFilter<Partial<Pick<Cardano.PoolParameters, 'id'> & Pick<Cardano.StakePoolMetadata, 'name' | 'ticker'>>>;
        pledgeMet?: boolean;
        status?: Cardano.StakePoolStatus[];
    };
    rewardsHistoryLimit?: number;
    pagination: PaginationArgs;
}
export interface StakePoolStats {
    qty: {
        active: number;
        retired: number;
        retiring: number;
    };
}
export interface StakePoolProvider extends Provider {
    queryStakePools: (args: QueryStakePoolsArgs) => Promise<Paginated<Cardano.StakePool>>;
    stakePoolStats: () => Promise<StakePoolStats>;
}
export {};
//# sourceMappingURL=StakePoolProvider.d.ts.map