"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotImplementedError = exports.InvalidProtocolParametersError = exports.SerializationError = exports.SerializationFailure = exports.ProviderError = exports.providerFailureToStatusCodeMap = exports.ProviderFailure = void 0;
const util_1 = require("@cardano-sdk/util");
const ts_custom_error_1 = require("ts-custom-error");
var ProviderFailure;
(function (ProviderFailure) {
    ProviderFailure["NotFound"] = "NOT_FOUND";
    ProviderFailure["Unknown"] = "UNKNOWN";
    ProviderFailure["InvalidResponse"] = "INVALID_RESPONSE";
    ProviderFailure["NotImplemented"] = "NOT_IMPLEMENTED";
    ProviderFailure["Unhealthy"] = "UNHEALTHY";
    ProviderFailure["ConnectionFailure"] = "CONNECTION_FAILURE";
    ProviderFailure["BadRequest"] = "BAD_REQUEST";
})(ProviderFailure = exports.ProviderFailure || (exports.ProviderFailure = {}));
exports.providerFailureToStatusCodeMap = {
    [ProviderFailure.BadRequest]: 400,
    [ProviderFailure.NotFound]: 404,
    [ProviderFailure.Unhealthy]: 500,
    [ProviderFailure.Unknown]: 500,
    [ProviderFailure.InvalidResponse]: 500,
    [ProviderFailure.NotImplemented]: 500,
    [ProviderFailure.ConnectionFailure]: 500
};
const formatMessage = (reason, detail) => reason + (detail ? ` (${detail})` : '');
class ProviderError extends util_1.ComposableError {
    constructor(reason, innerError, detail) {
        super(formatMessage(reason, detail), innerError);
        this.reason = reason;
        this.detail = detail;
    }
}
exports.ProviderError = ProviderError;
var SerializationFailure;
(function (SerializationFailure) {
    SerializationFailure["InvalidType"] = "INVALID_TYPE";
    SerializationFailure["Overflow"] = "OVERFLOW";
    SerializationFailure["InvalidAddress"] = "INVALID_ADDRESS";
    SerializationFailure["MaxLengthLimit"] = "MAX_LENGTH_LIMIT";
    SerializationFailure["InvalidScript"] = "INVALID_SCRIPT";
    SerializationFailure["InvalidNativeScriptKind"] = "INVALID_NATIVE_SCRIPT_KIND";
    SerializationFailure["InvalidScriptType"] = "INVALID_SCRIPT_TYPE";
    SerializationFailure["InvalidDatum"] = "INVALID_DATUM";
})(SerializationFailure = exports.SerializationFailure || (exports.SerializationFailure = {}));
class SerializationError extends util_1.ComposableError {
    constructor(reason, detail, innerError) {
        super(formatMessage(reason, detail), innerError);
        this.reason = reason;
        this.detail = detail;
    }
}
exports.SerializationError = SerializationError;
class InvalidProtocolParametersError extends ts_custom_error_1.CustomError {
    constructor(reason) {
        super(reason);
    }
}
exports.InvalidProtocolParametersError = InvalidProtocolParametersError;
class NotImplementedError extends ts_custom_error_1.CustomError {
    constructor(missingFeature) {
        super(`Not implemented: ${missingFeature}`);
    }
}
exports.NotImplementedError = NotImplementedError;
//# sourceMappingURL=errors.js.map