"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.stakeDelegation = exports.poolRetirement = exports.poolRegistration = exports.stakeKeyDeregistration = exports.stakeKeyRegistration = void 0;
const Cardano = __importStar(require("../../Cardano/types"));
const cardano_multiplatform_lib_nodejs_1 = require("@dcspark/cardano-multiplatform-lib-nodejs");
const errors_1 = require("../../errors");
const stakeKeyRegistration = (scope, stakeKeyHash) => scope.manage(cardano_multiplatform_lib_nodejs_1.Certificate.new_stake_registration(scope.manage(cardano_multiplatform_lib_nodejs_1.StakeRegistration.new(scope.manage(cardano_multiplatform_lib_nodejs_1.StakeCredential.from_keyhash(scope.manage(cardano_multiplatform_lib_nodejs_1.Ed25519KeyHash.from_bytes(Buffer.from(stakeKeyHash, 'hex')))))))));
exports.stakeKeyRegistration = stakeKeyRegistration;
const stakeKeyDeregistration = (scope, stakeKeyHash) => scope.manage(cardano_multiplatform_lib_nodejs_1.Certificate.new_stake_deregistration(scope.manage(cardano_multiplatform_lib_nodejs_1.StakeDeregistration.new(scope.manage(cardano_multiplatform_lib_nodejs_1.StakeCredential.from_keyhash(scope.manage(cardano_multiplatform_lib_nodejs_1.Ed25519KeyHash.from_bytes(Buffer.from(stakeKeyHash, 'hex')))))))));
exports.stakeKeyDeregistration = stakeKeyDeregistration;
const createCslRelays = (scope, relays) => {
    const cslRelays = scope.manage(cardano_multiplatform_lib_nodejs_1.Relays.new());
    for (const relay of relays) {
        switch (relay.__typename) {
            case 'RelayByAddress':
                if (relay.ipv6) {
                    throw new errors_1.NotImplementedError('Parse IPv6 to byte array');
                }
                cslRelays.add(scope.manage(cardano_multiplatform_lib_nodejs_1.Relay.new_single_host_addr(scope.manage(cardano_multiplatform_lib_nodejs_1.SingleHostAddr.new(relay.port, relay.ipv4
                    ? scope.manage(cardano_multiplatform_lib_nodejs_1.Ipv4.new(new Uint8Array(relay.ipv4.split('.').map((segment) => Number.parseInt(segment)))))
                    : undefined)))));
                break;
            case 'RelayByName':
                cslRelays.add(scope.manage(cardano_multiplatform_lib_nodejs_1.Relay.new_single_host_name(scope.manage(cardano_multiplatform_lib_nodejs_1.SingleHostName.new(relay.port || undefined, scope.manage(cardano_multiplatform_lib_nodejs_1.DNSRecordAorAAAA.new(relay.hostname)))))));
                break;
            case 'RelayByNameMultihost':
                cslRelays.add(scope.manage(cardano_multiplatform_lib_nodejs_1.Relay.new_multi_host_name(scope.manage(cardano_multiplatform_lib_nodejs_1.MultiHostName.new(scope.manage(cardano_multiplatform_lib_nodejs_1.DNSRecordSRV.new(relay.dnsName)))))));
                break;
            default:
                throw new errors_1.NotImplementedError('Relay type');
        }
    }
    return cslRelays;
};
const poolRegistration = (scope, { id, vrf, pledge, cost, margin, rewardAccount, owners, relays, metadataJson }) => {
    const cslOwners = scope.manage(cardano_multiplatform_lib_nodejs_1.Ed25519KeyHashes.new());
    for (const owner of owners) {
        const hash = scope.manage(scope
            .manage(scope.manage(cardano_multiplatform_lib_nodejs_1.RewardAddress.from_address(scope.manage(cardano_multiplatform_lib_nodejs_1.Address.from_bech32(owner)))).payment_cred())
            .to_keyhash());
        cslOwners.add(hash);
    }
    const cslRelays = createCslRelays(scope, relays);
    const poolParams = scope.manage(cardano_multiplatform_lib_nodejs_1.PoolParams.new(scope.manage(cardano_multiplatform_lib_nodejs_1.Ed25519KeyHash.from_bech32(id)), scope.manage(cardano_multiplatform_lib_nodejs_1.VRFKeyHash.from_bytes(Buffer.from(vrf, 'hex'))), scope.manage(cardano_multiplatform_lib_nodejs_1.BigNum.from_str(pledge.toString())), scope.manage(cardano_multiplatform_lib_nodejs_1.BigNum.from_str(cost.toString())), scope.manage(cardano_multiplatform_lib_nodejs_1.UnitInterval.new(scope.manage(cardano_multiplatform_lib_nodejs_1.BigNum.from_str(margin.numerator.toString())), scope.manage(cardano_multiplatform_lib_nodejs_1.BigNum.from_str(margin.denominator.toString())))), scope.manage(cardano_multiplatform_lib_nodejs_1.RewardAddress.from_address(scope.manage(cardano_multiplatform_lib_nodejs_1.Address.from_bech32(rewardAccount)))), cslOwners, cslRelays, metadataJson
        ? scope.manage(cardano_multiplatform_lib_nodejs_1.PoolMetadata.new(scope.manage(cardano_multiplatform_lib_nodejs_1.URL.new(metadataJson.url)), scope.manage(cardano_multiplatform_lib_nodejs_1.PoolMetadataHash.from_bytes(Buffer.from(metadataJson.hash, 'hex')))))
        : undefined));
    return scope.manage(cardano_multiplatform_lib_nodejs_1.Certificate.new_pool_registration(scope.manage(cardano_multiplatform_lib_nodejs_1.PoolRegistration.new(poolParams))));
};
exports.poolRegistration = poolRegistration;
const poolRetirement = (scope, poolId, epoch) => scope.manage(cardano_multiplatform_lib_nodejs_1.Certificate.new_pool_retirement(scope.manage(cardano_multiplatform_lib_nodejs_1.PoolRetirement.new(scope.manage(cardano_multiplatform_lib_nodejs_1.Ed25519KeyHash.from_bech32(poolId)), epoch))));
exports.poolRetirement = poolRetirement;
const stakeDelegation = (scope, stakeKeyHash, delegatee) => scope.manage(cardano_multiplatform_lib_nodejs_1.Certificate.new_stake_delegation(scope.manage(cardano_multiplatform_lib_nodejs_1.StakeDelegation.new(scope.manage(cardano_multiplatform_lib_nodejs_1.StakeCredential.from_keyhash(scope.manage(cardano_multiplatform_lib_nodejs_1.Ed25519KeyHash.from_bytes(Buffer.from(stakeKeyHash, 'hex'))))), scope.manage(cardano_multiplatform_lib_nodejs_1.Ed25519KeyHash.from_bech32(delegatee))))));
exports.stakeDelegation = stakeDelegation;
const genesisKeyDelegation = (scope, { genesisDelegateHash, genesisHash, vrfKeyHash }) => scope.manage(cardano_multiplatform_lib_nodejs_1.Certificate.new_genesis_key_delegation(scope.manage(cardano_multiplatform_lib_nodejs_1.GenesisKeyDelegation.new(scope.manage(cardano_multiplatform_lib_nodejs_1.GenesisHash.from_hex(genesisHash)), scope.manage(cardano_multiplatform_lib_nodejs_1.GenesisDelegateHash.from_hex(genesisDelegateHash)), scope.manage(cardano_multiplatform_lib_nodejs_1.VRFKeyHash.from_hex(vrfKeyHash))))));
const create = (scope, certificate) => {
    switch (certificate.__typename) {
        case Cardano.CertificateType.PoolRegistration:
            return (0, exports.poolRegistration)(scope, certificate.poolParameters);
        case Cardano.CertificateType.PoolRetirement:
            return (0, exports.poolRetirement)(scope, certificate.poolId, certificate.epoch);
        case Cardano.CertificateType.StakeDelegation:
            return (0, exports.stakeDelegation)(scope, certificate.stakeKeyHash, certificate.poolId);
        case Cardano.CertificateType.StakeKeyDeregistration:
            return (0, exports.stakeKeyDeregistration)(scope, certificate.stakeKeyHash);
        case Cardano.CertificateType.StakeKeyRegistration:
            return (0, exports.stakeKeyRegistration)(scope, certificate.stakeKeyHash);
        case Cardano.CertificateType.GenesisKeyDelegation:
            return genesisKeyDelegation(scope, certificate);
        default:
            throw new errors_1.NotImplementedError(`certificate.create ${certificate.__typename}`);
    }
};
exports.create = create;
//# sourceMappingURL=certificate.js.map