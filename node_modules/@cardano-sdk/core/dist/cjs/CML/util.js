"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeTx = exports.bytewiseEquals = exports.maxBigNum = exports.MAX_I64 = exports.MIN_I64 = exports.MAX_U64 = void 0;
const cardano_multiplatform_lib_nodejs_1 = require("@dcspark/cardano-multiplatform-lib-nodejs");
const CML_1 = require("./CML");
const util_1 = require("@cardano-sdk/util");
const cmlToCore_1 = require("./cmlToCore");
exports.MAX_U64 = 18446744073709551615n;
exports.MIN_I64 = -9223372036854775808n;
exports.MAX_I64 = 9223372036854775807n;
const maxBigNum = (scope) => scope.manage(cardano_multiplatform_lib_nodejs_1.BigNum.from_str(exports.MAX_U64.toString()));
exports.maxBigNum = maxBigNum;
const bytewiseEquals = (obj1, obj2) => {
    if (obj1 === obj2)
        return true;
    const obj1Bytes = obj1.to_bytes();
    const obj2Bytes = obj2.to_bytes();
    if (obj1Bytes.length !== obj2Bytes.length)
        return false;
    return obj1Bytes.every((byte, idx) => obj2Bytes[idx] === byte);
};
exports.bytewiseEquals = bytewiseEquals;
exports.deserializeTx = ((txBody) => (0, util_1.usingAutoFree)((scope) => {
    const buffer = txBody instanceof Buffer
        ? txBody
        : (txBody instanceof Uint8Array
            ? Buffer.from(txBody)
            : Buffer.from((0, util_1.HexBlob)(txBody), 'hex'));
    const txDecoded = scope.manage(CML_1.CML.Transaction.from_bytes(buffer));
    return (0, cmlToCore_1.newTx)(txDecoded);
}));
//# sourceMappingURL=util.js.map