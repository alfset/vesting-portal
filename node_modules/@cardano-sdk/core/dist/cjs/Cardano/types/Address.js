"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = void 0;
const CML_1 = require("../../CML");
const util_1 = require("@cardano-sdk/util");
const address_1 = require("../util/address");
const isRewardAccount = (address) => {
    try {
        (0, util_1.assertIsBech32WithPrefix)(address, ['stake', 'stake_test']);
        return true;
    }
    catch {
        return false;
    }
};
const Address = (value) => {
    if ((0, address_1.isAddress)(value)) {
        if (isRewardAccount(value)) {
            throw new util_1.InvalidStringError(value, 'Address type can only be used for payment addresses');
        }
        return value;
    }
    try {
        (0, util_1.assertIsHexString)(value);
    }
    catch {
        throw new util_1.InvalidStringError(value, 'Expected payment address as bech32, base58 or hex-encoded bytes');
    }
    return (0, util_1.usingAutoFree)((scope) => {
        try {
            return (0, exports.Address)(scope.manage(CML_1.CML.ByronAddress.from_bytes(Buffer.from(value, 'hex'))).to_base58());
        }
        catch {
            try {
                return (0, exports.Address)(scope.manage(CML_1.CML.Address.from_bytes(Buffer.from(value, 'hex'))).to_bech32());
            }
            catch {
                throw new util_1.InvalidStringError(value, 'Invalid payment address');
            }
        }
    });
};
exports.Address = Address;
//# sourceMappingURL=Address.js.map