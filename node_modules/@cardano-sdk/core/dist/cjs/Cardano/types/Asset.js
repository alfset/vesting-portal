"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetFingerprint = exports.PolicyId = exports.AssetId = exports.AssetName = void 0;
const crypto_1 = require("@cardano-sdk/crypto");
const util_1 = require("@cardano-sdk/util");
const cip14_js_1 = __importDefault(require("@emurgo/cip14-js"));
const AssetName = (value) => {
    if (value.length > 0) {
        (0, util_1.assertIsHexString)(value);
        if (value.length > 64) {
            throw new util_1.InvalidStringError('too long');
        }
    }
    return value.toLowerCase();
};
exports.AssetName = AssetName;
const AssetId = (value) => {
    const normalizedValue = value.split('.').join('');
    (0, util_1.assertIsHexString)(normalizedValue);
    if (normalizedValue.length > 120)
        throw new util_1.InvalidStringError('too long');
    if (normalizedValue.length < 56)
        throw new util_1.InvalidStringError('too short');
    return normalizedValue;
};
exports.AssetId = AssetId;
const PolicyId = (value) => (0, crypto_1.Hash28ByteBase16)(value);
exports.PolicyId = PolicyId;
const AssetFingerprint = (value) => (0, util_1.typedBech32)(value, 'asset', 32);
exports.AssetFingerprint = AssetFingerprint;
exports.AssetFingerprint.fromParts = (policyId, assetName) => {
    const cip14Fingerprint = cip14_js_1.default.fromParts(Buffer.from(policyId, 'hex'), Buffer.from(assetName, 'hex'));
    return (0, exports.AssetFingerprint)(cip14Fingerprint.fingerprint());
};
//# sourceMappingURL=Asset.js.map