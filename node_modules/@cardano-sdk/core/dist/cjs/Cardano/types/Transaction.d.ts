import * as Crypto from '@cardano-sdk/crypto';
import { AuxiliaryData } from './AuxiliaryData';
import { Base64Blob, HexBlob, OpaqueString } from '@cardano-sdk/util';
import { Certificate } from './Certificate';
import { Datum, Script } from './Script';
import { ExUnits, ValidityInterval } from './ProtocolParameters';
import { HydratedTxIn, TxIn, TxOut } from './Utxo';
import { Lovelace, TokenMap } from './Value';
import { PartialBlockHeader } from './Block';
import { RewardAccount } from './RewardAccount';
import { TxBodyCBOR } from '../../CBOR/TxBodyCBOR';
export declare type TransactionId = OpaqueString<'TransactionId'>;
export declare const TransactionId: {
    (value: string): TransactionId;
    fromHexBlob(value: HexBlob): TransactionId;
    fromTxBodyCbor(bodyCbor: TxBodyCBOR): TransactionId;
};
export interface Withdrawal {
    stakeAddress: RewardAccount;
    quantity: Lovelace;
}
export interface HydratedTxBody {
    inputs: HydratedTxIn[];
    collaterals?: HydratedTxIn[];
    outputs: TxOut[];
    fee: Lovelace;
    validityInterval?: ValidityInterval;
    withdrawals?: Withdrawal[];
    certificates?: Certificate[];
    mint?: TokenMap;
    scriptIntegrityHash?: Crypto.Hash32ByteBase16;
    requiredExtraSignatures?: Crypto.Ed25519KeyHashHex[];
    totalCollateral?: Lovelace;
    collateralReturn?: TxOut;
    referenceInputs?: HydratedTxIn[];
}
export interface TxBody extends Omit<HydratedTxBody, 'inputs' | 'collaterals' | 'referenceInputs'> {
    inputs: TxIn[];
    collaterals?: TxIn[];
    referenceInputs?: TxIn[];
}
export declare enum RedeemerPurpose {
    spend = "spend",
    mint = "mint",
    certificate = "certificate",
    withdrawal = "withdrawal"
}
export interface Redeemer {
    index: number;
    purpose: RedeemerPurpose;
    data: HexBlob;
    executionUnits: ExUnits;
}
export declare type Signatures = Map<Crypto.Ed25519PublicKeyHex, Crypto.Ed25519SignatureHex>;
export declare type Signature = Crypto.Ed25519SignatureHex;
export declare type ChainCode = HexBlob;
export declare type AddressAttributes = Base64Blob;
export declare type VerificationKey = Crypto.Ed25519PublicKeyHex;
export interface BootstrapWitness {
    signature: Signature;
    chainCode?: ChainCode;
    addressAttributes?: AddressAttributes;
    key: VerificationKey;
}
export declare type Witness = {
    redeemers?: Redeemer[];
    signatures: Signatures;
    scripts?: Script[];
    bootstrap?: BootstrapWitness[];
    datums?: Datum[];
};
export interface Tx<TBody extends TxBody = TxBody> {
    id: TransactionId;
    body: TBody;
    witness: Witness;
    auxiliaryData?: AuxiliaryData;
}
export interface HydratedTx extends Tx<HydratedTxBody> {
    index: number;
    blockHeader: PartialBlockHeader;
    body: HydratedTxBody;
    txSize: number;
}
export declare type TxBodyWithHash = {
    hash: TransactionId;
    body: TxBody;
};
//# sourceMappingURL=Transaction.d.ts.map