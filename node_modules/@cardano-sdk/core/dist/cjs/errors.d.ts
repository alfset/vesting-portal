import { ComposableError } from '@cardano-sdk/util';
import { CustomError } from 'ts-custom-error';
export declare enum ProviderFailure {
    NotFound = "NOT_FOUND",
    Unknown = "UNKNOWN",
    InvalidResponse = "INVALID_RESPONSE",
    NotImplemented = "NOT_IMPLEMENTED",
    Unhealthy = "UNHEALTHY",
    ConnectionFailure = "CONNECTION_FAILURE",
    BadRequest = "BAD_REQUEST"
}
export declare const providerFailureToStatusCodeMap: {
    [key in ProviderFailure]: number;
};
export declare class ProviderError<InnerError = unknown> extends ComposableError<InnerError> {
    reason: ProviderFailure;
    detail?: string | undefined;
    constructor(reason: ProviderFailure, innerError?: InnerError, detail?: string | undefined);
}
export declare enum SerializationFailure {
    InvalidType = "INVALID_TYPE",
    Overflow = "OVERFLOW",
    InvalidAddress = "INVALID_ADDRESS",
    MaxLengthLimit = "MAX_LENGTH_LIMIT",
    InvalidScript = "INVALID_SCRIPT",
    InvalidNativeScriptKind = "INVALID_NATIVE_SCRIPT_KIND",
    InvalidScriptType = "INVALID_SCRIPT_TYPE",
    InvalidDatum = "INVALID_DATUM"
}
export declare class SerializationError<InnerError = unknown> extends ComposableError<InnerError> {
    reason: SerializationFailure;
    detail?: string | undefined;
    constructor(reason: SerializationFailure, detail?: string | undefined, innerError?: InnerError);
}
export declare class InvalidProtocolParametersError extends CustomError {
    constructor(reason: string);
}
export declare class NotImplementedError extends CustomError {
    constructor(missingFeature: string);
}
//# sourceMappingURL=errors.d.ts.map