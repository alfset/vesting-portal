import { ComposableError } from '@cardano-sdk/util';
import { CustomError } from 'ts-custom-error';
export var ProviderFailure;
(function (ProviderFailure) {
    ProviderFailure["NotFound"] = "NOT_FOUND";
    ProviderFailure["Unknown"] = "UNKNOWN";
    ProviderFailure["InvalidResponse"] = "INVALID_RESPONSE";
    ProviderFailure["NotImplemented"] = "NOT_IMPLEMENTED";
    ProviderFailure["Unhealthy"] = "UNHEALTHY";
    ProviderFailure["ConnectionFailure"] = "CONNECTION_FAILURE";
    ProviderFailure["BadRequest"] = "BAD_REQUEST";
})(ProviderFailure || (ProviderFailure = {}));
export const providerFailureToStatusCodeMap = {
    [ProviderFailure.BadRequest]: 400,
    [ProviderFailure.NotFound]: 404,
    [ProviderFailure.Unhealthy]: 500,
    [ProviderFailure.Unknown]: 500,
    [ProviderFailure.InvalidResponse]: 500,
    [ProviderFailure.NotImplemented]: 500,
    [ProviderFailure.ConnectionFailure]: 500
};
const formatMessage = (reason, detail) => reason + (detail ? ` (${detail})` : '');
export class ProviderError extends ComposableError {
    constructor(reason, innerError, detail) {
        super(formatMessage(reason, detail), innerError);
        this.reason = reason;
        this.detail = detail;
    }
}
export var SerializationFailure;
(function (SerializationFailure) {
    SerializationFailure["InvalidType"] = "INVALID_TYPE";
    SerializationFailure["Overflow"] = "OVERFLOW";
    SerializationFailure["InvalidAddress"] = "INVALID_ADDRESS";
    SerializationFailure["MaxLengthLimit"] = "MAX_LENGTH_LIMIT";
    SerializationFailure["InvalidScript"] = "INVALID_SCRIPT";
    SerializationFailure["InvalidNativeScriptKind"] = "INVALID_NATIVE_SCRIPT_KIND";
    SerializationFailure["InvalidScriptType"] = "INVALID_SCRIPT_TYPE";
    SerializationFailure["InvalidDatum"] = "INVALID_DATUM";
})(SerializationFailure || (SerializationFailure = {}));
export class SerializationError extends ComposableError {
    constructor(reason, detail, innerError) {
        super(formatMessage(reason, detail), innerError);
        this.reason = reason;
        this.detail = detail;
    }
}
export class InvalidProtocolParametersError extends CustomError {
    constructor(reason) {
        super(reason);
    }
}
export class NotImplementedError extends CustomError {
    constructor(missingFeature) {
        super(`Not implemented: ${missingFeature}`);
    }
}
//# sourceMappingURL=errors.js.map