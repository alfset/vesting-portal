import { BigNum } from '@dcspark/cardano-multiplatform-lib-nodejs';
import { CML } from './CML';
import { HexBlob, usingAutoFree } from '@cardano-sdk/util';
import { newTx } from './cmlToCore';
export const MAX_U64 = 18446744073709551615n;
export const MIN_I64 = -9223372036854775808n;
export const MAX_I64 = 9223372036854775807n;
export const maxBigNum = (scope) => scope.manage(BigNum.from_str(MAX_U64.toString()));
export const bytewiseEquals = (obj1, obj2) => {
    if (obj1 === obj2)
        return true;
    const obj1Bytes = obj1.to_bytes();
    const obj2Bytes = obj2.to_bytes();
    if (obj1Bytes.length !== obj2Bytes.length)
        return false;
    return obj1Bytes.every((byte, idx) => obj2Bytes[idx] === byte);
};
export const deserializeTx = ((txBody) => usingAutoFree((scope) => {
    const buffer = txBody instanceof Buffer
        ? txBody
        : (txBody instanceof Uint8Array
            ? Buffer.from(txBody)
            : Buffer.from(HexBlob(txBody), 'hex'));
    const txDecoded = scope.manage(CML.Transaction.from_bytes(buffer));
    return newTx(txDecoded);
}));
//# sourceMappingURL=util.js.map