import * as Cardano from '../../Cardano';
import { AuxiliaryData, BootstrapWitness, BootstrapWitnesses, Datum, GeneralTransactionMetadata, Mint, MultiAsset, NativeScript, NativeScripts, PlutusList, PlutusV1Scripts, PlutusV2Scripts, Redeemer, Redeemers, Script, Transaction, TransactionBody, TransactionInput, TransactionMetadatum, TransactionOutput, TransactionUnspentOutput, TransactionWitnessSet, Value } from '@dcspark/cardano-multiplatform-lib-nodejs';
import { CML } from '../CML';
import { ManagedFreeableScope } from '@cardano-sdk/util';
export declare const tokenMap: (scope: ManagedFreeableScope, map: Cardano.TokenMap) => MultiAsset;
export declare const nativeScript: (scope: ManagedFreeableScope, script: Cardano.NativeScript) => NativeScript;
export declare const value: (scope: ManagedFreeableScope, { coins, assets }: Cardano.Value) => Value;
export declare const txIn: (scope: ManagedFreeableScope, core: Cardano.TxIn) => TransactionInput;
export declare const txOut: (scope: ManagedFreeableScope, core: Cardano.TxOut) => TransactionOutput;
export declare const utxo: (scope: ManagedFreeableScope, core: Cardano.Utxo[]) => TransactionUnspentOutput[];
export declare const txMetadatum: (scope: ManagedFreeableScope, metadatum: Cardano.Metadatum) => TransactionMetadatum;
export declare const txMetadata: (scope: ManagedFreeableScope, blob: Map<bigint, Cardano.Metadatum>) => GeneralTransactionMetadata;
export declare const txMint: (scope: ManagedFreeableScope, mint: Cardano.TokenMap) => Mint;
export declare const getScripts: (scope: ManagedFreeableScope, scripts: Cardano.Script[]) => {
    nativeScripts: NativeScripts;
    plutusV1Scripts: PlutusV1Scripts;
    plutusV2Scripts: PlutusV2Scripts;
};
export declare const txAuxiliaryData: (scope: ManagedFreeableScope, auxiliaryData?: Cardano.AuxiliaryData) => AuxiliaryData | undefined;
export declare const txBody: (scope: ManagedFreeableScope, { inputs, outputs, fee, validityInterval, certificates, withdrawals, mint, collaterals, requiredExtraSignatures, scriptIntegrityHash, totalCollateral, collateralReturn, referenceInputs }: Cardano.TxBody, auxiliaryData?: Cardano.AuxiliaryData) => TransactionBody;
export declare const txWitnessBootstrap: (scope: ManagedFreeableScope, bootstrap: Cardano.BootstrapWitness[]) => BootstrapWitnesses;
export declare const txWitnessRedeemers: (scope: ManagedFreeableScope, redeemers: Cardano.Redeemer[]) => Redeemers;
export declare const txWitnessDatumList: (scope: ManagedFreeableScope, datums: Cardano.Datum[]) => CML.PlutusList;
export declare const witnessSet: (scope: ManagedFreeableScope, witness: Cardano.Witness) => TransactionWitnessSet;
export declare const tx: (scope: ManagedFreeableScope, { body, witness, auxiliaryData }: Cardano.Tx) => Transaction;
//# sourceMappingURL=coreToCml.d.ts.map