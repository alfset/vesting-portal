import { ImageMediaType, MediaType, Uri } from '../types';
import { CustomError } from 'ts-custom-error';
import { asMetadatumArray, asMetadatumMap } from '../../util/metadatum';
import { assetIdFromPolicyAndName } from './assetId';
import { isNotNil } from '@cardano-sdk/util';
import difference from 'lodash/difference';
class InvalidFileError extends CustomError {
}
const isString = (obj) => typeof obj === 'string';
const asString = (obj) => {
    if (typeof obj === 'string') {
        return obj;
    }
};
const asStringArray = (metadatum) => {
    if (Array.isArray(metadatum)) {
        const result = metadatum.map(asString);
        if (result.some((str) => typeof str === 'undefined')) {
            return undefined;
        }
        return result;
    }
    const str = asString(metadatum);
    if (str) {
        return [str];
    }
};
const mapOtherProperties = (metadata, primaryProperties) => {
    const extraProperties = difference([...metadata.keys()].filter(isString), primaryProperties);
    if (extraProperties.length === 0)
        return;
    return extraProperties.reduce((result, key) => {
        result.set(key, metadata.get(key));
        return result;
    }, new Map());
};
const toArray = (value) => (Array.isArray(value) ? value : [value]);
const missingFileFieldLogMessage = (fieldType, assetId) => `Omitting cip25 metadata file: missing "${fieldType}". AssetId: ${assetId}`;
const mapFile = (metadatum, assetId, logger) => {
    const file = asMetadatumMap(metadatum);
    if (!file)
        throw new InvalidFileError();
    const mediaType = asString(file.get('mediaType'));
    if (!mediaType) {
        logger.warn(missingFileFieldLogMessage('mediaType', assetId));
        return null;
    }
    const name = asString(file.get('name'));
    if (!name) {
        logger.warn(missingFileFieldLogMessage('name', assetId));
        return null;
    }
    const unknownTypeSrc = file.get('src');
    const srcAsString = asString(unknownTypeSrc);
    const src = srcAsString
        ? Uri(srcAsString)
        : asMetadatumArray(unknownTypeSrc)?.map((fileSrc) => {
            const fileSrcAsString = asString(fileSrc);
            if (!fileSrcAsString)
                throw new InvalidFileError();
            return Uri(fileSrcAsString);
        });
    if (!src) {
        logger.warn(missingFileFieldLogMessage('source', assetId));
        return null;
    }
    return {
        mediaType: MediaType(mediaType),
        name,
        otherProperties: mapOtherProperties(file, ['mediaType', 'name', 'src']),
        src: toArray(src)
    };
};
const getPolicyMetadata = (policy, policyId) => asMetadatumMap(policy.get(policyId) ||
    (() => {
        for (const [key, value] of policy.entries()) {
            if (ArrayBuffer.isView(key) && Buffer.from(key).toString('hex') === policyId)
                return value;
        }
    })());
const getAssetMetadata = (policy, assetName) => asMetadatumMap(policy.get(assetName) ||
    policy.get(Buffer.from(assetName, 'hex').toString('utf8')) ||
    (() => {
        for (const [key, value] of policy.entries()) {
            if (ArrayBuffer.isView(key) && Buffer.from(key).toString('hex') === assetName)
                return value;
        }
    })());
export const metadatumToCip25 = (asset, metadatumMap, logger) => {
    const cip25Metadata = metadatumMap?.get(721n);
    if (!cip25Metadata)
        return null;
    const cip25MetadatumMap = asMetadatumMap(cip25Metadata);
    if (!cip25MetadatumMap)
        return null;
    const policy = getPolicyMetadata(cip25MetadatumMap, asset.policyId);
    if (!policy)
        return null;
    const assetMetadata = getAssetMetadata(policy, asset.name);
    if (!assetMetadata)
        return null;
    const name = asString(assetMetadata.get('name'));
    const image = asStringArray(assetMetadata.get('image'));
    if (!name || !image) {
        logger.warn('Invalid CIP-25 metadata', assetMetadata);
        return null;
    }
    const mediaType = asString(assetMetadata.get('mediaType'));
    const files = asMetadatumArray(assetMetadata.get('files'));
    const assetId = assetIdFromPolicyAndName(asset.policyId, asset.name);
    try {
        return {
            description: asStringArray(assetMetadata.get('description')),
            files: files?.map((file) => mapFile(file, assetId, logger)).filter(isNotNil),
            image: image.map((img) => Uri(img)),
            mediaType: mediaType ? ImageMediaType(mediaType) : undefined,
            name,
            otherProperties: mapOtherProperties(assetMetadata, ['name', 'image', 'mediaType', 'description', 'files']),
            version: asString(policy.get('version')) || '1.0'
        };
    }
    catch (error) {
        logger.warn('Invalid CIP-25 metadata', assetMetadata, error);
        return null;
    }
};
//# sourceMappingURL=metadatumToCip25.js.map