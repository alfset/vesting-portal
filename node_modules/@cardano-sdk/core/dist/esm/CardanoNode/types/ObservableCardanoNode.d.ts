import type { Cardano } from '../..';
import type { EraSummary } from './CardanoNode';
import type { Observable } from 'rxjs';
export declare type Point = Pick<Cardano.Tip, 'hash' | 'slot'>;
export declare type Origin = 'origin';
export declare type TipOrOrigin = Cardano.Tip | Origin;
export declare type PointOrOrigin = Point | Origin;
export declare type Intersection = {
    point: PointOrOrigin;
    tip: TipOrOrigin;
};
export declare enum ChainSyncEventType {
    RollForward = 0,
    RollBackward = 1
}
export declare type RequestNext = () => void;
export interface ChainSyncRollForward {
    tip: Cardano.Tip;
    eventType: ChainSyncEventType.RollForward;
    block: Cardano.Block;
    requestNext: RequestNext;
}
export interface ChainSyncRollBackward {
    eventType: ChainSyncEventType.RollBackward;
    point: PointOrOrigin;
    tip: TipOrOrigin;
    requestNext: RequestNext;
}
export declare type ChainSyncEvent = ChainSyncRollForward | ChainSyncRollBackward;
export interface ObservableChainSync {
    chainSync$: Observable<ChainSyncEvent>;
    intersection: Intersection;
}
export interface ObservableCardanoNode {
    eraSummaries$: Observable<EraSummary[]>;
    genesisParameters$: Observable<Cardano.CompactGenesis>;
    findIntersect(points: PointOrOrigin[]): Observable<ObservableChainSync>;
}
//# sourceMappingURL=ObservableCardanoNode.d.ts.map