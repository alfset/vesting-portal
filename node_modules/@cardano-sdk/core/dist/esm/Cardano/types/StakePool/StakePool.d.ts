import { EpochNo } from '../Block';
import { Lovelace } from '../Value';
import { OpaqueNumber } from '@cardano-sdk/util';
import { PoolIdHex } from './primitives';
import { PoolParameters } from './PoolParameters';
import { TransactionId } from '../Transaction';
export declare type Percent = OpaqueNumber<'Percent'>;
export declare const Percent: (value: number) => Percent;
export interface StakePoolMetricsStake {
    live: Lovelace;
    active: Lovelace;
}
export interface StakePoolMetricsSize {
    live: Percent;
    active: Percent;
}
export interface StakePoolMetrics {
    blocksCreated: number;
    livePledge: Lovelace;
    stake: StakePoolMetricsStake;
    size: StakePoolMetricsSize;
    saturation: Percent;
    delegators: number;
    apy?: Percent;
}
export interface StakePoolTransactions {
    registration: TransactionId[];
    retirement: TransactionId[];
}
export declare enum StakePoolStatus {
    Activating = "activating",
    Active = "active",
    Retired = "retired",
    Retiring = "retiring"
}
export declare class StakePoolEpochRewards {
    activeStake: Lovelace;
    epoch: EpochNo;
    epochLength: number;
    leaderRewards: Lovelace;
    memberROI: Percent;
    memberRewards: Lovelace;
    pledge: Lovelace;
}
export interface StakePool extends PoolParameters {
    hexId: PoolIdHex;
    metrics: StakePoolMetrics;
    status: StakePoolStatus;
    transactions: StakePoolTransactions;
    epochRewards: StakePoolEpochRewards[];
}
//# sourceMappingURL=StakePool.d.ts.map