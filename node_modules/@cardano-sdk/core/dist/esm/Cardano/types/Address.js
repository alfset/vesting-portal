import { CML } from '../../CML';
import { InvalidStringError, assertIsBech32WithPrefix, assertIsHexString, usingAutoFree } from '@cardano-sdk/util';
import { isAddress } from '../util/address';
const isRewardAccount = (address) => {
    try {
        assertIsBech32WithPrefix(address, ['stake', 'stake_test']);
        return true;
    }
    catch {
        return false;
    }
};
export const Address = (value) => {
    if (isAddress(value)) {
        if (isRewardAccount(value)) {
            throw new InvalidStringError(value, 'Address type can only be used for payment addresses');
        }
        return value;
    }
    try {
        assertIsHexString(value);
    }
    catch {
        throw new InvalidStringError(value, 'Expected payment address as bech32, base58 or hex-encoded bytes');
    }
    return usingAutoFree((scope) => {
        try {
            return Address(scope.manage(CML.ByronAddress.from_bytes(Buffer.from(value, 'hex'))).to_base58());
        }
        catch {
            try {
                return Address(scope.manage(CML.Address.from_bytes(Buffer.from(value, 'hex'))).to_bech32());
            }
            catch {
                throw new InvalidStringError(value, 'Invalid payment address');
            }
        }
    });
};
//# sourceMappingURL=Address.js.map