import { Hash28ByteBase16 } from '@cardano-sdk/crypto';
import { InvalidStringError, assertIsHexString, typedBech32 } from '@cardano-sdk/util';
import cip14 from '@emurgo/cip14-js';
export const AssetName = (value) => {
    if (value.length > 0) {
        assertIsHexString(value);
        if (value.length > 64) {
            throw new InvalidStringError('too long');
        }
    }
    return value.toLowerCase();
};
export const AssetId = (value) => {
    const normalizedValue = value.split('.').join('');
    assertIsHexString(normalizedValue);
    if (normalizedValue.length > 120)
        throw new InvalidStringError('too long');
    if (normalizedValue.length < 56)
        throw new InvalidStringError('too short');
    return normalizedValue;
};
export const PolicyId = (value) => Hash28ByteBase16(value);
export const AssetFingerprint = (value) => typedBech32(value, 'asset', 32);
AssetFingerprint.fromParts = (policyId, assetName) => {
    const cip14Fingerprint = cip14.fromParts(Buffer.from(policyId, 'hex'), Buffer.from(assetName, 'hex'));
    return AssetFingerprint(cip14Fingerprint.fingerprint());
};
//# sourceMappingURL=Asset.js.map