import { BigIntMath } from '@cardano-sdk/util';
import { CertificateType } from '../types';
export const computeImplicitCoin = ({ stakeKeyDeposit, poolDeposit }, { certificates, withdrawals }) => {
    const stakeKeyDepositBigint = stakeKeyDeposit && BigInt(stakeKeyDeposit);
    const poolDepositBigint = poolDeposit && BigInt(poolDeposit);
    const deposit = BigIntMath.sum(certificates?.map((cert) => (cert.__typename === CertificateType.StakeKeyRegistration && stakeKeyDepositBigint) ||
        (cert.__typename === CertificateType.PoolRegistration && poolDepositBigint) ||
        0n) || []);
    const withdrawalsTotal = (withdrawals && BigIntMath.sum(withdrawals.map(({ quantity }) => quantity))) || 0n;
    const reclaimTotal = BigIntMath.sum(certificates?.map((cert) => (cert.__typename === CertificateType.StakeKeyDeregistration && stakeKeyDepositBigint) ||
        (cert.__typename === CertificateType.PoolRetirement && poolDepositBigint) ||
        0n) || []);
    return {
        deposit,
        input: withdrawalsTotal + reclaimTotal
    };
};
//# sourceMappingURL=computeImplicitCoin.js.map