"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OgmiosTxSubmitProvider_txSubmissionClient, _OgmiosTxSubmitProvider_logger, _OgmiosTxSubmitProvider_connectionConfig;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OgmiosTxSubmitProvider = void 0;
const core_1 = require("@cardano-sdk/core");
const client_1 = require("@cardano-ogmios/client");
const util_1 = require("@cardano-sdk/util");
const util_2 = require("../../util");
class OgmiosTxSubmitProvider extends util_1.RunnableModule {
    constructor(connectionConfig, { logger }) {
        super('OgmiosTxSubmitProvider', logger);
        _OgmiosTxSubmitProvider_txSubmissionClient.set(this, void 0);
        _OgmiosTxSubmitProvider_logger.set(this, void 0);
        _OgmiosTxSubmitProvider_connectionConfig.set(this, void 0);
        __classPrivateFieldSet(this, _OgmiosTxSubmitProvider_logger, (0, util_1.contextLogger)(logger, 'OgmiosTxSubmitProvider'), "f");
        __classPrivateFieldSet(this, _OgmiosTxSubmitProvider_connectionConfig, connectionConfig, "f");
    }
    async initializeImpl() {
        __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_logger, "f").info('Initializing OgmiosTxSubmitProvider');
        __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_logger, "f").info('OgmiosTxSubmitProvider initialized');
    }
    async shutdownImpl() {
        __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_logger, "f").info('Shutting down OgmiosTxSubmitProvider');
        if ((0, util_1.isNotNil)(__classPrivateFieldGet(this, _OgmiosTxSubmitProvider_txSubmissionClient, "f")) &&
            __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_txSubmissionClient, "f").context.socket.readyState !== __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_txSubmissionClient, "f").context.socket.CLOSED) {
            await __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_txSubmissionClient, "f").shutdown();
        }
    }
    async submitTx({ signedTransaction }) {
        if (this.state !== 'running') {
            throw new core_1.CardanoNodeErrors.NotInitializedError('submitTx', this.name);
        }
        try {
            __classPrivateFieldSet(this, _OgmiosTxSubmitProvider_txSubmissionClient, await (0, client_1.createTxSubmissionClient)(await (0, util_2.createInteractionContextWithLogger)((0, util_1.contextLogger)(__classPrivateFieldGet(this, _OgmiosTxSubmitProvider_logger, "f"), 'ogmiosTxSubmitProvider'), {
                connection: __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_connectionConfig, "f"),
                interactionType: 'OneTime'
            })), "f");
            await __classPrivateFieldGet(this, _OgmiosTxSubmitProvider_txSubmissionClient, "f").submitTx(signedTransaction);
        }
        catch (error) {
            throw core_1.Cardano.util.asTxSubmissionError(error) || new core_1.CardanoNodeErrors.UnknownTxSubmissionError(error);
        }
    }
    async healthCheck() {
        try {
            const { networkSynchronization, lastKnownTip } = await (0, client_1.getServerHealth)({
                connection: (0, client_1.createConnectionObject)(__classPrivateFieldGet(this, _OgmiosTxSubmitProvider_connectionConfig, "f"))
            });
            return {
                localNode: {
                    ledgerTip: lastKnownTip,
                    networkSync: core_1.Cardano.Percent(networkSynchronization)
                },
                ok: networkSynchronization > 0.99
            };
        }
        catch (error) {
            if (error.name === 'FetchError') {
                return { ok: false };
            }
            throw new core_1.ProviderError(core_1.ProviderFailure.Unknown, error);
        }
    }
    async startImpl() {
        return Promise.resolve();
    }
}
exports.OgmiosTxSubmitProvider = OgmiosTxSubmitProvider;
_OgmiosTxSubmitProvider_txSubmissionClient = new WeakMap(), _OgmiosTxSubmitProvider_logger = new WeakMap(), _OgmiosTxSubmitProvider_connectionConfig = new WeakMap();
//# sourceMappingURL=OgmiosTxSubmitProvider.js.map