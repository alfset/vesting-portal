"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _OgmiosObservableCardanoNode_logger, _OgmiosObservableCardanoNode_interactionContext$;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OgmiosObservableCardanoNode = void 0;
const core_1 = require("@cardano-sdk/core");
const createObservableInteractionContext_1 = require("./createObservableInteractionContext");
const ChainSync_1 = require("@cardano-ogmios/client/dist/ChainSync");
const rxjs_1 = require("rxjs");
const util_1 = require("@cardano-sdk/util");
const createObservableChainSyncClient_1 = require("./createObservableChainSyncClient");
const client_1 = require("@cardano-ogmios/client");
const util_2 = require("./util");
const queries_1 = require("../queries");
const isEqual_1 = __importDefault(require("lodash/isEqual"));
const ogmiosToCoreIntersection = (intersection) => ({
    point: (0, util_2.ogmiosToCorePointOrOrigin)(intersection.point),
    tip: (0, util_2.ogmiosToCoreTipOrOrigin)(intersection.tip)
});
class OgmiosObservableCardanoNode {
    constructor(props, { logger }) {
        _OgmiosObservableCardanoNode_logger.set(this, void 0);
        _OgmiosObservableCardanoNode_interactionContext$.set(this, void 0);
        __classPrivateFieldSet(this, _OgmiosObservableCardanoNode_logger, (0, util_1.contextLogger)(logger, 'ObservableOgmiosCardanoNode'), "f");
        __classPrivateFieldSet(this, _OgmiosObservableCardanoNode_interactionContext$, (0, createObservableInteractionContext_1.createObservableInteractionContext)({
            ...props,
            interactionType: 'LongRunning'
        }, { logger: __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f") }).pipe((0, rxjs_1.shareReplay)({ bufferSize: 1, refCount: true })), "f");
        const stateQueryClient$ = __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_interactionContext$, "f").pipe((0, rxjs_1.switchMap)((interactionContext) => (0, rxjs_1.from)((0, client_1.createStateQueryClient)(interactionContext))), (0, rxjs_1.distinctUntilChanged)(isEqual_1.default), (0, rxjs_1.shareReplay)({ bufferSize: 1, refCount: true }));
        this.eraSummaries$ = stateQueryClient$.pipe((0, rxjs_1.switchMap)((client) => (0, rxjs_1.from)((0, queries_1.queryEraSummaries)(client, __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f")))));
        this.genesisParameters$ = stateQueryClient$.pipe((0, rxjs_1.switchMap)((client) => (0, rxjs_1.from)((0, queries_1.queryGenesisParameters)(client, __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f")))), (0, rxjs_1.distinctUntilChanged)(isEqual_1.default), (0, rxjs_1.shareReplay)({ bufferSize: 1, refCount: true }));
    }
    findIntersect(points) {
        return __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_interactionContext$, "f").pipe((0, rxjs_1.switchMap)((interactionContext) => new rxjs_1.Observable((subscriber) => {
            if (subscriber.closed)
                return;
            void (0, ChainSync_1.findIntersect)(interactionContext, points.map(util_2.pointOrOriginToOgmios))
                .then((ogmiosIntersection) => {
                const intersection = ogmiosToCoreIntersection(ogmiosIntersection);
                subscriber.next({
                    chainSync$: (0, createObservableChainSyncClient_1.createObservableChainSyncClient)({ intersectionPoint: intersection.point }, { interactionContext$: __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_interactionContext$, "f") }),
                    intersection
                });
            })
                .catch((error) => {
                __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f").error('"findIntersect" failed', error);
                if (error instanceof core_1.CardanoNodeErrors.CardanoClientErrors.ConnectionError) {
                    return;
                }
                subscriber.error(error);
            });
        })));
    }
}
exports.OgmiosObservableCardanoNode = OgmiosObservableCardanoNode;
_OgmiosObservableCardanoNode_logger = new WeakMap(), _OgmiosObservableCardanoNode_interactionContext$ = new WeakMap();
//# sourceMappingURL=OgmiosObservableCardanoNode.js.map