import { BigIntMath } from '@cardano-sdk/util';
import { isAllegraBlock, isAlonzoBlock, isBabbageBlock, isByronBlock, isByronStandardBlock, isMaryBlock, isShelleyBlock } from '@cardano-ogmios/client';
import * as Crypto from '@cardano-sdk/crypto';
import { Cardano } from '@cardano-sdk/core';
import { mapByronBlockBody, mapCommonBlockBody } from './tx';
const getBlockAndKind = (block) => {
    let propName = 'alonzo';
    if (isAllegraBlock(block))
        propName = 'allegra';
    if (isAlonzoBlock(block))
        propName = 'alonzo';
    if (isBabbageBlock(block))
        propName = 'babbage';
    if (isByronBlock(block))
        propName = 'byron';
    if (isMaryBlock(block))
        propName = 'mary';
    if (isShelleyBlock(block))
        propName = 'shelley';
    switch (propName) {
        case 'allegra':
            return { block: block.allegra, kind: 'allegra' };
        case 'alonzo':
            return { block: block.alonzo, kind: 'alonzo' };
        case 'babbage':
            return { block: block.babbage, kind: 'babbage' };
        case 'byron':
            return isByronStandardBlock(block) ? { block: block.byron, kind: 'byron' } : null;
        case 'mary':
            return { block: block.mary, kind: 'mary' };
        case 'shelley':
            return { block: block.shelley, kind: 'shelley' };
        default: {
            const _exhaustiveCheck = propName;
            return _exhaustiveCheck;
        }
    }
};
const mapBlockHeight = (block) => block.header.blockHeight;
const mapBlockSlot = (block) => block.header.slot;
const mapPreviousBlock = (block) => block.header.prevHash !== 'genesis' ? Cardano.BlockId(block.header.prevHash) : undefined;
const mapByronHash = (block) => Cardano.BlockId(block.hash);
const mapByronTotalOutputs = (block) => BigIntMath.sum(block.body.txPayload.map(({ body: { outputs } }) => BigIntMath.sum(outputs.map(({ value: { coins } }) => coins))));
const mapByronTxCount = (block) => block.body.txPayload.length;
const mapCommonTxCount = (block) => block.body.length;
const mapCommonHash = (block) => Cardano.BlockId(block.headerHash);
const mapCommonTotalOutputs = (block) => BigIntMath.sum(block.body.map(({ body: { outputs } }) => BigIntMath.sum(outputs.map(({ value: { coins } }) => coins))));
const mapCommonBlockSize = (block) => Cardano.BlockSize(block.header.blockSize);
const mapCommonFees = (block) => block.body.map(({ body: { fee } }) => fee).reduce((prev, current) => prev + current, 0n);
const mapCommonVrf = (block) => Cardano.VrfVkBech32FromBase64(block.header.issuerVrf);
const mapCommonSlotLeader = (block) => Crypto.Ed25519PublicKeyHex(block.header.issuerVk);
const mapStandardBlockHeader = (block) => ({
    blockNo: Cardano.BlockNo(mapBlockHeight(block)),
    hash: mapByronHash(block),
    slot: Cardano.Slot(mapBlockSlot(block))
});
const mapCommonBlockHeader = (block) => ({
    blockNo: Cardano.BlockNo(mapBlockHeight(block)),
    hash: mapCommonHash(block),
    slot: Cardano.Slot(mapBlockSlot(block))
});
const mapByronBlock = (block) => ({
    body: mapByronBlockBody(block),
    fees: undefined,
    header: mapStandardBlockHeader(block),
    issuerVk: undefined,
    previousBlock: mapPreviousBlock(block),
    size: undefined,
    totalOutput: mapByronTotalOutputs(block),
    txCount: mapByronTxCount(block),
    vrf: undefined
});
const mapCommonBlock = (block, kind) => ({
    body: mapCommonBlockBody(block, kind),
    fees: mapCommonFees(block),
    header: mapCommonBlockHeader(block),
    issuerVk: mapCommonSlotLeader(block),
    previousBlock: mapPreviousBlock(block),
    size: mapCommonBlockSize(block),
    totalOutput: mapCommonTotalOutputs(block),
    txCount: mapCommonTxCount(block),
    vrf: mapCommonVrf(block)
});
const mapBlock = (ogmiosBlock, mapStandardBlock, mapOtherBlock) => {
    const b = getBlockAndKind(ogmiosBlock);
    if (!b)
        return null;
    switch (b.kind) {
        case 'byron': {
            return mapStandardBlock(b.block);
        }
        case 'babbage':
        case 'allegra':
        case 'alonzo':
        case 'mary':
        case 'shelley': {
            return mapOtherBlock(b.block, b.kind);
        }
        default: {
            const _exhaustiveCheck = b;
            return _exhaustiveCheck;
        }
    }
};
export const blockHeader = (ogmiosBlock) => mapBlock(ogmiosBlock, mapStandardBlockHeader, mapCommonBlockHeader);
export const block = (ogmiosBlock) => mapBlock(ogmiosBlock, mapByronBlock, mapCommonBlock);
//# sourceMappingURL=block.js.map