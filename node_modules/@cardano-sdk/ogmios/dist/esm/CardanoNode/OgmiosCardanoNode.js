var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OgmiosCardanoNode_stateQueryClient, _OgmiosCardanoNode_logger, _OgmiosCardanoNode_connectionConfig;
import { Cardano, CardanoNodeErrors, CardanoNodeUtil, ProviderError, ProviderFailure } from '@cardano-sdk/core';
import { createConnectionObject, createStateQueryClient, getServerHealth } from '@cardano-ogmios/client';
import { RunnableModule, contextLogger } from '@cardano-sdk/util';
import { createInteractionContextWithLogger } from '../util';
import { queryEraSummaries } from './queries';
export class OgmiosCardanoNode extends RunnableModule {
    constructor(connectionConfig, logger) {
        super('OgmiosCardanoNode', logger);
        _OgmiosCardanoNode_stateQueryClient.set(this, void 0);
        _OgmiosCardanoNode_logger.set(this, void 0);
        _OgmiosCardanoNode_connectionConfig.set(this, void 0);
        __classPrivateFieldSet(this, _OgmiosCardanoNode_logger, contextLogger(logger, 'OgmiosCardanoNode'), "f");
        __classPrivateFieldSet(this, _OgmiosCardanoNode_connectionConfig, connectionConfig, "f");
    }
    async initializeImpl() {
        __classPrivateFieldGet(this, _OgmiosCardanoNode_logger, "f").info('Initializing CardanoNode');
        __classPrivateFieldSet(this, _OgmiosCardanoNode_stateQueryClient, await createStateQueryClient(await createInteractionContextWithLogger(__classPrivateFieldGet(this, _OgmiosCardanoNode_logger, "f"), { connection: __classPrivateFieldGet(this, _OgmiosCardanoNode_connectionConfig, "f") })), "f");
        __classPrivateFieldGet(this, _OgmiosCardanoNode_logger, "f").info('CardanoNode initialized');
    }
    async shutdownImpl() {
        __classPrivateFieldGet(this, _OgmiosCardanoNode_logger, "f").info('Shutting down CardanoNode');
        await __classPrivateFieldGet(this, _OgmiosCardanoNode_stateQueryClient, "f").shutdown();
    }
    async eraSummaries() {
        if (this.state !== 'running') {
            throw new CardanoNodeErrors.NotInitializedError('eraSummaries', this.name);
        }
        return queryEraSummaries(__classPrivateFieldGet(this, _OgmiosCardanoNode_stateQueryClient, "f"), __classPrivateFieldGet(this, _OgmiosCardanoNode_logger, "f"));
    }
    async systemStart() {
        if (this.state !== 'running') {
            throw new CardanoNodeErrors.NotInitializedError('systemStart', this.name);
        }
        try {
            __classPrivateFieldGet(this, _OgmiosCardanoNode_logger, "f").info('Getting system start');
            return await __classPrivateFieldGet(this, _OgmiosCardanoNode_stateQueryClient, "f").systemStart();
        }
        catch (error) {
            throw CardanoNodeUtil.asCardanoNodeError(error) || new CardanoNodeErrors.UnknownCardanoNodeError(error);
        }
    }
    async stakeDistribution() {
        if (this.state !== 'running') {
            throw new CardanoNodeErrors.NotInitializedError('stakeDistribution', this.name);
        }
        try {
            __classPrivateFieldGet(this, _OgmiosCardanoNode_logger, "f").info('Getting stake distribution');
            const map = new Map();
            for (const [key, value] of Object.entries(await __classPrivateFieldGet(this, _OgmiosCardanoNode_stateQueryClient, "f").stakeDistribution())) {
                const splitStake = value.stake.split('/');
                map.set(Cardano.PoolId(key), {
                    ...value,
                    stake: { pool: BigInt(splitStake[0]), supply: BigInt(splitStake[1]) }
                });
            }
            return map;
        }
        catch (error) {
            throw CardanoNodeUtil.asCardanoNodeError(error) || new CardanoNodeErrors.UnknownCardanoNodeError(error);
        }
    }
    async healthCheck() {
        try {
            const { networkSynchronization, lastKnownTip } = await getServerHealth({
                connection: createConnectionObject(__classPrivateFieldGet(this, _OgmiosCardanoNode_connectionConfig, "f"))
            });
            return {
                localNode: {
                    ledgerTip: lastKnownTip,
                    networkSync: Cardano.Percent(networkSynchronization)
                },
                ok: networkSynchronization > 0.99
            };
        }
        catch (error) {
            if (error.name === 'FetchError') {
                return { ok: false };
            }
            throw new ProviderError(ProviderFailure.Unknown, error);
        }
    }
    async startImpl() {
        return Promise.resolve();
    }
}
_OgmiosCardanoNode_stateQueryClient = new WeakMap(), _OgmiosCardanoNode_logger = new WeakMap(), _OgmiosCardanoNode_connectionConfig = new WeakMap();
//# sourceMappingURL=OgmiosCardanoNode.js.map