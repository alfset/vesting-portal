var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OgmiosObservableCardanoNode_logger, _OgmiosObservableCardanoNode_interactionContext$;
import { CardanoNodeErrors } from '@cardano-sdk/core';
import { createObservableInteractionContext } from './createObservableInteractionContext';
import { findIntersect } from '@cardano-ogmios/client/dist/ChainSync';
import { Observable, distinctUntilChanged, from, shareReplay, switchMap } from 'rxjs';
import { contextLogger } from '@cardano-sdk/util';
import { createObservableChainSyncClient } from './createObservableChainSyncClient';
import { createStateQueryClient } from '@cardano-ogmios/client';
import { ogmiosToCorePointOrOrigin, ogmiosToCoreTipOrOrigin, pointOrOriginToOgmios } from './util';
import { queryEraSummaries, queryGenesisParameters } from '../queries';
import isEqual from 'lodash/isEqual';
const ogmiosToCoreIntersection = (intersection) => ({
    point: ogmiosToCorePointOrOrigin(intersection.point),
    tip: ogmiosToCoreTipOrOrigin(intersection.tip)
});
export class OgmiosObservableCardanoNode {
    constructor(props, { logger }) {
        _OgmiosObservableCardanoNode_logger.set(this, void 0);
        _OgmiosObservableCardanoNode_interactionContext$.set(this, void 0);
        __classPrivateFieldSet(this, _OgmiosObservableCardanoNode_logger, contextLogger(logger, 'ObservableOgmiosCardanoNode'), "f");
        __classPrivateFieldSet(this, _OgmiosObservableCardanoNode_interactionContext$, createObservableInteractionContext({
            ...props,
            interactionType: 'LongRunning'
        }, { logger: __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f") }).pipe(shareReplay({ bufferSize: 1, refCount: true })), "f");
        const stateQueryClient$ = __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_interactionContext$, "f").pipe(switchMap((interactionContext) => from(createStateQueryClient(interactionContext))), distinctUntilChanged(isEqual), shareReplay({ bufferSize: 1, refCount: true }));
        this.eraSummaries$ = stateQueryClient$.pipe(switchMap((client) => from(queryEraSummaries(client, __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f")))));
        this.genesisParameters$ = stateQueryClient$.pipe(switchMap((client) => from(queryGenesisParameters(client, __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f")))), distinctUntilChanged(isEqual), shareReplay({ bufferSize: 1, refCount: true }));
    }
    findIntersect(points) {
        return __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_interactionContext$, "f").pipe(switchMap((interactionContext) => new Observable((subscriber) => {
            if (subscriber.closed)
                return;
            void findIntersect(interactionContext, points.map(pointOrOriginToOgmios))
                .then((ogmiosIntersection) => {
                const intersection = ogmiosToCoreIntersection(ogmiosIntersection);
                subscriber.next({
                    chainSync$: createObservableChainSyncClient({ intersectionPoint: intersection.point }, { interactionContext$: __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_interactionContext$, "f") }),
                    intersection
                });
            })
                .catch((error) => {
                __classPrivateFieldGet(this, _OgmiosObservableCardanoNode_logger, "f").error('"findIntersect" failed', error);
                if (error instanceof CardanoNodeErrors.CardanoClientErrors.ConnectionError) {
                    return;
                }
                subscriber.error(error);
            });
        })));
    }
}
_OgmiosObservableCardanoNode_logger = new WeakMap(), _OgmiosObservableCardanoNode_interactionContext$ = new WeakMap();
//# sourceMappingURL=OgmiosObservableCardanoNode.js.map