import { CardanoNodeErrors, CardanoNodeUtil } from '@cardano-sdk/core';
import { eraSummary, genesis } from '../ogmiosToCore';
const wrapError = async (query) => {
    try {
        return await query();
    }
    catch (error) {
        throw CardanoNodeUtil.asCardanoNodeError(error) || new CardanoNodeErrors.UnknownCardanoNodeError(error);
    }
};
export const queryEraSummaries = (client, logger) => wrapError(async () => {
    logger.info('Querying era summaries');
    const systemStart = await client.systemStart();
    const eraSummaries = await client.eraSummaries();
    return eraSummaries.map((era) => eraSummary(era, systemStart));
});
export const queryGenesisParameters = (client, logger) => wrapError(async () => {
    logger.info('Querying genesis parameters');
    return genesis(await client.genesisConfig());
});
//# sourceMappingURL=queries.js.map