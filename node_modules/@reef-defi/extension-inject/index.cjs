"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.REEF_INJECTED_EVENT = exports.REEF_EXTENSION_IDENT = void 0;
exports.injectExtension = injectExtension;
exports.isInjected = isInjected;
exports.isInjectionStarted = isInjectionStarted;
exports.startInjection = startInjection;
// Copyright 2019-2021 @polkadot/extension-inject authors & contributors
// SPDX-License-Identifier: Apache-2.0
const REEF_EXTENSION_IDENT = 'reef';
exports.REEF_EXTENSION_IDENT = REEF_EXTENSION_IDENT;
const REEF_INJECTED_EVENT = 'reef-injected'; // It is recommended to always use the function below to shield the extension and dapp from
// any future changes. The exposed interface will manage access between the 2 environments,
// be it via window (current), postMessage (under consideration) or any other mechanism

exports.REEF_INJECTED_EVENT = REEF_INJECTED_EVENT;

function injectExtension(enable, _ref) {
  let {
    name,
    version
  } = _ref;
  // small helper with the typescript types, just cast window
  const windowInject = window;

  if (windowInject) {
    // don't clobber the existing object, we will add it (or create as needed)
    windowInject.injectedWeb3 = windowInject.injectedWeb3 || {}; // add our enable function

    windowInject.injectedWeb3[name] = {
      enable: origin => enable(origin),
      version
    };
  }
}

function isInjected(name) {
  const windowInject = window;
  return !!(windowInject !== null && windowInject !== void 0 && windowInject.injectedWeb3) && !!(windowInject !== null && windowInject !== void 0 && windowInject.injectedWeb3[name]);
}

function isInjectionStarted(name) {
  const windowInject = window;
  return !!windowInject._reefInjectionStart && !!windowInject._reefInjectionStart[name];
}

function startInjection(name) {
  if (!window._reefInjectionStart) {
    window._reefInjectionStart = {};
  }

  window._reefInjectionStart[name] = true;
}