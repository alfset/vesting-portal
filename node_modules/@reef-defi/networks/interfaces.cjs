"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectableNetworks = exports.availableNetworks = exports.allNetworks = void 0;

var _defaults = require("./defaults.cjs");

var _substrate = require("./substrate.cjs");

// Copyright 2017-2021 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
// These are known prefixes that are not sorted
const UNSORTED = [42];

function toExpanded(o) {
  const network = o.network || '';
  const n = o; // ledger additions

  n.slip44 = _defaults.knownLedger[network];
  n.hasLedgerSupport = !!n.slip44; // general items

  n.genesisHash = _defaults.knownGenesis[network] || [];
  n.icon = 'substrate'; // filtering

  n.isTestnet = false;
  n.isIgnored = false;
  return n;
}

function filterSelectable(_ref) {
  let {
    genesisHash,
    prefix
  } = _ref;
  return !!genesisHash.length || prefix === 42;
}

function filterAvailable(n) {
  return !n.isIgnored && !!n.network;
}

function sortNetworks(a, b) {
  const isUnSortedA = UNSORTED.includes(a.prefix);
  const isUnSortedB = UNSORTED.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? 0 : isUnSortedA ? -1 : isUnSortedB ? 1 : a.displayName.localeCompare(b.displayName);
} // This is all the Substrate networks with our additional information


const allNetworks = _substrate.knownSubstrate.map(toExpanded); // The list of available/claimed prefixes
//   - no testnets
//   - we only include those where we have a standardAccount
//   - sort by name, however we keep 0, 2, 42 first in the list


exports.allNetworks = allNetworks;
const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks); // A filtered list of those chains we have details about (genesisHashes)

exports.availableNetworks = availableNetworks;
const selectableNetworks = availableNetworks.filter(filterSelectable);
exports.selectableNetworks = selectableNetworks;