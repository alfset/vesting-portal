{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst converter = require('./converter');\nfunction checkForInput(inputs, inputIndex) {\n  const input = inputs[inputIndex];\n  if (input === undefined) throw new Error(\"No input #\".concat(inputIndex));\n  return input;\n}\nexports.checkForInput = checkForInput;\nfunction checkForOutput(outputs, outputIndex) {\n  const output = outputs[outputIndex];\n  if (output === undefined) throw new Error(\"No output #\".concat(outputIndex));\n  return output;\n}\nexports.checkForOutput = checkForOutput;\nfunction checkHasKey(checkKeyVal, keyVals, enumLength) {\n  if (checkKeyVal.key[0] < enumLength) {\n    throw new Error(\"Use the method for your specific key instead of addUnknownKeyVal*\");\n  }\n  if (keyVals && keyVals.filter(kv => kv.key.equals(checkKeyVal.key)).length !== 0) {\n    throw new Error(\"Duplicate Key: \".concat(checkKeyVal.key.toString('hex')));\n  }\n}\nexports.checkHasKey = checkHasKey;\nfunction getEnumLength(myenum) {\n  let count = 0;\n  Object.keys(myenum).forEach(val => {\n    if (Number(isNaN(Number(val)))) {\n      count++;\n    }\n  });\n  return count;\n}\nexports.getEnumLength = getEnumLength;\nfunction inputCheckUncleanFinalized(inputIndex, input) {\n  let result = false;\n  if (input.nonWitnessUtxo || input.witnessUtxo) {\n    const needScriptSig = !!input.redeemScript;\n    const needWitnessScript = !!input.witnessScript;\n    const scriptSigOK = !needScriptSig || !!input.finalScriptSig;\n    const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;\n    const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;\n    result = scriptSigOK && witnessScriptOK && hasOneFinal;\n  }\n  if (result === false) {\n    throw new Error(\"Input #\".concat(inputIndex, \" has too much or too little data to clean\"));\n  }\n}\nexports.inputCheckUncleanFinalized = inputCheckUncleanFinalized;\nfunction throwForUpdateMaker(typeName, name, expected, data) {\n  throw new Error(\"Data for \".concat(typeName, \" key \").concat(name, \" is incorrect: Expected \") + \"\".concat(expected, \" and got \").concat(JSON.stringify(data)));\n}\nfunction updateMaker(typeName) {\n  return (updateData, mainData) => {\n    for (const name of Object.keys(updateData)) {\n      // @ts-ignore\n      const data = updateData[name];\n      // @ts-ignore\n      const {\n        canAdd,\n        canAddToArray,\n        check,\n        expected\n      } =\n      // @ts-ignore\n      converter[typeName + 's'][name] || {};\n      const isArray = !!canAddToArray;\n      // If unknown data. ignore and do not add\n      if (check) {\n        if (isArray) {\n          if (!Array.isArray(data) ||\n          // @ts-ignore\n          mainData[name] && !Array.isArray(mainData[name])) {\n            throw new Error(\"Key type \".concat(name, \" must be an array\"));\n          }\n          if (!data.every(check)) {\n            throwForUpdateMaker(typeName, name, expected, data);\n          }\n          // @ts-ignore\n          const arr = mainData[name] || [];\n          const dupeCheckSet = new Set();\n          if (!data.every(v => canAddToArray(arr, v, dupeCheckSet))) {\n            throw new Error('Can not add duplicate data to array');\n          }\n          // @ts-ignore\n          mainData[name] = arr.concat(data);\n        } else {\n          if (!check(data)) {\n            throwForUpdateMaker(typeName, name, expected, data);\n          }\n          if (!canAdd(mainData, data)) {\n            throw new Error(\"Can not add duplicate data to \".concat(typeName));\n          }\n          // @ts-ignore\n          mainData[name] = data;\n        }\n      }\n    }\n  };\n}\nexports.updateGlobal = updateMaker('global');\nexports.updateInput = updateMaker('input');\nexports.updateOutput = updateMaker('output');\nfunction addInputAttributes(inputs, data) {\n  const index = inputs.length - 1;\n  const input = checkForInput(inputs, index);\n  exports.updateInput(data, input);\n}\nexports.addInputAttributes = addInputAttributes;\nfunction addOutputAttributes(outputs, data) {\n  const index = outputs.length - 1;\n  const output = checkForOutput(outputs, index);\n  exports.updateOutput(data, output);\n}\nexports.addOutputAttributes = addOutputAttributes;\nfunction defaultVersionSetter(version, txBuf) {\n  if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {\n    throw new Error('Set Version: Invalid Transaction');\n  }\n  txBuf.writeUInt32LE(version, 0);\n  return txBuf;\n}\nexports.defaultVersionSetter = defaultVersionSetter;\nfunction defaultLocktimeSetter(locktime, txBuf) {\n  if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {\n    throw new Error('Set Locktime: Invalid Transaction');\n  }\n  txBuf.writeUInt32LE(locktime, txBuf.length - 4);\n  return txBuf;\n}\nexports.defaultLocktimeSetter = defaultLocktimeSetter;","map":{"version":3,"names":["Object","defineProperty","exports","value","converter","require","checkForInput","inputs","inputIndex","input","undefined","Error","concat","checkForOutput","outputs","outputIndex","output","checkHasKey","checkKeyVal","keyVals","enumLength","key","filter","kv","equals","length","toString","getEnumLength","myenum","count","keys","forEach","val","Number","isNaN","inputCheckUncleanFinalized","result","nonWitnessUtxo","witnessUtxo","needScriptSig","redeemScript","needWitnessScript","witnessScript","scriptSigOK","finalScriptSig","witnessScriptOK","finalScriptWitness","hasOneFinal","throwForUpdateMaker","typeName","name","expected","data","JSON","stringify","updateMaker","updateData","mainData","canAdd","canAddToArray","check","isArray","Array","every","arr","dupeCheckSet","Set","v","updateGlobal","updateInput","updateOutput","addInputAttributes","index","addOutputAttributes","defaultVersionSetter","version","txBuf","Buffer","isBuffer","writeUInt32LE","defaultLocktimeSetter","locktime"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip174/src/lib/utils.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst converter = require('./converter');\nfunction checkForInput(inputs, inputIndex) {\n  const input = inputs[inputIndex];\n  if (input === undefined) throw new Error(`No input #${inputIndex}`);\n  return input;\n}\nexports.checkForInput = checkForInput;\nfunction checkForOutput(outputs, outputIndex) {\n  const output = outputs[outputIndex];\n  if (output === undefined) throw new Error(`No output #${outputIndex}`);\n  return output;\n}\nexports.checkForOutput = checkForOutput;\nfunction checkHasKey(checkKeyVal, keyVals, enumLength) {\n  if (checkKeyVal.key[0] < enumLength) {\n    throw new Error(\n      `Use the method for your specific key instead of addUnknownKeyVal*`,\n    );\n  }\n  if (\n    keyVals &&\n    keyVals.filter(kv => kv.key.equals(checkKeyVal.key)).length !== 0\n  ) {\n    throw new Error(`Duplicate Key: ${checkKeyVal.key.toString('hex')}`);\n  }\n}\nexports.checkHasKey = checkHasKey;\nfunction getEnumLength(myenum) {\n  let count = 0;\n  Object.keys(myenum).forEach(val => {\n    if (Number(isNaN(Number(val)))) {\n      count++;\n    }\n  });\n  return count;\n}\nexports.getEnumLength = getEnumLength;\nfunction inputCheckUncleanFinalized(inputIndex, input) {\n  let result = false;\n  if (input.nonWitnessUtxo || input.witnessUtxo) {\n    const needScriptSig = !!input.redeemScript;\n    const needWitnessScript = !!input.witnessScript;\n    const scriptSigOK = !needScriptSig || !!input.finalScriptSig;\n    const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;\n    const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;\n    result = scriptSigOK && witnessScriptOK && hasOneFinal;\n  }\n  if (result === false) {\n    throw new Error(\n      `Input #${inputIndex} has too much or too little data to clean`,\n    );\n  }\n}\nexports.inputCheckUncleanFinalized = inputCheckUncleanFinalized;\nfunction throwForUpdateMaker(typeName, name, expected, data) {\n  throw new Error(\n    `Data for ${typeName} key ${name} is incorrect: Expected ` +\n      `${expected} and got ${JSON.stringify(data)}`,\n  );\n}\nfunction updateMaker(typeName) {\n  return (updateData, mainData) => {\n    for (const name of Object.keys(updateData)) {\n      // @ts-ignore\n      const data = updateData[name];\n      // @ts-ignore\n      const { canAdd, canAddToArray, check, expected } =\n        // @ts-ignore\n        converter[typeName + 's'][name] || {};\n      const isArray = !!canAddToArray;\n      // If unknown data. ignore and do not add\n      if (check) {\n        if (isArray) {\n          if (\n            !Array.isArray(data) ||\n            // @ts-ignore\n            (mainData[name] && !Array.isArray(mainData[name]))\n          ) {\n            throw new Error(`Key type ${name} must be an array`);\n          }\n          if (!data.every(check)) {\n            throwForUpdateMaker(typeName, name, expected, data);\n          }\n          // @ts-ignore\n          const arr = mainData[name] || [];\n          const dupeCheckSet = new Set();\n          if (!data.every(v => canAddToArray(arr, v, dupeCheckSet))) {\n            throw new Error('Can not add duplicate data to array');\n          }\n          // @ts-ignore\n          mainData[name] = arr.concat(data);\n        } else {\n          if (!check(data)) {\n            throwForUpdateMaker(typeName, name, expected, data);\n          }\n          if (!canAdd(mainData, data)) {\n            throw new Error(`Can not add duplicate data to ${typeName}`);\n          }\n          // @ts-ignore\n          mainData[name] = data;\n        }\n      }\n    }\n  };\n}\nexports.updateGlobal = updateMaker('global');\nexports.updateInput = updateMaker('input');\nexports.updateOutput = updateMaker('output');\nfunction addInputAttributes(inputs, data) {\n  const index = inputs.length - 1;\n  const input = checkForInput(inputs, index);\n  exports.updateInput(data, input);\n}\nexports.addInputAttributes = addInputAttributes;\nfunction addOutputAttributes(outputs, data) {\n  const index = outputs.length - 1;\n  const output = checkForOutput(outputs, index);\n  exports.updateOutput(data, output);\n}\nexports.addOutputAttributes = addOutputAttributes;\nfunction defaultVersionSetter(version, txBuf) {\n  if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {\n    throw new Error('Set Version: Invalid Transaction');\n  }\n  txBuf.writeUInt32LE(version, 0);\n  return txBuf;\n}\nexports.defaultVersionSetter = defaultVersionSetter;\nfunction defaultLocktimeSetter(locktime, txBuf) {\n  if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {\n    throw new Error('Set Locktime: Invalid Transaction');\n  }\n  txBuf.writeUInt32LE(locktime, txBuf.length - 4);\n  return txBuf;\n}\nexports.defaultLocktimeSetter = defaultLocktimeSetter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}