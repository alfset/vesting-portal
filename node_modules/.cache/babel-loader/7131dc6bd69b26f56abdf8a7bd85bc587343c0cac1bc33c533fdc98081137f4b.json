{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sign = sign;\nexports.verify = verify;\nexports.generate = generate;\n//  This module provides the signing functionality used by the stellar network\n//  The code below may look a little strange... this is because we try to provide\n//  the most efficient signing method possible.  First, we try to load the\n//  native `sodium-native` package for node.js environments, and if that fails we\n//  fallback to `tweetnacl`\n\nvar actualMethods = {};\n\n/**\n * Use this flag to check if fast signing (provided by `sodium-native` package) is available.\n * If your app is signing a large number of transaction or verifying a large number\n * of signatures make sure `sodium-native` package is installed.\n */\nvar FastSigning = exports.FastSigning = checkFastSigning();\nfunction sign(data, secretKey) {\n  return actualMethods.sign(data, secretKey);\n}\nfunction verify(data, signature, publicKey) {\n  return actualMethods.verify(data, signature, publicKey);\n}\nfunction generate(secretKey) {\n  return actualMethods.generate(secretKey);\n}\nfunction checkFastSigning() {\n  return typeof window === 'undefined' ? checkFastSigningNode() : checkFastSigningBrowser();\n}\nfunction checkFastSigningNode() {\n  // NOTE: we use commonjs style require here because es6 imports\n  // can only occur at the top level.  thanks, obama.\n  var sodium = void 0;\n  try {\n    // eslint-disable-next-line\n    sodium = require('sodium-native');\n  } catch (err) {\n    return checkFastSigningBrowser();\n  }\n  if (!Object.keys(sodium).length) {\n    return checkFastSigningBrowser();\n  }\n  actualMethods.generate = function (secretKey) {\n    var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);\n    return pk;\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    var signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signature, data, secretKey);\n    return signature;\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    try {\n      return sodium.crypto_sign_verify_detached(signature, data, publicKey);\n    } catch (e) {\n      return false;\n    }\n  };\n  return true;\n}\nfunction checkFastSigningBrowser() {\n  // fallback to `tweetnacl` if we're in the browser or\n  // if there was a failure installing `sodium-native`\n  // eslint-disable-next-line\n  var nacl = require('tweetnacl');\n  actualMethods.generate = function (secretKey) {\n    var secretKeyUint8 = new Uint8Array(secretKey);\n    var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);\n    return Buffer.from(naclKeys.publicKey);\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    secretKey = new Uint8Array(secretKey.toJSON().data);\n    var signature = nacl.sign.detached(data, secretKey);\n    return Buffer.from(signature);\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    signature = new Uint8Array(signature.toJSON().data);\n    publicKey = new Uint8Array(publicKey.toJSON().data);\n    return nacl.sign.detached.verify(data, signature, publicKey);\n  };\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","sign","verify","generate","actualMethods","FastSigning","checkFastSigning","data","secretKey","signature","publicKey","window","checkFastSigningNode","checkFastSigningBrowser","sodium","require","err","keys","length","pk","Buffer","alloc","crypto_sign_PUBLICKEYBYTES","sk","crypto_sign_SECRETKEYBYTES","crypto_sign_seed_keypair","from","crypto_sign_BYTES","crypto_sign_detached","crypto_sign_verify_detached","e","nacl","secretKeyUint8","Uint8Array","naclKeys","keyPair","fromSeed","toJSON","detached"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/signing.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sign = sign;\nexports.verify = verify;\nexports.generate = generate;\n//  This module provides the signing functionality used by the stellar network\n//  The code below may look a little strange... this is because we try to provide\n//  the most efficient signing method possible.  First, we try to load the\n//  native `sodium-native` package for node.js environments, and if that fails we\n//  fallback to `tweetnacl`\n\nvar actualMethods = {};\n\n/**\n * Use this flag to check if fast signing (provided by `sodium-native` package) is available.\n * If your app is signing a large number of transaction or verifying a large number\n * of signatures make sure `sodium-native` package is installed.\n */\nvar FastSigning = exports.FastSigning = checkFastSigning();\n\nfunction sign(data, secretKey) {\n  return actualMethods.sign(data, secretKey);\n}\n\nfunction verify(data, signature, publicKey) {\n  return actualMethods.verify(data, signature, publicKey);\n}\n\nfunction generate(secretKey) {\n  return actualMethods.generate(secretKey);\n}\n\nfunction checkFastSigning() {\n  return typeof window === 'undefined' ? checkFastSigningNode() : checkFastSigningBrowser();\n}\n\nfunction checkFastSigningNode() {\n  // NOTE: we use commonjs style require here because es6 imports\n  // can only occur at the top level.  thanks, obama.\n  var sodium = void 0;\n  try {\n    // eslint-disable-next-line\n    sodium = require('sodium-native');\n  } catch (err) {\n    return checkFastSigningBrowser();\n  }\n\n  if (!Object.keys(sodium).length) {\n    return checkFastSigningBrowser();\n  }\n\n  actualMethods.generate = function (secretKey) {\n    var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);\n    return pk;\n  };\n\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    var signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signature, data, secretKey);\n    return signature;\n  };\n\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    try {\n      return sodium.crypto_sign_verify_detached(signature, data, publicKey);\n    } catch (e) {\n      return false;\n    }\n  };\n\n  return true;\n}\n\nfunction checkFastSigningBrowser() {\n  // fallback to `tweetnacl` if we're in the browser or\n  // if there was a failure installing `sodium-native`\n  // eslint-disable-next-line\n  var nacl = require('tweetnacl');\n\n  actualMethods.generate = function (secretKey) {\n    var secretKeyUint8 = new Uint8Array(secretKey);\n    var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);\n    return Buffer.from(naclKeys.publicKey);\n  };\n\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    secretKey = new Uint8Array(secretKey.toJSON().data);\n\n    var signature = nacl.sign.detached(data, secretKey);\n\n    return Buffer.from(signature);\n  };\n\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    signature = new Uint8Array(signature.toJSON().data);\n    publicKey = new Uint8Array(publicKey.toJSON().data);\n\n    return nacl.sign.detached.verify(data, signature, publicKey);\n  };\n\n  return false;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}