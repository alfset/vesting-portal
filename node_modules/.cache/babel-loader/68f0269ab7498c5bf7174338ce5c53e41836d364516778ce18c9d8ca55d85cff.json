{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Claimant = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _keypair = require('./keypair');\nvar _strkey = require('./strkey');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Claimant class represents an xdr.Claimant\n *\n * The claim predicate is optional, it defaults to unconditional if none is specified.\n *\n * @constructor\n * @param {string} destination - The destination account ID.\n * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.\n */\nvar Claimant = exports.Claimant = function () {\n  function Claimant(destination, predicate) {\n    _classCallCheck(this, Claimant);\n    if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) {\n      throw new Error('Destination is invalid');\n    }\n    this._destination = destination;\n    if (!predicate) {\n      this._predicate = _xdr2.default.ClaimPredicate.claimPredicateUnconditional();\n    } else if (predicate instanceof _xdr2.default.ClaimPredicate) {\n      this._predicate = predicate;\n    } else {\n      throw new Error('Predicate should be an xdr.ClaimPredicate');\n    }\n  }\n\n  /**\n   * Returns an unconditional claim predicate\n   * @Return {xdr.ClaimPredicate}\n   */\n\n  _createClass(Claimant, [{\n    key: 'toXDRObject',\n    /**\n     * Returns the xdr object for this claimant.\n     * @returns {xdr.Claimant} XDR Claimant object\n     */\n    value: function toXDRObject() {\n      var claimant = new _xdr2.default.ClaimantV0({\n        destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),\n        predicate: this._predicate\n      });\n      return _xdr2.default.Claimant.claimantTypeV0(claimant);\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: 'destination',\n    get: function get() {\n      return this._destination;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n\n    /**\n     * @type {xdr.ClaimPredicate}\n     * @readonly\n     */\n  }, {\n    key: 'predicate',\n    get: function get() {\n      return this._predicate;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n  }], [{\n    key: 'predicateUnconditional',\n    value: function predicateUnconditional() {\n      return _xdr2.default.ClaimPredicate.claimPredicateUnconditional();\n    }\n\n    /**\n     * Returns an `and` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: 'predicateAnd',\n    value: function predicateAnd(left, right) {\n      if (!(left instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr2.default.ClaimPredicate.claimPredicateAnd([left, right]);\n    }\n\n    /**\n     * Returns an `or` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: 'predicateOr',\n    value: function predicateOr(left, right) {\n      if (!(left instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr2.default.ClaimPredicate.claimPredicateOr([left, right]);\n    }\n\n    /**\n     * Returns a `not` claim predicate\n     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: 'predicateNot',\n    value: function predicateNot(predicate) {\n      if (!(predicate instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr2.default.ClaimPredicate.claimPredicateNot(predicate);\n    }\n\n    /**\n     * Returns a `BeforeAbsoluteTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation is less than this (absolute)\n     * Unix timestamp (expressed in seconds).\n     *\n     * @param {string} absBefore Unix epoch (in seconds) as a string\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: 'predicateBeforeAbsoluteTime',\n    value: function predicateBeforeAbsoluteTime(absBefore) {\n      return _xdr2.default.ClaimPredicate.claimPredicateBeforeAbsoluteTime(_xdr2.default.Int64.fromString(absBefore));\n    }\n\n    /**\n     * Returns a `BeforeRelativeTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation plus this relative time delta\n     * (in seconds) is less than the current time.\n     *\n     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: 'predicateBeforeRelativeTime',\n    value: function predicateBeforeRelativeTime(seconds) {\n      return _xdr2.default.ClaimPredicate.claimPredicateBeforeRelativeTime(_xdr2.default.Int64.fromString(seconds));\n    }\n\n    /**\n     * Returns a claimant object from its XDR object representation.\n     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.\n     * @returns {Claimant}\n     */\n  }, {\n    key: 'fromXDR',\n    value: function fromXDR(claimantXdr) {\n      var value = void 0;\n      switch (claimantXdr.switch()) {\n        case _xdr2.default.ClaimantType.claimantTypeV0():\n          value = claimantXdr.v0();\n          return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());\n        default:\n          throw new Error('Invalid claimant type: ' + claimantXdr.switch().name);\n      }\n    }\n  }]);\n  return Claimant;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","Claimant","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_xdr","require","_xdr2","_interopRequireDefault","_keypair","_strkey","obj","__esModule","default","_classCallCheck","instance","TypeError","destination","predicate","StrKey","isValidEd25519PublicKey","Error","_destination","_predicate","ClaimPredicate","claimPredicateUnconditional","toXDRObject","claimant","ClaimantV0","Keypair","fromPublicKey","xdrAccountId","claimantTypeV0","get","set","predicateUnconditional","predicateAnd","left","right","claimPredicateAnd","predicateOr","claimPredicateOr","predicateNot","claimPredicateNot","predicateBeforeAbsoluteTime","absBefore","claimPredicateBeforeAbsoluteTime","Int64","fromString","predicateBeforeRelativeTime","seconds","claimPredicateBeforeRelativeTime","fromXDR","claimantXdr","switch","ClaimantType","v0","encodeEd25519PublicKey","ed25519","name"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/claimant.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Claimant = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _keypair = require('./keypair');\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Claimant class represents an xdr.Claimant\n *\n * The claim predicate is optional, it defaults to unconditional if none is specified.\n *\n * @constructor\n * @param {string} destination - The destination account ID.\n * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.\n */\nvar Claimant = exports.Claimant = function () {\n  function Claimant(destination, predicate) {\n    _classCallCheck(this, Claimant);\n\n    if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) {\n      throw new Error('Destination is invalid');\n    }\n    this._destination = destination;\n\n    if (!predicate) {\n      this._predicate = _xdr2.default.ClaimPredicate.claimPredicateUnconditional();\n    } else if (predicate instanceof _xdr2.default.ClaimPredicate) {\n      this._predicate = predicate;\n    } else {\n      throw new Error('Predicate should be an xdr.ClaimPredicate');\n    }\n  }\n\n  /**\n   * Returns an unconditional claim predicate\n   * @Return {xdr.ClaimPredicate}\n   */\n\n\n  _createClass(Claimant, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the xdr object for this claimant.\n     * @returns {xdr.Claimant} XDR Claimant object\n     */\n    value: function toXDRObject() {\n      var claimant = new _xdr2.default.ClaimantV0({\n        destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),\n        predicate: this._predicate\n      });\n\n      return _xdr2.default.Claimant.claimantTypeV0(claimant);\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'destination',\n    get: function get() {\n      return this._destination;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n\n    /**\n     * @type {xdr.ClaimPredicate}\n     * @readonly\n     */\n\n  }, {\n    key: 'predicate',\n    get: function get() {\n      return this._predicate;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n  }], [{\n    key: 'predicateUnconditional',\n    value: function predicateUnconditional() {\n      return _xdr2.default.ClaimPredicate.claimPredicateUnconditional();\n    }\n\n    /**\n     * Returns an `and` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateAnd',\n    value: function predicateAnd(left, right) {\n      if (!(left instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _xdr2.default.ClaimPredicate.claimPredicateAnd([left, right]);\n    }\n\n    /**\n     * Returns an `or` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateOr',\n    value: function predicateOr(left, right) {\n      if (!(left instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _xdr2.default.ClaimPredicate.claimPredicateOr([left, right]);\n    }\n\n    /**\n     * Returns a `not` claim predicate\n     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateNot',\n    value: function predicateNot(predicate) {\n      if (!(predicate instanceof _xdr2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _xdr2.default.ClaimPredicate.claimPredicateNot(predicate);\n    }\n\n    /**\n     * Returns a `BeforeAbsoluteTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation is less than this (absolute)\n     * Unix timestamp (expressed in seconds).\n     *\n     * @param {string} absBefore Unix epoch (in seconds) as a string\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateBeforeAbsoluteTime',\n    value: function predicateBeforeAbsoluteTime(absBefore) {\n      return _xdr2.default.ClaimPredicate.claimPredicateBeforeAbsoluteTime(_xdr2.default.Int64.fromString(absBefore));\n    }\n\n    /**\n     * Returns a `BeforeRelativeTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation plus this relative time delta\n     * (in seconds) is less than the current time.\n     *\n     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateBeforeRelativeTime',\n    value: function predicateBeforeRelativeTime(seconds) {\n      return _xdr2.default.ClaimPredicate.claimPredicateBeforeRelativeTime(_xdr2.default.Int64.fromString(seconds));\n    }\n\n    /**\n     * Returns a claimant object from its XDR object representation.\n     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.\n     * @returns {Claimant}\n     */\n\n  }, {\n    key: 'fromXDR',\n    value: function fromXDR(claimantXdr) {\n      var value = void 0;\n      switch (claimantXdr.switch()) {\n        case _xdr2.default.ClaimantType.claimantTypeV0():\n          value = claimantXdr.v0();\n          return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());\n        default:\n          throw new Error('Invalid claimant type: ' + claimantXdr.switch().name);\n      }\n    }\n  }]);\n\n  return Claimant;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}