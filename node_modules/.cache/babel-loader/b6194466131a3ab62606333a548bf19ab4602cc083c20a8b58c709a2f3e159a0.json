{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBase = undefined;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _hashing = require('./hashing');\nvar _keypair = require('./keypair');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * @ignore\n */\nvar TransactionBase = exports.TransactionBase = function () {\n  function TransactionBase(tx, signatures, fee, networkPassphrase) {\n    _classCallCheck(this, TransactionBase);\n    if (typeof networkPassphrase !== 'string') {\n      throw new Error('Invalid passphrase provided to Transaction: expected a string but got a ' + (typeof networkPassphrase === 'undefined' ? 'undefined' : _typeof(networkPassphrase)));\n    }\n    this._networkPassphrase = networkPassphrase;\n    this._tx = tx;\n    this._signatures = signatures;\n    this._fee = fee;\n  }\n\n  /**\n   * @type {Array.<xdr.DecoratedSignature>}\n   * @readonly\n   */\n\n  _createClass(TransactionBase, [{\n    key: 'sign',\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n    value: function sign() {\n      var _this = this;\n      var txHash = this.hash();\n      for (var _len = arguments.length, keypairs = Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n      keypairs.forEach(function (kp) {\n        var sig = kp.signDecorated(txHash);\n        _this.signatures.push(sig);\n      });\n    }\n\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * [addSignature](#addSignature) for more information).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n  }, {\n    key: 'getKeypairSignature',\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {void}\n     */\n  }, {\n    key: 'addSignature',\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n      var keypair = void 0;\n      var hint = void 0;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n      this.signatures.push(new _xdr2.default.DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n\n    /**\n     * Add a decorated signature directly to the transaction envelope.\n     *\n     * @param {xdr.DecoratedSignature} signature    raw signature to add\n     * @returns {void}\n     *\n     * @see Keypair.signDecorated\n     * @see Keypair.signPayloadDecorated\n     */\n  }, {\n    key: 'addDecoratedSignature',\n    value: function addDecoratedSignature(signature) {\n      this.signatures.push(signature);\n    }\n\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n  }, {\n    key: 'signHashX',\n    value: function signHashX(preimage) {\n      if (typeof preimage === 'string') {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _xdr2.default.DecoratedSignature({\n        hint: hint,\n        signature: signature\n      }));\n    }\n\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'hash',\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n  }, {\n    key: 'signatureBase',\n    value: function signatureBase() {\n      throw new Error('Implement in subclass');\n    }\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      throw new Error('Implement in subclass');\n    }\n\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n  }, {\n    key: 'toXDR',\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }, {\n    key: 'signatures',\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }, {\n    key: 'tx',\n    get: function get() {\n      return this._tx;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: 'fee',\n    get: function get() {\n      return this._fee;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: 'networkPassphrase',\n    get: function get() {\n      return this._networkPassphrase;\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n  }]);\n  return TransactionBase;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","TransactionBase","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","_xdr","require","_xdr2","_interopRequireDefault","_hashing","_keypair","__esModule","default","_classCallCheck","instance","TypeError","tx","signatures","fee","networkPassphrase","Error","_networkPassphrase","_tx","_signatures","_fee","sign","_this","txHash","hash","_len","arguments","keypairs","Array","_key","forEach","kp","sig","signDecorated","push","getKeypairSignature","keypair","toString","addSignature","publicKey","signature","hint","signatureBuffer","Buffer","from","Keypair","fromPublicKey","signatureHint","e","verify","DecoratedSignature","addDecoratedSignature","signHashX","preimage","hashX","slice","signatureBase","toEnvelope","toXDR","get","set"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/transaction_base.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBase = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _hashing = require('./hashing');\n\nvar _keypair = require('./keypair');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @ignore\n */\nvar TransactionBase = exports.TransactionBase = function () {\n  function TransactionBase(tx, signatures, fee, networkPassphrase) {\n    _classCallCheck(this, TransactionBase);\n\n    if (typeof networkPassphrase !== 'string') {\n      throw new Error('Invalid passphrase provided to Transaction: expected a string but got a ' + (typeof networkPassphrase === 'undefined' ? 'undefined' : _typeof(networkPassphrase)));\n    }\n\n    this._networkPassphrase = networkPassphrase;\n    this._tx = tx;\n    this._signatures = signatures;\n    this._fee = fee;\n  }\n\n  /**\n   * @type {Array.<xdr.DecoratedSignature>}\n   * @readonly\n   */\n\n\n  _createClass(TransactionBase, [{\n    key: 'sign',\n\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n    value: function sign() {\n      var _this = this;\n\n      var txHash = this.hash();\n\n      for (var _len = arguments.length, keypairs = Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n\n      keypairs.forEach(function (kp) {\n        var sig = kp.signDecorated(txHash);\n        _this.signatures.push(sig);\n      });\n    }\n\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * [addSignature](#addSignature) for more information).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n\n  }, {\n    key: 'getKeypairSignature',\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addSignature',\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n\n      var keypair = void 0;\n      var hint = void 0;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n\n      this.signatures.push(new _xdr2.default.DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n\n    /**\n     * Add a decorated signature directly to the transaction envelope.\n     *\n     * @param {xdr.DecoratedSignature} signature    raw signature to add\n     * @returns {void}\n     *\n     * @see Keypair.signDecorated\n     * @see Keypair.signPayloadDecorated\n     */\n\n  }, {\n    key: 'addDecoratedSignature',\n    value: function addDecoratedSignature(signature) {\n      this.signatures.push(signature);\n    }\n\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n\n  }, {\n    key: 'signHashX',\n    value: function signHashX(preimage) {\n      if (typeof preimage === 'string') {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _xdr2.default.DecoratedSignature({ hint: hint, signature: signature }));\n    }\n\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'hash',\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n  }, {\n    key: 'signatureBase',\n    value: function signatureBase() {\n      throw new Error('Implement in subclass');\n    }\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      throw new Error('Implement in subclass');\n    }\n\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n\n  }, {\n    key: 'toXDR',\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }, {\n    key: 'signatures',\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }, {\n    key: 'tx',\n    get: function get() {\n      return this._tx;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'fee',\n    get: function get() {\n      return this._fee;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'networkPassphrase',\n    get: function get() {\n      return this._networkPassphrase;\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n  }]);\n\n  return TransactionBase;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}