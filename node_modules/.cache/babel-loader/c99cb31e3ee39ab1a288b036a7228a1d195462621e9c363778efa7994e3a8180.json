{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{addTransaction,checkedTransaction,clearAllTransactions,finalizeTransaction,updateTransaction,updateUnderlyingStatus,noWalletTxList}from'./actions';const now=()=>new Date().getTime();export const initialState={};export default createReducer(initialState,builder=>builder.addCase(addTransaction,(transactions,_ref)=>{var _transactions$chainId,_transactions$chainId2;let{payload:{chainId,from,hash,approval,summary,claim,value,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo}}=_ref;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nif((_transactions$chainId=transactions[chainId])===null||_transactions$chainId===void 0?void 0:_transactions$chainId[hash]){throw Error('Attempted to add existing transaction.');}// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst txs=(_transactions$chainId2=transactions[chainId])!==null&&_transactions$chainId2!==void 0?_transactions$chainId2:{};txs[hash]={hash,approval,summary,claim,from,addedTime:now(),value,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo};// console.log(txs)\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\ntransactions[chainId]=txs;}).addCase(clearAllTransactions,(transactions,_ref2)=>{let{payload:{chainId}}=_ref2;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nif(!transactions[chainId])return;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\ntransactions[chainId]={};}).addCase(checkedTransaction,(transactions,_ref3)=>{var _transactions$chainId3;let{payload:{chainId,hash,blockNumber}}=_ref3;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst tx=(_transactions$chainId3=transactions[chainId])===null||_transactions$chainId3===void 0?void 0:_transactions$chainId3[hash];if(!tx){return;}if(!tx.lastCheckedBlockNumber){tx.lastCheckedBlockNumber=blockNumber;}else{tx.lastCheckedBlockNumber=Math.max(blockNumber,tx.lastCheckedBlockNumber);}}).addCase(finalizeTransaction,(transactions,_ref4)=>{var _transactions$chainId4;let{payload:{hash,chainId,receipt}}=_ref4;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst tx=(_transactions$chainId4=transactions[chainId])===null||_transactions$chainId4===void 0?void 0:_transactions$chainId4[hash];if(!tx){return;}tx.receipt=receipt;tx.confirmedTime=now();}).addCase(updateTransaction,(transactions,_ref5)=>{var _transactions$chainId5;let{payload:{hash,chainId,info}}=_ref5;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst tx=(_transactions$chainId5=transactions[chainId])===null||_transactions$chainId5===void 0?void 0:_transactions$chainId5[hash];if(!tx){return;}tx.info={...info// bind: info?.bind,\n// confirmations: info?.confirmations,\n// destChainID: info?.destChainID,\n// from: info?.from,\n// historyType: info?.historyType,\n// memo: info?.memo,\n// pairid: info?.pairid,\n// srcChainID: info?.srcChainID,\n// status: info?.status,\n// statusmsg: info?.statusmsg,\n// swapheight: info?.swapheight,\n// swapnonce: info?.swapnonce,\n// swaptx: info?.swaptx,\n// swaptype: info?.swaptype,\n// swapvalue: info?.swapvalue,\n// formatswapvalue: info?.formatswapvalue,\n// timestamp: info?.timestamp,\n// to: info?.to,\n// txheight: info?.txheight,\n// txid: info?.txid,\n// txto: info?.txto,\n// value: info?.value,\n// time: info?.time,\n};}).addCase(updateUnderlyingStatus,(transactions,_ref6)=>{var _transactions$chainId6;let{payload:{hash,chainId,isReceiveAnyToken}}=_ref6;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst tx=(_transactions$chainId6=transactions[chainId])===null||_transactions$chainId6===void 0?void 0:_transactions$chainId6[hash];if(!tx){return;}tx.isReceiveAnyToken=isReceiveAnyToken;}).addCase(noWalletTxList,(transactions,_ref7)=>{var _transactions$chainId7,_transactions$chainId8;let{payload:{hash,chainId,summary,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo}}=_ref7;// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nif((_transactions$chainId7=transactions[chainId])===null||_transactions$chainId7===void 0?void 0:_transactions$chainId7[hash]){throw Error('Transaction already registered.');}// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst txs=(_transactions$chainId8=transactions[chainId])!==null&&_transactions$chainId8!==void 0?_transactions$chainId8:{};txs[hash]={hash:hash,addedTime:Date.now(),summary,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo};// console.log(txs)\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\ntransactions[chainId]=txs;}));","map":{"version":3,"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","updateTransaction","updateUnderlyingStatus","noWalletTxList","now","Date","getTime","initialState","builder","addCase","transactions","_ref","_transactions$chainId","_transactions$chainId2","payload","chainId","from","hash","approval","summary","claim","value","toChainId","toAddress","symbol","version","routerToken","token","logoUrl","isLiquidity","fromInfo","toInfo","Error","txs","addedTime","_ref2","_ref3","_transactions$chainId3","blockNumber","tx","lastCheckedBlockNumber","Math","max","_ref4","_transactions$chainId4","receipt","confirmedTime","_ref5","_transactions$chainId5","info","_ref6","_transactions$chainId6","isReceiveAnyToken","_ref7","_transactions$chainId7","_transactions$chainId8"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/transactions/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n  updateTransaction,\n  updateUnderlyingStatus,\n  noWalletTxList\n} from './actions'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from?: string\n  value?: string\n  toChainId?: string\n  toAddress?: string\n  symbol?: string\n  version?: string\n  routerToken?: string\n  info?: any\n  token?: any\n  logoUrl?: any\n  isLiquidity?: any\n  isReceiveAnyToken?: any,\n  fromInfo?: any,\n  toInfo?: any,\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(addTransaction, (transactions, { payload: {\n      chainId,\n      from,\n      hash,\n      approval,\n      summary,\n      claim,\n      value,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.')\n      }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = {\n        hash,\n        approval,\n        summary,\n        claim,\n        from,\n        addedTime: now(),\n        value,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }\n      // console.log(txs)\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      transactions[chainId] = txs\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      if (!transactions[chainId]) return\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      transactions[chainId] = {}\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    })\n    .addCase(updateTransaction, (transactions, { payload: { hash, chainId, info } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.info = {\n        ...info\n        // bind: info?.bind,\n        // confirmations: info?.confirmations,\n        // destChainID: info?.destChainID,\n        // from: info?.from,\n        // historyType: info?.historyType,\n        // memo: info?.memo,\n        // pairid: info?.pairid,\n        // srcChainID: info?.srcChainID,\n        // status: info?.status,\n        // statusmsg: info?.statusmsg,\n        // swapheight: info?.swapheight,\n        // swapnonce: info?.swapnonce,\n        // swaptx: info?.swaptx,\n        // swaptype: info?.swaptype,\n        // swapvalue: info?.swapvalue,\n        // formatswapvalue: info?.formatswapvalue,\n        // timestamp: info?.timestamp,\n        // to: info?.to,\n        // txheight: info?.txheight,\n        // txid: info?.txid,\n        // txto: info?.txto,\n        // value: info?.value,\n        // time: info?.time,\n      }\n    })\n    .addCase(updateUnderlyingStatus, (transactions, { payload: { hash, chainId, isReceiveAnyToken } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.isReceiveAnyToken = isReceiveAnyToken\n    })\n    .addCase(noWalletTxList, (transactions, { payload: { \n      hash,\n      chainId,\n      summary,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n     } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Transaction already registered.')\n      }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = {\n        hash: hash,\n        addedTime: Date.now(),\n        summary,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }\n      // console.log(txs)\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      transactions[chainId] = txs\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}