{"ast":null,"code":"import { chainInfo } from './chainConfig';\nimport { ENV_NODE_CONFIG, INIT_NODE, USE_VERSION, bridgeApi, scanApi, multiAridgeApi, explorer, env, version, controlConfig } from './constant';\nimport { getNetwork, getInitBridgeChain } from './tools/getUrlParams';\nconst ENV = getNetwork(ENV_NODE_CONFIG, INIT_NODE);\nconst netConfig = chainInfo[ENV] ? chainInfo[ENV] : chainInfo[INIT_NODE];\nconst INITBRIDGE = getInitBridgeChain(netConfig.bridgeInitChain, netConfig.bridgeInitToken);\nconst config = {\n  ...netConfig,\n  ...INITBRIDGE,\n  env,\n  version,\n  ENV_NODE_CONFIG,\n  chainInfo,\n  bridgeApi,\n  scanApi,\n  multiAridgeApi,\n  explorer,\n  oldAppName: 'DeltaSwap',\n  appName: 'DeltaSwap',\n  baseCurrency: 'PLQ',\n  localDataDeadline: 1624700942896,\n  farmUrl: '#/',\n  explorerUrl: explorer,\n  isStopSystem: 0,\n  getBaseCoin(value, chainId, type, name) {\n    // console.log(value)\n    // console.log(chainId)\n    if (value && (value === 'BASECURRENCY' || value === 'W' + this.getCurChainInfo(chainId).symbol && this.getCurChainInfo(chainId).nativeToken)) {\n      if (type) {\n        // return (this.getCurChainInfo(chainId).symbolName ?? this.getCurChainInfo(chainId).name) + '(Router)'\n        return name;\n      } else {\n        // return this.getCurChainInfo(chainId).symbol\n        return value;\n      }\n    } else {\n      if (type) {\n        // if (value === this.getCurChainInfo(chainId).symbol) {\n        //   return name + '(Bridge)'\n        // } else {\n        //   return name\n        // }\n        return name;\n      } else {\n        return value;\n      }\n    }\n  },\n  getCurConfigInfo(version) {\n    version = version ? version : USE_VERSION;\n    return controlConfig[version];\n  },\n  getCurChainInfo(chainID) {\n    // console.log(chainID)\n    if (chainID && chainInfo[chainID]) {\n      return chainInfo[chainID];\n    } else {\n      return netConfig;\n    }\n  }\n};\nexport default config;","map":{"version":3,"names":["chainInfo","ENV_NODE_CONFIG","INIT_NODE","USE_VERSION","bridgeApi","scanApi","multiAridgeApi","explorer","env","version","controlConfig","getNetwork","getInitBridgeChain","ENV","netConfig","INITBRIDGE","bridgeInitChain","bridgeInitToken","config","oldAppName","appName","baseCurrency","localDataDeadline","farmUrl","explorerUrl","isStopSystem","getBaseCoin","value","chainId","type","name","getCurChainInfo","symbol","nativeToken","getCurConfigInfo","chainID"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/config/index.ts"],"sourcesContent":["import {chainInfo} from './chainConfig'\nimport {\n  ENV_NODE_CONFIG,\n  INIT_NODE,\n  USE_VERSION,\n  bridgeApi,\n  scanApi,\n  multiAridgeApi,\n  explorer,\n  env,\n  version,\n  controlConfig\n} from './constant'\n\nimport {getNetwork, getInitBridgeChain} from './tools/getUrlParams'\n\n \ninterface ConFig {\n  [key: string]: any\n}\n\nconst ENV = getNetwork(ENV_NODE_CONFIG, INIT_NODE)\nconst netConfig:ConFig = chainInfo[ENV] ? chainInfo[ENV] : chainInfo[INIT_NODE]\n\nconst INITBRIDGE = getInitBridgeChain(netConfig.bridgeInitChain, netConfig.bridgeInitToken)\n\nconst config: ConFig = {\n  ...netConfig,\n  ...INITBRIDGE,\n  env,\n  version,\n  ENV_NODE_CONFIG,\n  chainInfo,\n  bridgeApi,\n  scanApi,\n  multiAridgeApi,\n  explorer,\n  oldAppName: 'DeltaSwap',\n  appName: 'DeltaSwap',\n  baseCurrency: 'PLQ',\n  localDataDeadline: 1624700942896,\n  farmUrl: '#/',\n  explorerUrl: explorer,\n  isStopSystem: 0,\n  getBaseCoin (value:any, chainId:any, type?: number, name?: string) {\n    // console.log(value)\n    // console.log(chainId)\n    if (\n      value\n      && (\n        value === 'BASECURRENCY'\n        || (value === 'W' + this.getCurChainInfo(chainId).symbol && this.getCurChainInfo(chainId).nativeToken)\n      )\n    ) {\n      if (type) {\n        // return (this.getCurChainInfo(chainId).symbolName ?? this.getCurChainInfo(chainId).name) + '(Router)'\n        return name\n      } else {\n        // return this.getCurChainInfo(chainId).symbol\n        return value\n      }\n    } else {\n      if (type) {\n        // if (value === this.getCurChainInfo(chainId).symbol) {\n        //   return name + '(Bridge)'\n        // } else {\n        //   return name\n        // }\n        return name\n      } else {\n        return value\n      }\n    }\n  },\n  getCurConfigInfo (version?:any) {\n    version = version ? version : USE_VERSION\n    return controlConfig[version]\n  },\n  getCurChainInfo (chainID:any) {\n    // console.log(chainID)\n    if (chainID && chainInfo[chainID]) {\n      return chainInfo[chainID]\n    } else {\n      return netConfig\n    }\n  }\n}\nexport default config\n"],"mappings":"AAAA,SAAQA,SAAS,QAAO,eAAe;AACvC,SACEC,eAAe,EACfC,SAAS,EACTC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,cAAc,EACdC,QAAQ,EACRC,GAAG,EACHC,OAAO,EACPC,aAAa,QACR,YAAY;AAEnB,SAAQC,UAAU,EAAEC,kBAAkB,QAAO,sBAAsB;AAOnE,MAAMC,GAAG,GAAGF,UAAU,CAACV,eAAe,EAAEC,SAAS,CAAC;AAClD,MAAMY,SAAgB,GAAGd,SAAS,CAACa,GAAG,CAAC,GAAGb,SAAS,CAACa,GAAG,CAAC,GAAGb,SAAS,CAACE,SAAS,CAAC;AAE/E,MAAMa,UAAU,GAAGH,kBAAkB,CAACE,SAAS,CAACE,eAAe,EAAEF,SAAS,CAACG,eAAe,CAAC;AAE3F,MAAMC,MAAc,GAAG;EACrB,GAAGJ,SAAS;EACZ,GAAGC,UAAU;EACbP,GAAG;EACHC,OAAO;EACPR,eAAe;EACfD,SAAS;EACTI,SAAS;EACTC,OAAO;EACPC,cAAc;EACdC,QAAQ;EACRY,UAAU,EAAE,WAAW;EACvBC,OAAO,EAAE,WAAW;EACpBC,YAAY,EAAE,KAAK;EACnBC,iBAAiB,EAAE,aAAa;EAChCC,OAAO,EAAE,IAAI;EACbC,WAAW,EAAEjB,QAAQ;EACrBkB,YAAY,EAAE,CAAC;EACfC,WAAWA,CAAEC,KAAS,EAAEC,OAAW,EAAEC,IAAa,EAAEC,IAAa,EAAE;IACjE;IACA;IACA,IACEH,KAAK,KAEHA,KAAK,KAAK,cAAc,IACpBA,KAAK,KAAK,GAAG,GAAG,IAAI,CAACI,eAAe,CAACH,OAAO,CAAC,CAACI,MAAM,IAAI,IAAI,CAACD,eAAe,CAACH,OAAO,CAAC,CAACK,WAAY,CACvG,EACD;MACA,IAAIJ,IAAI,EAAE;QACR;QACA,OAAOC,IAAI;MACb,CAAC,MAAM;QACL;QACA,OAAOH,KAAK;MACd;IACF,CAAC,MAAM;MACL,IAAIE,IAAI,EAAE;QACR;QACA;QACA;QACA;QACA;QACA,OAAOC,IAAI;MACb,CAAC,MAAM;QACL,OAAOH,KAAK;MACd;IACF;EACF,CAAC;EACDO,gBAAgBA,CAAEzB,OAAY,EAAE;IAC9BA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAGN,WAAW;IACzC,OAAOO,aAAa,CAACD,OAAO,CAAC;EAC/B,CAAC;EACDsB,eAAeA,CAAEI,OAAW,EAAE;IAC5B;IACA,IAAIA,OAAO,IAAInC,SAAS,CAACmC,OAAO,CAAC,EAAE;MACjC,OAAOnC,SAAS,CAACmC,OAAO,CAAC;IAC3B,CAAC,MAAM;MACL,OAAOrB,SAAS;IAClB;EACF;AACF,CAAC;AACD,eAAeI,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}