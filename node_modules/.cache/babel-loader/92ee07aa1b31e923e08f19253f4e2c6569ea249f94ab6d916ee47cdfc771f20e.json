{"ast":null,"code":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import config from '../../config'\nimport { isAddress } from 'ethers/lib/utils';\nimport { userSelectCurrency } from './actions';\nimport { getTokenlist, isSupportIndexedDB } from '../../utils/indexedDB';\nimport config from '../../config';\nexport function listsToTokenMap(list) {\n  // console.log(list)\n  const map = {};\n  for (const t in list) {\n    if (!isAddress(t) || !list[t].name || !list[t].symbol) continue;\n    // console.log(list[t])\n    map[t] = list[t];\n  }\n  return map;\n}\nexport function useBridgeTokenList(key, chainId) {\n  const lists = useSelector(state => state.lists);\n  // console.log(lists)\n  const init = {};\n  return useMemo(() => {\n    var _lists$key, _lists$key$chainId;\n    if (!key || !chainId) return init;\n    const current = (_lists$key = lists[key]) === null || _lists$key === void 0 ? void 0 : (_lists$key$chainId = _lists$key[chainId]) === null || _lists$key$chainId === void 0 ? void 0 : _lists$key$chainId.tokenList;\n    // console.log(current)\n    if (!current) return init;\n    try {\n      return listsToTokenMap(current);\n      // return current\n    } catch (error) {\n      console.error('Could not show token list due to error', error);\n      return init;\n    }\n  }, [lists, key, chainId]);\n}\nexport function useAllMergeBridgeTokenList(key, chainId) {\n  const lists = useSelector(state => state.lists);\n  const updateTokenlistTime = useSelector(state => state.lists.updateTokenlistTime);\n  // console.log(chainId)\n\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId;\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID;\n    }\n    return undefined;\n  }, [chainId]);\n  const [tokenlist, setTokenlist] = useState({});\n  const getCurTokenlist = useCallback(() => {\n    // console.log(useChain)\n    if (isSupportIndexedDB) {\n      getTokenlist(useChain).then(res => {\n        // console.log(res)\n        if (res === null || res === void 0 ? void 0 : res.tokenList) {\n          setTokenlist(res.tokenList);\n        } else {\n          var _lists$key2, _lists$key2$useChain;\n          let current = key ? (_lists$key2 = lists[key]) === null || _lists$key2 === void 0 ? void 0 : (_lists$key2$useChain = _lists$key2[useChain]) === null || _lists$key2$useChain === void 0 ? void 0 : _lists$key2$useChain.tokenList : '';\n          if (!current) current = {};\n          setTokenlist(current);\n        }\n      });\n    } else {\n      var _lists$key3, _lists$key3$useChain;\n      let current = key ? (_lists$key3 = lists[key]) === null || _lists$key3 === void 0 ? void 0 : (_lists$key3$useChain = _lists$key3[useChain]) === null || _lists$key3$useChain === void 0 ? void 0 : _lists$key3$useChain.tokenList : '';\n      if (!current) current = {};\n      setTokenlist(current);\n    }\n  }, [useChain, updateTokenlistTime]);\n  useEffect(() => {\n    getCurTokenlist();\n  }, [getCurTokenlist, useChain, updateTokenlistTime]);\n  return tokenlist;\n}\nexport function useInitUserSelectCurrency(chainId) {\n  const userInit = useSelector(state => state.lists.userSelectCurrency);\n  const dispatch = useDispatch();\n  const setUserFromSelect = useCallback(_ref => {\n    let {\n      useChainId,\n      token,\n      toChainId,\n      tokenKey\n    } = _ref;\n    const id = useChainId;\n    dispatch(userSelectCurrency({\n      chainId: id,\n      token,\n      toChainId,\n      tokenKey\n    }));\n  }, [dispatch]);\n  const setUserToSelect = useCallback(_ref2 => {\n    let {\n      useChainId,\n      token,\n      toChainId,\n      tokenKey\n    } = _ref2;\n    const id = useChainId;\n    dispatch(userSelectCurrency({\n      chainId: id,\n      token,\n      toChainId,\n      tokenKey\n    }));\n  }, [dispatch]);\n  return {\n    userInit: userInit && chainId && userInit[chainId] ? userInit[chainId] : {},\n    setUserFromSelect,\n    setUserToSelect\n  };\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","useDispatch","useSelector","isAddress","userSelectCurrency","getTokenlist","isSupportIndexedDB","config","listsToTokenMap","list","map","t","name","symbol","useBridgeTokenList","key","chainId","lists","state","init","_lists$key","_lists$key$chainId","current","tokenList","error","console","useAllMergeBridgeTokenList","updateTokenlistTime","useChain","getCurChainInfo","chainID","undefined","tokenlist","setTokenlist","getCurTokenlist","then","res","_lists$key2","_lists$key2$useChain","_lists$key3","_lists$key3$useChain","useInitUserSelectCurrency","userInit","dispatch","setUserFromSelect","_ref","useChainId","token","toChainId","tokenKey","id","setUserToSelect","_ref2"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/lists/hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppDispatch, AppState } from '../index'\n// import config from '../../config'\nimport { isAddress } from 'ethers/lib/utils'\nimport {userSelectCurrency} from './actions'\n\nimport {getTokenlist, isSupportIndexedDB} from '../../utils/indexedDB'\nimport config from '../../config'\n\n\n\nexport type TokenAddressMap = Readonly<{ [chainId in any]: Readonly<{ [tokenAddress: string]: any }> }>\n\nexport function listsToTokenMap(list:any): TokenAddressMap {\n\n  // console.log(list)\n  const map:any = {}\n  for (const t in list) {\n    if(!isAddress(t) || !list[t].name || !list[t].symbol) continue\n    // console.log(list[t])\n    map[t] = list[t]\n  }\n  return map\n}\n\n\nexport function useBridgeTokenList(key?: string | undefined, chainId?:any): any {\n  const lists:any = useSelector<AppState, AppState['lists']>(state => state.lists)\n  // console.log(lists)\n  const init = {}\n  return useMemo(() => {\n    if (!key || !chainId) return init\n    const current = lists[key]?.[chainId]?.tokenList\n    // console.log(current)\n    if (!current) return init\n    try {\n      return listsToTokenMap(current)\n      // return current\n    } catch (error) {\n      console.error('Could not show token list due to error', error)\n      return init\n    }\n  }, [lists, key, chainId])\n}\n\nexport function useAllMergeBridgeTokenList(key?: string | undefined, chainId?:any): any {\n  const lists:any = useSelector<AppState, AppState['lists']>(state => state.lists)\n  const updateTokenlistTime:any = useSelector<AppState, AppState['lists']>(state => state.lists.updateTokenlistTime)\n  // console.log(chainId)\n\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID\n    }\n    return undefined\n  }, [chainId])\n\n  const [tokenlist, setTokenlist] = useState<any>({})\n  const getCurTokenlist = useCallback(() => {\n    // console.log(useChain)\n    if (isSupportIndexedDB) {\n      getTokenlist(useChain).then((res:any) => {\n        // console.log(res)\n        if (res?.tokenList) {\n          setTokenlist(res.tokenList)\n        } else {\n          let current = key ? lists[key]?.[useChain]?.tokenList : ''\n          if (!current) current = {}\n          setTokenlist(current)\n        }\n      })\n    } else {\n      let current = key ? lists[key]?.[useChain]?.tokenList : ''\n      if (!current) current = {}\n      setTokenlist(current)\n    }\n  }, [useChain, updateTokenlistTime])\n\n  useEffect(() => {\n    getCurTokenlist()\n  }, [getCurTokenlist, useChain, updateTokenlistTime])\n\n  return tokenlist\n}\n\nexport function useInitUserSelectCurrency(chainId?: any) {\n  const userInit:any = useSelector<AppState, AppState['lists']['userSelectCurrency']>(state => state.lists.userSelectCurrency)\n  const dispatch = useDispatch<AppDispatch>()\n  const setUserFromSelect = useCallback(({useChainId, token, toChainId, tokenKey}: {useChainId?: any, token?:any, toChainId?:any, tokenKey?:any}) => {\n    const id = useChainId\n    dispatch(userSelectCurrency({chainId: id, token, toChainId, tokenKey}))\n  }, [dispatch])\n\n  const setUserToSelect = useCallback(({useChainId, token, toChainId, tokenKey}: {useChainId?: any, token?:any, toChainId?:any, tokenKey?:any}) => {\n    const id = useChainId\n    dispatch(userSelectCurrency({chainId: id, token, toChainId, tokenKey}))\n  }, [dispatch])\n\n  return {\n    userInit: userInit && chainId && userInit[chainId] ? userInit[chainId] : {},\n    setUserFromSelect,\n    setUserToSelect,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}