{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\nimport React,{useEffect}from'react';import{useWeb3React}from'@web3-react/core';// import styled from 'styled-components'\n// import { useTranslation } from 'react-i18next'\nimport{network}from'../../connectors';import{useEagerConnect,useInactiveListener}from'../../hooks';import{NetworkContextName}from'../../constants';import{useSafeAppConnection}from'../../connectors/gnosis-safe/hooks';import{gnosissafe}from'../../connectors';// import Loader from '../Loader'\n// const MessageWrapper = styled.div`\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   height: 20rem;\n// `\n// const Message = styled.h2`\n//   color: ${({ theme }) => theme.secondary1};\n// `\nexport default function Web3ReactManager(_ref){let{children}=_ref;// const { t } = useTranslation()\nconst{active}=useWeb3React();const{active:networkActive,error:networkError,activate:activateNetwork}=useWeb3React(NetworkContextName);// console.log(active)\n// console.log(networkActive)\n// 尝试急切地连接到注入的提供者（如果它存在并且已经授予访问权限）\nconst triedEager=useEagerConnect();const triedToConnectToSafe=useSafeAppConnection(gnosissafe);// 在急切地尝试注入后，如果网络连接从未处于活动状态或处于错误状态，请激活itd\nuseEffect(()=>{if(!networkActive&&!networkError&&!active){if(triedToConnectToSafe){console.log(1);activateNetwork(gnosissafe);}else if(triedEager){console.log(2);activateNetwork(network);}}},[triedEager,networkActive,networkError,activateNetwork,active,triedToConnectToSafe,gnosissafe]);// }, [triedEager, networkActive, networkError, activateNetwork, active])\n// 当没有连接帐户时，对注入的提供程序（如果存在）上的登录（广义地说）作出反应\nuseInactiveListener(!triedEager);// handle delayed loader state\n// const [showLoader, setShowLoader] = useState(false)\n// useEffect(() => {\n//   const timeout = setTimeout(() => {\n//     setShowLoader(true)\n//   }, 600)\n//   return () => {\n//     clearTimeout(timeout)\n//   }\n// }, [])\n// 在页面加载时，在尝试连接到注入的连接器之前，不要执行任何操作\n// if (!triedEager) {\n//   return null\n// }\n// 如果帐户上下文未处于活动状态，并且网络上下文中存在错误，则这是一个无法恢复的错误\n// if (!active && networkError) {\n//   return (\n//     <MessageWrapper>\n//       <Message>{t('unknownError')}</Message>\n//     </MessageWrapper>\n//   )\n// }\n// 如果两个上下文都不活动，请旋转\n// if (!active && !networkActive) {\n//   return showLoader ? (\n//     <MessageWrapper>\n//       <Loader />\n//     </MessageWrapper>\n//   ) : null\n// }\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,children);}","map":{"version":3,"names":["React","useEffect","useWeb3React","network","useEagerConnect","useInactiveListener","NetworkContextName","useSafeAppConnection","gnosissafe","Web3ReactManager","_ref","children","active","networkActive","error","networkError","activate","activateNetwork","triedEager","triedToConnectToSafe","console","log","createElement","Fragment"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/components/Web3ReactManager/index.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\nimport React, { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n// import styled from 'styled-components'\n// import { useTranslation } from 'react-i18next'\n\nimport { network } from '../../connectors'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\nimport { NetworkContextName } from '../../constants'\n\nimport {useSafeAppConnection} from '../../connectors/gnosis-safe/hooks'\nimport {gnosissafe} from '../../connectors'\n// import Loader from '../Loader'\n\n// const MessageWrapper = styled.div`\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   height: 20rem;\n// `\n\n// const Message = styled.h2`\n//   color: ${({ theme }) => theme.secondary1};\n// `\n\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\n  // const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n  // console.log(active)\n  // console.log(networkActive)\n  // 尝试急切地连接到注入的提供者（如果它存在并且已经授予访问权限）\n  const triedEager = useEagerConnect()\n  const triedToConnectToSafe = useSafeAppConnection(gnosissafe)\n\n  // 在急切地尝试注入后，如果网络连接从未处于活动状态或处于错误状态，请激活itd\n  useEffect(() => {\n    if (!networkActive && !networkError && !active) {\n      if (triedToConnectToSafe) {\n        console.log(1)\n        activateNetwork(gnosissafe)\n      } else if (triedEager) {\n        console.log(2)\n        activateNetwork(network)\n      }\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active, triedToConnectToSafe, gnosissafe])\n  // }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // 当没有连接帐户时，对注入的提供程序（如果存在）上的登录（广义地说）作出反应\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  // const [showLoader, setShowLoader] = useState(false)\n  // useEffect(() => {\n  //   const timeout = setTimeout(() => {\n  //     setShowLoader(true)\n  //   }, 600)\n\n  //   return () => {\n  //     clearTimeout(timeout)\n  //   }\n  // }, [])\n\n  // 在页面加载时，在尝试连接到注入的连接器之前，不要执行任何操作\n  // if (!triedEager) {\n  //   return null\n  // }\n\n  // 如果帐户上下文未处于活动状态，并且网络上下文中存在错误，则这是一个无法恢复的错误\n  // if (!active && networkError) {\n  //   return (\n  //     <MessageWrapper>\n  //       <Message>{t('unknownError')}</Message>\n  //     </MessageWrapper>\n  //   )\n  // }\n\n  // 如果两个上下文都不活动，请旋转\n  // if (!active && !networkActive) {\n  //   return showLoader ? (\n  //     <MessageWrapper>\n  //       <Loader />\n  //     </MessageWrapper>\n  //   ) : null\n  // }\n\n  return (\n    <>{children}</>\n    )\n}\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,YAAY,KAAQ,kBAAkB,CAC/C;AACA;AAEA,OAASC,OAAO,KAAQ,kBAAkB,CAC1C,OAASC,eAAe,CAAEC,mBAAmB,KAAQ,aAAa,CAClE,OAASC,kBAAkB,KAAQ,iBAAiB,CAEpD,OAAQC,oBAAoB,KAAO,oCAAoC,CACvE,OAAQC,UAAU,KAAO,kBAAkB,CAC3C;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,cAAe,SAAS,CAAAC,gBAAgBA,CAAAC,IAAA,CAA0C,IAAzC,CAAEC,QAAoC,CAAC,CAAAD,IAAA,CAC9E;AACA,KAAM,CAAEE,MAAO,CAAC,CAAGV,YAAY,CAAC,CAAC,CACjC,KAAM,CAAEU,MAAM,CAAEC,aAAa,CAAEC,KAAK,CAAEC,YAAY,CAAEC,QAAQ,CAAEC,eAAgB,CAAC,CAAGf,YAAY,CAACI,kBAAkB,CAAC,CAClH;AACA;AACA;AACA,KAAM,CAAAY,UAAU,CAAGd,eAAe,CAAC,CAAC,CACpC,KAAM,CAAAe,oBAAoB,CAAGZ,oBAAoB,CAACC,UAAU,CAAC,CAE7D;AACAP,SAAS,CAAC,IAAM,CACd,GAAI,CAACY,aAAa,EAAI,CAACE,YAAY,EAAI,CAACH,MAAM,CAAE,CAC9C,GAAIO,oBAAoB,CAAE,CACxBC,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC,CACdJ,eAAe,CAACT,UAAU,CAAC,CAC7B,CAAC,IAAM,IAAIU,UAAU,CAAE,CACrBE,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC,CACdJ,eAAe,CAACd,OAAO,CAAC,CAC1B,CACF,CACF,CAAC,CAAE,CAACe,UAAU,CAAEL,aAAa,CAAEE,YAAY,CAAEE,eAAe,CAAEL,MAAM,CAAEO,oBAAoB,CAAEX,UAAU,CAAC,CAAC,CACxG;AAEA;AACAH,mBAAmB,CAAC,CAACa,UAAU,CAAC,CAEhC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACElB,KAAA,CAAAsB,aAAA,CAAAtB,KAAA,CAAAuB,QAAA,MAAGZ,QAAW,CAAC,CAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}