{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{addMulticallListeners,addUseChainId,errorFetchingMulticallResults,fetchingMulticallResults,removeMulticallListeners,toCallKey,updateMulticallResults}from'./actions';const initialState={callResults:{}};export default createReducer(initialState,builder=>builder.addCase(addMulticallListeners,(state,_ref)=>{var _listeners$chainId;let{payload:{calls,chainId,options:{blocksPerFetch=1}={}}}=_ref;const listeners=state.callListeners?state.callListeners:state.callListeners={};listeners[chainId]=(_listeners$chainId=listeners[chainId])!==null&&_listeners$chainId!==void 0?_listeners$chainId:{};calls.forEach(call=>{var _listeners$chainId$ca,_listeners$chainId$ca2;const callKey=toCallKey(call);listeners[chainId][callKey]=(_listeners$chainId$ca=listeners[chainId][callKey])!==null&&_listeners$chainId$ca!==void 0?_listeners$chainId$ca:{};listeners[chainId][callKey][blocksPerFetch]=((_listeners$chainId$ca2=listeners[chainId][callKey][blocksPerFetch])!==null&&_listeners$chainId$ca2!==void 0?_listeners$chainId$ca2:0)+1;});}).addCase(addUseChainId,(state,_ref2)=>{let{payload:{chainId}}=_ref2;state.useChainId=chainId;}).addCase(removeMulticallListeners,(state,_ref3)=>{let{payload:{chainId,calls,options:{blocksPerFetch=1}={}}}=_ref3;const listeners=state.callListeners?state.callListeners:state.callListeners={};if(!listeners[chainId])return;calls.forEach(call=>{const callKey=toCallKey(call);if(!listeners[chainId][callKey])return;if(!listeners[chainId][callKey][blocksPerFetch])return;if(listeners[chainId][callKey][blocksPerFetch]===1){delete listeners[chainId][callKey][blocksPerFetch];}else{listeners[chainId][callKey][blocksPerFetch]--;}});}).addCase(fetchingMulticallResults,(state,_ref4)=>{var _state$callResults$ch;let{payload:{chainId,fetchingBlockNumber,calls}}=_ref4;state.callResults[chainId]=(_state$callResults$ch=state.callResults[chainId])!==null&&_state$callResults$ch!==void 0?_state$callResults$ch:{};calls.forEach(call=>{const callKey=toCallKey(call);const current=state.callResults[chainId][callKey];if(!current){state.callResults[chainId][callKey]={fetchingBlockNumber};}else{var _current$fetchingBloc;if(((_current$fetchingBloc=current.fetchingBlockNumber)!==null&&_current$fetchingBloc!==void 0?_current$fetchingBloc:0)>=fetchingBlockNumber)return;state.callResults[chainId][callKey].fetchingBlockNumber=fetchingBlockNumber;}});}).addCase(errorFetchingMulticallResults,(state,_ref5)=>{var _state$callResults$ch2;let{payload:{fetchingBlockNumber,chainId,calls}}=_ref5;state.callResults[chainId]=(_state$callResults$ch2=state.callResults[chainId])!==null&&_state$callResults$ch2!==void 0?_state$callResults$ch2:{};calls.forEach(call=>{const callKey=toCallKey(call);const current=state.callResults[chainId][callKey];if(!current)return;// only should be dispatched if we are already fetching\nif(current.fetchingBlockNumber===fetchingBlockNumber){delete current.fetchingBlockNumber;current.data=null;current.blockNumber=fetchingBlockNumber;}});}).addCase(updateMulticallResults,(state,_ref6)=>{var _state$callResults$ch3;let{payload:{chainId,results,blockNumber}}=_ref6;state.callResults[chainId]=(_state$callResults$ch3=state.callResults[chainId])!==null&&_state$callResults$ch3!==void 0?_state$callResults$ch3:{};Object.keys(results).forEach(callKey=>{var _current$blockNumber;const current=state.callResults[chainId][callKey];if(((_current$blockNumber=current===null||current===void 0?void 0:current.blockNumber)!==null&&_current$blockNumber!==void 0?_current$blockNumber:0)>blockNumber)return;state.callResults[chainId][callKey]={data:results[callKey],blockNumber};});}));","map":{"version":3,"names":["createReducer","addMulticallListeners","addUseChainId","errorFetchingMulticallResults","fetchingMulticallResults","removeMulticallListeners","toCallKey","updateMulticallResults","initialState","callResults","builder","addCase","state","_ref","_listeners$chainId","payload","calls","chainId","options","blocksPerFetch","listeners","callListeners","forEach","call","_listeners$chainId$ca","_listeners$chainId$ca2","callKey","_ref2","useChainId","_ref3","_ref4","_state$callResults$ch","fetchingBlockNumber","current","_current$fetchingBloc","_ref5","_state$callResults$ch2","data","blockNumber","_ref6","_state$callResults$ch3","results","Object","keys","_current$blockNumber"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/multicall/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addMulticallListeners,\n  addUseChainId,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  removeMulticallListeners,\n  toCallKey,\n  updateMulticallResults\n} from './actions'\n\nexport interface MulticallState {\n  callListeners?: {\n    // on a per-chain basis\n    [chainId: number]: {\n      // stores for each call key the listeners' preferences\n      [callKey: string]: {\n        // stores how many listeners there are per each blocks per fetch preference\n        [blocksPerFetch: number]: number\n      }\n    }\n  }\n\n  callResults: {\n    [chainId: number]: {\n      [callKey: string]: {\n        data?: string | null\n        blockNumber?: number\n        fetchingBlockNumber?: number\n      }\n    }\n  }\n\n  useChainId?: any\n}\n\nconst initialState: MulticallState = {\n  callResults: {}\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\n      const listeners: MulticallState['callListeners'] = state.callListeners\n        ? state.callListeners\n        : (state.callListeners = {})\n      listeners[chainId] = listeners[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n      })\n    })\n    .addCase(addUseChainId, (state, { payload: { chainId }}) => {\n      state.useChainId = chainId\n    })\n    .addCase(\n      removeMulticallListeners,\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach(call => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      }\n    )\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) {\n          state.callResults[chainId][callKey] = {\n            fetchingBlockNumber\n          }\n        } else {\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach(call => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) return // only should be dispatched if we are already fetching\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\n          delete current.fetchingBlockNumber\n          current.data = null\n          current.blockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      Object.keys(results).forEach(callKey => {\n        const current = state.callResults[chainId][callKey]\n        if ((current?.blockNumber ?? 0) > blockNumber) return\n        state.callResults[chainId][callKey] = {\n          data: results[callKey],\n          blockNumber\n        }\n      })\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}