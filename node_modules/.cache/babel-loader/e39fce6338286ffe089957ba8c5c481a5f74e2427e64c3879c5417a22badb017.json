{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { WalletContext, WalletStatus } from '@terra-dev/use-wallet';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ChromeExtensionController } from '../modules/chrome-extension';\nexport function ExtensionNetworkOnlyWalletProvider(_ref) {\n  let {\n    children,\n    defaultNetwork\n  } = _ref;\n  const [controller] = useState(() => new ChromeExtensionController({\n    defaultNetwork,\n    enableWalletConnection: false,\n    dangerously__chromeExtensionCompatibleBrowserCheck: () => false\n  }));\n  const [network, setNetwork] = useState(defaultNetwork);\n  useEffect(() => {\n    const networkSubscription = controller.networkInfo().subscribe({\n      next: value => {\n        setNetwork(value);\n      }\n    });\n    return () => {\n      networkSubscription.unsubscribe();\n    };\n  }, [controller]);\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes: [],\n      availableInstallTypes: [],\n      availableConnections: [],\n      status: WalletStatus.WALLET_NOT_CONNECTED,\n      network,\n      wallets: [],\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error(\"<ExtensionNetworkOnlyWalletProvider> does not support post()\");\n      },\n      sign: () => {\n        throw new Error(\"<ExtensionNetworkOnlyWalletProvider> does not support sign()\");\n      },\n      recheckStatus: controller.recheckStatus,\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      }\n    };\n  }, [controller.recheckStatus, network]);\n  return _jsx(WalletContext.Provider, Object.assign({\n    value: state\n  }, {\n    children: children\n  }), void 0);\n}","map":{"version":3,"names":["WalletContext","WalletStatus","useEffect","useMemo","useState","ChromeExtensionController","ExtensionNetworkOnlyWalletProvider","_ref","children","defaultNetwork","controller","enableWalletConnection","dangerously__chromeExtensionCompatibleBrowserCheck","network","setNetwork","networkSubscription","networkInfo","subscribe","next","value","unsubscribe","state","availableConnectTypes","availableInstallTypes","availableConnections","status","WALLET_NOT_CONNECTED","wallets","install","Error","connect","connectReadonly","disconnect","post","sign","recheckStatus","isChromeExtensionCompatibleBrowser","_jsx","Provider","Object","assign"],"sources":["../../../../src/@terra-money/wallet-provider/react/ExtensionNetworkOnlyWalletProvider.tsx"],"sourcesContent":["import { Wallet, WalletContext, WalletStatus } from '@terra-dev/use-wallet';\nimport { NetworkInfo } from '@terra-dev/wallet-types';\nimport React, { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { ChromeExtensionController } from '../modules/chrome-extension';\n\nexport interface ExtensionNetworkOnlyWalletProviderProps {\n  children: ReactNode;\n  defaultNetwork: NetworkInfo;\n}\n\nexport function ExtensionNetworkOnlyWalletProvider({\n  children,\n  defaultNetwork,\n}: ExtensionNetworkOnlyWalletProviderProps) {\n  const [controller] = useState<ChromeExtensionController>(\n    () =>\n      new ChromeExtensionController({\n        defaultNetwork,\n        enableWalletConnection: false,\n        dangerously__chromeExtensionCompatibleBrowserCheck: () => false,\n      }),\n  );\n\n  const [network, setNetwork] = useState<NetworkInfo>(defaultNetwork);\n\n  useEffect(() => {\n    const networkSubscription = controller.networkInfo().subscribe({\n      next: (value) => {\n        setNetwork(value);\n      },\n    });\n\n    return () => {\n      networkSubscription.unsubscribe();\n    };\n  }, [controller]);\n\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes: [],\n      availableInstallTypes: [],\n      availableConnections: [],\n      status: WalletStatus.WALLET_NOT_CONNECTED,\n      network,\n      wallets: [],\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error(\n          `<ExtensionNetworkOnlyWalletProvider> does not support post()`,\n        );\n      },\n      sign: () => {\n        throw new Error(\n          `<ExtensionNetworkOnlyWalletProvider> does not support sign()`,\n        );\n      },\n      recheckStatus: controller.recheckStatus,\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n    };\n  }, [controller.recheckStatus, network]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"mappings":";AAAA,SAAiBA,aAAa,EAAEC,YAAY,QAAQ,uBAAuB;AAE3E,SAA2BC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,yBAAyB,QAAQ,6BAA6B;AAOvE,OAAM,SAAUC,kCAAkCA,CAAAC,IAAA,EAGR;EAAA,IAHS;IACjDC,QAAQ;IACRC;EAAc,CAC0B,GAAAF,IAAA;EACxC,MAAM,CAACG,UAAU,CAAC,GAAGN,QAAQ,CAC3B,MACE,IAAIC,yBAAyB,CAAC;IAC5BI,cAAc;IACdE,sBAAsB,EAAE,KAAK;IAC7BC,kDAAkD,EAAEA,CAAA,KAAM;GAC3D,CAAC,CACL;EAED,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAcK,cAAc,CAAC;EAEnEP,SAAS,CAAC,MAAK;IACb,MAAMa,mBAAmB,GAAGL,UAAU,CAACM,WAAW,EAAE,CAACC,SAAS,CAAC;MAC7DC,IAAI,EAAGC,KAAK,IAAI;QACdL,UAAU,CAACK,KAAK,CAAC;MACnB;KACD,CAAC;IAEF,OAAO,MAAK;MACVJ,mBAAmB,CAACK,WAAW,EAAE;IACnC,CAAC;EACH,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC;EAEhB,MAAMW,KAAK,GAAGlB,OAAO,CAAS,MAAK;IACjC,OAAO;MACLmB,qBAAqB,EAAE,EAAE;MACzBC,qBAAqB,EAAE,EAAE;MACzBC,oBAAoB,EAAE,EAAE;MACxBC,MAAM,EAAExB,YAAY,CAACyB,oBAAoB;MACzCb,OAAO;MACPc,OAAO,EAAE,EAAE;MACXC,OAAO,EAAEA,CAAA,KAAK;QACZ,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDC,OAAO,EAAEA,CAAA,KAAK;QACZ,MAAM,IAAID,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDE,eAAe,EAAEA,CAAA,KAAK;QACpB,MAAM,IAAIF,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDG,UAAU,EAAEA,CAAA,KAAK;QACf,MAAM,IAAIH,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDI,IAAI,EAAEA,CAAA,KAAK;QACT,MAAM,IAAIJ,KAAK,+DACiD,CAC/D;MACH,CAAC;MACDK,IAAI,EAAEA,CAAA,KAAK;QACT,MAAM,IAAIL,KAAK,+DACiD,CAC/D;MACH,CAAC;MACDM,aAAa,EAAEzB,UAAU,CAACyB,aAAa;MACvCC,kCAAkC,EAAEA,CAAA,KAAK;QACvC,MAAM,IAAIP,KAAK,CAAC,kBAAkB,CAAC;MACrC;KACD;EACH,CAAC,EAAE,CAACnB,UAAU,CAACyB,aAAa,EAAEtB,OAAO,CAAC,CAAC;EAEvC,OACEwB,IAAA,CAACrC,aAAa,CAACsC,QAAQ,EAAAC,MAAA,CAAAC,MAAA;IAACrB,KAAK,EAAEE;EAAK;IAAAb,QAAA,EAAGA;EAAQ,WAA0B;AAE7E"},"metadata":{},"sourceType":"module","externalDependencies":[]}