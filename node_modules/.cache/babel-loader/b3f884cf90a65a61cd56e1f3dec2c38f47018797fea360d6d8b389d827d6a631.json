{"ast":null,"code":"import { useDispatch, useSelector } from 'react-redux';\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { getWeb3 } from '../../utils/tools/web3UtilsV2';\nimport config from '../../config';\nimport { ChainId } from \"../../config/chainConfig/chainId\";\nimport { BigAmount } from '../../utils/formatBignumber';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { xlmAddress, balanceList } from './actions';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nconst StellarSdk = require('stellar-sdk');\nconst NOT_APPLICABLE = {};\nexport function formatXlmMemo(address, chainId) {\n  if (!address || !chainId) return '';\n  const web3 = getWeb3();\n  const totalLength = 64;\n  const addressToBytes = web3.utils.hexToBytes(address);\n  const addressBytesLength = addressToBytes.length;\n  const addressBytesStr = Buffer.from([addressBytesLength]).toString('hex');\n  const addressHexStr = address.replace('0x', '');\n  const addressLength = addressHexStr.length;\n  const chainIdToHex = web3.utils.numberToHex(chainId);\n  const chainIdHexStr = chainIdToHex.replace('0x', '');\n  const chainIdLength = chainIdHexStr.length;\n  const differLength = totalLength - addressLength - chainIdLength - addressBytesStr.length;\n  const zeroArr = [];\n  for (let i = 0; i < differLength; i++) {\n    zeroArr.push(0);\n  }\n  const zreoStr = zeroArr.join('');\n  return addressBytesStr + addressHexStr + zreoStr + chainIdHexStr;\n}\n\n// function HexString2Bytes(str:any) {\n//   var pos = 0;\n//   var len = str.length;\n//   if (len % 2 != 0) {\n//     return null;\n//   }\n//   len /= 2;\n//   var arrBytes = new Array();\n//   for (var i = 0; i < len; i++) {\n//     var s = str.substr(pos, 2);\n//     var v = intToByte(parseInt(s, 16));\n//     arrBytes.push(v);\n//     pos += 2;\n//   }\n//   return arrBytes;\n// }\n// export function formatXlmMemo (address:any, chainId:any) {\n//   if (!address || !chainId) return ''\n//   const web3 = getWeb3()\n//   const totalLength = 64\n\n//   const addressToBytes = web3.utils.hexToBytes(address)\n//   // const addressToBytes = Buffer.from(address)\n//   const addressLength = addressToBytes.length\n\n//   const chainIdToHex = web3.utils.numberToHex(chainId)\n//   // console.log(chainIdToHex)\n//   const chainIdToBytes = web3.utils.hexToBytes(chainIdToHex)\n//   // const chainIdToBytes = Buffer.from(chainId + '')\n//   const chainIdLength = chainIdToBytes.length\n\n//   // console.log(chainIdToBytes)\n//   // console.log(chainIdToBytes.toString('hex'))\n//   console.log('addressLength', addressLength)\n//   // console.log(chainIdLength)\n//   const differLength = totalLength - 1 - addressLength - chainIdLength\n//   const differLength1 = totalLength - 1 - addressLength\n\n//   const zeroArr = []\n//   for (let i = 0; i < differLength; i++) {\n//     zeroArr.push(0)\n//   }\n//   const resultArr = [addressLength, ...addressToBytes, ...zeroArr, ...chainIdToBytes]\n//   console.log('differLength1', differLength1)\n//   console.log('differLength', differLength)\n//   console.log(web3.utils.padLeft(chainIdToHex, differLength1 + chainIdLength))\n//   console.log(Buffer.from([addressLength, ...addressToBytes]).toString('hex'))\n//   // console.log(Buffer.from(resultArr).toString('hex'))\n//   return Buffer.from(resultArr).toString('hex')\n// }\n\n// console.log(formatXlmMemo('0xC5107334A3Ae117E3DaD3570b419618C905Aa5eC', '5777'))\n// console.log(formatXlmMemo('0xC03033d8b833fF7ca08BF2A58C9BC9d711257249', '2000'))\n\nlet isOpenXlmWallet = 0;\nexport function useXlmAddress() {\n  const account = useSelector(state => state.xlm.xlmAddress);\n  // console.log(account)\n  return account;\n}\nexport function connectXlmWallet() {\n  const dispatch = useDispatch();\n  const account = useSelector(state => state.xlm.xlmAddress);\n  const loginXlm = useCallback(() => {\n    return new Promise(resolve => {\n      if (!isOpenXlmWallet) {\n        var _window, _window$freighterApi;\n        isOpenXlmWallet = 1;\n        if ((_window = window) === null || _window === void 0 ? void 0 : (_window$freighterApi = _window.freighterApi) === null || _window$freighterApi === void 0 ? void 0 : _window$freighterApi.isConnected()) {\n          var _window2, _window2$freighterApi;\n          (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$freighterApi = _window2.freighterApi) === null || _window2$freighterApi === void 0 ? void 0 : _window2$freighterApi.getPublicKey().then(res => {\n            // console.log(res)\n            dispatch(xlmAddress({\n              address: res\n            }));\n            isOpenXlmWallet = 0;\n            resolve(res);\n          }).catch(() => {\n            isOpenXlmWallet = 0;\n            resolve('');\n          });\n        } else {\n          // setAddress('')\n          if (confirm('Please install Freighter Wallet.') === true) {\n            window.open('https://chrome.google.com/webstore/detail/freighter/bcacfldlkkdogcmkkibnjlakofdplcbk');\n          }\n          isOpenXlmWallet = 0;\n          resolve('');\n        }\n      }\n    });\n  }, [isOpenXlmWallet]);\n  return {\n    loginXlm,\n    xlmAddress: account\n  };\n}\nexport function useXlmBalance() {\n  const {\n    xlmAddress\n  } = connectXlmWallet();\n  const dispatch = useDispatch();\n  const balanceListResult = useSelector(state => state.xlm.balanceList);\n  const TimeKey = 'timestamp';\n  const getAllBalance = useCallback((chainId, account) => {\n    return new Promise(resolve => {\n      const useAccount = account ? account : xlmAddress;\n      if ([ChainId.XLM, ChainId.XLM_TEST].includes(chainId) && useAccount) {\n        // console.log(useAccount)\n        if (balanceListResult && balanceListResult[TimeKey] && Date.now() - balanceListResult[TimeKey] < 5000) {\n          resolve(balanceListResult);\n        } else {\n          const url = \"\".concat(config.chainInfo[chainId].nodeRpc, \"/accounts/\").concat(useAccount);\n          fetch(url).then(res => res.json()).then(json => {\n            // console.log(json)\n            const res = json;\n            const list = {\n              [TimeKey]: Date.now()\n            };\n            for (const obj of res.balances) {\n              let token = obj.asset_code + '/' + obj.asset_issuer;\n              if (obj.asset_type === 'native') {\n                token = 'native';\n              } else if (obj.asset_code && obj.asset_issuer) {\n                token = obj.asset_code + '/' + obj.asset_issuer;\n              }\n              list[token] = {\n                balance: obj.balance,\n                limit: obj.limit\n              };\n            }\n            // console.log(list)\n            dispatch(balanceList({\n              list\n            }));\n            resolve(list);\n          }).catch(err => {\n            console.log(err);\n            resolve('');\n          });\n        }\n      } else {\n        resolve('');\n      }\n    });\n  }, [xlmAddress, balanceListResult]);\n  return {\n    getAllBalance\n  };\n}\nexport function updateXlmHash(hash, chainId) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const url = config.chainInfo[chainId].nodeRpc;\n    fetch(\"\".concat(url, \"/transactions/\").concat(hash)).then(res => res.json()).then(json => {\n      // console.log(json)\n      if (json) {\n        if (json.successful) {\n          data.msg = 'Success';\n          data.info = json;\n        } else {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        }\n      } else {\n        data.msg = 'Null';\n        data.error = 'Query is empty!';\n      }\n      resolve(data);\n    }).catch(err => {\n      console.log(err.toString());\n      data.error = 'Query is empty!';\n      resolve(data);\n    });\n  });\n}\nexport function useTrustlines() {\n  const {\n    loginXlm\n  } = connectXlmWallet();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const setTrustlines = useCallback(async (chainId, receiveAddress, typedValue, destConfig) => {\n    try {\n      const url = config.chainInfo[chainId].nodeRpc;\n      console.log(url);\n      console.log(receiveAddress);\n      console.log(typedValue);\n      const xlmAddress = await loginXlm();\n      if (xlmAddress) {\n        console.log(xlmAddress);\n        const server = new StellarSdk.Server(url);\n        console.log(server);\n        const account = await server.loadAccount(xlmAddress);\n        console.log(account);\n        const fee = await server.fetchBaseFee();\n        const network = await window.freighterApi.getNetwork();\n        const tokenArr = destConfig.address.split('/');\n        const asset = new StellarSdk.Asset(tokenArr[0], tokenArr[1]);\n        const transaction = new StellarSdk.TransactionBuilder(account, {\n          fee,\n          networkPassphrase: chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET\n        }).addOperation(StellarSdk.Operation.changeTrust({\n          // asset: StellarSdk.Asset.native(),\n          // destination: receiveAddress,\n          asset: asset,\n          amount: typedValue\n        })).setTimeout(30).build();\n        console.log(transaction);\n        console.log(transaction.toXDR());\n        const signedTransaction = await window.freighterApi.signTransaction(transaction.toXDR(), network);\n        console.log(signedTransaction);\n        // const transaction = new Transaction(transactionXDR, networkPassphrase)\n        const tx = StellarSdk.TransactionBuilder.fromXDR(signedTransaction, chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET);\n        const txReceipt = await server.submitTransaction(tx);\n        alert('Set Trustlines Success, hash: ' + (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash));\n      } else {\n        alert('Set Trustlines Error, please set trustlines in your wallet.');\n      }\n    } catch (error) {\n      console.error(error);\n      onChangeViewErrorTip('Txns failure.', true);\n    }\n  }, []);\n  return {\n    setTrustlines\n  };\n}\nexport function useXlmCrossChain(chainId, selectCurrency, selectChain, receiveAddress, receiveXlmAddress, typedValue, destConfig, useToChainId) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    xlmAddress\n  } = connectXlmWallet();\n  const url = [ChainId.XLM, ChainId.XLM_TEST].includes(chainId) ? config.chainInfo[chainId].nodeRpc : '';\n  const server = url ? new StellarSdk.Server(url) : '';\n  const {\n    getAllBalance\n  } = useXlmBalance();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const addTransaction = useTransactionAdder();\n  const [balance, setBalance] = useState();\n  useEffect(() => {\n    getAllBalance(chainId, xlmAddress).then(res => {\n      var _res$token;\n      // console.log(res)\n      const token = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address;\n      const dec = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals;\n      // console.log(token)\n      // console.log(res?.[token]?.balance)\n      if (res === null || res === void 0 ? void 0 : (_res$token = res[token]) === null || _res$token === void 0 ? void 0 : _res$token.balance) {\n        var _res$token2;\n        const blvalue = tryParseAmount3(res === null || res === void 0 ? void 0 : (_res$token2 = res[token]) === null || _res$token2 === void 0 ? void 0 : _res$token2.balance, dec);\n        const bl = res ? BigAmount.format(dec, blvalue) : undefined;\n        setBalance(bl);\n      } else {\n        setBalance(0);\n      }\n    });\n  }, [selectCurrency, xlmAddress, chainId]);\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [typedValue, selectCurrency]);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n  } catch (error) {\n    console.log(error);\n  }\n  // const receiveAddress = '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249'\n  // const receiveXlmAddress = 'GC2YB64P5VXJQATUZN7UJOEINHROOIRJLYW3F6Q3AARZJ55UVGHUZRSL'\n  return useMemo(() => {\n    if (!xlmAddress || !chainId || !selectCurrency || !receiveXlmAddress || !server || !useToChainId) return NOT_APPLICABLE;\n    return {\n      balance,\n      execute: async () => {\n        try {\n          const account = await server.loadAccount(xlmAddress);\n          console.log(account);\n          const fee = await server.fetchBaseFee();\n          const network = await window.freighterApi.getNetwork();\n          console.log(fee);\n          let asset = StellarSdk.Asset.native();\n          if (selectCurrency.tokenType === 'NATIVE' || selectCurrency.address === 'native') {\n            asset = StellarSdk.Asset.native();\n          } else {\n            const tokenArr = selectCurrency.address.split('/');\n            asset = new StellarSdk.Asset(tokenArr[0], tokenArr[1]);\n          }\n          console.log(asset);\n          const memo = formatXlmMemo(receiveAddress, useToChainId);\n          console.log(memo);\n          const transaction = new StellarSdk.TransactionBuilder(account, {\n            fee,\n            networkPassphrase: chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET\n          }).addOperation(\n          // this operation funds the new account with XLM\n          StellarSdk.Operation.payment({\n            destination: receiveXlmAddress,\n            asset: asset,\n            amount: typedValue\n          })).setTimeout(30).addMemo(StellarSdk.Memo.hash(memo)).build();\n          console.log(transaction);\n          console.log(transaction.toXDR());\n          // console.log(window.freighterApi)\n          // console.log(network)\n          const signedTransaction = await window.freighterApi.signTransaction(\n          // const signedTransaction = await signTransaction(\n          transaction.toXDR(), network);\n          console.log(signedTransaction);\n          // const transaction = new Transaction(transactionXDR, networkPassphrase)\n          const tx = StellarSdk.TransactionBuilder.fromXDR(signedTransaction, chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET);\n          const txReceipt = await server.submitTransaction(tx);\n          console.log(txReceipt);\n          if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n            const data = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: xlmAddress,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              routerToken: receiveXlmAddress\n            };\n            addTransaction(txReceipt, {\n              summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: 'swapin',\n              routerToken: receiveXlmAddress,\n              token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n              logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n              isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n              },\n              toInfo: {\n                symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n              }\n            });\n            recordsTxns(data);\n            onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n          }\n        } catch (err) {\n          console.error(err);\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [xlmAddress, chainId, selectCurrency, selectChain, balance, receiveAddress, receiveXlmAddress, typedValue, destConfig, server, useToChainId]);\n}","map":{"version":3,"names":["useDispatch","useSelector","useCallback","useEffect","useMemo","useState","useTranslation","getWeb3","config","ChainId","BigAmount","tryParseAmount3","xlmAddress","balanceList","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","StellarSdk","require","NOT_APPLICABLE","formatXlmMemo","address","chainId","web3","totalLength","addressToBytes","utils","hexToBytes","addressBytesLength","length","addressBytesStr","Buffer","from","toString","addressHexStr","replace","addressLength","chainIdToHex","numberToHex","chainIdHexStr","chainIdLength","differLength","zeroArr","i","push","zreoStr","join","isOpenXlmWallet","useXlmAddress","account","state","xlm","connectXlmWallet","dispatch","loginXlm","Promise","resolve","_window","_window$freighterApi","window","freighterApi","isConnected","_window2","_window2$freighterApi","getPublicKey","then","res","catch","confirm","open","useXlmBalance","balanceListResult","TimeKey","getAllBalance","useAccount","XLM","XLM_TEST","includes","Date","now","url","concat","chainInfo","nodeRpc","fetch","json","list","obj","balances","token","asset_code","asset_issuer","asset_type","balance","limit","err","console","log","updateXlmHash","hash","data","msg","info","successful","error","useTrustlines","onChangeViewErrorTip","setTrustlines","receiveAddress","typedValue","destConfig","server","Server","loadAccount","fee","fetchBaseFee","network","getNetwork","tokenArr","split","asset","Asset","transaction","TransactionBuilder","networkPassphrase","Networks","PUBLIC","TESTNET","addOperation","Operation","changeTrust","amount","setTimeout","build","toXDR","signedTransaction","signTransaction","tx","fromXDR","txReceipt","submitTransaction","alert","useXlmCrossChain","selectCurrency","selectChain","receiveXlmAddress","useToChainId","t","onChangeViewDtil","addTransaction","setBalance","_res$token","dec","decimals","_res$token2","blvalue","bl","format","undefined","inputAmount","sufficientBalance","Number","toExact","execute","native","tokenType","memo","payment","destination","addMemo","Memo","value","formatvalue","to","symbol","version","type","pairid","routerToken","summary","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/stellar/index.ts"],"sourcesContent":["\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {getWeb3} from '../../utils/tools/web3UtilsV2'\nimport config from '../../config'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\nimport { AppState, AppDispatch } from '../../state'\n\nimport { BigAmount } from '../../utils/formatBignumber'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {xlmAddress, balanceList} from './actions'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\n\nconst StellarSdk = require('stellar-sdk')\nconst NOT_APPLICABLE = { }\n\nexport function formatXlmMemo (address:any, chainId:any) {\n  if (!address || !chainId) return ''\n  const web3 = getWeb3()\n  const totalLength = 64\n\n  const addressToBytes = web3.utils.hexToBytes(address)\n  const addressBytesLength = addressToBytes.length\n  const addressBytesStr = Buffer.from([addressBytesLength]).toString('hex')\n\n  const addressHexStr = address.replace('0x', '')\n  const addressLength = addressHexStr.length\n\n  const chainIdToHex = web3.utils.numberToHex(chainId)\n  const chainIdHexStr = chainIdToHex.replace('0x', '')\n  const chainIdLength = chainIdHexStr.length\n\n  const differLength = totalLength - addressLength - chainIdLength - addressBytesStr.length\n\n  const zeroArr = []\n  for (let i = 0; i < differLength; i++) {\n    zeroArr.push(0)\n  }\n  const zreoStr = zeroArr.join('')\n  return addressBytesStr + addressHexStr + zreoStr + chainIdHexStr\n}\n\n// function HexString2Bytes(str:any) {\n//   var pos = 0;\n//   var len = str.length;\n//   if (len % 2 != 0) {\n//     return null;\n//   }\n//   len /= 2;\n//   var arrBytes = new Array();\n//   for (var i = 0; i < len; i++) {\n//     var s = str.substr(pos, 2);\n//     var v = intToByte(parseInt(s, 16));\n//     arrBytes.push(v);\n//     pos += 2;\n//   }\n//   return arrBytes;\n// }\n// export function formatXlmMemo (address:any, chainId:any) {\n//   if (!address || !chainId) return ''\n//   const web3 = getWeb3()\n//   const totalLength = 64\n\n//   const addressToBytes = web3.utils.hexToBytes(address)\n//   // const addressToBytes = Buffer.from(address)\n//   const addressLength = addressToBytes.length\n\n//   const chainIdToHex = web3.utils.numberToHex(chainId)\n//   // console.log(chainIdToHex)\n//   const chainIdToBytes = web3.utils.hexToBytes(chainIdToHex)\n//   // const chainIdToBytes = Buffer.from(chainId + '')\n//   const chainIdLength = chainIdToBytes.length\n  \n//   // console.log(chainIdToBytes)\n//   // console.log(chainIdToBytes.toString('hex'))\n//   console.log('addressLength', addressLength)\n//   // console.log(chainIdLength)\n//   const differLength = totalLength - 1 - addressLength - chainIdLength\n//   const differLength1 = totalLength - 1 - addressLength\n  \n//   const zeroArr = []\n//   for (let i = 0; i < differLength; i++) {\n//     zeroArr.push(0)\n//   }\n//   const resultArr = [addressLength, ...addressToBytes, ...zeroArr, ...chainIdToBytes]\n//   console.log('differLength1', differLength1)\n//   console.log('differLength', differLength)\n//   console.log(web3.utils.padLeft(chainIdToHex, differLength1 + chainIdLength))\n//   console.log(Buffer.from([addressLength, ...addressToBytes]).toString('hex'))\n//   // console.log(Buffer.from(resultArr).toString('hex'))\n//   return Buffer.from(resultArr).toString('hex')\n// }\n\n// console.log(formatXlmMemo('0xC5107334A3Ae117E3DaD3570b419618C905Aa5eC', '5777'))\n// console.log(formatXlmMemo('0xC03033d8b833fF7ca08BF2A58C9BC9d711257249', '2000'))\n\nlet isOpenXlmWallet = 0\n\nexport function useXlmAddress () {\n  const account:any = useSelector<AppState, AppState['xlm']>(state => state.xlm.xlmAddress)\n  // console.log(account)\n  return account\n}\n\nexport function connectXlmWallet () {\n  const dispatch = useDispatch<AppDispatch>()\n  const account:any = useSelector<AppState, AppState['xlm']>(state => state.xlm.xlmAddress)\n  \n  const loginXlm = useCallback(() => {\n    return new Promise(resolve => {\n      if (!isOpenXlmWallet) {\n        isOpenXlmWallet = 1\n        if (window?.freighterApi?.isConnected()) {\n          window?.freighterApi?.getPublicKey().then((res:any) => {\n            // console.log(res)\n            dispatch(xlmAddress({address: res}))\n            isOpenXlmWallet = 0\n            resolve(res)\n          }).catch(() => {\n            isOpenXlmWallet = 0\n            resolve('')\n          })\n        } else {\n          // setAddress('')\n          if (confirm('Please install Freighter Wallet.') === true) {\n            window.open('https://chrome.google.com/webstore/detail/freighter/bcacfldlkkdogcmkkibnjlakofdplcbk')\n          }\n          isOpenXlmWallet = 0\n          resolve('')\n        }\n      }\n    })\n  }, [isOpenXlmWallet])\n  \n  return {\n    loginXlm,\n    xlmAddress: account\n  }\n}\n\nexport function useXlmBalance () {\n  const {xlmAddress} = connectXlmWallet()\n  const dispatch = useDispatch<AppDispatch>()\n  const balanceListResult:any = useSelector<AppState, AppState['xlm']>(state => state.xlm.balanceList)\n  const TimeKey = 'timestamp'\n  const getAllBalance = useCallback((chainId:any, account?:any) => {\n    return new Promise(resolve => {\n      const useAccount = account ? account : xlmAddress\n      if ([ChainId.XLM, ChainId.XLM_TEST].includes(chainId) && useAccount) {\n        // console.log(useAccount)\n        if (balanceListResult && balanceListResult[TimeKey] && Date.now() - balanceListResult[TimeKey] < 5000) {\n          resolve(balanceListResult)\n        } else {\n          const url = `${config.chainInfo[chainId].nodeRpc}/accounts/${useAccount}`\n          fetch(url).then(res => res.json()).then(json => {\n            // console.log(json)\n            const res = json\n            const list:any = {[TimeKey]: Date.now()}\n            for (const obj of res.balances) {\n              let token = obj.asset_code + '/' + obj.asset_issuer\n              if (obj.asset_type === 'native') {\n                token = 'native'\n              } else if (obj.asset_code && obj.asset_issuer) {\n                token = obj.asset_code + '/' + obj.asset_issuer\n              }\n              list[token] = {\n                balance: obj.balance,\n                limit: obj.limit\n              }\n            }\n            // console.log(list)\n            dispatch(balanceList({list}))\n            resolve(list)\n          }).catch((err) => {\n            console.log(err)\n            resolve('')\n          })\n        }\n      } else {\n        resolve('')\n      }\n    })\n  }, [xlmAddress, balanceListResult])\n\n  return {\n    getAllBalance\n  }\n}\n\n\nexport function updateXlmHash (hash:any, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const url = config.chainInfo[chainId].nodeRpc\n    fetch(`${url}/transactions/${hash}`).then(res => res.json()).then(json => {\n      // console.log(json)\n      if (json) {\n        if (json.successful) {\n          data.msg = 'Success'\n          data.info = json\n        } else {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      console.log(err.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    })\n  })\n}\n\nexport function useTrustlines() {\n  const {loginXlm} = connectXlmWallet()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  \n  const setTrustlines = useCallback(async(chainId, receiveAddress, typedValue, destConfig) => {\n    try {\n      const url = config.chainInfo[chainId].nodeRpc\n      console.log(url)\n      console.log(receiveAddress)\n      console.log(typedValue)\n      const xlmAddress = await loginXlm()\n      if (xlmAddress) {\n        console.log(xlmAddress)\n        const server = new StellarSdk.Server(url)\n        console.log(server)\n        const account = await server.loadAccount(xlmAddress)\n        console.log(account)\n        const fee = await server.fetchBaseFee();\n        const network = await window.freighterApi.getNetwork()\n        const tokenArr = destConfig.address.split('/')\n        const asset = new StellarSdk.Asset(tokenArr[0], tokenArr[1])\n        \n        const transaction = new StellarSdk.TransactionBuilder(account, { fee, networkPassphrase: chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET })\n        .addOperation(StellarSdk.Operation.changeTrust({\n          // asset: StellarSdk.Asset.native(),\n          // destination: receiveAddress,\n          asset: asset,\n          amount: typedValue\n        }))\n        .setTimeout(30)\n        .build();\n        console.log(transaction)\n        console.log(transaction.toXDR())\n        const signedTransaction = await window.freighterApi.signTransaction(\n          transaction.toXDR(),\n          network,\n        )\n        console.log(signedTransaction)\n        // const transaction = new Transaction(transactionXDR, networkPassphrase)\n        const tx = StellarSdk.TransactionBuilder.fromXDR(signedTransaction, chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET)\n        const txReceipt = await server.submitTransaction(tx);\n        alert('Set Trustlines Success, hash: ' + txReceipt?.hash)\n      } else {\n        alert('Set Trustlines Error, please set trustlines in your wallet.')\n      }\n    } catch (error) {\n      console.error(error);\n      onChangeViewErrorTip('Txns failure.', true)\n    }\n  }, [])\n\n  return {\n    setTrustlines\n  }\n}\n\nexport function useXlmCrossChain (\n  chainId:any,\n  selectCurrency:any,\n  selectChain:any,\n  receiveAddress:any,\n  receiveXlmAddress:any,\n  typedValue:any,\n  destConfig:any,\n  useToChainId:any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { t } = useTranslation()\n  const {xlmAddress} = connectXlmWallet()\n  const url = [ChainId.XLM, ChainId.XLM_TEST].includes(chainId) ? config.chainInfo[chainId].nodeRpc : ''\n  const server = url ? new StellarSdk.Server(url) : ''\n  const {getAllBalance} = useXlmBalance()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const [balance, setBalance] = useState<any>()\n\n  useEffect(() => {\n    getAllBalance(chainId, xlmAddress).then((res:any) => {\n      // console.log(res)\n      const token = selectCurrency?.address\n      const dec = selectCurrency?.decimals\n      // console.log(token)\n      // console.log(res?.[token]?.balance)\n      if (res?.[token]?.balance) {\n        const blvalue = tryParseAmount3(res?.[token]?.balance, dec)\n        const bl = res ? BigAmount.format(dec, blvalue) : undefined\n        setBalance(bl)\n      } else {\n        setBalance(0)\n      }\n    })\n  }, [selectCurrency, xlmAddress, chainId])\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  let sufficientBalance = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n  // const receiveAddress = '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249'\n  // const receiveXlmAddress = 'GC2YB64P5VXJQATUZN7UJOEINHROOIRJLYW3F6Q3AARZJ55UVGHUZRSL'\n  return useMemo(() => {\n    if (!xlmAddress || !chainId || !selectCurrency || !receiveXlmAddress || !server || !useToChainId) return NOT_APPLICABLE\n    return {\n      balance,\n      execute: async () => {\n        try {\n          const account = await server.loadAccount(xlmAddress)\n          console.log(account)\n          const fee = await server.fetchBaseFee();\n          const network = await window.freighterApi.getNetwork()\n          console.log(fee)\n          let asset = StellarSdk.Asset.native()\n          if (selectCurrency.tokenType === 'NATIVE' || selectCurrency.address === 'native') {\n            asset = StellarSdk.Asset.native()\n          } else {\n            const tokenArr = selectCurrency.address.split('/')\n            asset = new StellarSdk.Asset(tokenArr[0], tokenArr[1])\n          }\n          console.log(asset)\n          const memo = formatXlmMemo(receiveAddress, useToChainId)\n          console.log(memo)\n          const transaction = new StellarSdk.TransactionBuilder(account, { fee, networkPassphrase: chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET })\n          .addOperation(\n              // this operation funds the new account with XLM\n              StellarSdk.Operation.payment({\n                  destination: receiveXlmAddress,\n                  asset: asset,\n                  amount: typedValue\n              })\n          )\n          .setTimeout(30)\n          .addMemo(StellarSdk.Memo.hash(memo))\n          .build();\n          console.log(transaction)\n          console.log(transaction.toXDR())\n          // console.log(window.freighterApi)\n          // console.log(network)\n          const signedTransaction = await window.freighterApi.signTransaction(\n          // const signedTransaction = await signTransaction(\n            transaction.toXDR(),\n            network,\n          )\n          console.log(signedTransaction)\n          // const transaction = new Transaction(transactionXDR, networkPassphrase)\n          const tx = StellarSdk.TransactionBuilder.fromXDR(signedTransaction, chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET)\n        \n          const txReceipt = await server.submitTransaction(tx);\n          console.log(txReceipt);\n\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: xlmAddress,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: receiveXlmAddress\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: 'swapin',\n              routerToken: receiveXlmAddress,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (err) {\n          console.error(err);\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [xlmAddress, chainId, selectCurrency, selectChain, balance, receiveAddress, receiveXlmAddress, typedValue, destConfig, server, useToChainId])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}