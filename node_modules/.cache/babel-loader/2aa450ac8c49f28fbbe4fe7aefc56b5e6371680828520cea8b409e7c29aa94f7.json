{"ast":null,"code":"\"use strict\";\n\nvar extend = require(\"extend\");\nvar http = require(\"./libs/http\");\nvar config = require(\"./libs/config\");\nvar Pay = require(\"./libs/pay\");\nvar BigNumber = require(\"bignumber.js\");\nvar NAS = \"NAS\";\nvar NebPay = function (appKey, appSecret) {\n  this._pay = new Pay(appKey, appSecret);\n};\nNebPay.config = config;\nvar defaultOptions = function () {\n  return {\n    goods: {\n      name: \"\",\n      desc: \"\",\n      orderId: \"\",\n      ext: \"\"\n    },\n    qrcode: {\n      showQRCode: false,\n      completeTip: undefined,\n      // string of complete payment tip\n      cancelTip: undefined,\n      // string of cancel payment tip\n      container: undefined\n    },\n    extension: {\n      openExtension: true //set if need show extension payment mode\n    },\n\n    mobile: {\n      showInstallTip: true,\n      installTip: undefined // string of install NASNano tip\n    },\n\n    // callback is the return url after payment\n    //callback: config.payUrl,\n    callback: undefined,\n    //listener：specify a listener function to handle payment feedback message(only valid for browser extension)\n    listener: undefined,\n    // if use nrc20pay ,should input nrc20 params like address, name, symbol, decimals\n    nrc20: undefined,\n    // if debug mode, should open testnet nano and reset the callback\n    debug: false,\n    gasPrice: 20000000000,\n    gasLimit: 2000000\n  };\n};\nNebPay.prototype = {\n  pay: function (to, value, options) {\n    var payload = {\n      type: \"binary\"\n    };\n    options = extend(defaultOptions(), options);\n    return this._pay.submit(NAS, to, value, payload, options);\n  },\n  nrc20pay: function (currency, to, value, options) {\n    if (options.nrc20 && options.nrc20.decimals > 0) {\n      value = value || \"0\";\n      value = new BigNumber(value).times(new BigNumber(10).pow(options.nrc20.decimals)).toString(10);\n    }\n    var address = \"\";\n    if (options.nrc20 && options.nrc20.address) {\n      address = options.nrc20.address;\n    }\n    var args = [to, value];\n    var payload = {\n      type: \"call\",\n      function: \"transfer\",\n      args: JSON.stringify(args)\n    };\n    options = extend(defaultOptions(), options);\n    return this._pay.submit(currency, address, \"0\", payload, options);\n  },\n  deploy: function (source, sourceType, args, options) {\n    var payload = {\n      type: \"deploy\",\n      source: source,\n      sourceType: sourceType,\n      args: args\n    };\n    options = extend(defaultOptions(), options);\n    return this._pay.submit(NAS, \"\", \"0\", payload, options);\n  },\n  call: function (to, value, func, args, options) {\n    var payload = {\n      type: \"call\",\n      function: func,\n      args: args\n    };\n    options = extend(defaultOptions(), options);\n    return this._pay.submit(NAS, to, value, payload, options);\n  },\n  simulateCall: function (to, value, func, args, options) {\n    //this API will not be supported in the future\n    var payload = {\n      type: \"simulateCall\",\n      function: func,\n      args: args\n    };\n    options = extend(defaultOptions(), options);\n    options.qrcode.showQRCode = false;\n    options.mobile.showInstallTip = false;\n    options.extension.openExtension = true;\n    return this._pay.submit(NAS, to, value, payload, options);\n  },\n  queryPayInfo: function (serialNumber, options) {\n    options = extend(defaultOptions(), options);\n    var url = options.callback || config.payUrl(options.debug);\n    url = url + \"/query?payId=\" + serialNumber;\n    return http.get(url);\n  }\n};\nmodule.exports = NebPay;","map":{"version":3,"names":["extend","require","http","config","Pay","BigNumber","NAS","NebPay","appKey","appSecret","_pay","defaultOptions","goods","name","desc","orderId","ext","qrcode","showQRCode","completeTip","undefined","cancelTip","container","extension","openExtension","mobile","showInstallTip","installTip","callback","listener","nrc20","debug","gasPrice","gasLimit","prototype","pay","to","value","options","payload","type","submit","nrc20pay","currency","decimals","times","pow","toString","address","args","function","JSON","stringify","deploy","source","sourceType","call","func","simulateCall","queryPayInfo","serialNumber","url","payUrl","get","module","exports"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/nebpay.js/nebpay.js"],"sourcesContent":["\"use strict\";\n\nvar extend = require(\"extend\");\nvar http = require(\"./libs/http\");\nvar config = require(\"./libs/config\");\nvar Pay = require(\"./libs/pay\");\n\nvar BigNumber = require(\"bignumber.js\");\n\nvar NAS = \"NAS\";\n\nvar NebPay = function(appKey, appSecret) {\n    this._pay = new Pay(appKey, appSecret);\n};\n\nNebPay.config = config;\n\nvar defaultOptions = function() {\n    return {\n        goods: {\n            name: \"\",\n            desc: \"\",\n            orderId: \"\",\n            ext: \"\"\n        },\n        qrcode: {\n            showQRCode: false,\n            completeTip: undefined, // string of complete payment tip\n            cancelTip: undefined, // string of cancel payment tip\n            container: undefined\n        },\n        extension: {\n            openExtension: true //set if need show extension payment mode\n        },\n\n        mobile: {\n            showInstallTip: true,\n            installTip: undefined // string of install NASNano tip\n        },\n\n        // callback is the return url after payment\n        //callback: config.payUrl,\n        callback: undefined,\n\n        //listener：specify a listener function to handle payment feedback message(only valid for browser extension)\n        listener: undefined,\n\n        // if use nrc20pay ,should input nrc20 params like address, name, symbol, decimals\n        nrc20: undefined,\n\n        // if debug mode, should open testnet nano and reset the callback\n        debug: false,\n\n        gasPrice: 20000000000,\n        gasLimit: 2000000\n    };\n};\n\nNebPay.prototype = {\n    pay: function(to, value, options) {\n        var payload = {\n            type: \"binary\"\n        };\n        options = extend(defaultOptions(), options);\n        return this._pay.submit(NAS, to, value, payload, options);\n    },\n    nrc20pay: function(currency, to, value, options) {\n        if (options.nrc20 && options.nrc20.decimals > 0) {\n            value = value || \"0\";\n            value = new BigNumber(value).times(new BigNumber(10).pow(options.nrc20.decimals)).toString(10);\n        }\n        var address = \"\";\n        if (options.nrc20 && options.nrc20.address) {\n            address = options.nrc20.address;\n        }\n\n        var args = [to, value];\n        var payload = {\n            type: \"call\",\n            function: \"transfer\",\n            args: JSON.stringify(args)\n        };\n        options = extend(defaultOptions(), options);\n        return this._pay.submit(currency, address, \"0\", payload, options);\n    },\n    deploy: function(source, sourceType, args, options) {\n        var payload = {\n            type: \"deploy\",\n            source: source,\n            sourceType: sourceType,\n            args: args\n        };\n        options = extend(defaultOptions(), options);\n        return this._pay.submit(NAS, \"\", \"0\", payload, options);\n    },\n    call: function(to, value, func, args, options) {\n        var payload = {\n            type: \"call\",\n            function: func,\n            args: args\n        };\n        options = extend(defaultOptions(), options);\n        return this._pay.submit(NAS, to, value, payload, options);\n    },\n    simulateCall: function(to, value, func, args, options) {\n        //this API will not be supported in the future\n        var payload = {\n            type: \"simulateCall\",\n            function: func,\n            args: args\n        };\n        options = extend(defaultOptions(), options);\n        options.qrcode.showQRCode = false;\n        options.mobile.showInstallTip = false;\n        options.extension.openExtension = true;\n\n        return this._pay.submit(NAS, to, value, payload, options);\n    },\n    queryPayInfo: function(serialNumber, options) {\n        options = extend(defaultOptions(), options);\n        var url = options.callback || config.payUrl(options.debug);\n        url = url + \"/query?payId=\" + serialNumber;\n        return http.get(url);\n    }\n};\n\nmodule.exports = NebPay;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}