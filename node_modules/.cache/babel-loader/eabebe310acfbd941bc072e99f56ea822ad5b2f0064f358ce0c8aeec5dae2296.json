{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst convert = require('../converter');\nconst tools_1 = require('../converter/tools');\nfunction psbtToBuffer(_ref) {\n  let {\n    globalMap,\n    inputs,\n    outputs\n  } = _ref;\n  const {\n    globalKeyVals,\n    inputKeyVals,\n    outputKeyVals\n  } = psbtToKeyVals({\n    globalMap,\n    inputs,\n    outputs\n  });\n  const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);\n  const keyValsOrEmptyToBuffer = keyVals => keyVals.length === 0 ? [Buffer.from([0])] : keyVals.map(tools_1.keyValsToBuffer);\n  const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);\n  const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);\n  const header = Buffer.allocUnsafe(5);\n  header.writeUIntBE(0x70736274ff, 0, 5);\n  return Buffer.concat([header, globalBuffer].concat(inputBuffers, outputBuffers));\n}\nexports.psbtToBuffer = psbtToBuffer;\nconst sortKeyVals = (a, b) => {\n  return a.key.compare(b.key);\n};\nfunction keyValsFromMap(keyValMap, converterFactory) {\n  const keyHexSet = new Set();\n  const keyVals = Object.entries(keyValMap).reduce((result, _ref2) => {\n    let [key, value] = _ref2;\n    if (key === 'unknownKeyVals') return result;\n    // We are checking for undefined anyways. So ignore TS error\n    // @ts-ignore\n    const converter = converterFactory[key];\n    if (converter === undefined) return result;\n    const encodedKeyVals = (Array.isArray(value) ? value : [value]).map(converter.encode);\n    const keyHexes = encodedKeyVals.map(kv => kv.key.toString('hex'));\n    keyHexes.forEach(hex => {\n      if (keyHexSet.has(hex)) throw new Error('Serialize Error: Duplicate key: ' + hex);\n      keyHexSet.add(hex);\n    });\n    return result.concat(encodedKeyVals);\n  }, []);\n  // Get other keyVals that have not yet been gotten\n  const otherKeyVals = keyValMap.unknownKeyVals ? keyValMap.unknownKeyVals.filter(keyVal => {\n    return !keyHexSet.has(keyVal.key.toString('hex'));\n  }) : [];\n  return keyVals.concat(otherKeyVals).sort(sortKeyVals);\n}\nfunction psbtToKeyVals(_ref3) {\n  let {\n    globalMap,\n    inputs,\n    outputs\n  } = _ref3;\n  // First parse the global keyVals\n  // Get any extra keyvals to pass along\n  return {\n    globalKeyVals: keyValsFromMap(globalMap, convert.globals),\n    inputKeyVals: inputs.map(i => keyValsFromMap(i, convert.inputs)),\n    outputKeyVals: outputs.map(o => keyValsFromMap(o, convert.outputs))\n  };\n}\nexports.psbtToKeyVals = psbtToKeyVals;","map":{"version":3,"names":["Object","defineProperty","exports","value","convert","require","tools_1","psbtToBuffer","_ref","globalMap","inputs","outputs","globalKeyVals","inputKeyVals","outputKeyVals","psbtToKeyVals","globalBuffer","keyValsToBuffer","keyValsOrEmptyToBuffer","keyVals","length","Buffer","from","map","inputBuffers","outputBuffers","header","allocUnsafe","writeUIntBE","concat","sortKeyVals","a","b","key","compare","keyValsFromMap","keyValMap","converterFactory","keyHexSet","Set","entries","reduce","result","_ref2","converter","undefined","encodedKeyVals","Array","isArray","encode","keyHexes","kv","toString","forEach","hex","has","Error","add","otherKeyVals","unknownKeyVals","filter","keyVal","sort","_ref3","globals","i","o"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip174/src/lib/parser/toBuffer.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst convert = require('../converter');\nconst tools_1 = require('../converter/tools');\nfunction psbtToBuffer({ globalMap, inputs, outputs }) {\n  const { globalKeyVals, inputKeyVals, outputKeyVals } = psbtToKeyVals({\n    globalMap,\n    inputs,\n    outputs,\n  });\n  const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);\n  const keyValsOrEmptyToBuffer = keyVals =>\n    keyVals.length === 0\n      ? [Buffer.from([0])]\n      : keyVals.map(tools_1.keyValsToBuffer);\n  const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);\n  const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);\n  const header = Buffer.allocUnsafe(5);\n  header.writeUIntBE(0x70736274ff, 0, 5);\n  return Buffer.concat(\n    [header, globalBuffer].concat(inputBuffers, outputBuffers),\n  );\n}\nexports.psbtToBuffer = psbtToBuffer;\nconst sortKeyVals = (a, b) => {\n  return a.key.compare(b.key);\n};\nfunction keyValsFromMap(keyValMap, converterFactory) {\n  const keyHexSet = new Set();\n  const keyVals = Object.entries(keyValMap).reduce((result, [key, value]) => {\n    if (key === 'unknownKeyVals') return result;\n    // We are checking for undefined anyways. So ignore TS error\n    // @ts-ignore\n    const converter = converterFactory[key];\n    if (converter === undefined) return result;\n    const encodedKeyVals = (Array.isArray(value) ? value : [value]).map(\n      converter.encode,\n    );\n    const keyHexes = encodedKeyVals.map(kv => kv.key.toString('hex'));\n    keyHexes.forEach(hex => {\n      if (keyHexSet.has(hex))\n        throw new Error('Serialize Error: Duplicate key: ' + hex);\n      keyHexSet.add(hex);\n    });\n    return result.concat(encodedKeyVals);\n  }, []);\n  // Get other keyVals that have not yet been gotten\n  const otherKeyVals = keyValMap.unknownKeyVals\n    ? keyValMap.unknownKeyVals.filter(keyVal => {\n        return !keyHexSet.has(keyVal.key.toString('hex'));\n      })\n    : [];\n  return keyVals.concat(otherKeyVals).sort(sortKeyVals);\n}\nfunction psbtToKeyVals({ globalMap, inputs, outputs }) {\n  // First parse the global keyVals\n  // Get any extra keyvals to pass along\n  return {\n    globalKeyVals: keyValsFromMap(globalMap, convert.globals),\n    inputKeyVals: inputs.map(i => keyValsFromMap(i, convert.inputs)),\n    outputKeyVals: outputs.map(o => keyValsFromMap(o, convert.outputs)),\n  };\n}\nexports.psbtToKeyVals = psbtToKeyVals;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}