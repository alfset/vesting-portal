{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst typeFields_1 = require('../typeFields');\nconst globalXpub = require('./global/globalXpub');\nconst unsignedTx = require('./global/unsignedTx');\nconst finalScriptSig = require('./input/finalScriptSig');\nconst finalScriptWitness = require('./input/finalScriptWitness');\nconst nonWitnessUtxo = require('./input/nonWitnessUtxo');\nconst partialSig = require('./input/partialSig');\nconst porCommitment = require('./input/porCommitment');\nconst sighashType = require('./input/sighashType');\nconst tapKeySig = require('./input/tapKeySig');\nconst tapLeafScript = require('./input/tapLeafScript');\nconst tapMerkleRoot = require('./input/tapMerkleRoot');\nconst tapScriptSig = require('./input/tapScriptSig');\nconst witnessUtxo = require('./input/witnessUtxo');\nconst tapTree = require('./output/tapTree');\nconst bip32Derivation = require('./shared/bip32Derivation');\nconst checkPubkey = require('./shared/checkPubkey');\nconst redeemScript = require('./shared/redeemScript');\nconst tapBip32Derivation = require('./shared/tapBip32Derivation');\nconst tapInternalKey = require('./shared/tapInternalKey');\nconst witnessScript = require('./shared/witnessScript');\nconst globals = {\n  unsignedTx,\n  globalXpub,\n  // pass an Array of key bytes that require pubkey beside the key\n  checkPubkey: checkPubkey.makeChecker([])\n};\nexports.globals = globals;\nconst inputs = {\n  nonWitnessUtxo,\n  partialSig,\n  sighashType,\n  finalScriptSig,\n  finalScriptWitness,\n  porCommitment,\n  witnessUtxo,\n  bip32Derivation: bip32Derivation.makeConverter(typeFields_1.InputTypes.BIP32_DERIVATION),\n  redeemScript: redeemScript.makeConverter(typeFields_1.InputTypes.REDEEM_SCRIPT),\n  witnessScript: witnessScript.makeConverter(typeFields_1.InputTypes.WITNESS_SCRIPT),\n  checkPubkey: checkPubkey.makeChecker([typeFields_1.InputTypes.PARTIAL_SIG, typeFields_1.InputTypes.BIP32_DERIVATION]),\n  tapKeySig,\n  tapScriptSig,\n  tapLeafScript,\n  tapBip32Derivation: tapBip32Derivation.makeConverter(typeFields_1.InputTypes.TAP_BIP32_DERIVATION),\n  tapInternalKey: tapInternalKey.makeConverter(typeFields_1.InputTypes.TAP_INTERNAL_KEY),\n  tapMerkleRoot\n};\nexports.inputs = inputs;\nconst outputs = {\n  bip32Derivation: bip32Derivation.makeConverter(typeFields_1.OutputTypes.BIP32_DERIVATION),\n  redeemScript: redeemScript.makeConverter(typeFields_1.OutputTypes.REDEEM_SCRIPT),\n  witnessScript: witnessScript.makeConverter(typeFields_1.OutputTypes.WITNESS_SCRIPT),\n  checkPubkey: checkPubkey.makeChecker([typeFields_1.OutputTypes.BIP32_DERIVATION]),\n  tapBip32Derivation: tapBip32Derivation.makeConverter(typeFields_1.OutputTypes.TAP_BIP32_DERIVATION),\n  tapTree,\n  tapInternalKey: tapInternalKey.makeConverter(typeFields_1.OutputTypes.TAP_INTERNAL_KEY)\n};\nexports.outputs = outputs;","map":{"version":3,"names":["Object","defineProperty","exports","value","typeFields_1","require","globalXpub","unsignedTx","finalScriptSig","finalScriptWitness","nonWitnessUtxo","partialSig","porCommitment","sighashType","tapKeySig","tapLeafScript","tapMerkleRoot","tapScriptSig","witnessUtxo","tapTree","bip32Derivation","checkPubkey","redeemScript","tapBip32Derivation","tapInternalKey","witnessScript","globals","makeChecker","inputs","makeConverter","InputTypes","BIP32_DERIVATION","REDEEM_SCRIPT","WITNESS_SCRIPT","PARTIAL_SIG","TAP_BIP32_DERIVATION","TAP_INTERNAL_KEY","outputs","OutputTypes"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip174/src/lib/converter/index.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../typeFields');\nconst globalXpub = require('./global/globalXpub');\nconst unsignedTx = require('./global/unsignedTx');\nconst finalScriptSig = require('./input/finalScriptSig');\nconst finalScriptWitness = require('./input/finalScriptWitness');\nconst nonWitnessUtxo = require('./input/nonWitnessUtxo');\nconst partialSig = require('./input/partialSig');\nconst porCommitment = require('./input/porCommitment');\nconst sighashType = require('./input/sighashType');\nconst tapKeySig = require('./input/tapKeySig');\nconst tapLeafScript = require('./input/tapLeafScript');\nconst tapMerkleRoot = require('./input/tapMerkleRoot');\nconst tapScriptSig = require('./input/tapScriptSig');\nconst witnessUtxo = require('./input/witnessUtxo');\nconst tapTree = require('./output/tapTree');\nconst bip32Derivation = require('./shared/bip32Derivation');\nconst checkPubkey = require('./shared/checkPubkey');\nconst redeemScript = require('./shared/redeemScript');\nconst tapBip32Derivation = require('./shared/tapBip32Derivation');\nconst tapInternalKey = require('./shared/tapInternalKey');\nconst witnessScript = require('./shared/witnessScript');\nconst globals = {\n  unsignedTx,\n  globalXpub,\n  // pass an Array of key bytes that require pubkey beside the key\n  checkPubkey: checkPubkey.makeChecker([]),\n};\nexports.globals = globals;\nconst inputs = {\n  nonWitnessUtxo,\n  partialSig,\n  sighashType,\n  finalScriptSig,\n  finalScriptWitness,\n  porCommitment,\n  witnessUtxo,\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.InputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.InputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.InputTypes.PARTIAL_SIG,\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ]),\n  tapKeySig,\n  tapScriptSig,\n  tapLeafScript,\n  tapBip32Derivation: tapBip32Derivation.makeConverter(\n    typeFields_1.InputTypes.TAP_BIP32_DERIVATION,\n  ),\n  tapInternalKey: tapInternalKey.makeConverter(\n    typeFields_1.InputTypes.TAP_INTERNAL_KEY,\n  ),\n  tapMerkleRoot,\n};\nexports.inputs = inputs;\nconst outputs = {\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.OutputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.OutputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ]),\n  tapBip32Derivation: tapBip32Derivation.makeConverter(\n    typeFields_1.OutputTypes.TAP_BIP32_DERIVATION,\n  ),\n  tapTree,\n  tapInternalKey: tapInternalKey.makeConverter(\n    typeFields_1.OutputTypes.TAP_INTERNAL_KEY,\n  ),\n};\nexports.outputs = outputs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}