{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hash_to_ristretto255 = exports.hashToRistretto255 = exports.RistrettoPoint = exports.encodeToCurve = exports.hashToCurve = exports.edwardsToMontgomeryPriv = exports.edwardsToMontgomery = exports.edwardsToMontgomeryPub = exports.x25519 = exports.ed25519ph = exports.ed25519ctx = exports.ed25519 = exports.ED25519_TORSION_SUBGROUP = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst edwards_js_1 = require(\"./abstract/edwards.js\");\nconst montgomery_js_1 = require(\"./abstract/montgomery.js\");\nconst modular_js_1 = require(\"./abstract/modular.js\");\nconst utils_js_1 = require(\"./abstract/utils.js\");\nconst hash_to_curve_js_1 = require(\"./abstract/hash-to-curve.js\");\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10),\n  _20n = BigInt(20),\n  _40n = BigInt(40),\n  _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n  const P = ED25519_P;\n  const x2 = x * x % P;\n  const b2 = x2 * x % P; // x^3, 11\n  const b4 = (0, modular_js_1.pow2)(b2, _2n, P) * b2 % P; // x^15, 1111\n  const b5 = (0, modular_js_1.pow2)(b4, _1n, P) * x % P; // x^31\n  const b10 = (0, modular_js_1.pow2)(b5, _5n, P) * b5 % P;\n  const b20 = (0, modular_js_1.pow2)(b10, _10n, P) * b10 % P;\n  const b40 = (0, modular_js_1.pow2)(b20, _20n, P) * b20 % P;\n  const b80 = (0, modular_js_1.pow2)(b40, _40n, P) * b40 % P;\n  const b160 = (0, modular_js_1.pow2)(b80, _80n, P) * b80 % P;\n  const b240 = (0, modular_js_1.pow2)(b160, _80n, P) * b80 % P;\n  const b250 = (0, modular_js_1.pow2)(b240, _10n, P) * b10 % P;\n  const pow_p_5_8 = (0, modular_js_1.pow2)(b250, _2n, P) * x % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return {\n    pow_p_5_8,\n    b2\n  };\n}\nfunction adjustScalarBytes(bytes) {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n  const P = ED25519_P;\n  const v3 = (0, modular_js_1.mod)(v * v * v, P); // v¬≥\n  const v7 = (0, modular_js_1.mod)(v3 * v3 * v, P); // v‚Å∑\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = (0, modular_js_1.mod)(u * v3 * pow, P); // (uv¬≥)(uv‚Å∑)^(p-5)/8\n  const vx2 = (0, modular_js_1.mod)(v * x * x, P); // vx¬≤\n  const root1 = x; // First root candidate\n  const root2 = (0, modular_js_1.mod)(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx¬≤ = u (mod p), x is a square root\n  const useRoot2 = vx2 === (0, modular_js_1.mod)(-u, P); // If vx¬≤ = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === (0, modular_js_1.mod)(-u * ED25519_SQRT_M1, P); // There is no valid root, vx¬≤ = -u‚àö(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if ((0, modular_js_1.isNegativeLE)(x, P)) x = (0, modular_js_1.mod)(-x, P);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n// Just in case\nexports.ED25519_TORSION_SUBGROUP = ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'];\nconst Fp = (0, modular_js_1.Field)(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1),\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field ùîΩp over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512_1.sha512,\n  randomBytes: utils_1.randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/‚àöv\n  uvRatio\n};\nexports.ed25519 = (0, edwards_js_1.twistedEdwards)(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return (0, utils_1.concatBytes)((0, utils_1.utf8ToBytes)('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexports.ed25519ctx = (0, edwards_js_1.twistedEdwards)({\n  ...ed25519Defaults,\n  domain: ed25519_domain\n});\nexports.ed25519ph = (0, edwards_js_1.twistedEdwards)({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512_1.sha512\n});\nexports.x25519 = (() => (0, montgomery_js_1.montgomery)({\n  P: ED25519_P,\n  a: BigInt(486662),\n  montgomeryBits: 255,\n  nByteLength: 32,\n  Gu: BigInt(9),\n  powPminus2: x => {\n    const P = ED25519_P;\n    // x^(p-2) aka x^(2^255-21)\n    const {\n      pow_p_5_8,\n      b2\n    } = ed25519_pow_2_252_3(x);\n    return (0, modular_js_1.mod)((0, modular_js_1.pow2)(pow_p_5_8, BigInt(3), P) * b2, P);\n  },\n  adjustScalarBytes,\n  randomBytes: utils_1.randomBytes\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nfunction edwardsToMontgomeryPub(edwardsPub) {\n  const {\n    y\n  } = exports.ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexports.edwardsToMontgomeryPub = edwardsToMontgomeryPub;\nexports.edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nfunction edwardsToMontgomeryPriv(edwardsPriv) {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\nexports.edwardsToMontgomeryPriv = edwardsToMontgomeryPriv;\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n  let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return {\n    xMn: xn,\n    xMd: xd,\n    yMn: y,\n    yMd: _1n\n  }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = (0, modular_js_1.FpSqrtEven)(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n  const {\n    xMn,\n    xMd,\n    yMn,\n    yMd\n  } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return {\n    x: Fp.mul(xn, inv[0]),\n    y: Fp.mul(yn, inv[1])\n  }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */(() => (0, hash_to_curve_js_1.createHasher)(exports.ed25519.ExtendedPoint, scalars => map_to_curve_elligator2_edwards25519(scalars[0]), {\n  DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n  encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n  p: Fp.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha512_1.sha512\n}))();\nexports.hashToCurve = (() => htf.hashToCurve)();\nexports.encodeToCurve = (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// ‚àö(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / ‚àö(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d¬≤\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)¬≤\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/‚àö(number)\nconst invertSqrt = number => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = bytes => exports.ed25519.CURVE.Fp.create((0, utils_js_1.bytesToNumberLE)(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n  const {\n    d\n  } = exports.ed25519.CURVE;\n  const P = exports.ed25519.CURVE.Fp.ORDER;\n  const mod = exports.ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let {\n    isValid: Ns_D_is_sq,\n    value: s\n  } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!(0, modular_js_1.isNegativeLE)(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new exports.ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(ep) {\n    this.ep = ep;\n  }\n  static fromAffine(ap) {\n    return new RistPoint(exports.ed25519.ExtendedPoint.fromAffine(ap));\n  }\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex) {\n    hex = (0, utils_js_1.ensureBytes)('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex) {\n    hex = (0, utils_js_1.ensureBytes)('ristrettoHex', hex, 32);\n    const {\n      a,\n      d\n    } = exports.ed25519.CURVE;\n    const P = exports.ed25519.CURVE.Fp.ORDER;\n    const mod = exports.ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!(0, utils_js_1.equalBytes)((0, utils_js_1.numberToBytesLE)(s, 32), hex) || (0, modular_js_1.isNegativeLE)(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const {\n      isValid,\n      value: I\n    } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if ((0, modular_js_1.isNegativeLE)(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || (0, modular_js_1.isNegativeLE)(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new exports.ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes() {\n    let {\n      ex: x,\n      ey: y,\n      ez: z,\n      et: t\n    } = this.ep;\n    const P = exports.ed25519.CURVE.Fp.ORDER;\n    const mod = exports.ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const {\n      value: invsqrt\n    } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D; // 7\n    if ((0, modular_js_1.isNegativeLE)(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n\n    if ((0, modular_js_1.isNegativeLE)(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if ((0, modular_js_1.isNegativeLE)(s, P)) s = mod(-s);\n    return (0, utils_js_1.numberToBytesLE)(s, 32); // 11\n  }\n\n  toHex() {\n    return (0, utils_js_1.bytesToHex)(this.toRawBytes());\n  }\n  toString() {\n    return this.toHex();\n  }\n  // Compare one point to another.\n  equals(other) {\n    assertRstPoint(other);\n    const {\n      ex: X1,\n      ey: Y1\n    } = this.ep;\n    const {\n      ex: X2,\n      ey: Y2\n    } = other.ep;\n    const mod = exports.ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n  add(other) {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n  subtract(other) {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n  multiply(scalar) {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n  multiplyUnsafe(scalar) {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexports.RistrettoPoint = (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(exports.ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(exports.ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nconst hashToRistretto255 = (msg, options) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? (0, utils_1.utf8ToBytes)(d) : d;\n  const uniform_bytes = (0, hash_to_curve_js_1.expand_message_xmd)(msg, DST, 64, sha512_1.sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexports.hashToRistretto255 = hashToRistretto255;\nexports.hash_to_ristretto255 = exports.hashToRistretto255; // legacy","map":{"version":3,"names":["sha512_1","require","utils_1","edwards_js_1","montgomery_js_1","modular_js_1","utils_js_1","hash_to_curve_js_1","ED25519_P","BigInt","ED25519_SQRT_M1","_0n","_1n","_2n","_5n","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","x","P","x2","b2","b4","pow2","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","adjustScalarBytes","bytes","uvRatio","u","v","v3","mod","v7","pow","vx2","root1","root2","useRoot1","useRoot2","noRoot","isNegativeLE","isValid","value","exports","ED25519_TORSION_SUBGROUP","Fp","Field","undefined","ed25519Defaults","a","d","n","h","Gx","Gy","hash","sha512","randomBytes","ed25519","twistedEdwards","ed25519_domain","data","ctx","phflag","length","Error","concatBytes","utf8ToBytes","Uint8Array","ed25519ctx","domain","ed25519ph","prehash","x25519","montgomery","montgomeryBits","nByteLength","Gu","powPminus2","edwardsToMontgomeryPub","edwardsPub","y","ExtendedPoint","fromHex","toBytes","create","inv","edwardsToMontgomery","edwardsToMontgomeryPriv","edwardsPriv","hashed","subarray","ELL2_C1","ORDER","ELL2_C2","ELL2_C3","sqrt","neg","ONE","ELL2_C4","ELL2_J","map_to_curve_elligator2_curve25519","tv1","sqr","mul","xd","add","x1n","tv2","gxd","gx1","tv3","y11","y12","e1","eql","y1","cmov","x2n","y21","y22","gx2","e2","y2","e3","xn","e4","isOdd","xMn","xMd","yMn","yMd","ELL2_C1_EDWARDS","FpSqrtEven","map_to_curve_elligator2_edwards25519","yn","sub","yd","e","ZERO","invertBatch","htf","createHasher","scalars","DST","encodeDST","p","m","k","expand","hashToCurve","encodeToCurve","assertRstPoint","other","RistPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","number","MAX_255B","bytes255ToNumberLE","CURVE","bytesToNumberLE","calcElligatorRistrettoMap","r0","r","Ns","c","D","Ns_D_is_sq","s","s_","Nt","s2","W0","W1","W2","W3","constructor","ep","fromAffine","ap","hex","ensureBytes","r1","slice","R1","r2","R2","emsg","equalBytes","numberToBytesLE","u1","u2","u1_2","u2_2","I","Dx","Dy","t","toRawBytes","ex","ey","ez","z","et","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","toString","equals","X1","Y1","X2","Y2","one","two","subtract","multiply","scalar","multiplyUnsafe","RistrettoPoint","BASE","hashToRistretto255","msg","options","uniform_bytes","expand_message_xmd","hash_to_ristretto255"],"sources":["src/ed25519.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}