{"ast":null,"code":"import { log } from '@onflow/util-logger';\n\n/**\n * Interleaves two arrays\n * @param a - The first array\n * @param b - The second array\n * @param c - The target array\n * @returns The interleaved array\n */\nfunction interleave() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  if (!a.length && !b.length) return c;\n  if (!a.length) return c;\n  if (!b.length) {\n    c.push(...a);\n    return c;\n  }\n  const [aHead, ...aRest] = a;\n  const [bHead, ...bRest] = b;\n  if (aHead !== undefined) c.push(aHead);\n  if (bHead !== undefined) c.push(bHead);\n  return interleave(aRest, bRest, c);\n}\n\n/**\n * Recursively apply a value to a function\n * @param d - The value to apply\n * @returns A function that takes a function and applies the value to it\n */\nfunction recApply(d) {\n  return function (arg1) {\n    if (typeof arg1 === \"function\") {\n      log.deprecate({\n        pkg: \"FCL/SDK\",\n        subject: \"Interopolation of functions into template literals\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\"\n      });\n      return recApply(d)(arg1(d));\n    }\n    return String(arg1);\n  };\n}\n\n/**\n * Creates a template function\n * @param head - A string, template string array, or template function\n * @param rest - The rest of the arguments\n * @returns A template function\n */\nfunction template(head) {\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n  if (typeof head === \"string\") return () => head;\n  if (typeof head === \"function\") return head;\n  return x => interleave([...head], rest.map(recApply(x))).join(\"\").trim();\n}\nexport { interleave, template };","map":{"version":3,"names":["interleave","a","arguments","length","undefined","b","c","push","aHead","aRest","bHead","bRest","recApply","d","arg1","log","deprecate","pkg","subject","transition","String","template","head","_len","rest","Array","_key","x","map","join","trim"],"sources":["../src/template.ts"],"sourcesContent":["import {log} from \"@onflow/util-logger\"\n\n/**\n * Interleaves two arrays\n * @param a - The first array\n * @param b - The second array\n * @param c - The target array\n * @returns The interleaved array\n */\nexport function interleave<A, B>(\n  a: A[] = [],\n  b: B[] = [],\n  c: (A | B)[] = []\n): (A | B)[] {\n  if (!a.length && !b.length) return c\n  if (!a.length) return c\n  if (!b.length) {\n    c.push(...a)\n    return c\n  }\n\n  const [aHead, ...aRest] = a\n  const [bHead, ...bRest] = b\n\n  if (aHead !== undefined) c.push(aHead)\n  if (bHead !== undefined) c.push(bHead)\n\n  return interleave(aRest, bRest, c)\n}\n\n/**\n * Recursively apply a value to a function\n * @param d - The value to apply\n * @returns A function that takes a function and applies the value to it\n */\nfunction recApply<T, U>(d: T): (x: U) => string {\n  return function (arg1) {\n    if (typeof arg1 === \"function\") {\n      log.deprecate({\n        pkg: \"FCL/SDK\",\n        subject: \"Interopolation of functions into template literals\",\n        transition:\n          \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\",\n      })\n      return recApply(d)(arg1(d))\n    }\n    return String(arg1)\n  }\n}\n\n/**\n * Creates a template function\n * @param head - A string, template string array, or template function\n * @param rest - The rest of the arguments\n * @returns A template function\n */\nexport function template(\n  head: string | TemplateStringsArray | ((x?: unknown) => string),\n  ...rest: unknown[]\n): (x?: unknown) => string {\n  if (typeof head === \"string\") return () => head\n  if (typeof head === \"function\") return head\n  return (x: unknown) =>\n    interleave([...head], rest.map(recApply(x)))\n      .join(\"\")\n      .trim()\n}\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAUA,CAAA,EAIb;EAAA,IAHXC,CAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IACXG,CAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IACXI,CAAY,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAEjB,IAAI,CAACD,CAAC,CAACE,MAAM,IAAI,CAACE,CAAC,CAACF,MAAM,EAAE,OAAOG,CAAC;EACpC,IAAI,CAACL,CAAC,CAACE,MAAM,EAAE,OAAOG,CAAC;EACvB,IAAI,CAACD,CAAC,CAACF,MAAM,EAAE;IACbG,CAAC,CAACC,IAAI,CAAC,GAAGN,CAAC,CAAC;IACZ,OAAOK,CAAC;EACV;EAEA,MAAM,CAACE,KAAK,EAAE,GAAGC,KAAK,CAAC,GAAGR,CAAC;EAC3B,MAAM,CAACS,KAAK,EAAE,GAAGC,KAAK,CAAC,GAAGN,CAAC;EAE3B,IAAIG,KAAK,KAAKJ,SAAS,EAAEE,CAAC,CAACC,IAAI,CAACC,KAAK,CAAC;EACtC,IAAIE,KAAK,KAAKN,SAAS,EAAEE,CAAC,CAACC,IAAI,CAACG,KAAK,CAAC;EAEtC,OAAOV,UAAU,CAACS,KAAK,EAAEE,KAAK,EAAEL,CAAC,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASM,QAAQA,CAAOC,CAAI,EAAoB;EAC9C,OAAO,UAAUC,IAAI,EAAE;IACrB,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;MAC9BC,GAAG,CAACC,SAAS,CAAC;QACZC,GAAG,EAAE,SAAS;QACdC,OAAO,EAAE,oDAAoD;QAC7DC,UAAU,EACR;MACJ,CAAC,CAAC;MACF,OAAOP,QAAQ,CAACC,CAAC,CAAC,CAACC,IAAI,CAACD,CAAC,CAAC,CAAC;IAC7B;IACA,OAAOO,MAAM,CAACN,IAAI,CAAC;GACpB;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASO,QAAQA,CACtBC,IAA+D,EAEtC;EAAA,SAAAC,IAAA,GAAArB,SAAA,CAAAC,MAAA,EADtBqB,IAAI,OAAAC,KAAA,CAAAF,IAAA,OAAAA,IAAA,WAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAAJF,IAAI,CAAAE,IAAA,QAAAxB,SAAA,CAAAwB,IAAA;EAAA;EAEP,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE,OAAO,MAAMA,IAAI;EAC/C,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE,OAAOA,IAAI;EAC3C,OAAQK,CAAU,IAChB3B,UAAU,CAAC,CAAC,GAAGsB,IAAI,CAAC,EAAEE,IAAI,CAACI,GAAG,CAAChB,QAAQ,CAACe,CAAC,CAAC,CAAC,CAAC,CACzCE,IAAI,CAAC,EAAE,CAAC,CACRC,IAAI,EAAE;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}