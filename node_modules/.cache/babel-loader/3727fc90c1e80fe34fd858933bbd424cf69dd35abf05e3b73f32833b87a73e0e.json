{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { approveList, nonevmAddress } from './actions';\nconst initialState = {\n  approveList: {},\n  nonevmAddress: {}\n};\nexport default createReducer(initialState, builder => builder.addCase(approveList, (state, _ref) => {\n  let {\n    payload: {\n      chainId,\n      account,\n      token,\n      spender,\n      allowance\n    }\n  } = _ref;\n  if (!state.approveList) state.approveList = {};\n  if (!state.approveList[chainId]) state.approveList[chainId] = {};\n  if (!state.approveList[chainId][account]) state.approveList[chainId][account] = {};\n  if (!state.approveList[chainId][account][token]) state.approveList[chainId][account][token] = {};\n  state.approveList[chainId][account][token][spender] = {\n    allowance\n  };\n}).addCase(nonevmAddress, (state, _ref2) => {\n  let {\n    payload: {\n      chainId,\n      account\n    }\n  } = _ref2;\n  if (!state.nonevmAddress) state.nonevmAddress = {};\n  state.nonevmAddress[chainId] = {\n    account\n  };\n}));","map":{"version":3,"names":["createReducer","approveList","nonevmAddress","initialState","builder","addCase","state","_ref","payload","chainId","account","token","spender","allowance","_ref2"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/hooks/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { approveList, nonevmAddress } from './actions'\n\nexport interface BurnState {\n  readonly approveList: any\n  readonly nonevmAddress: any\n}\n\nconst initialState: BurnState = {\n  approveList: {},\n  nonevmAddress: {},\n}\n\nexport default createReducer<BurnState>(initialState, builder =>\n  builder\n    .addCase(approveList, (state, { payload: { chainId, account, token, spender, allowance } }) => {\n      if (!state.approveList) state.approveList = {}\n      if (!state.approveList[chainId]) state.approveList[chainId] = {}\n      if (!state.approveList[chainId][account]) state.approveList[chainId][account] = {}\n      if (!state.approveList[chainId][account][token]) state.approveList[chainId][account][token] = {}\n      state.approveList[chainId][account][token][spender] = {\n        allowance\n      }\n    })\n    .addCase(nonevmAddress, (state, { payload: { chainId, account} }) => {\n      if (!state.nonevmAddress) state.nonevmAddress = {}\n      state.nonevmAddress[chainId] = {account}\n    })\n)\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAOtD,MAAMC,YAAuB,GAAG;EAC9BF,WAAW,EAAE,CAAC,CAAC;EACfC,aAAa,EAAE,CAAC;AAClB,CAAC;AAED,eAAeF,aAAa,CAAYG,YAAY,EAAEC,OAAO,IAC3DA,OAAO,CACJC,OAAO,CAACJ,WAAW,EAAE,CAACK,KAAK,EAAAC,IAAA,KAAmE;EAAA,IAAjE;IAAEC,OAAO,EAAE;MAAEC,OAAO;MAAEC,OAAO;MAAEC,KAAK;MAAEC,OAAO;MAAEC;IAAU;EAAE,CAAC,GAAAN,IAAA;EACxF,IAAI,CAACD,KAAK,CAACL,WAAW,EAAEK,KAAK,CAACL,WAAW,GAAG,CAAC,CAAC;EAC9C,IAAI,CAACK,KAAK,CAACL,WAAW,CAACQ,OAAO,CAAC,EAAEH,KAAK,CAACL,WAAW,CAACQ,OAAO,CAAC,GAAG,CAAC,CAAC;EAChE,IAAI,CAACH,KAAK,CAACL,WAAW,CAACQ,OAAO,CAAC,CAACC,OAAO,CAAC,EAAEJ,KAAK,CAACL,WAAW,CAACQ,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,CAAC,CAAC;EAClF,IAAI,CAACJ,KAAK,CAACL,WAAW,CAACQ,OAAO,CAAC,CAACC,OAAO,CAAC,CAACC,KAAK,CAAC,EAAEL,KAAK,CAACL,WAAW,CAACQ,OAAO,CAAC,CAACC,OAAO,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;EAChGL,KAAK,CAACL,WAAW,CAACQ,OAAO,CAAC,CAACC,OAAO,CAAC,CAACC,KAAK,CAAC,CAACC,OAAO,CAAC,GAAG;IACpDC;EACF,CAAC;AACH,CAAC,CAAC,CACDR,OAAO,CAACH,aAAa,EAAE,CAACI,KAAK,EAAAQ,KAAA,KAAuC;EAAA,IAArC;IAAEN,OAAO,EAAE;MAAEC,OAAO;MAAEC;IAAO;EAAE,CAAC,GAAAI,KAAA;EAC9D,IAAI,CAACR,KAAK,CAACJ,aAAa,EAAEI,KAAK,CAACJ,aAAa,GAAG,CAAC,CAAC;EAClDI,KAAK,CAACJ,aAAa,CAACO,OAAO,CAAC,GAAG;IAACC;EAAO,CAAC;AAC1C,CAAC,CACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}