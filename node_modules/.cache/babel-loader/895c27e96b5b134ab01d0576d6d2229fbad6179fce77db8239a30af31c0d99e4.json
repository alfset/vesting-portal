{"ast":null,"code":"import{useCallback,useEffect}from\"react\";import*as fcl from\"@onflow/fcl\";import{useDispatch// useSelector\n}from'react-redux';import{ChainId}from\"../../config/chainConfig/chainId\";import{useActiveReact}from'../../hooks/useActiveReact';import{flowAddress,flowBalanceList}from'./actions';import useInterval from\"../../hooks/useInterval\";// import {\n//   useFlowBalance,\n//   // useSendFlowTxns\n//   // getFLOWTxnsStatus\n// } from './index'\nexport default function Updater(){const{chainId,account}=useActiveReact();const dispatch=useDispatch();// const {getFlowTokenBalance} = useFlowBalance()\n// const {transferFn} = useSendFlowTxns()\nconst getBalance=useCallback(async()=>{// console.log(account)\nif([ChainId.FLOW,ChainId.FLOW_TEST].includes(chainId)&&account){// getFLOWTxnsStatus('a133c54d778fbb59bd4fb06ba4e41d8aa0d0e97c54dda283ac77c9d281cae150', chainId)\n// getFLOWTxnsStatus('90f105a707a2f8cf6114347d6ad7769a616e98f8b37d302004b2f039f2cb5413', chainId)\n// fcl.account(account).then((res:any) => {\n// const useAccount = '0x79126cfa5c96017c'\nconst useAccount=account;// getFlowTokenBalance(useAccount)\n// const tsResult = await transferFn('0x79126cfa5c96017c', 1.0)\n// console.log(tsResult)\n// fcl.query({\n//   cadence: `\n//     import AnyExampleToken from 0x2627a6b6570638c4\n//     pub fun main():String? {\n//       return AnyExampleToken.underlying()\n//     }\n//   `,\n// }).then((res:any) => {\n//   console.log(res)\n// }).catch((err:any) => {\n//   console.log(err)\n// })\nfcl.account(useAccount).then(async res=>{console.log(res);if(res){const blList={};const result=res;blList['NATIVE']=result.balance;if(result.contracts&&result.contracts.length>0){for(const obj of result.contracts){const key=obj.policyId+'.'+obj.assetName;blList[key]=obj.amount;}}dispatch(flowBalanceList({list:blList}));}}).catch(err=>{console.log(err);});}},[chainId,account]);useEffect(()=>{getBalance();},[chainId,account]);useInterval(getBalance,1000*10);useEffect(()=>{if(chainId&&[ChainId.FLOW,ChainId.FLOW_TEST].includes(chainId)){// let flowNetwork = 'https://access-testnet.onflow.org'\n// let BloctoWallet = 'https://flow-wallet-testnet.blocto.app/authn'\nlet flowNetwork='https://rest-testnet.onflow.org';let BloctoWallet='https://fcl-discovery.onflow.org/testnet/authn';let FungibleToken='0x9a0766d93b6608b7';let FlowToken='0x7e60df042a9c0868';if(chainId===ChainId.FLOW){flowNetwork='https://rest-mainnet.onflow.org';BloctoWallet='https://fcl-discovery.onflow.org/authn';FungibleToken='0xf233dcee88fe0abe';FlowToken='0x1654653399040a61';}fcl.config().put(\"challenge.scope\",\"email\").put(\"accessNode.api\",flowNetwork)// connect to Flow testnet\n.put(\"challenge.handshake\",BloctoWallet)// use Blocto testnet wallet\n// .put(\"flow.network\", \"testnet\")\n// .put(\"discovery.wallet\", \"https://fcl-discovery.onflow.org/testnet/authn\")\n.put(\"app.detail.title\",\"Multichain - Cross Chain\").put(\"app.detail.icon\",\"https://assets.coingecko.com/coins/images/22087/large/1_Wyot-SDGZuxbjdkaOeT2-A.png\")// .put(\"0xFlowToken\", \"0x7e60df042a9c0868\")\n.put(\"0xFungibleToken\",FungibleToken).put(\"0xFlowToken\",FlowToken);console.log(fcl);fcl.currentUser().subscribe(user=>{console.log(user);if(user===null||user===void 0?void 0:user.addr){dispatch(flowAddress({address:user===null||user===void 0?void 0:user.addr}));}else{dispatch(flowAddress({address:''}));}});}},[chainId]);return null;}","map":{"version":3,"names":["useCallback","useEffect","fcl","useDispatch","ChainId","useActiveReact","flowAddress","flowBalanceList","useInterval","Updater","chainId","account","dispatch","getBalance","FLOW","FLOW_TEST","includes","useAccount","then","res","console","log","blList","result","balance","contracts","length","obj","key","policyId","assetName","amount","list","catch","err","flowNetwork","BloctoWallet","FungibleToken","FlowToken","config","put","currentUser","subscribe","user","addr","address"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/flow/updater.ts"],"sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\"\nimport { \n  useDispatch,\n  // useSelector\n} from 'react-redux'\nimport { \n  // AppState,\n  AppDispatch\n} from '../../state'\nimport { ChainId } from \"../../config/chainConfig/chainId\";\n\nimport {useActiveReact} from '../../hooks/useActiveReact'\n\nimport {\n  flowAddress,\n  flowBalanceList\n} from './actions'\nimport useInterval from \"../../hooks/useInterval\";\n\n// import {\n//   useFlowBalance,\n//   // useSendFlowTxns\n//   // getFLOWTxnsStatus\n// } from './index'\n\nexport default function Updater(): null {\n  const {chainId, account} = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n\n  // const {getFlowTokenBalance} = useFlowBalance()\n\n  // const {transferFn} = useSendFlowTxns()\n\n  const getBalance = useCallback(async() => {\n    // console.log(account)\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId) && account) {\n      // getFLOWTxnsStatus('a133c54d778fbb59bd4fb06ba4e41d8aa0d0e97c54dda283ac77c9d281cae150', chainId)\n      // getFLOWTxnsStatus('90f105a707a2f8cf6114347d6ad7769a616e98f8b37d302004b2f039f2cb5413', chainId)\n      // fcl.account(account).then((res:any) => {\n      // const useAccount = '0x79126cfa5c96017c'\n      const useAccount = account\n      // getFlowTokenBalance(useAccount)\n      // const tsResult = await transferFn('0x79126cfa5c96017c', 1.0)\n      // console.log(tsResult)\n\n      // fcl.query({\n      //   cadence: `\n      //     import AnyExampleToken from 0x2627a6b6570638c4\n          \n      //     pub fun main():String? {\n      //       return AnyExampleToken.underlying()\n      //     }\n      //   `,\n      // }).then((res:any) => {\n      //   console.log(res)\n      // }).catch((err:any) => {\n      //   console.log(err)\n      // })\n\n\n      fcl.account(useAccount).then(async(res:any) => {\n        console.log(res)\n        if (res) {\n          const blList:any = {}\n          const result = res\n          blList['NATIVE'] = result.balance\n          if (result.contracts && result.contracts.length > 0) {\n            for (const obj of result.contracts) {\n              const key = obj.policyId + '.' + obj.assetName\n              blList[key] = obj.amount\n            }\n          }\n          dispatch(flowBalanceList({list: blList}))\n        }\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    }\n  }, [chainId, account])\n\n  useEffect(() => {\n    getBalance()\n  }, [chainId, account])\n\n  useInterval(getBalance, 1000 * 10)\n\n  useEffect(() => {\n    if (chainId && [ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      // let flowNetwork = 'https://access-testnet.onflow.org'\n      // let BloctoWallet = 'https://flow-wallet-testnet.blocto.app/authn'\n      let flowNetwork = 'https://rest-testnet.onflow.org'\n      let BloctoWallet = 'https://fcl-discovery.onflow.org/testnet/authn'\n      let FungibleToken = '0x9a0766d93b6608b7'\n      let FlowToken = '0x7e60df042a9c0868'\n      if (chainId === ChainId.FLOW) {\n        flowNetwork = 'https://rest-mainnet.onflow.org'\n        BloctoWallet = 'https://fcl-discovery.onflow.org/authn'\n        FungibleToken = '0xf233dcee88fe0abe'\n        FlowToken = '0x1654653399040a61'\n      }\n      fcl.config()\n      .put(\"challenge.scope\", \"email\")\n      .put(\"accessNode.api\", flowNetwork) // connect to Flow testnet\n      .put(\"challenge.handshake\", BloctoWallet) // use Blocto testnet wallet\n      // .put(\"flow.network\", \"testnet\")\n      // .put(\"discovery.wallet\", \"https://fcl-discovery.onflow.org/testnet/authn\")\n      .put(\"app.detail.title\", \"Multichain - Cross Chain\")\n      .put(\"app.detail.icon\", \"https://assets.coingecko.com/coins/images/22087/large/1_Wyot-SDGZuxbjdkaOeT2-A.png\")\n      // .put(\"0xFlowToken\", \"0x7e60df042a9c0868\")\n      .put(\"0xFungibleToken\", FungibleToken)\n      .put(\"0xFlowToken\", FlowToken)\n\n      console.log(fcl)\n\n      fcl\n        .currentUser()\n        .subscribe((user:any) => {\n          console.log(user)\n          if (user?.addr) {\n            dispatch(flowAddress({address: user?.addr}))\n          } else {\n            dispatch(flowAddress({address: ''}))\n          }\n        })\n    }\n  }, [chainId])\n\n  return null\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}