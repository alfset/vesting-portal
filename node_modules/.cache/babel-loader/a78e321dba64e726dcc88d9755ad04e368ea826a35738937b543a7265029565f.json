{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.int = exports.dec = exports.Int = exports.Dec = exports.Numeric = exports.DEC_PRECISION = void 0;\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nexports.DEC_PRECISION = 18;\nvar Numeric;\n(function (Numeric) {\n  function parse(value) {\n    if (value instanceof Dec) {\n      return value;\n    } else if (typeof value === 'string') {\n      if (value.includes('.')) {\n        return new Dec(value);\n      } else {\n        return new Int(value);\n      }\n    } else {\n      var _value = new decimal_js_1.default(value);\n      if (_value.isInteger()) {\n        return new Int(_value);\n      } else {\n        return new Dec(_value.toString());\n      }\n    }\n  }\n  Numeric.parse = parse;\n})(Numeric = exports.Numeric || (exports.Numeric = {}));\n/**\n * Represents decimal values serialized with 18 digits of precision. This implementation\n * is based on the `decimal.js` library, and returns Dec values for only [[Dec.add]],\n * [[Dec.sub]], [[Dec.mul]], [[Dec.div]], and [[Dec.mod]]. For other methods inherited\n * from `Decimal`, you will need to convert back to `Dec` to remain compatible for\n * submitting information that requires `Dec` format back to the blockchain.\n *\n * Example:\n *\n * ```ts\n * const dec = new Dec(1.5);\n *\n * const decimal = dec.sqrt();\n * const dec2 = new Dec(decimal);\n */\nvar Dec = /** @class */function (_super) {\n  __extends(Dec, _super);\n  function Dec(arg) {\n    return _super.call(this, (arg !== null && arg !== void 0 ? arg : 0).toString()) || this;\n  }\n  Dec.prototype.toString = function () {\n    return this.toFixed(exports.DEC_PRECISION);\n  };\n  Dec.withPrec = function (value, prec) {\n    return new Dec(new Dec(value).div(Math.pow(10, prec)));\n  };\n  // type conversion\n  Dec.prototype.toInt = function () {\n    return new Int(this);\n  };\n  // arithmetic\n  Dec.prototype.add = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.add.call(this, val));\n  };\n  Dec.prototype.sub = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.sub.call(this, val));\n  };\n  Dec.prototype.mul = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.mul.call(this, val));\n  };\n  Dec.prototype.div = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.div.call(this, val));\n  };\n  Dec.prototype.mod = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.mod.call(this, val));\n  };\n  return Dec;\n}(decimal_js_1.default);\nexports.Dec = Dec;\nvar _Int = decimal_js_1.default.clone();\n/**\n * Represents Integer values. Used mainly to store integer values of [[Coin]] and [[Coins]].\n *\n * Note: Do not use to work with values greater than 9999999999999999999. This\n * implementation is based on the `decimal.js` library, and returns Int values for only\n * [[Int.add]], [[Int.sub]], [[Int.mul]], [[Int.div]], and [[Int.mod]]. For other\n * methods inherited from `Decimal`, you will need to convert back to `Int` to remain\n * compatible for submitting information that requires `Int` format back to the\n * blockchain.\n *\n * Example:\n *\n * ```ts\n * const int = new Int(1.5);\n *\n * const decimal = int.pow(3);\n * const int2 = new Int(decimal);\n */\nvar Int = /** @class */function (_super) {\n  __extends(Int, _super);\n  function Int(arg) {\n    var _arg = new decimal_js_1.default((arg !== null && arg !== void 0 ? arg : 0).toString());\n    return _super.call(this, _arg.divToInt(1)) || this;\n  }\n  Int.prototype.toString = function () {\n    return this.toFixed();\n  };\n  // type conversion\n  Int.prototype.toDec = function () {\n    return new Dec(this);\n  };\n  // artihmetic\n  Int.prototype.add = function (other) {\n    var val = Numeric.parse(other);\n    if (val instanceof Dec) {\n      return new Dec(this).add(val);\n    } else {\n      return new Int(this.plus(val));\n    }\n  };\n  Int.prototype.sub = function (other) {\n    var val = Numeric.parse(other);\n    if (val instanceof Dec) {\n      return new Dec(this).sub(val);\n    } else {\n      return new Int(this.minus(val));\n    }\n  };\n  Int.prototype.mul = function (other) {\n    var val = Numeric.parse(other);\n    if (val instanceof Dec) {\n      return new Dec(this).mul(val);\n    } else {\n      return new Int(this.times(val));\n    }\n  };\n  Int.prototype.div = function (other) {\n    var val = Numeric.parse(other);\n    if (val instanceof Dec) {\n      return new Dec(this).div(val);\n    } else {\n      return new Int(_super.prototype.div.call(this, val));\n    }\n  };\n  Int.prototype.mod = function (other) {\n    var val = Numeric.parse(other);\n    if (val instanceof Dec) {\n      return new Dec(this).mod(val);\n    } else {\n      return new Int(_super.prototype.mod.call(this, val));\n    }\n  };\n  return Int;\n}(_Int);\nexports.Int = Int;\n/**\n * Template tagged literal for creating new Dec objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { dec } from \"@terra-money/terra.js\";\n *\n * const dec1 = dec`234.12312`;\n * const dec2 = new Dec(\"234.12312\");\n *\n * dec1.equals(dec2);\n * ```\n * @param strings\n */\nfunction dec(strings) {\n  return new Dec(strings[0]);\n}\nexports.dec = dec;\n/**\n * Template tagged literal for creating new Int objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { int } from \"@terra-money/terra.js\";\n *\n * const int1 = int`234`;\n * const int2 = new Int(\"234\");\n *\n * int1.equals(int2);\n * ```\n * @param strings\n */\nfunction int(strings) {\n  return new Int(strings[0]);\n}\nexports.int = int;","map":{"version":3,"names":["decimal_js_1","__importDefault","require","exports","DEC_PRECISION","Numeric","parse","value","Dec","includes","Int","_value","default","isInteger","toString","_super","__extends","arg","call","prototype","toFixed","withPrec","prec","div","Math","pow","toInt","add","other","val","sub","mul","mod","_Int","clone","_arg","divToInt","toDec","plus","minus","times","dec","strings","int"],"sources":["../../src/core/numeric.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,eAAA,CAAAC,OAAA;AAEaC,OAAA,CAAAC,aAAa,GAAG,EAAE;AAc/B,IAAiBC,OAAO;AAAxB,WAAiBA,OAAO;EAItB,SAAgBC,KAAKA,CAACC,KAAY;IAChC,IAAIA,KAAK,YAAYC,GAAG,EAAE;MACxB,OAAOD,KAAK;KACb,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MACpC,IAAIA,KAAK,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvB,OAAO,IAAID,GAAG,CAACD,KAAK,CAAC;OACtB,MAAM;QACL,OAAO,IAAIG,GAAG,CAACH,KAAK,CAAC;;KAExB,MAAM;MACL,IAAMI,MAAM,GAAG,IAAIX,YAAA,CAAAY,OAAO,CAACL,KAAK,CAAC;MACjC,IAAII,MAAM,CAACE,SAAS,EAAE,EAAE;QACtB,OAAO,IAAIH,GAAG,CAACC,MAAM,CAAC;OACvB,MAAM;QACL,OAAO,IAAIH,GAAG,CAACG,MAAM,CAACG,QAAQ,EAAE,CAAC;;;EAGvC;EAjBgBT,OAAA,CAAAC,KAAK,GAAAA,KAiBpB;AACH,CAAC,EAtBgBD,OAAO,GAAPF,OAAA,CAAAE,OAAO,KAAPF,OAAA,CAAAE,OAAO;AAwBxB;;;;;;;;;;;;;;;AAgBA,IAAAG,GAAA,0BAAAO,MAAA;EAAyBC,SAAA,CAAAR,GAAA,EAAAO,MAAA;EACvB,SAAAP,IAAYS,GAAmB;WAC7BF,MAAA,CAAAG,IAAA,OAAM,CAACD,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI,CAAC,EAAEH,QAAQ,EAAE,CAAC;EAC9B;EAEON,GAAA,CAAAW,SAAA,CAAAL,QAAQ,GAAf;IACE,OAAO,IAAI,CAACM,OAAO,CAACjB,OAAA,CAAAC,aAAa,CAAC;EACpC,CAAC;EAEaI,GAAA,CAAAa,QAAQ,GAAtB,UAAuBd,KAAoB,EAAEe,IAAY;IACvD,OAAO,IAAId,GAAG,CAAC,IAAIA,GAAG,CAACD,KAAK,CAAC,CAACgB,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEH,IAAI,CAAC,CAAC,CAAC;EACxD,CAAC;EAED;EACOd,GAAA,CAAAW,SAAA,CAAAO,KAAK,GAAZ;IACE,OAAO,IAAIhB,GAAG,CAAC,IAAI,CAAC;EACtB,CAAC;EAED;EAEOF,GAAA,CAAAW,SAAA,CAAAQ,GAAG,GAAV,UAAWC,KAAoB;IAC7B,IAAMC,GAAG,GAAG,IAAIrB,GAAG,CAACH,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC,CAAC;IACzC,OAAO,IAAIpB,GAAG,CAACO,MAAA,CAAAI,SAAA,CAAMQ,GAAG,CAAAT,IAAA,OAACW,GAAG,CAAC,CAAC;EAChC,CAAC;EAEMrB,GAAA,CAAAW,SAAA,CAAAW,GAAG,GAAV,UAAWF,KAAoB;IAC7B,IAAMC,GAAG,GAAG,IAAIrB,GAAG,CAACH,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC,CAAC;IACzC,OAAO,IAAIpB,GAAG,CAACO,MAAA,CAAAI,SAAA,CAAMW,GAAG,CAAAZ,IAAA,OAACW,GAAG,CAAC,CAAC;EAChC,CAAC;EAEMrB,GAAA,CAAAW,SAAA,CAAAY,GAAG,GAAV,UAAWH,KAAoB;IAC7B,IAAMC,GAAG,GAAG,IAAIrB,GAAG,CAACH,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC,CAAC;IACzC,OAAO,IAAIpB,GAAG,CAACO,MAAA,CAAAI,SAAA,CAAMY,GAAG,CAAAb,IAAA,OAACW,GAAG,CAAC,CAAC;EAChC,CAAC;EAEMrB,GAAA,CAAAW,SAAA,CAAAI,GAAG,GAAV,UAAWK,KAAoB;IAC7B,IAAMC,GAAG,GAAG,IAAIrB,GAAG,CAACH,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC,CAAC;IACzC,OAAO,IAAIpB,GAAG,CAACO,MAAA,CAAAI,SAAA,CAAMI,GAAG,CAAAL,IAAA,OAACW,GAAG,CAAC,CAAC;EAChC,CAAC;EAEMrB,GAAA,CAAAW,SAAA,CAAAa,GAAG,GAAV,UAAWJ,KAAoB;IAC7B,IAAMC,GAAG,GAAG,IAAIrB,GAAG,CAACH,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC,CAAC;IACzC,OAAO,IAAIpB,GAAG,CAACO,MAAA,CAAAI,SAAA,CAAMa,GAAG,CAAAd,IAAA,OAACW,GAAG,CAAC,CAAC;EAChC,CAAC;EACH,OAAArB,GAAC;AAAD,CAAC,CA5CwBR,YAAA,CAAAY,OAAO;AAAnBT,OAAA,CAAAK,GAAA,GAAAA,GAAA;AA8Cb,IAAMyB,IAAI,GAAGjC,YAAA,CAAAY,OAAO,CAACsB,KAAK,EAAE;AAE5B;;;;;;;;;;;;;;;;;;AAkBA,IAAAxB,GAAA,0BAAAK,MAAA;EAAyBC,SAAA,CAAAN,GAAA,EAAAK,MAAA;EACvB,SAAAL,IAAYO,GAAmB;IAC7B,IAAMkB,IAAI,GAAG,IAAInC,YAAA,CAAAY,OAAO,CAAC,CAACK,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI,CAAC,EAAEH,QAAQ,EAAE,CAAC;WAC/CC,MAAA,CAAAG,IAAA,OAAMiB,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACzB;EAEO1B,GAAA,CAAAS,SAAA,CAAAL,QAAQ,GAAf;IACE,OAAO,IAAI,CAACM,OAAO,EAAE;EACvB,CAAC;EAED;EACOV,GAAA,CAAAS,SAAA,CAAAkB,KAAK,GAAZ;IACE,OAAO,IAAI7B,GAAG,CAAC,IAAI,CAAC;EACtB,CAAC;EAED;EAEOE,GAAA,CAAAS,SAAA,CAAAQ,GAAG,GAAV,UAAWC,KAAoB;IAC7B,IAAMC,GAAG,GAAGxB,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC;IAChC,IAAIC,GAAG,YAAYrB,GAAG,EAAE;MACtB,OAAO,IAAIA,GAAG,CAAC,IAAI,CAAC,CAACmB,GAAG,CAACE,GAAG,CAAC;KAC9B,MAAM;MACL,OAAO,IAAInB,GAAG,CAAC,IAAI,CAAC4B,IAAI,CAACT,GAAG,CAAC,CAAC;;EAElC,CAAC;EAEMnB,GAAA,CAAAS,SAAA,CAAAW,GAAG,GAAV,UAAWF,KAAoB;IAC7B,IAAMC,GAAG,GAAGxB,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC;IAChC,IAAIC,GAAG,YAAYrB,GAAG,EAAE;MACtB,OAAO,IAAIA,GAAG,CAAC,IAAI,CAAC,CAACsB,GAAG,CAACD,GAAG,CAAC;KAC9B,MAAM;MACL,OAAO,IAAInB,GAAG,CAAC,IAAI,CAAC6B,KAAK,CAACV,GAAG,CAAC,CAAC;;EAEnC,CAAC;EAEMnB,GAAA,CAAAS,SAAA,CAAAY,GAAG,GAAV,UAAWH,KAAoB;IAC7B,IAAMC,GAAG,GAAGxB,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC;IAChC,IAAIC,GAAG,YAAYrB,GAAG,EAAE;MACtB,OAAO,IAAIA,GAAG,CAAC,IAAI,CAAC,CAACuB,GAAG,CAACF,GAAG,CAAC;KAC9B,MAAM;MACL,OAAO,IAAInB,GAAG,CAAC,IAAI,CAAC8B,KAAK,CAACX,GAAG,CAAC,CAAC;;EAEnC,CAAC;EAEMnB,GAAA,CAAAS,SAAA,CAAAI,GAAG,GAAV,UAAWK,KAAoB;IAC7B,IAAMC,GAAG,GAAGxB,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC;IAChC,IAAIC,GAAG,YAAYrB,GAAG,EAAE;MACtB,OAAO,IAAIA,GAAG,CAAC,IAAI,CAAC,CAACe,GAAG,CAACM,GAAG,CAAC;KAC9B,MAAM;MACL,OAAO,IAAInB,GAAG,CAACK,MAAA,CAAAI,SAAA,CAAMI,GAAG,CAAAL,IAAA,OAACW,GAAG,CAAC,CAAC;;EAElC,CAAC;EAEMnB,GAAA,CAAAS,SAAA,CAAAa,GAAG,GAAV,UAAWJ,KAAoB;IAC7B,IAAMC,GAAG,GAAGxB,OAAO,CAACC,KAAK,CAACsB,KAAK,CAAC;IAChC,IAAIC,GAAG,YAAYrB,GAAG,EAAE;MACtB,OAAO,IAAIA,GAAG,CAAC,IAAI,CAAC,CAACwB,GAAG,CAACH,GAAG,CAAC;KAC9B,MAAM;MACL,OAAO,IAAInB,GAAG,CAACK,MAAA,CAAAI,SAAA,CAAMa,GAAG,CAAAd,IAAA,OAACW,GAAG,CAAC,CAAC;;EAElC,CAAC;EACH,OAAAnB,GAAC;AAAD,CAAC,CA7DwBuB,IAAI;AAAhB9B,OAAA,CAAAO,GAAA,GAAAA,GAAA;AA+Db;;;;;;;;;;;;;;;;AAgBA,SAAgB+B,GAAGA,CAACC,OAA6B;EAC/C,OAAO,IAAIlC,GAAG,CAACkC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC5B;AAFAvC,OAAA,CAAAsC,GAAA,GAAAA,GAAA;AAIA;;;;;;;;;;;;;;;;AAiBA,SAAgBE,GAAGA,CAACD,OAA6B;EAC/C,OAAO,IAAIhC,GAAG,CAACgC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC5B;AAFAvC,OAAA,CAAAwC,GAAA,GAAAA,GAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}