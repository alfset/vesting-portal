{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountMerge = accountMerge;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Transfers native balance to destination account.\n *\n * @function\n * @alias Operation.accountMerge\n *\n * @param {object} opts - options object\n * @param {string} opts.destination - destination to merge the source account into\n * @param {string} [opts.source]    - operation source account (defaults to\n *     transaction source)\n *\n * @returns {xdr.Operation} an Account Merge operation (xdr.AccountMergeOp)\n */\nfunction accountMerge(opts) {\n  var opAttributes = {};\n  try {\n    opAttributes.body = _xdr2.default.OperationBody.accountMerge((0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination));\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","accountMerge","_xdr","require","_xdr2","_interopRequireDefault","_decode_encode_muxed_account","obj","__esModule","default","opts","opAttributes","body","OperationBody","decodeAddressToMuxedAccount","destination","e","Error","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/account_merge.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountMerge = accountMerge;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Transfers native balance to destination account.\n *\n * @function\n * @alias Operation.accountMerge\n *\n * @param {object} opts - options object\n * @param {string} opts.destination - destination to merge the source account into\n * @param {string} [opts.source]    - operation source account (defaults to\n *     transaction source)\n *\n * @returns {xdr.Operation} an Account Merge operation (xdr.AccountMergeOp)\n */\nfunction accountMerge(opts) {\n  var opAttributes = {};\n  try {\n    opAttributes.body = _xdr2.default.OperationBody.accountMerge((0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination));\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAGA,YAAY;AAEnC,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,IAAII,4BAA4B,GAAGH,OAAO,CAAC,qCAAqC,CAAC;AAEjF,SAASE,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,YAAYA,CAACS,IAAI,EAAE;EAC1B,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,IAAI;IACFA,YAAY,CAACC,IAAI,GAAGR,KAAK,CAACK,OAAO,CAACI,aAAa,CAACZ,YAAY,CAAC,CAAC,CAAC,EAAEK,4BAA4B,CAACQ,2BAA2B,EAAEJ,IAAI,CAACK,WAAW,CAAC,CAAC;EAC/I,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,IAAI,CAACC,gBAAgB,CAACP,YAAY,EAAED,IAAI,CAAC;EAEzC,OAAO,IAAIN,KAAK,CAACK,OAAO,CAACU,SAAS,CAACR,YAAY,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}