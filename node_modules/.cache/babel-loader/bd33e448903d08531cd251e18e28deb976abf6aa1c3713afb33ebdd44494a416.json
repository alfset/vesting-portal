{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport nft from './nft/reducer';\nimport multicall from './multicall/reducer';\nimport pools from './pools/reducer';\nimport wallet from './wallet/reducer';\nimport rpc from './rpc/reducer';\n\n// import xlm from '../nonevm/stellar/reducer'\n// import trx from '../nonevm/trx/reducer'\nimport nonevm from '../nonevm';\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists', 'rpc', 'pools', 'nft'];\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    burn,\n    nft,\n    multicall,\n    lists,\n    pools,\n    wallet,\n    rpc,\n    // xlm,\n    // trx\n    ...nonevm\n  },\n  middleware: [...getDefaultMiddleware({\n    thunk: false\n  }), save({\n    states: PERSISTED_KEYS,\n    namespace: 'multichain'\n  })],\n  preloadedState: load({\n    states: PERSISTED_KEYS,\n    namespace: 'multichain'\n  })\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","lists","burn","nft","multicall","pools","wallet","rpc","nonevm","PERSISTED_KEYS","store","reducer","middleware","thunk","states","namespace","preloadedState","dispatch"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport nft from './nft/reducer'\nimport multicall from './multicall/reducer'\nimport pools from './pools/reducer'\nimport wallet from './wallet/reducer'\nimport rpc from './rpc/reducer'\n\n// import xlm from '../nonevm/stellar/reducer'\n// import trx from '../nonevm/trx/reducer'\nimport nonevm from '../nonevm'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists', 'rpc', 'pools', 'nft']\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    burn,\n    nft,\n    multicall,\n    lists,\n    pools,\n    wallet,\n    rpc,\n    // xlm,\n    // trx\n    ...nonevm\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS, namespace: 'multichain' })],\n  preloadedState: load({ states: PERSISTED_KEYS, namespace: 'multichain' })\n})\n\nstore.dispatch(updateVersion())\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,oBAAoB,QAAQ,kBAAkB;AACvE,SAASC,IAAI,EAAEC,IAAI,QAAQ,2BAA2B;AAEtD,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,GAAG,MAAM,eAAe;;AAE/B;AACA;AACA,OAAOC,MAAM,MAAM,WAAW;AAE9B,MAAMC,cAAwB,GAAG,CAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC;AAEzF,MAAMC,KAAK,GAAGlB,cAAc,CAAC;EAC3BmB,OAAO,EAAE;IACPf,WAAW;IACXE,IAAI;IACJC,YAAY;IACZC,IAAI;IACJE,IAAI;IACJC,GAAG;IACHC,SAAS;IACTH,KAAK;IACLI,KAAK;IACLC,MAAM;IACNC,GAAG;IACH;IACA;IACA,GAAGC;EACL,CAAC;EACDI,UAAU,EAAE,CAAC,GAAGnB,oBAAoB,CAAC;IAAEoB,KAAK,EAAE;EAAM,CAAC,CAAC,EAAEnB,IAAI,CAAC;IAAEoB,MAAM,EAAEL,cAAc;IAAEM,SAAS,EAAE;EAAa,CAAC,CAAC,CAAC;EAClHC,cAAc,EAAErB,IAAI,CAAC;IAAEmB,MAAM,EAAEL,cAAc;IAAEM,SAAS,EAAE;EAAa,CAAC;AAC1E,CAAC,CAAC;AAEFL,KAAK,CAACO,QAAQ,CAACpB,aAAa,CAAC,CAAC,CAAC;AAE/B,eAAea,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}