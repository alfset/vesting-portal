{"ast":null,"code":"import{useCallback,useMemo}from\"react\";import{useDispatch,useSelector}from'react-redux';import{useTranslation}from'react-i18next';// import useInterval from \"../useInterval\"\nimport{MaxUint256}from'@ethersproject/constants';import{trxAddress}from'./actions';import{useActiveReact}from'../../hooks/useActiveReact';import{useBaseBalances,useTokensBalance}from'../../hooks/useAllBalances';import{tryParseAmount3}from'../../state/swap/hooks';import{ChainId}from\"../../config/chainConfig/chainId\";import{recordsTxns}from'../../utils/bridge/register';import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';// import { BigAmount } from \"../../utils/formatBignumber\"\nimport{isAddress}from'../../utils/isAddress';import{ABI_TO_ADDRESS// ABI_TO_ADDRESS,\n// ABI_TO_ADDRESS,\n// ABI_TO_ADDRESS\n}from'./crosschainABI';// import {VALID_BALANCE} from '../../config/constant'\nimport{// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager// useUserTransactionTTL,\n// useUserSlippageTolerance\n}from'../../state/user/hooks';import config from'../../config';// import useInterval from \"../useInterval\"\n// const tronweb = window.tronWeb\nimport TronWeb from'tronweb';// import { BigAmount } from \"../../utils/formatBignumber\"\n// console.log(TronWeb)\nexport let WrapType=/*#__PURE__*/function(WrapType){WrapType[WrapType[\"NOT_APPLICABLE\"]=0]=\"NOT_APPLICABLE\";WrapType[WrapType[\"WRAP\"]=1]=\"WRAP\";WrapType[WrapType[\"UNWRAP\"]=2]=\"UNWRAP\";WrapType[WrapType[\"NOCONNECT\"]=3]=\"NOCONNECT\";return WrapType;}({});const NOT_APPLICABLE={wrapType:WrapType.NOT_APPLICABLE};export function initTronWeb(chainId){let fullNode='https://api.shasta.trongrid.io';let solidityNode='https://api.shasta.trongrid.io';let eventServer='https://api.shasta.trongrid.io';if(chainId===ChainId.TRX){fullNode='https://api.trongrid.io';solidityNode='https://api.trongrid.io';eventServer='https://api.trongrid.io';}const tronWeb=new TronWeb(fullNode,solidityNode,eventServer);return tronWeb;}export function toHexAddress(address){var _tronWeb$address;const tronWeb=initTronWeb();const str=tronWeb===null||tronWeb===void 0?void 0:(_tronWeb$address=tronWeb.address)===null||_tronWeb$address===void 0?void 0:_tronWeb$address.toHex(address).toLowerCase();return'0x'+str.substr(2);}export function fromHexAddress(address){return'41'+address.substr(2);}export function isTRXAddress(address){const tronWeb=initTronWeb();if(address.indexOf('0x')===0){address=address.replace('0x','41');}return tronWeb===null||tronWeb===void 0?void 0:tronWeb.isAddress(address);}export function formatTRXAddress(address){const tronWeb=initTronWeb();if(address.indexOf('0x')===0){address=address.replace('0x','41');address=tronWeb===null||tronWeb===void 0?void 0:tronWeb.address.fromHex(address);}return address;}export function useTrxAddress(){const account=useSelector(state=>state.trx.trxAddress);// console.log(window?.tronWeb?.isConnected())\nreturn{// trxAddress: account ? toHexAddress(account) : ''\ntrxAddress:account};}export function useLoginTrx(){const dispatch=useDispatch();const loginTrx=useCallback(()=>{// window.open('tronlinkoutside://pull.activity?param={}')\nif(window.tronWeb){window.tronWeb.request({method:'tron_requestAccounts'}).then(res=>{if((res===null||res===void 0?void 0:res.code)===200){dispatch(trxAddress({address:window.tronWeb.defaultAddress.base58}));}else{dispatch(trxAddress({address:''}));alert('Please connect TronLink.');}}).catch(err=>{console.log(err);dispatch(trxAddress({address:''}));alert('Please connect TronLink.');});}else{if(confirm('Please open TronLink or install TronLink.')===true){window.open('https://www.tronlink.org/');}}},[]);return{loginTrx};}export function useTrxBalance(){var _window,_window$tronWeb,_window$tronWeb$defau;const TRXAccount=(_window=window)===null||_window===void 0?void 0:(_window$tronWeb=_window.tronWeb)===null||_window$tronWeb===void 0?void 0:(_window$tronWeb$defau=_window$tronWeb.defaultAddress)===null||_window$tronWeb$defau===void 0?void 0:_window$tronWeb$defau.base58;const getTrxBalance=useCallback(_ref=>{let{account}=_ref;return new Promise(resolve=>{const useAccount=account?account:TRXAccount;if(window.tronWeb&&window.tronWeb.defaultAddress.base58&&useAccount){var _window2,_window2$tronWeb;(_window2=window)===null||_window2===void 0?void 0:(_window2$tronWeb=_window2.tronWeb)===null||_window2$tronWeb===void 0?void 0:_window2$tronWeb.trx.getBalance(useAccount).then(res=>{// console.log(res)\nresolve(res);});}else{resolve('');}});},[TRXAccount]);const getTrxTokenBalance=useCallback(_ref2=>{let{account,token}=_ref2;return new Promise(resolve=>{const useAccount=account?account:TRXAccount;const parameter1=[{type:'address',value:useAccount}];const tokenID=fromHexAddress(token);// console.log('tokenID', tokenID)\nif(window.tronWeb&&window.tronWeb.defaultAddress.base58&&useAccount&&tokenID){var _window3,_window3$tronWeb;(_window3=window)===null||_window3===void 0?void 0:(_window3$tronWeb=_window3.tronWeb)===null||_window3$tronWeb===void 0?void 0:_window3$tronWeb.transactionBuilder.triggerSmartContract(tokenID,\"balanceOf(address)\",{},parameter1,useAccount).then(res=>{// console.log(res)\nresolve(res);});}else{resolve('');}});},[TRXAccount]);return{getTrxBalance,getTrxTokenBalance};}export function useTrxAllowance(token,spender,chainId,account){const setTrxAllowance=useCallback(()=>{return new Promise(async(resolve,reject)=>{const useAccount=account;if(!token||!spender||!useAccount||![ChainId.TRX,ChainId.TRX_TEST].includes(chainId))resolve('');else{const tokenID=fromHexAddress(token);const spenderID=fromHexAddress(spender);if(window.tronWeb&&window.tronWeb.defaultAddress.base58&&useAccount&&tokenID){try{var _window4,_window4$tronWeb;// console.log(tokenID)\nconst instance=await((_window4=window)===null||_window4===void 0?void 0:(_window4$tronWeb=_window4.tronWeb)===null||_window4$tronWeb===void 0?void 0:_window4$tronWeb.contract(ABI_TO_ADDRESS,tokenID));const result=await instance.approve(spenderID,MaxUint256.toString()).send();// const result  = await instance.approve(spenderID, 0).send()\n// console.log(result)\n// console.log(MaxUint256)\nconst txObj={hash:result};// addTransaction(txObj, {\n//   summary: selectCurrency?.symbol + ' approved, you can continue the cross chain transaction',\n//   approval: { tokenAddress: token.address, spender: spender }\n// })\nresolve(txObj);}catch(error){console.log(error);reject(error);}}else{resolve('');}}});},[token,spender,account,chainId]);const getTrxAllowance=useCallback(()=>{return new Promise(async resolve=>{const useAccount=account;if(!token||!spender||!useAccount||![ChainId.TRX,ChainId.TRX_TEST].includes(chainId))resolve('');else{// const parameter1 = [{type:'address',value: useAccount}, {type:'address',value: spender}]\nconst tokenID=formatTRXAddress(token);// console.log('tokenID', tokenID)\n// console.log('parameter1', parameter1)\nif(window.tronWeb&&window.tronWeb.defaultAddress.base58&&useAccount&&tokenID){var _window5,_window5$tronWeb;const instance=await((_window5=window)===null||_window5===void 0?void 0:(_window5$tronWeb=_window5.tronWeb)===null||_window5$tronWeb===void 0?void 0:_window5$tronWeb.contract(ABI_TO_ADDRESS,tokenID));const result=await instance.allowance(useAccount,spender).call();// console.log(result.toString())\nresolve(result.toString());}else{resolve('');}}});},[account,chainId,token,spender]);return{setTrxAllowance,getTrxAllowance// trxAllowance: tal?.[selectCurrency?.address]\n};}export function getTRXTxnsStatus(txid){return new Promise(resolve=>{const data={};if(window.tronWeb&&window.tronWeb.defaultAddress.base58){var _window6,_window6$tronWeb;// window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n(_window6=window)===null||_window6===void 0?void 0:(_window6$tronWeb=_window6.tronWeb)===null||_window6$tronWeb===void 0?void 0:_window6$tronWeb.trx.getTransactionInfo(txid).then(res=>{var _res$receipt,_res$receipt2,_res$receipt3;console.log(res);if((res===null||res===void 0?void 0:(_res$receipt=res.receipt)===null||_res$receipt===void 0?void 0:_res$receipt.result)==='SUCCESS'){data.msg='Success';data.info=res;}else if((res===null||res===void 0?void 0:(_res$receipt2=res.receipt)===null||_res$receipt2===void 0?void 0:_res$receipt2.result)&&(res===null||res===void 0?void 0:(_res$receipt3=res.receipt)===null||_res$receipt3===void 0?void 0:_res$receipt3.result)!=='SUCCESS'){data.msg='Failure';data.error='Txns is failure!';}else{data.msg='Null';data.error='Query is empty!';}resolve(data);});}else{data.msg='Null';data.error='Query is empty!';resolve(data);}});}export function useTrxCrossChain(routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,useToChainId){const{account}=useActiveReact();const{t}=useTranslation();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const addTransaction=useTransactionAdder();const nativeBalance=useBaseBalances(account);const tokenBalance=useTokensBalance(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,chainId);const balance=(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='NATIVE'?nativeBalance:tokenBalance;// const [balance, setBalance] = useState<any>()\n// const {getTrxBalance, getTrxTokenBalance} = useTrxBalance()\nconst inputAmount=useMemo(()=>tryParseAmount3(typedValue,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[typedValue,selectCurrency]);let sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);}catch(error){console.log(error);}return useMemo(()=>{if(!account||![ChainId.TRX,ChainId.TRX_TEST].includes(chainId)||!routerToken||!useToChainId)return{};return{balance:balance,execute:async()=>{// let contract = await window?.tronWeb?.contract()\nif(window.tronWeb&&window.tronWeb.defaultAddress.base58){var _window7,_window7$tronWeb;const TRXAccount=(_window7=window)===null||_window7===void 0?void 0:(_window7$tronWeb=_window7.tronWeb)===null||_window7$tronWeb===void 0?void 0:_window7$tronWeb.defaultAddress.base58;const formatRouterToken=fromHexAddress(routerToken);const formatInputToken=fromHexAddress(inputToken);// console.log('formatRouterToken',formatRouterToken)\n// console.log('formatInputToken',formatInputToken)\n// const formatReceiveAddress = formatTRXAddress(receiveAddress)\nconst formatReceiveAddress=receiveAddress;if(TRXAccount.toLowerCase()===account.toLowerCase()){var _window8,_window8$tronWeb;let txResult='';// const instance:any = await window?.tronWeb?.contract(isNaN(selectChain) ? ABI_TO_ADDRESS : ABI_TO_ADDRESS, formatRouterToken)\nconst instance=await((_window8=window)===null||_window8===void 0?void 0:(_window8$tronWeb=_window8.tronWeb)===null||_window8$tronWeb===void 0?void 0:_window8$tronWeb.contract(ABI_TO_ADDRESS,formatRouterToken));try{if(destConfig.routerABI.indexOf('anySwapOutNative')!==-1){// anySwapOutNative\ntxResult=await instance.anySwapOutNative(...[formatInputToken,formatReceiveAddress,useToChainId],{value:inputAmount}).send();}else if(destConfig.routerABI.indexOf('anySwapOutUnderlying')!==-1){// anySwapOutUnderlying\nconst parameArr=[formatInputToken,formatReceiveAddress,inputAmount,useToChainId];console.log(parameArr);txResult=await instance.anySwapOutUnderlying(...parameArr).send();}else if(destConfig.routerABI.indexOf('anySwapOut')!==-1){// anySwapOut\nconst parameArr=[formatInputToken,formatReceiveAddress,inputAmount,useToChainId];console.log(parameArr);txResult=await instance.anySwapOut(...parameArr).send();}const txReceipt={hash:txResult};console.log(txReceipt);if(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:TRXAccount,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}}catch(error){console.log(error);onChangeViewErrorTip('Txns failure.',true);}}}else{onChangeViewErrorTip('Please install TronLink.',true);}},inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[receiveAddress,account,selectCurrency,inputAmount,chainId,routerToken,selectChain,destConfig,inputToken,balance,useToChainId]);}export function useTrxSwapPoolCallback(routerToken,inputCurrency,inputToken,typedValue,swapType,selectChain,receiveAddress,destConfig,useToChainId// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n){const{account,chainId}=useActiveReact();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const{onChangeViewDtil}=useTxnsDtilOpen();const{t}=useTranslation();const[userInterfaceBalanceValid]=useInterfaceBalanceValidManager();// console.log(balance)\n// console.log(inputCurrency)\nconst inputAmount=useMemo(()=>tryParseAmount3(typedValue,inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.decimals),[inputCurrency,typedValue]);const addTransaction=useTransactionAdder();const nativeBalance=useBaseBalances(account);const tokenBalance=useTokensBalance(inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.address,inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.decimals,chainId);const balance=(inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.tokenType)==='NATIVE'?nativeBalance:tokenBalance;return useMemo(()=>{// console.log(routerToken)\n// console.log(bridgeContract)\n// console.log(chainId)\n// console.log(inputCurrency)\n// console.log(swapType)\n// console.log(balance)\n// console.log(inputAmount)\nif(!chainId||!inputCurrency||!swapType)return NOT_APPLICABLE;// console.log(typedValue)\nconst sufficientBalance=typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);// console.log(sufficientBalance)\nreturn{wrapType:WrapType.WRAP,execute:(sufficientBalance||!userInterfaceBalanceValid)&&inputAmount?async()=>{try{if(window.tronWeb&&window.tronWeb.defaultAddress.base58&&inputToken){// console.log(123)\n// console.log(inputToken)\n// const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS)\nconst formatInputToken=fromHexAddress(inputToken);const formatRouterToken=fromHexAddress(routerToken);let txResult;if((inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.tokenType)==='NATIVE'){if(chainId.toString()!==selectChain.toString()&&swapType!=='deposit'){var _window9,_window9$tronWeb;const instance=await((_window9=window)===null||_window9===void 0?void 0:(_window9$tronWeb=_window9.tronWeb)===null||_window9$tronWeb===void 0?void 0:_window9$tronWeb.contract(ABI_TO_ADDRESS,formatRouterToken));const parameArr=[formatInputToken,receiveAddress,useToChainId];txResult=await instance.anySwapOutNative(...parameArr,{value:inputAmount}).send();}else{var _window10,_window10$tronWeb;const instance=await((_window10=window)===null||_window10===void 0?void 0:(_window10$tronWeb=_window10.tronWeb)===null||_window10$tronWeb===void 0?void 0:_window10$tronWeb.contract(ABI_TO_ADDRESS,formatInputToken));txResult=swapType==='deposit'?await instance.depositNative(...[inputToken,account],{value:inputAmount}).send():await instance.withdrawNative(inputToken,inputAmount,account).send();}}else{if(chainId.toString()!==selectChain.toString()&&swapType!=='deposit'){var _window11,_window11$tronWeb;const instance=await((_window11=window)===null||_window11===void 0?void 0:(_window11$tronWeb=_window11.tronWeb)===null||_window11$tronWeb===void 0?void 0:_window11$tronWeb.contract(ABI_TO_ADDRESS,formatRouterToken));const parameArr=[formatInputToken,receiveAddress,inputAmount,useToChainId];txResult=await instance.anySwapOut(...parameArr).send();}else{var _window12,_window12$tronWeb;const instance=await((_window12=window)===null||_window12===void 0?void 0:(_window12$tronWeb=_window12.tronWeb)===null||_window12$tronWeb===void 0?void 0:_window12$tronWeb.contract(ABI_TO_ADDRESS,formatInputToken));txResult=swapType==='deposit'?await instance.deposit(inputAmount).send():await instance.withdraw(inputAmount).send();}}const txReceipt={hash:txResult};console.log(txReceipt);if(chainId.toString()!==selectChain.toString()&&swapType!=='deposit'){addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,version:destConfig.type,routerToken:routerToken,token:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.address,logoUrl:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,name:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.name,decimals:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.decimals,address:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,version:destConfig.type,pairid:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,routerToken:routerToken};recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}else{addTransaction(txReceipt,{summary:\"\".concat(swapType==='deposit'?'Deposit':'Withdraw',\" \").concat(typedValue,\" \").concat(config.getBaseCoin(inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,chainId))});}}else{console.log('Could not swapout');}}catch(error){console.log('Could not swapout',error);onChangeViewErrorTip(error,true);}}:undefined,inputError:sufficientBalance?undefined:t('Insufficient',{symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol})};},[chainId,inputCurrency,inputAmount,balance,addTransaction,t,inputToken,account,routerToken,selectChain,destConfig,useToChainId,userInterfaceBalanceValid]);}export function useTrxPoolDatas(){const getTrxPoolDatas=useCallback(async(calls,chainId)=>{return new Promise(resolve=>{const arr=[];const labelArr=[];// console.log(calls)\nif(window.tronWeb&&[ChainId.TRX,ChainId.TRX_TEST].includes(chainId)){// console.log(calls)\n// const useAccount = window.tronWeb.defaultAddress.base58\nfor(const item of calls){const anytoken=item.anytoken?fromHexAddress(item.anytoken):'';const anytokenSource=item.anytoken;// const anytoken = item.anytoken ? toHexAddress(item.anytoken) : ''\n// const anytoken = item.anytoken\n// const underlyingToken = item.token\nconst underlyingToken=item.token?fromHexAddress(item.token):'';// console.log('anytoken', anytoken)\n// console.log('underlyingToken', underlyingToken)\nif(underlyingToken&&anytoken){var _window13,_window13$tronWeb,_window14,_window14$tronWeb;// console.log(underlyingToken, anytoken)\n// arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\narr.push((_window13=window)===null||_window13===void 0?void 0:(_window13$tronWeb=_window13.tronWeb)===null||_window13$tronWeb===void 0?void 0:_window13$tronWeb.contract(ABI_TO_ADDRESS,underlyingToken).balanceOf(anytoken).call());// arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\nlabelArr.push({key:anytokenSource,label:'balanceOf',dec:item.dec});// arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"totalSupply()\", {}, {}, useAccount))\narr.push((_window14=window)===null||_window14===void 0?void 0:(_window14$tronWeb=_window14.tronWeb)===null||_window14$tronWeb===void 0?void 0:_window14$tronWeb.contract(ABI_TO_ADDRESS,underlyingToken).totalSupply().call());labelArr.push({key:anytokenSource,label:'totalSupply',dec:item.dec});}// console.log(item)\n// console.log(chainId)\nif(anytoken&&isAddress(item.account,chainId)){var _window15,_window15$tronWeb;// arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\narr.push((_window15=window)===null||_window15===void 0?void 0:(_window15$tronWeb=_window15.tronWeb)===null||_window15$tronWeb===void 0?void 0:_window15$tronWeb.contract(ABI_TO_ADDRESS,anytoken).balanceOf(item.account).call());labelArr.push({key:anytokenSource,label:'balance',dec:item.dec});}}}// console.log(arr)\nPromise.all(arr).then(res=>{// console.log(res)\nconst list={};for(let i=0,len=arr.length;i<len;i++){const k=labelArr[i].key;const l=labelArr[i].label;// const dec = labelArr[i].dec\nif(!list[k])list[k]={};// list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\nlist[k][l]=res[i].toString();}// console.log(list)\nresolve(list);});});},[]);return{getTrxPoolDatas};}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useTranslation","MaxUint256","trxAddress","useActiveReact","useBaseBalances","useTokensBalance","tryParseAmount3","ChainId","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","isAddress","ABI_TO_ADDRESS","useInterfaceBalanceValidManager","config","TronWeb","WrapType","NOT_APPLICABLE","wrapType","initTronWeb","chainId","fullNode","solidityNode","eventServer","TRX","tronWeb","toHexAddress","address","_tronWeb$address","str","toHex","toLowerCase","substr","fromHexAddress","isTRXAddress","indexOf","replace","formatTRXAddress","fromHex","useTrxAddress","account","state","trx","useLoginTrx","dispatch","loginTrx","window","request","method","then","res","code","defaultAddress","base58","alert","catch","err","console","log","confirm","open","useTrxBalance","_window","_window$tronWeb","_window$tronWeb$defau","TRXAccount","getTrxBalance","_ref","Promise","resolve","useAccount","_window2","_window2$tronWeb","getBalance","getTrxTokenBalance","_ref2","token","parameter1","type","value","tokenID","_window3","_window3$tronWeb","transactionBuilder","triggerSmartContract","useTrxAllowance","spender","setTrxAllowance","reject","TRX_TEST","includes","spenderID","_window4","_window4$tronWeb","instance","contract","result","approve","toString","send","txObj","hash","error","getTrxAllowance","_window5","_window5$tronWeb","allowance","call","getTRXTxnsStatus","txid","data","_window6","_window6$tronWeb","getTransactionInfo","_res$receipt","_res$receipt2","_res$receipt3","receipt","msg","info","useTrxCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","nativeBalance","tokenBalance","decimals","balance","tokenType","inputAmount","sufficientBalance","Number","toExact","execute","_window7","_window7$tronWeb","formatRouterToken","formatInputToken","formatReceiveAddress","_window8","_window8$tronWeb","txResult","routerABI","anySwapOutNative","parameArr","anySwapOutUnderlying","anySwapOut","txReceipt","formatvalue","to","symbol","version","pairid","summary","concat","toChainId","toAddress","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError","undefined","useTrxSwapPoolCallback","inputCurrency","swapType","userInterfaceBalanceValid","WRAP","_window9","_window9$tronWeb","_window10","_window10$tronWeb","depositNative","withdrawNative","_window11","_window11$tronWeb","_window12","_window12$tronWeb","deposit","withdraw","getBaseCoin","useTrxPoolDatas","getTrxPoolDatas","calls","arr","labelArr","item","anytoken","anytokenSource","underlyingToken","_window13","_window13$tronWeb","_window14","_window14$tronWeb","push","balanceOf","key","label","dec","totalSupply","_window15","_window15$tronWeb","all","list","i","len","length","k","l"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/trx/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\n// import useInterval from \"../useInterval\"\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { AppState, AppDispatch } from '../../state'\nimport { trxAddress } from './actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\n\nimport {useBaseBalances, useTokensBalance} from '../../hooks/useAllBalances'\n\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\n// import { BigAmount } from \"../../utils/formatBignumber\"\nimport { isAddress } from '../../utils/isAddress'\n\nimport {\n  ABI_TO_ADDRESS,\n  // ABI_TO_ADDRESS,\n  // ABI_TO_ADDRESS,\n  // ABI_TO_ADDRESS\n} from './crosschainABI'\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\nimport config from '../../config'\n// import useInterval from \"../useInterval\"\n// const tronweb = window.tronWeb\n\nimport TronWeb from 'tronweb'\n// import { BigAmount } from \"../../utils/formatBignumber\"\n// console.log(TronWeb)\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n  NOCONNECT\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n\nexport function initTronWeb (chainId?:any) {\n  let fullNode = 'https://api.shasta.trongrid.io';\n  let solidityNode = 'https://api.shasta.trongrid.io';\n  let eventServer = 'https://api.shasta.trongrid.io';\n  if (chainId === ChainId.TRX) {\n    fullNode = 'https://api.trongrid.io';\n    solidityNode = 'https://api.trongrid.io';\n    eventServer = 'https://api.trongrid.io';\n  }\n  const tronWeb = new TronWeb(\n    fullNode,\n    solidityNode,\n    eventServer\n  );\n  return tronWeb\n}\n\nexport function toHexAddress (address:string) {\n  const tronWeb = initTronWeb()\n  const str = tronWeb?.address?.toHex(address).toLowerCase()\n  return '0x' + str.substr(2)\n}\n\nexport function fromHexAddress (address:string) {\n  return '41' + address.substr(2)\n}\n\nexport function isTRXAddress (address:string) {\n  const tronWeb = initTronWeb()\n  if (address.indexOf('0x') === 0) {\n    address = address.replace('0x', '41')\n  }\n  return tronWeb?.isAddress(address)\n}\n\nexport function formatTRXAddress (address:string) {\n  const tronWeb = initTronWeb()\n  if (address.indexOf('0x') === 0) {\n    address = address.replace('0x', '41')\n    address = tronWeb?.address.fromHex(address)\n  }\n  return address\n}\n\nexport function useTrxAddress () {\n  const account:any = useSelector<AppState, AppState['trx']>(state => state.trx.trxAddress)\n  // console.log(window?.tronWeb?.isConnected())\n  return {\n    // trxAddress: account ? toHexAddress(account) : ''\n    trxAddress: account\n  }\n}\n\nexport function useLoginTrx () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginTrx = useCallback(() => {\n    // window.open('tronlinkoutside://pull.activity?param={}')\n    if (window.tronWeb) {\n      window.tronWeb.request({method: 'tron_requestAccounts'}).then((res:any) => {\n        if (res?.code === 200) {\n          dispatch(trxAddress({address: window.tronWeb.defaultAddress.base58}))\n        } else {\n          dispatch(trxAddress({address: ''}))\n          alert('Please connect TronLink.')\n        }\n      }).catch((err:any) => {\n        console.log(err)\n        dispatch(trxAddress({address: ''}))\n        alert('Please connect TronLink.')\n      })\n    } else {\n      if (confirm('Please open TronLink or install TronLink.') === true) {\n        window.open('https://www.tronlink.org/')\n      }\n    }\n  }, [])\n  return {\n    loginTrx\n  }\n}\n\nexport function useTrxBalance () {\n  const TRXAccount = window?.tronWeb?.defaultAddress?.base58\n  const getTrxBalance = useCallback(({account}) => {\n    return new Promise((resolve) => {\n      const useAccount = account ? account : TRXAccount\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount) {\n        window?.tronWeb?.trx.getBalance(useAccount).then((res:any) => {\n          // console.log(res)\n          resolve(res)\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [TRXAccount]) \n\n  const getTrxTokenBalance = useCallback(({account, token}) => {\n    return new Promise((resolve) => {\n      const useAccount = account ? account : TRXAccount\n      const parameter1 = [{type:'address',value: useAccount}]\n      const tokenID = fromHexAddress(token)\n      // console.log('tokenID', tokenID)\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n        window?.tronWeb?.transactionBuilder.triggerSmartContract(tokenID, \"balanceOf(address)\", {}, parameter1, useAccount).then((res:any) => {\n          // console.log(res)\n          resolve(res)\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [TRXAccount])\n\n  return {\n    getTrxBalance,\n    getTrxTokenBalance\n  }\n}\n\nexport function useTrxAllowance(\n  token:any,\n  spender: any,\n  chainId: any,\n  account: any,\n) {\n  const setTrxAllowance = useCallback((): Promise<any> => {\n    return new Promise(async(resolve, reject) => {\n      const useAccount = account\n      if (!token || !spender || !useAccount || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) resolve('')\n      else {\n        const tokenID = fromHexAddress(token)\n        const spenderID = fromHexAddress(spender)\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n          try {\n            // console.log(tokenID)\n            const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, tokenID)\n            const result  = await instance.approve(spenderID, MaxUint256.toString()).send()\n            // const result  = await instance.approve(spenderID, 0).send()\n            // console.log(result)\n            // console.log(MaxUint256)\n            const txObj:any = {hash: result}\n            // addTransaction(txObj, {\n            //   summary: selectCurrency?.symbol + ' approved, you can continue the cross chain transaction',\n            //   approval: { tokenAddress: token.address, spender: spender }\n            // })\n            resolve(txObj)\n          } catch (error) {\n            console.log(error)\n            reject(error)\n          }\n        } else {\n          resolve('')\n        }\n      }\n    })\n  }, [token, spender, account, chainId])\n\n  const getTrxAllowance = useCallback(() => {\n    return new Promise(async(resolve) => {\n      const useAccount = account\n      if (!token || !spender || !useAccount || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) resolve('')\n      else {\n        // const parameter1 = [{type:'address',value: useAccount}, {type:'address',value: spender}]\n        const tokenID = formatTRXAddress(token)\n        // console.log('tokenID', tokenID)\n        // console.log('parameter1', parameter1)\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n          const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, tokenID)\n          const result  = await instance.allowance(useAccount, spender).call()\n          // console.log(result.toString())\n          resolve(result.toString())\n        } else {\n          resolve('')\n        }\n      }\n    })\n  }, [account, chainId, token, spender])\n\n  return {\n    setTrxAllowance,\n    getTrxAllowance,\n    // trxAllowance: tal?.[selectCurrency?.address]\n  }\n}\n\nexport function getTRXTxnsStatus (txid:string) {\n  return new Promise(resolve => {\n    const data:any = {}\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n      window?.tronWeb?.trx.getTransactionInfo(txid).then((res:any) => {\n        console.log(res)\n        if (res?.receipt?.result === 'SUCCESS') {\n          data.msg = 'Success'\n          data.info = res\n        } else if (res?.receipt?.result && res?.receipt?.result !== 'SUCCESS') {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      })\n    } else {\n      data.msg = 'Null'\n      data.error = 'Query is empty!'\n      resolve(data)\n    }\n  })\n}\n\n\nexport function useTrxCrossChain (\n  routerToken: any,\n  inputToken: any,\n  chainId:any,\n  selectCurrency:any,\n  selectChain:any,\n  receiveAddress:any,\n  typedValue:any,\n  destConfig:any,\n  useToChainId:any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const {account} = useActiveReact()\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const nativeBalance = useBaseBalances(account)\n  const tokenBalance = useTokensBalance(selectCurrency?.address, selectCurrency?.decimals, chainId)\n  const balance = selectCurrency?.tokenType === 'NATIVE' ? nativeBalance : tokenBalance\n\n  // const [balance, setBalance] = useState<any>()\n\n  // const {getTrxBalance, getTrxTokenBalance} = useTrxBalance()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  let sufficientBalance = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    if (!account || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId) || !routerToken || !useToChainId) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n        // let contract = await window?.tronWeb?.contract()\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n          const TRXAccount = window?.tronWeb?.defaultAddress.base58\n          const formatRouterToken = fromHexAddress(routerToken)\n          const formatInputToken = fromHexAddress(inputToken)\n          // console.log('formatRouterToken',formatRouterToken)\n          // console.log('formatInputToken',formatInputToken)\n          // const formatReceiveAddress = formatTRXAddress(receiveAddress)\n          const formatReceiveAddress = receiveAddress\n          if (TRXAccount.toLowerCase() === account.toLowerCase()) {\n            let txResult:any = ''\n            // const instance:any = await window?.tronWeb?.contract(isNaN(selectChain) ? ABI_TO_ADDRESS : ABI_TO_ADDRESS, formatRouterToken)\n            const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatRouterToken)\n            try {\n              if (destConfig.routerABI.indexOf('anySwapOutNative') !== -1) { // anySwapOutNative\n                txResult = await instance.anySwapOutNative(...[formatInputToken, formatReceiveAddress, useToChainId], {value: inputAmount}).send()\n              } else if (destConfig.routerABI.indexOf('anySwapOutUnderlying') !== -1) { // anySwapOutUnderlying\n                const parameArr = [formatInputToken, formatReceiveAddress, inputAmount, useToChainId]\n                console.log(parameArr)\n                txResult = await instance.anySwapOutUnderlying(...parameArr).send()\n              } else if (destConfig.routerABI.indexOf('anySwapOut') !== -1) { // anySwapOut\n                const parameArr = [formatInputToken, formatReceiveAddress, inputAmount, useToChainId]\n                console.log(parameArr)\n                txResult = await instance.anySwapOut(...parameArr).send()\n              }\n              const txReceipt:any = {hash: txResult}\n              console.log(txReceipt)\n              if (txReceipt?.hash) {\n                const data:any = {\n                  hash: txReceipt.hash,\n                  chainId: chainId,\n                  selectChain: selectChain,\n                  account: TRXAccount,\n                  value: inputAmount,\n                  formatvalue: typedValue,\n                  to: receiveAddress,\n                  symbol: selectCurrency?.symbol,\n                  version: destConfig.type,\n                  pairid: selectCurrency?.symbol,\n                  routerToken: routerToken\n                }\n                addTransaction(txReceipt, {\n                  summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                  value: typedValue,\n                  toChainId: selectChain,\n                  toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                  symbol: selectCurrency?.symbol,\n                  version: destConfig.type,\n                  routerToken: routerToken,\n                  token: selectCurrency?.address,\n                  logoUrl: selectCurrency?.logoUrl,\n                  isLiquidity: destConfig?.isLiquidity,\n                  fromInfo: {\n                    symbol: selectCurrency?.symbol,\n                    name: selectCurrency?.name,\n                    decimals: selectCurrency?.decimals,\n                    address: selectCurrency?.address,\n                  },\n                  toInfo: {\n                    symbol: destConfig?.symbol,\n                    name: destConfig?.name,\n                    decimals: destConfig?.decimals,\n                    address: destConfig?.address,\n                  },\n                })\n                recordsTxns(data)\n                onChangeViewDtil(txReceipt?.hash, true)\n              }\n            } catch (error) {\n              console.log(error);\n              onChangeViewErrorTip('Txns failure.', true)\n            }\n          }\n        } else {\n          onChangeViewErrorTip('Please install TronLink.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, balance, useToChainId])\n}\n\n\nexport function useTrxSwapPoolCallback(\n  routerToken:any,\n  inputCurrency: any,\n  inputToken: string | undefined,\n  typedValue: string | undefined,\n  swapType: string | undefined,\n  selectChain: any,\n  receiveAddress: any,\n  destConfig: any,\n  useToChainId: any,\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { account, chainId } = useActiveReact()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const { t } = useTranslation()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n  // console.log(balance)\n  // console.log(inputCurrency)\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, inputCurrency?.decimals), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  const nativeBalance = useBaseBalances(account)\n  const tokenBalance = useTokensBalance(inputCurrency?.address, inputCurrency?.decimals, chainId)\n  const balance = inputCurrency?.tokenType === 'NATIVE' ? nativeBalance : tokenBalance\n  \n  return useMemo(() => {\n    // console.log(routerToken)\n    // console.log(bridgeContract)\n    // console.log(chainId)\n    // console.log(inputCurrency)\n    // console.log(swapType)\n    // console.log(balance)\n    // console.log(inputAmount)\n    \n    if (!chainId || !inputCurrency || !swapType) return NOT_APPLICABLE\n    // console.log(typedValue)\n\n    const sufficientBalance = typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n    // console.log(sufficientBalance)\n    return {\n      wrapType: WrapType.WRAP,\n      execute:\n      (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n        ? async () => {\n            try {\n              if (window.tronWeb && window.tronWeb.defaultAddress.base58 && inputToken) {\n                // console.log(123)\n                // console.log(inputToken)\n                // const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS)\n                const formatInputToken = fromHexAddress(inputToken)\n                const formatRouterToken = fromHexAddress(routerToken)\n                let txResult:any\n                if (inputCurrency?.tokenType === 'NATIVE') {\n                  if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatRouterToken)\n                    const parameArr = [formatInputToken, receiveAddress, useToChainId]\n                    txResult = await instance.anySwapOutNative(...parameArr, {value: inputAmount}).send()\n                  } else {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatInputToken)\n                    txResult = swapType === 'deposit' ? await instance.depositNative(...[inputToken, account], {value: inputAmount}).send() : await instance.withdrawNative(inputToken,inputAmount,account).send()\n                  }\n                } else {\n                  if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatRouterToken)\n                    const parameArr = [formatInputToken, receiveAddress, inputAmount, useToChainId]\n                    txResult = await instance.anySwapOut(...parameArr).send()\n                  } else {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatInputToken)\n                    txResult = swapType === 'deposit' ? await instance.deposit(inputAmount).send() : await instance.withdraw(inputAmount).send()\n                  }\n                }\n                const txReceipt:any = {hash: txResult}\n                console.log(txReceipt)\n                if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                  addTransaction(txReceipt, {\n                    summary: `Cross bridge ${typedValue} ${inputCurrency?.symbol}`,\n                    value: typedValue,\n                    toChainId: selectChain,\n                    toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                    symbol: inputCurrency?.symbol,\n                    version: destConfig.type,\n                    routerToken: routerToken,\n                    token: inputCurrency?.address,\n                    logoUrl: inputCurrency?.logoUrl,\n                    isLiquidity: destConfig?.isLiquidity,\n                    fromInfo: {\n                      symbol: inputCurrency?.symbol,\n                      name: inputCurrency?.name,\n                      decimals: inputCurrency?.decimals,\n                      address: inputCurrency?.address,\n                    },\n                    toInfo: {\n                      symbol: destConfig?.symbol,\n                      name: destConfig?.name,\n                      decimals: destConfig?.decimals,\n                      address: destConfig?.address,\n                    },\n                  })\n                  const data:any = {\n                    hash: txReceipt.hash,\n                    chainId: chainId,\n                    selectChain: selectChain,\n                    account: account,\n                    value: inputAmount,\n                    formatvalue: typedValue,\n                    to: receiveAddress,\n                    symbol: inputCurrency?.symbol,\n                    version: destConfig.type,\n                    pairid: inputCurrency?.symbol,\n                    routerToken: routerToken\n                  }\n                  recordsTxns(data)\n                  onChangeViewDtil(txReceipt?.hash, true)\n                } else {\n                  addTransaction(txReceipt, { summary: `${swapType === 'deposit' ? 'Deposit' : 'Withdraw'} ${typedValue} ${config.getBaseCoin(inputCurrency?.symbol, chainId)}` })\n                }\n              } else {\n                console.log('Could not swapout')\n              }\n            } catch (error) {\n              console.log('Could not swapout', error)\n              onChangeViewErrorTip(error, true)\n            }\n          }\n        : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: inputCurrency?.symbol})\n    }\n  }, [chainId, inputCurrency, inputAmount, balance, addTransaction, t, inputToken, account, routerToken, selectChain, destConfig, useToChainId, userInterfaceBalanceValid])\n}\n\n\nexport function useTrxPoolDatas () {\n  const getTrxPoolDatas = useCallback(async(calls, chainId) => {\n    return new Promise(resolve => {\n      const arr = []\n      const labelArr:any = []\n      // console.log(calls)\n      if (window.tronWeb && [ChainId.TRX, ChainId.TRX_TEST].includes(chainId) ) {\n        // console.log(calls)\n        // const useAccount = window.tronWeb.defaultAddress.base58\n        for (const item of calls) {\n          const anytoken = item.anytoken ? fromHexAddress(item.anytoken) : ''\n          const anytokenSource = item.anytoken\n          // const anytoken = item.anytoken ? toHexAddress(item.anytoken) : ''\n          // const anytoken = item.anytoken\n          // const underlyingToken = item.token\n          const underlyingToken = item.token ? fromHexAddress(item.token) : ''\n          // console.log('anytoken', anytoken)\n          // console.log('underlyingToken', underlyingToken)\n          if (underlyingToken && anytoken) {\n            // console.log(underlyingToken, anytoken)\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            arr.push(window?.tronWeb?.contract(ABI_TO_ADDRESS, underlyingToken).balanceOf(anytoken).call())\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balanceOf',\n              dec: item.dec\n            })\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"totalSupply()\", {}, {}, useAccount))\n            arr.push(window?.tronWeb?.contract(ABI_TO_ADDRESS, underlyingToken).totalSupply().call())\n            labelArr.push({\n              key: anytokenSource,\n              label: 'totalSupply',\n              dec: item.dec\n            })\n          }\n          // console.log(item)\n          // console.log(chainId)\n          if (anytoken && isAddress(item.account, chainId)) {\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\n            arr.push(window?.tronWeb?.contract(ABI_TO_ADDRESS, anytoken).balanceOf(item.account).call())\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balance',\n              dec: item.dec\n            })\n          }\n        }\n      }\n      // console.log(arr)\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        const list:any = {}\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key\n          const l = labelArr[i].label\n          // const dec = labelArr[i].dec\n          if (!list[k]) list[k] = {}\n          // list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\n          list[k][l] = res[i].toString()\n        }\n        // console.log(list)\n        resolve(list)\n      })\n    })\n  }, [])\n\n  return {\n    getTrxPoolDatas,\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}