{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectedMeteorWalletAccount = exports.MeteorWallet = void 0;\nconst near_api_js_1 = require(\"near-api-js\");\n// import { Action, createTransaction, Transaction } from \"near-api-js/lib/transaction\";\nconst ExternalActionTypes_1 = require(\"../../meteor-common/src/models/external_actions/ExternalActionTypes\");\nconst borsh_1 = require(\"borsh\");\nconst StringUtils_1 = require(\"../../meteor-common/src/utils/StringUtils\");\n// import { PublicKey } from \"near-api-js/lib/utils\";\nconst EnvironmentStorageUtils_1 = require(\"../../meteor-common/src/utils/EnvironmentStorageUtils\");\nconst TransactionSchema_1 = require(\"./near-schema/TransactionSchema\");\nconst MeteorSdkUtils_1 = require(\"./utils/MeteorSdkUtils\");\nconst MeteorPostMessenger_1 = require(\"./postMessage/MeteorPostMessenger\");\nconst LOGIN_WALLET_URL_SUFFIX = \"/login/\";\nconst SIGN_WALLET_URL_SUFFIX = \"/sign/\";\nconst MULTISIG_HAS_METHOD = \"add_request_and_confirm\";\nconst LOCAL_STORAGE_KEY_SUFFIX = \"_meteor_wallet_auth_key\";\nconst PENDING_ACCESS_KEY_PREFIX = \"pending_key\"; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\nconst localStorageAdapter = new EnvironmentStorageUtils_1.EnvironmentStateAdapter_Sync({\n  getString: key => window.localStorage.getItem(key),\n  setString: (key, value) => window.localStorage.setItem(key, value),\n  clear: key => window.localStorage.removeItem(key)\n});\nconst sessionAdapter = new EnvironmentStorageUtils_1.EnvironmentStateAdapter_Sync({\n  getString: key => window.sessionStorage.getItem(key),\n  setString: (key, value) => window.sessionStorage.setItem(key, value),\n  clear: key => window.sessionStorage.removeItem(key)\n});\n/**\r\n * This class is used in conjunction with `near-api-js` and `BrowserLocalStorageKeyStore`.\r\n * It directs users to the Meteor Extension or (if not available) a popup of the Meteor Wallet website for key management.\r\n *\r\n * @example\r\n * ```js\r\n * import { MeteorWallet } from \"@meteorwallet/sdk\";\r\n *\r\n * // create new MeteorWallet instance (passing in your initialized Near connection)\r\n * const meteorWallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n *\r\n * // -- or -- (for a quick and default Near connection config)\r\n * const meteorWallet = MeteorWallet.init({ networkId: \"testnet\" });\r\n *\r\n * // If not signed in, start the sign-in flow with Meteor Wallet.\r\n * // Keys will be stored in the BrowserLocalStorageKeyStore\r\n * if(!meteorWallet.isSignedIn()) {\r\n *   const { accountId } = await meteorWallet.requestSignIn();\r\n * }\r\n * ```\r\n */\nclass MeteorWallet {\n  /**\r\n   * Construct MeteorWallet. If you'd a quick and default way, you can also use {@link MeteorWallet.init}\r\n   *\r\n   * @example\r\n   * ```js\r\n   * // create new MeteorWallet instance (passing in your initialized Near connection)\r\n   * const meteorWallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n   *\r\n   * if(!meteorWallet.isSignedIn()) {\r\n   *   const { accountId } = await meteorWallet.requestSignIn();\r\n   * }\r\n   * ```\r\n   */\n  constructor(_a) {\n    var _b, _c;\n    var {\n      near,\n      appKeyPrefix = (_b = near.config.contractName) !== null && _b !== void 0 ? _b : \"default\"\n    } = _a;\n    /** @hidden */\n    this._initializationPromises = [];\n    this._near = near;\n    const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n    this._authDataKey = authDataKey;\n    this._authData = (_c = localStorageAdapter.getJson(authDataKey)) !== null && _c !== void 0 ? _c : {\n      allKeys: []\n    };\n    this._networkId = near.config.networkId;\n    this._walletBaseUrl = near.config.walletUrl;\n    this._keyStore = near.connection.signer.keyStore;\n    /*\r\n    console.log(\"Initialized wallet- checking if signed in\");\r\n          if (!this.isSignedIn()) {\r\n      console.log(\"Completing sign-in process, if its available\");\r\n      this._initializationPromises.push(this._completeSignInWithAccessKey());\r\n    }*/\n  }\n  /**\r\n   * The easiest way to set up the SDK. Returns an instance of MeteorWallet, automatically connected to the Near API.\r\n   *\r\n   * If you need more control over the Near Network configuration- rather use {@link MeteorWallet:constructor}\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const wallet = await MeteorWallet.init({ networkId: \"testnet\" });\r\n   * ```\r\n   */\n  static async init(_ref) {\n    let {\n      walletUrl,\n      ...config\n    } = _ref;\n    const keyStore = new near_api_js_1.keyStores.BrowserLocalStorageKeyStore();\n    const near = await (0, near_api_js_1.connect)({\n      keyStore,\n      headers: {},\n      walletUrl: (0, MeteorSdkUtils_1.resolveWalletUrl)(config.networkId, walletUrl),\n      ...(0, MeteorSdkUtils_1.getNetworkPreset)(config.networkId),\n      ...config\n    });\n    const wallet = new MeteorWallet({\n      near,\n      appKeyPrefix: \"near_app\"\n    });\n    // Cleanup up any pending keys (cancelled logins).\n    if (!wallet.isSignedIn()) {\n      await keyStore.clear();\n    }\n    return wallet;\n  }\n  /* async initialize() {\r\n     await Promise.all(this._initializationPromises);\r\n   }*/\n  isExtensionInstalled() {\n    return window.meteorWallet != null;\n  }\n  /**\r\n   * Returns true, if this app is authorized with an account in the wallet.\r\n   * @example\r\n   * ```js\r\n   * const wallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n   * wallet.isSignedIn();\r\n   * ```\r\n   */\n  isSignedIn() {\n    return !!this._authData.accountId;\n  }\n  /**\r\n   * Returns authorized Account ID.\r\n   * @example\r\n   * ```js\r\n   * const wallet = new MeteorWallet(near, 'my-app');\r\n   * const accountId = wallet.getAccountId();\r\n   * ```\r\n   */\n  getAccountId() {\n    return this._authData.accountId;\n  }\n  /**\r\n   * Verifies that the user is the owner of a specific Near account, available in the wallet.\r\n   * Removes the need to do blockchain operations for simple Dapp actions.\r\n   * Signs a payload with the wallet's private key. Will return a promise with a payload like so:\r\n   *\r\n   * ```ts\r\n   * interface VerifiedOwner {\r\n   *   accountId: string;\r\n   *   message: string;                 // The same passed message, unencrypted\r\n   *   blockId: string;\r\n   *   publicKey: string;               // The public key which should be verified as belonging to this account\r\n   *   signature: string;               // The signed payload (this exact same object JSON stringified, excluding this \"signature\" property)\r\n   *   keyType: utils.key_pair.KeyType; // Type from inside the near-api-js package\r\n   * }\r\n   * ```\r\n   *\r\n   * or throw a {@link MeteorActionError} error if the verification failed for whatever reason.\r\n   * */\n  async verifyOwner(options) {\n    var _a;\n    const accountId = (_a = options.accountId) !== null && _a !== void 0 ? _a : this.getAccountId();\n    const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\n      actionType: ExternalActionTypes_1.EWalletExternalActionType.verify_owner,\n      inputs: {\n        accountId,\n        message: options.message\n      },\n      network: this._networkId\n    });\n    if (response.success) {\n      return response;\n    } else {\n      throw new ExternalActionTypes_1.MeteorActionError({\n        endTags: response.endTags,\n        message: response.message\n      });\n    }\n  }\n  /**\r\n   * Requests a sign-in using Meteor Wallet. Will return a promise with the `accountId` of the\r\n   * signed-in account, or throw a {@link MeteorActionError} error if the sign-in failed for whatever reason.\r\n   * */\n  async requestSignIn(options) {\n    const {\n      keyPair,\n      ...restOptions\n    } = options;\n    const accessKey = keyPair !== null && keyPair !== void 0 ? keyPair : near_api_js_1.KeyPair.fromRandom(\"ed25519\");\n    let usingPublicKey = accessKey.getPublicKey().toString();\n    const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\n      actionType: ExternalActionTypes_1.EWalletExternalActionType.login,\n      inputs: {\n        public_key: usingPublicKey,\n        ...restOptions\n      },\n      network: this._networkId\n    });\n    if (response.success) {\n      const {\n        allKeys,\n        accountId\n      } = response.payload;\n      this._authData = {\n        accountId,\n        allKeys,\n        signedInContract: {\n          contract_id: restOptions.contract_id,\n          public_key: usingPublicKey\n        }\n      };\n      localStorageAdapter.setJson(this._authDataKey, this._authData);\n      await this._keyStore.setKey(this._networkId, accountId, accessKey);\n      return {\n        success: true,\n        endTags: [],\n        payload: {\n          accessKey,\n          accountId\n        }\n      };\n    } else {\n      throw new ExternalActionTypes_1.MeteorActionError({\n        endTags: response.endTags,\n        message: response.message\n      });\n    }\n  }\n  /**\r\n   * Sign out from the current account\r\n   */\n  async signOut() {\n    const accountId = this.getAccountId();\n    if (this._authData.signedInContract != null && accountId != null) {\n      const inputs = {\n        accountId,\n        contractInfo: this._authData.signedInContract\n      };\n      const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\n        actionType: ExternalActionTypes_1.EWalletExternalActionType.logout,\n        inputs,\n        network: this._networkId\n      });\n    }\n    this._authData = {\n      allKeys: []\n    };\n    localStorageAdapter.clear(this._authDataKey);\n  }\n  /**\r\n   * Sign transactions using Meteor Wallet. Will return a promise with an array of `FinalExecutionOutcome`\r\n   * of the given transactions.\r\n   * */\n  async requestSignTransactions(inputs) {\n    const {\n      transactions\n    } = inputs;\n    const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\n      actionType: ExternalActionTypes_1.EWalletExternalActionType.sign,\n      inputs: {\n        transactions: transactions.map(transaction => (0, borsh_1.serialize)(TransactionSchema_1.SCHEMA, transaction)).map(serialized => Buffer.from(serialized).toString(\"base64\")).join(\",\")\n      },\n      // inputs: { public_key: usingPublicKey, ...options },\n      network: this._networkId\n    });\n    // console.log(\"Finished sign-in request\", response);\n    if (response.success) {\n      return response.payload.executionOutcomes;\n    } else {\n      throw new ExternalActionTypes_1.MeteorActionError({\n        endTags: response.endTags,\n        message: response.message\n      });\n    }\n    return [];\n  }\n  /**\r\n   * Returns the current connected wallet account\r\n   */\n  account() {\n    const currentAccountId = this.getAccountId();\n    if (!this._connectedAccount && (0, StringUtils_1.notNullEmpty)(currentAccountId)) {\n      this._connectedAccount = new ConnectedMeteorWalletAccount(this, this._near.connection, currentAccountId);\n    }\n    return this._connectedAccount;\n  }\n}\nexports.MeteorWallet = MeteorWallet;\n/**\r\n * Near Account implementation which makes use of {@link MeteorWallet} when no local key is available.\r\n *\r\n * Generally won't be created directly- can be obtained by using {@link MeteorWallet.account}\r\n *\r\n * @example\r\n * ```js\r\n * const account = meteorWallet.account();\r\n *\r\n * // uses Meteor Wallet to sign the transaction using this account\r\n * const response = await account.requestSignTransaction({\r\n *   actions: transactionActions,\r\n *   receiverId: \"my-contract\"\r\n * });\r\n * ```\r\n */\nclass ConnectedMeteorWalletAccount extends near_api_js_1.Account {\n  /** @hidden */\n  constructor(walletConnection, connection, accountId) {\n    super(connection, accountId);\n    this.meteorWallet = walletConnection;\n  }\n  /**\r\n   * Sign a transaction using Meteor Wallet. Overrides the Near Account API method of the same name, makes use of {@link ConnectedMeteorWalletAccount.signAndSendTransaction_direct}\r\n   */\n  async signAndSendTransaction() {\n    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === \"string\") {\n      return this.signAndSendTransaction_direct({\n        receiverId: arguments.length <= 0 ? undefined : arguments[0],\n        actions: arguments.length <= 1 ? undefined : arguments[1]\n      });\n    }\n    return this.signAndSendTransaction_direct(arguments.length <= 0 ? undefined : arguments[0]);\n  }\n  /** @hidden */\n  async trySendOrCreateTransaction(_ref2) {\n    let {\n      receiverId,\n      actions\n    } = _ref2;\n    const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n    let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);\n    if (!accessKey) {\n      throw new Error(\"Cannot find matching key for transaction sent to \".concat(receiverId));\n    }\n    if (localKey && localKey.toString() === accessKey.public_key) {\n      try {\n        return {\n          executionOutcome: await super.signAndSendTransaction({\n            receiverId,\n            actions\n          }),\n          sent: true\n        };\n      } catch (e) {\n        if (e.type === \"NotEnoughAllowance\") {\n          accessKey = await this.accessKeyForTransaction(receiverId, actions);\n        } else {\n          throw e;\n        }\n      }\n    }\n    const block = await this.connection.provider.block({\n      finality: \"final\"\n    });\n    const blockHash = (0, borsh_1.baseDecode)(block.header.hash);\n    const publicKey = near_api_js_1.utils.PublicKey.from(accessKey.public_key);\n    // TODO: Cache & listen for nonce updates for given access key\n    const nonce = accessKey.access_key.nonce + 1;\n    const transaction = near_api_js_1.transactions.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n    return {\n      sent: false,\n      transaction\n    };\n  }\n  /**\r\n   * Sign a transaction using Meteor Wallet\r\n   * @see {@link MeteorWallet.requestSignTransactions}\r\n   */\n  async signAndSendTransaction_direct(_ref3) {\n    let {\n      receiverId,\n      actions\n    } = _ref3;\n    const {\n      transaction,\n      sent,\n      executionOutcome\n    } = await this.trySendOrCreateTransaction({\n      receiverId,\n      actions\n    });\n    if (sent) {\n      return executionOutcome;\n    }\n    return (await this.meteorWallet.requestSignTransactions({\n      transactions: [transaction]\n    }))[0];\n  }\n  /** @hidden */\n  /*async signAndSendTransaction_redirect({\r\n    receiverId,\r\n    actions,\r\n    walletMeta,\r\n    walletCallbackUrl = window.location.href,\r\n  }: SignAndSendTransactionOptions): Promise<FinalExecutionOutcome> {\r\n    const { transaction, sent, executionOutcome } = await this.trySendOrCreateTransaction({ receiverId, actions });\r\n        if (sent) {\r\n      return executionOutcome!;\r\n    }\r\n        await this.meteorWallet.requestSignTransactions_redirect({\r\n      transactions: [transaction!],\r\n      meta: walletMeta,\r\n      callback_url: walletCallbackUrl,\r\n    });\r\n        return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        reject(new Error(\"Failed to redirect to sign transaction\"));\r\n      }, 1000);\r\n    });\r\n  }*/\n  /**\r\n   * Check if given access key allows the function call or method attempted in transaction\r\n   * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\r\n   * @param receiverId The NEAR account attempting to have access\r\n   * @param actions The action(s) needed to be checked for access\r\n   */\n  async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n    const {\n      access_key: {\n        permission\n      }\n    } = accessKey;\n    if (permission === \"FullAccess\") {\n      return true;\n    }\n    if (permission.FunctionCall) {\n      const {\n        receiver_id: allowedReceiverId,\n        method_names: allowedMethods\n      } = permission.FunctionCall;\n      /********************************\r\n       Accept multisig access keys and let wallets attempt to signAndSendTransaction\r\n       If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\r\n       ********************************/\n      if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n        return true;\n      }\n      if (allowedReceiverId === receiverId) {\n        if (actions.length !== 1) {\n          return false;\n        }\n        const [{\n          functionCall\n        }] = actions;\n        return functionCall && (!functionCall.deposit || functionCall.deposit.toString() === \"0\") && (\n        // TODO: Should support charging amount smaller than allowance?\n        allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));\n        // TODO: Handle cases when allowance doesn't have enough to pay for gas\n      }\n    }\n    // TODO: Support other permissions than FunctionCall\n    return false;\n  }\n  /**\r\n   * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\r\n   * @param receiverId The NEAR account seeking the access key for a transaction\r\n   * @param actions The action(s) sought to gain access to\r\n   * @param localKey A local public key provided to check for access\r\n   * @returns Promise<any>\r\n   */\n  async accessKeyForTransaction(receiverId, actions, localKey) {\n    const accessKeys = await this.getAccessKeys();\n    if (localKey) {\n      const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());\n      if (accessKey && (await this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n        return accessKey;\n      }\n    }\n    const walletKeys = this.meteorWallet._authData.allKeys;\n    for (const accessKey of accessKeys) {\n      if (walletKeys.indexOf(accessKey.public_key) !== -1 && (await this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n        return accessKey;\n      }\n    }\n    return null;\n  }\n}\nexports.ConnectedMeteorWalletAccount = ConnectedMeteorWalletAccount;","map":{"version":3,"names":["near_api_js_1","require","ExternalActionTypes_1","borsh_1","StringUtils_1","EnvironmentStorageUtils_1","TransactionSchema_1","MeteorSdkUtils_1","MeteorPostMessenger_1","LOGIN_WALLET_URL_SUFFIX","SIGN_WALLET_URL_SUFFIX","MULTISIG_HAS_METHOD","LOCAL_STORAGE_KEY_SUFFIX","PENDING_ACCESS_KEY_PREFIX","localStorageAdapter","EnvironmentStateAdapter_Sync","getString","key","window","localStorage","getItem","setString","value","setItem","clear","removeItem","sessionAdapter","sessionStorage","MeteorWallet","constructor","_a","near","appKeyPrefix","_b","config","contractName","_initializationPromises","_near","authDataKey","_authDataKey","_authData","_c","getJson","allKeys","_networkId","networkId","_walletBaseUrl","walletUrl","_keyStore","connection","signer","keyStore","init","_ref","keyStores","BrowserLocalStorageKeyStore","connect","headers","resolveWalletUrl","getNetworkPreset","wallet","isSignedIn","isExtensionInstalled","meteorWallet","accountId","getAccountId","verifyOwner","options","response","getMeteorPostMessenger","connectAndWaitForResponse","actionType","EWalletExternalActionType","verify_owner","inputs","message","network","success","MeteorActionError","endTags","requestSignIn","keyPair","restOptions","accessKey","KeyPair","fromRandom","usingPublicKey","getPublicKey","toString","login","public_key","payload","signedInContract","contract_id","setJson","setKey","signOut","contractInfo","logout","requestSignTransactions","transactions","sign","map","transaction","serialize","SCHEMA","serialized","Buffer","from","join","executionOutcomes","account","currentAccountId","_connectedAccount","notNullEmpty","ConnectedMeteorWalletAccount","exports","Account","walletConnection","signAndSendTransaction","arguments","length","undefined","signAndSendTransaction_direct","receiverId","actions","trySendOrCreateTransaction","_ref2","localKey","accessKeyForTransaction","Error","concat","executionOutcome","sent","e","type","block","provider","finality","blockHash","baseDecode","header","hash","publicKey","utils","PublicKey","nonce","access_key","createTransaction","_ref3","accessKeyMatchesTransaction","permission","FunctionCall","receiver_id","allowedReceiverId","method_names","allowedMethods","includes","functionCall","deposit","methodName","accessKeys","getAccessKeys","find","walletKeys","indexOf"],"sources":["./src/meteor-sdk/src/MeteorWallet.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}