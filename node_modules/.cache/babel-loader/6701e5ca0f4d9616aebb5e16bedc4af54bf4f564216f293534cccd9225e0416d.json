{"ast":null,"code":"// import { useRecoilValue } from 'recoil'\nimport _ from'lodash';// import { UTIL } from 'consts'\n// import AuthStore from 'store/AuthStore'\n// import useMantle from './useMantle'\n// import { BalanceListType } from 'types/asset'\nimport{useConnectedWallet}from'@terra-money/wallet-provider';import{useCallback}from'react';import{terraExt}from'../nonevm/terra';const jsonTryParse=value=>{try{return JSON.parse(value);}catch{return undefined;}};// eslint-disable-next-line @typescript-eslint/ban-types\nconst stringify=msg=>JSON.stringify(msg).replace(/\"/g,'\\\\\"');const bankBalanceQuery=\"\\n  query($address: String) {\\n    BankBalancesAddress(Address: $address) {\\n      Result {\\n        Amount\\n        Denom\\n      }\\n    }\\n  }\\n\";const alias=_ref=>{let{token,contract,msg}=_ref;return\"\".concat(token,\": WasmContractsContractAddressStore(\\n      ContractAddress: \\\"\").concat(contract,\"\\\"\\n      QueryMsg: \\\"\").concat(stringify(msg),\"\\\"\\n    ) {\\n      Height\\n      Result\\n    }\");};const getTokenBalanceQuery=queries=>\"\\nquery {\\n  \".concat(queries.map(alias),\"\\n}\\n\");// const TERRA_RPC = 'https://mantle.terra.dev/'\n// const TERRA_RPC = 'https://tequila-mantle.terra.dev/'\n// const TERRA_RPC = 'https://bombay-fcd.terra.dev/'\nconst TERRA_RPC=terraExt.mantle;const useMantle=()=>{// const terraLocal = useRecoilValue(NetworkStore.terraLocal)\n// console.log(terraLocal)\nconst fetchQuery=_ref2=>{let{query,variables}=_ref2;return fetch(TERRA_RPC,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query,variables})}).then(res=>res.json()).then(res=>res.data).catch(error=>error);};return{fetchQuery};};export function useTerraBaseBalance(){const connectedWallet=useConnectedWallet();const{fetchQuery}=useMantle();const getTerraBaseBalances=useCallback(async()=>{try{var _fetchResult$BankBala;const fetchResult=await fetchQuery({query:bankBalanceQuery,variables:JSON.stringify({address:connectedWallet===null||connectedWallet===void 0?void 0:connectedWallet.walletAddress})});const resultList=(fetchResult===null||fetchResult===void 0?void 0:(_fetchResult$BankBala=fetchResult.BankBalancesAddress)===null||_fetchResult$BankBala===void 0?void 0:_fetchResult$BankBala.Result)||[];if(_.some(resultList)){const list={};_.forEach(resultList,x=>{list[x.Denom]=x.Amount;});return list;}else{return{};}}catch(error){return{};}},[bankBalanceQuery,connectedWallet]);return{getTerraBaseBalances};}export function useTerraTokenBalances(){const connectedWallet=useConnectedWallet();const{fetchQuery}=useMantle();const getTerraTokenBalances=useCallback(async _ref3=>{let{terraWhiteList}=_ref3;const aliasResult=getTokenBalanceQuery(Object.values(terraWhiteList).map(_ref4=>{let{token}=_ref4;return{token,contract:token,msg:{balance:{address:connectedWallet===null||connectedWallet===void 0?void 0:connectedWallet.walletAddress}}};}));try{const fetchResult=await fetchQuery({query:aliasResult});if(_.some(fetchResult)){const list={};_.forEach(fetchResult,(x,key)=>{if(x){const res=jsonTryParse(x.Result);if(res)list[key]=res.balance;}});return list;}else{return{};}}catch(error){return{};}},[connectedWallet,getTokenBalanceQuery]);return{getTerraTokenBalances};}const useTerraBalance=()=>{// const loginUser = useRecoilValue(AuthStore.loginUser)\nconst connectedWallet=useConnectedWallet();const{fetchQuery}=useMantle();const getTerraTokenBalances=useCallback(async _ref5=>{let{terraWhiteList,account}=_ref5;const useAccount=account?account:connectedWallet===null||connectedWallet===void 0?void 0:connectedWallet.walletAddress;if(!useAccount)return{};const aliasResult=getTokenBalanceQuery(Object.values(terraWhiteList).map(_ref6=>{let{token}=_ref6;return{token,contract:token,msg:{balance:{address:useAccount}}};}));try{const fetchResult=await fetchQuery({query:aliasResult});if(_.some(fetchResult)){const list={};_.forEach(fetchResult,(x,key)=>{if(x){const res=jsonTryParse(x.Result);if(res)list[key]=res.balance;}});return list;}else{return{};}}catch(error){return{};}},[connectedWallet,getTokenBalanceQuery]);// console.log(connectedWallet)\n// const getTerraBankBalances = async (): Promise<BalanceListType> => {\nconst getTerraBankBalances=useCallback(async account=>{const useAccount=account?account:connectedWallet===null||connectedWallet===void 0?void 0:connectedWallet.walletAddress;if(!useAccount)return{};try{var _fetchResult$BankBala2;const fetchResult=await fetchQuery({query:bankBalanceQuery,variables:JSON.stringify({address:useAccount})});const resultList=(fetchResult===null||fetchResult===void 0?void 0:(_fetchResult$BankBala2=fetchResult.BankBalancesAddress)===null||_fetchResult$BankBala2===void 0?void 0:_fetchResult$BankBala2.Result)||[];if(_.some(resultList)){const list={};_.forEach(resultList,x=>{list[x.Denom]=x.Amount;});return list;}else{return{};}}catch(error){return{};}},[bankBalanceQuery,connectedWallet]);const getTerraBalances=useCallback(async _ref7=>{let{terraWhiteList,account}=_ref7;const bank=await getTerraBankBalances(account);const token=await getTerraTokenBalances({terraWhiteList,account});// console.log(account)\n// console.log(terraWhiteList)\n// console.log(bank)\n// console.log(token)\nreturn{...bank,...token};},[getTerraBankBalances,getTerraTokenBalances,connectedWallet]);return{getTerraBalances};};export default useTerraBalance;","map":{"version":3,"names":["_","useConnectedWallet","useCallback","terraExt","jsonTryParse","value","JSON","parse","undefined","stringify","msg","replace","bankBalanceQuery","alias","_ref","token","contract","concat","getTokenBalanceQuery","queries","map","TERRA_RPC","mantle","useMantle","fetchQuery","_ref2","query","variables","fetch","method","headers","body","then","res","json","data","catch","error","useTerraBaseBalance","connectedWallet","getTerraBaseBalances","_fetchResult$BankBala","fetchResult","address","walletAddress","resultList","BankBalancesAddress","Result","some","list","forEach","x","Denom","Amount","useTerraTokenBalances","getTerraTokenBalances","_ref3","terraWhiteList","aliasResult","Object","values","_ref4","balance","key","useTerraBalance","_ref5","account","useAccount","_ref6","getTerraBankBalances","_fetchResult$BankBala2","getTerraBalances","_ref7","bank"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useTerraBalance.ts"],"sourcesContent":["// import { useRecoilValue } from 'recoil'\nimport _ from 'lodash'\n\n// import { UTIL } from 'consts'\n\n// import AuthStore from 'store/AuthStore'\n\n// import useMantle from './useMantle'\n// import { BalanceListType } from 'types/asset'\n\nimport { useConnectedWallet } from '@terra-money/wallet-provider'\nimport { useCallback } from 'react'\nimport {terraExt} from '../nonevm/terra'\n\nconst jsonTryParse = <T>(value: string): T | undefined => {\n  try {\n    return JSON.parse(value) as T\n  } catch {\n    return undefined\n  }\n}\n\ntype BalanceListType = Record<\n  string, // tokenAddress\n  string // balance\n>\n\ninterface Query {\n  token: string\n  contract: string\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  msg: object\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst stringify = (msg: object): string =>\n  JSON.stringify(msg).replace(/\"/g, '\\\\\"')\n\nconst bankBalanceQuery = `\n  query($address: String) {\n    BankBalancesAddress(Address: $address) {\n      Result {\n        Amount\n        Denom\n      }\n    }\n  }\n`\n\nconst alias = ({ token, contract, msg }: Query): string =>\n  `${token}: WasmContractsContractAddressStore(\n      ContractAddress: \"${contract}\"\n      QueryMsg: \"${stringify(msg)}\"\n    ) {\n      Height\n      Result\n    }`\n\nconst getTokenBalanceQuery = (queries: Query[]): string => `\nquery {\n  ${queries.map(alias)}\n}\n`\n\n// const TERRA_RPC = 'https://mantle.terra.dev/'\n// const TERRA_RPC = 'https://tequila-mantle.terra.dev/'\n// const TERRA_RPC = 'https://bombay-fcd.terra.dev/'\nconst TERRA_RPC = terraExt.mantle\n\nconst useMantle = (): {\n  fetchQuery: ({\n    query,\n    variables,\n  }: {\n    query: string\n    variables?: string\n  }) => Promise<any> | undefined\n} => {\n  // const terraLocal = useRecoilValue(NetworkStore.terraLocal)\n  // console.log(terraLocal)\n  const fetchQuery = ({\n    query,\n    variables,\n  }: {\n    query: string\n    variables?: string\n  }): Promise<any> | undefined =>\n    fetch(TERRA_RPC, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query, variables }),\n    })\n      .then((res) => res.json())\n      .then((res) => res.data)\n      .catch((error) => error)\n\n  return {\n    fetchQuery,\n  }\n}\n\nexport function useTerraBaseBalance () {\n  const connectedWallet = useConnectedWallet()\n  const { fetchQuery } = useMantle()\n  const getTerraBaseBalances = useCallback(async (): Promise<BalanceListType> => {\n    try {\n      const fetchResult = await fetchQuery({\n        query: bankBalanceQuery,\n        variables: JSON.stringify({ address: connectedWallet?.walletAddress }),\n      })\n      const resultList: {\n        Amount: string\n        Denom: string\n      }[] = fetchResult?.BankBalancesAddress?.Result || []\n      if (_.some(resultList)) {\n        const list: BalanceListType = {}\n        _.forEach(resultList, (x) => {\n          list[x.Denom] = x.Amount\n        })\n        return list\n      } else {\n        return {}\n      }\n    } catch (error) {\n      return {}\n    }\n\n  }, [bankBalanceQuery, connectedWallet])\n  return { getTerraBaseBalances }\n}\n\nexport function useTerraTokenBalances () {\n  const connectedWallet = useConnectedWallet()\n  const { fetchQuery } = useMantle()\n  const getTerraTokenBalances = useCallback(async ({\n    terraWhiteList,\n  }: {\n    terraWhiteList: { token: string }[]\n  }): Promise<BalanceListType> => {\n    const aliasResult = getTokenBalanceQuery(\n      Object.values(terraWhiteList).map(({ token }) => ({\n        token,\n        contract: token,\n        msg: { balance: { address: connectedWallet?.walletAddress } },\n      }))\n    )\n    try {\n      \n      const fetchResult: Record<\n        string,\n        { Height: string; Result: string }\n      > = await fetchQuery({\n        query: aliasResult,\n      })\n  \n      if (_.some(fetchResult)) {\n        const list: BalanceListType = {}\n        _.forEach(fetchResult, (x, key) => {\n          if (x) {\n            const res = jsonTryParse<{ balance: string }>(x.Result)\n            if (res) list[key] = res.balance\n          }\n        })\n        return list\n      } else {\n        return {}\n      }\n    } catch (error) {\n      return {}\n    }\n  }, [connectedWallet, getTokenBalanceQuery])\n\n  return {getTerraTokenBalances}\n}\n\nconst useTerraBalance = (): {\n  getTerraBalances: ({\n    terraWhiteList,\n    account\n  }: {\n    terraWhiteList: {\n      token: string\n    }[],\n    account?:any\n  }) => Promise<BalanceListType>\n} => {\n  // const loginUser = useRecoilValue(AuthStore.loginUser)\n  const connectedWallet = useConnectedWallet()\n  const { fetchQuery } = useMantle()\n\n  const getTerraTokenBalances = useCallback(async ({\n    terraWhiteList,\n    account\n  }: {\n    terraWhiteList: { token: string }[]\n    account?:any\n  }): Promise<BalanceListType> => {\n    const useAccount = account ? account : connectedWallet?.walletAddress\n    if (!useAccount) return {}\n    const aliasResult = getTokenBalanceQuery(\n      Object.values(terraWhiteList).map(({ token }) => ({\n        token,\n        contract: token,\n        msg: { balance: { address: useAccount } },\n      }))\n    )\n    try {\n      \n      const fetchResult: Record<\n        string,\n        { Height: string; Result: string }\n      > = await fetchQuery({\n        query: aliasResult,\n      })\n  \n      if (_.some(fetchResult)) {\n        const list: BalanceListType = {}\n        _.forEach(fetchResult, (x, key) => {\n          if (x) {\n            const res = jsonTryParse<{ balance: string }>(x.Result)\n            if (res) list[key] = res.balance\n          }\n        })\n        return list\n      } else {\n        return {}\n      }\n    } catch (error) {\n      return {}\n    }\n  }, [connectedWallet, getTokenBalanceQuery])\n  // console.log(connectedWallet)\n  // const getTerraBankBalances = async (): Promise<BalanceListType> => {\n  const getTerraBankBalances = useCallback(async (account?:any): Promise<BalanceListType> => {\n    const useAccount = account ? account : connectedWallet?.walletAddress\n    if (!useAccount) return {}\n    try {\n      \n      const fetchResult = await fetchQuery({\n        query: bankBalanceQuery,\n        variables: JSON.stringify({ address: useAccount }),\n      })\n      const resultList: {\n        Amount: string\n        Denom: string\n      }[] = fetchResult?.BankBalancesAddress?.Result || []\n  \n      if (_.some(resultList)) {\n        const list: BalanceListType = {}\n        _.forEach(resultList, (x) => {\n          list[x.Denom] = x.Amount\n        })\n        return list\n      } else {\n        return {}\n      }\n    } catch (error) {\n      return {}\n    }\n  }, [bankBalanceQuery, connectedWallet])\n\n  const getTerraBalances = useCallback(async ({\n    terraWhiteList,\n    account\n  }: {\n    terraWhiteList: { token: string }[],\n    account?: any\n  }): Promise<BalanceListType> => {\n    const bank = await getTerraBankBalances(account)\n    const token = await getTerraTokenBalances({ terraWhiteList, account })\n    // console.log(account)\n    // console.log(terraWhiteList)\n    // console.log(bank)\n    // console.log(token)\n    return {\n      ...bank,\n      ...token,\n    }\n  }, [getTerraBankBalances, getTerraTokenBalances, connectedWallet])\n\n  return { getTerraBalances }\n}\n\nexport default useTerraBalance\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}