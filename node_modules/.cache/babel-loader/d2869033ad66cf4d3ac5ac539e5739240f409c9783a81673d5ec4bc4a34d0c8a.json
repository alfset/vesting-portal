{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MuxedAccount = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _isString = require('lodash/isString');\nvar _isString2 = _interopRequireDefault(_isString);\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _account = require('./account');\nvar _strkey = require('./strkey');\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Represents a muxed account for transactions and operations.\n *\n * A muxed (or *multiplexed*) account (defined rigorously in\n * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in\n * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single\n * Stellar `G...`` account to many different underlying IDs.\n *\n * For example, you may have a single Stellar address for accounting purposes:\n *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ\n *\n * Yet would like to use it for 4 different family members:\n *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ\n *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ\n *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ\n *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ\n *\n * This object makes it easy to create muxed accounts from regular accounts,\n * duplicate them, get/set the underlying IDs, etc. without mucking around with\n * the raw XDR.\n *\n * Because muxed accounts are purely an off-chain convention, they all share the\n * sequence number tied to their underlying G... account. Thus, this object\n * *requires* an {@link Account} instance to be passed in, so that muxed\n * instances of an account can collectively modify the sequence number whenever\n * a muxed account is used as the source of a @{link Transaction} with {@link\n * TransactionBuilder}.\n *\n * @constructor\n *\n * @param {Account}   account - the @{link Account} instance representing the\n *                              underlying G... address\n * @param {string}    id      - a stringified uint64 value that represents the\n *                              ID of the muxed account\n *\n * @link https://developers.stellar.org/docs/glossary/muxed-accounts/\n */\nvar MuxedAccount = exports.MuxedAccount = function () {\n  function MuxedAccount(baseAccount, id) {\n    _classCallCheck(this, MuxedAccount);\n    var accountId = baseAccount.accountId();\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    this.account = baseAccount;\n    this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);\n    this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n    this._id = id;\n  }\n\n  /**\n   * Parses an M-address into a MuxedAccount object.\n   *\n   * @param  {string} mAddress    - an M-address to transform\n   * @param  {string} sequenceNum - the sequence number of the underlying {@link\n   *     Account}, to use for the underlying base account (@link\n   *     MuxedAccount.baseAccount). If you're using the SDK, you can use\n   *     `server.loadAccount` to fetch this if you don't know it.\n   *\n   * @return {MuxedAccount}\n   */\n\n  _createClass(MuxedAccount, [{\n    key: 'baseAccount',\n    /**\n     * @return {Account} the underlying account object shared among all muxed\n     *     accounts with this Stellar address\n     */\n    value: function baseAccount() {\n      return this.account;\n    }\n\n    /**\n     * @return {string} the M-address representing this account's (G-address, ID)\n     */\n  }, {\n    key: 'accountId',\n    value: function accountId() {\n      return this._mAddress;\n    }\n  }, {\n    key: 'id',\n    value: function id() {\n      return this._id;\n    }\n  }, {\n    key: 'setId',\n    value: function setId(id) {\n      if (!(0, _isString2.default)(id)) {\n        throw new Error('id should be a string representing a number (uint64)');\n      }\n      this._muxedXdr.med25519().id(_xdr2.default.Uint64.fromString(id));\n      this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n      this._id = id;\n      return this;\n    }\n\n    /**\n     * Accesses the underlying account's sequence number.\n     * @return {string}  strigified sequence number for the underlying account\n     */\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.account.sequenceNumber();\n    }\n\n    /**\n     * Increments the underlying account's sequence number by one.\n     * @return {void}\n     */\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      return this.account.incrementSequenceNumber();\n    }\n\n    /**\n     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's\n     *     G-address and uint64 ID\n     */\n  }, {\n    key: 'toXDRObject',\n    value: function toXDRObject() {\n      return this._muxedXdr;\n    }\n  }, {\n    key: 'equals',\n    value: function equals(otherMuxedAccount) {\n      return this.accountId() === otherMuxedAccount.accountId();\n    }\n  }], [{\n    key: 'fromAddress',\n    value: function fromAddress(mAddress, sequenceNum) {\n      var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress);\n      var gAddress = (0, _decode_encode_muxed_account.extractBaseAddress)(mAddress);\n      var id = muxedAccount.med25519().id().toString();\n      return new MuxedAccount(new _account.Account(gAddress, sequenceNum), id);\n    }\n  }]);\n  return MuxedAccount;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","MuxedAccount","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_isString","require","_isString2","_interopRequireDefault","_xdr","_xdr2","_account","_strkey","_decode_encode_muxed_account","obj","__esModule","default","_classCallCheck","instance","TypeError","baseAccount","id","accountId","StrKey","isValidEd25519PublicKey","Error","account","_muxedXdr","encodeMuxedAccount","_mAddress","encodeMuxedAccountToAddress","_id","setId","med25519","Uint64","fromString","sequenceNumber","incrementSequenceNumber","toXDRObject","equals","otherMuxedAccount","fromAddress","mAddress","sequenceNum","muxedAccount","decodeAddressToMuxedAccount","gAddress","extractBaseAddress","toString","Account"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/muxed_account.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MuxedAccount = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _account = require('./account');\n\nvar _strkey = require('./strkey');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Represents a muxed account for transactions and operations.\n *\n * A muxed (or *multiplexed*) account (defined rigorously in\n * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in\n * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single\n * Stellar `G...`` account to many different underlying IDs.\n *\n * For example, you may have a single Stellar address for accounting purposes:\n *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ\n *\n * Yet would like to use it for 4 different family members:\n *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ\n *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ\n *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ\n *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ\n *\n * This object makes it easy to create muxed accounts from regular accounts,\n * duplicate them, get/set the underlying IDs, etc. without mucking around with\n * the raw XDR.\n *\n * Because muxed accounts are purely an off-chain convention, they all share the\n * sequence number tied to their underlying G... account. Thus, this object\n * *requires* an {@link Account} instance to be passed in, so that muxed\n * instances of an account can collectively modify the sequence number whenever\n * a muxed account is used as the source of a @{link Transaction} with {@link\n * TransactionBuilder}.\n *\n * @constructor\n *\n * @param {Account}   account - the @{link Account} instance representing the\n *                              underlying G... address\n * @param {string}    id      - a stringified uint64 value that represents the\n *                              ID of the muxed account\n *\n * @link https://developers.stellar.org/docs/glossary/muxed-accounts/\n */\nvar MuxedAccount = exports.MuxedAccount = function () {\n  function MuxedAccount(baseAccount, id) {\n    _classCallCheck(this, MuxedAccount);\n\n    var accountId = baseAccount.accountId();\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n\n    this.account = baseAccount;\n    this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);\n    this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n    this._id = id;\n  }\n\n  /**\n   * Parses an M-address into a MuxedAccount object.\n   *\n   * @param  {string} mAddress    - an M-address to transform\n   * @param  {string} sequenceNum - the sequence number of the underlying {@link\n   *     Account}, to use for the underlying base account (@link\n   *     MuxedAccount.baseAccount). If you're using the SDK, you can use\n   *     `server.loadAccount` to fetch this if you don't know it.\n   *\n   * @return {MuxedAccount}\n   */\n\n\n  _createClass(MuxedAccount, [{\n    key: 'baseAccount',\n\n\n    /**\n     * @return {Account} the underlying account object shared among all muxed\n     *     accounts with this Stellar address\n     */\n    value: function baseAccount() {\n      return this.account;\n    }\n\n    /**\n     * @return {string} the M-address representing this account's (G-address, ID)\n     */\n\n  }, {\n    key: 'accountId',\n    value: function accountId() {\n      return this._mAddress;\n    }\n  }, {\n    key: 'id',\n    value: function id() {\n      return this._id;\n    }\n  }, {\n    key: 'setId',\n    value: function setId(id) {\n      if (!(0, _isString2.default)(id)) {\n        throw new Error('id should be a string representing a number (uint64)');\n      }\n\n      this._muxedXdr.med25519().id(_xdr2.default.Uint64.fromString(id));\n      this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n      this._id = id;\n      return this;\n    }\n\n    /**\n     * Accesses the underlying account's sequence number.\n     * @return {string}  strigified sequence number for the underlying account\n     */\n\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.account.sequenceNumber();\n    }\n\n    /**\n     * Increments the underlying account's sequence number by one.\n     * @return {void}\n     */\n\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      return this.account.incrementSequenceNumber();\n    }\n\n    /**\n     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's\n     *     G-address and uint64 ID\n     */\n\n  }, {\n    key: 'toXDRObject',\n    value: function toXDRObject() {\n      return this._muxedXdr;\n    }\n  }, {\n    key: 'equals',\n    value: function equals(otherMuxedAccount) {\n      return this.accountId() === otherMuxedAccount.accountId();\n    }\n  }], [{\n    key: 'fromAddress',\n    value: function fromAddress(mAddress, sequenceNum) {\n      var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress);\n      var gAddress = (0, _decode_encode_muxed_account.extractBaseAddress)(mAddress);\n      var id = muxedAccount.med25519().id().toString();\n\n      return new MuxedAccount(new _account.Account(gAddress, sequenceNum), id);\n    }\n  }]);\n\n  return MuxedAccount;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}