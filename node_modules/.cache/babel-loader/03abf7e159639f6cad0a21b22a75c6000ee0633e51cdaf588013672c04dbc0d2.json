{"ast":null,"code":"import { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n// import useInterval from \"../useInterval\"\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { trxAddress } from './actions';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { useBaseBalances, useTokensBalance } from '../../hooks/useAllBalances';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { ChainId } from \"../../config/chainConfig/chainId\";\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\n// import { BigAmount } from \"../../utils/formatBignumber\"\nimport { isAddress } from '../../utils/isAddress';\nimport { ABI_TO_ADDRESS\n// ABI_TO_ADDRESS,\n// ABI_TO_ADDRESS,\n// ABI_TO_ADDRESS\n} from './crosschainABI';\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager\n// useUserTransactionTTL,\n// useUserSlippageTolerance\n} from '../../state/user/hooks';\nimport config from '../../config';\n// import useInterval from \"../useInterval\"\n// const tronweb = window.tronWeb\n\nimport TronWeb from 'tronweb';\n// import { BigAmount } from \"../../utils/formatBignumber\"\n// console.log(TronWeb)\nexport let WrapType = /*#__PURE__*/function (WrapType) {\n  WrapType[WrapType[\"NOT_APPLICABLE\"] = 0] = \"NOT_APPLICABLE\";\n  WrapType[WrapType[\"WRAP\"] = 1] = \"WRAP\";\n  WrapType[WrapType[\"UNWRAP\"] = 2] = \"UNWRAP\";\n  WrapType[WrapType[\"NOCONNECT\"] = 3] = \"NOCONNECT\";\n  return WrapType;\n}({});\nconst NOT_APPLICABLE = {\n  wrapType: WrapType.NOT_APPLICABLE\n};\nexport function initTronWeb(chainId) {\n  let fullNode = 'https://api.shasta.trongrid.io';\n  let solidityNode = 'https://api.shasta.trongrid.io';\n  let eventServer = 'https://api.shasta.trongrid.io';\n  if (chainId === ChainId.TRX) {\n    fullNode = 'https://api.trongrid.io';\n    solidityNode = 'https://api.trongrid.io';\n    eventServer = 'https://api.trongrid.io';\n  }\n  const tronWeb = new TronWeb(fullNode, solidityNode, eventServer);\n  return tronWeb;\n}\nexport function toHexAddress(address) {\n  var _tronWeb$address;\n  const tronWeb = initTronWeb();\n  const str = tronWeb === null || tronWeb === void 0 ? void 0 : (_tronWeb$address = tronWeb.address) === null || _tronWeb$address === void 0 ? void 0 : _tronWeb$address.toHex(address).toLowerCase();\n  return '0x' + str.substr(2);\n}\nexport function fromHexAddress(address) {\n  return '41' + address.substr(2);\n}\nexport function isTRXAddress(address) {\n  const tronWeb = initTronWeb();\n  if (address.indexOf('0x') === 0) {\n    address = address.replace('0x', '41');\n  }\n  return tronWeb === null || tronWeb === void 0 ? void 0 : tronWeb.isAddress(address);\n}\nexport function formatTRXAddress(address) {\n  const tronWeb = initTronWeb();\n  if (address.indexOf('0x') === 0) {\n    address = address.replace('0x', '41');\n    address = tronWeb === null || tronWeb === void 0 ? void 0 : tronWeb.address.fromHex(address);\n  }\n  return address;\n}\nexport function useTrxAddress() {\n  const account = useSelector(state => state.trx.trxAddress);\n  // console.log(window?.tronWeb?.isConnected())\n  return {\n    // trxAddress: account ? toHexAddress(account) : ''\n    trxAddress: account\n  };\n}\nexport function useLoginTrx() {\n  const dispatch = useDispatch();\n  const loginTrx = useCallback(() => {\n    // window.open('tronlinkoutside://pull.activity?param={}')\n    if (window.tronWeb) {\n      window.tronWeb.request({\n        method: 'tron_requestAccounts'\n      }).then(res => {\n        if ((res === null || res === void 0 ? void 0 : res.code) === 200) {\n          dispatch(trxAddress({\n            address: window.tronWeb.defaultAddress.base58\n          }));\n        } else {\n          dispatch(trxAddress({\n            address: ''\n          }));\n          alert('Please connect TronLink.');\n        }\n      }).catch(err => {\n        console.log(err);\n        dispatch(trxAddress({\n          address: ''\n        }));\n        alert('Please connect TronLink.');\n      });\n    } else {\n      if (confirm('Please open TronLink or install TronLink.') === true) {\n        window.open('https://www.tronlink.org/');\n      }\n    }\n  }, []);\n  return {\n    loginTrx\n  };\n}\nexport function useTrxBalance() {\n  var _window, _window$tronWeb, _window$tronWeb$defau;\n  const TRXAccount = (_window = window) === null || _window === void 0 ? void 0 : (_window$tronWeb = _window.tronWeb) === null || _window$tronWeb === void 0 ? void 0 : (_window$tronWeb$defau = _window$tronWeb.defaultAddress) === null || _window$tronWeb$defau === void 0 ? void 0 : _window$tronWeb$defau.base58;\n  const getTrxBalance = useCallback(_ref => {\n    let {\n      account\n    } = _ref;\n    return new Promise(resolve => {\n      const useAccount = account ? account : TRXAccount;\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount) {\n        var _window2, _window2$tronWeb;\n        (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$tronWeb = _window2.tronWeb) === null || _window2$tronWeb === void 0 ? void 0 : _window2$tronWeb.trx.getBalance(useAccount).then(res => {\n          // console.log(res)\n          resolve(res);\n        });\n      } else {\n        resolve('');\n      }\n    });\n  }, [TRXAccount]);\n  const getTrxTokenBalance = useCallback(_ref2 => {\n    let {\n      account,\n      token\n    } = _ref2;\n    return new Promise(resolve => {\n      const useAccount = account ? account : TRXAccount;\n      const parameter1 = [{\n        type: 'address',\n        value: useAccount\n      }];\n      const tokenID = fromHexAddress(token);\n      // console.log('tokenID', tokenID)\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n        var _window3, _window3$tronWeb;\n        (_window3 = window) === null || _window3 === void 0 ? void 0 : (_window3$tronWeb = _window3.tronWeb) === null || _window3$tronWeb === void 0 ? void 0 : _window3$tronWeb.transactionBuilder.triggerSmartContract(tokenID, \"balanceOf(address)\", {}, parameter1, useAccount).then(res => {\n          // console.log(res)\n          resolve(res);\n        });\n      } else {\n        resolve('');\n      }\n    });\n  }, [TRXAccount]);\n  return {\n    getTrxBalance,\n    getTrxTokenBalance\n  };\n}\nexport function useTrxAllowance(token, spender, chainId, account) {\n  const setTrxAllowance = useCallback(() => {\n    return new Promise(async (resolve, reject) => {\n      const useAccount = account;\n      if (!token || !spender || !useAccount || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) resolve('');else {\n        const tokenID = fromHexAddress(token);\n        const spenderID = fromHexAddress(spender);\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n          try {\n            var _window4, _window4$tronWeb;\n            // console.log(tokenID)\n            const instance = await ((_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$tronWeb = _window4.tronWeb) === null || _window4$tronWeb === void 0 ? void 0 : _window4$tronWeb.contract(ABI_TO_ADDRESS, tokenID));\n            const result = await instance.approve(spenderID, MaxUint256.toString()).send();\n            // const result  = await instance.approve(spenderID, 0).send()\n            // console.log(result)\n            // console.log(MaxUint256)\n            const txObj = {\n              hash: result\n            };\n            // addTransaction(txObj, {\n            //   summary: selectCurrency?.symbol + ' approved, you can continue the cross chain transaction',\n            //   approval: { tokenAddress: token.address, spender: spender }\n            // })\n            resolve(txObj);\n          } catch (error) {\n            console.log(error);\n            reject(error);\n          }\n        } else {\n          resolve('');\n        }\n      }\n    });\n  }, [token, spender, account, chainId]);\n  const getTrxAllowance = useCallback(() => {\n    return new Promise(async resolve => {\n      const useAccount = account;\n      if (!token || !spender || !useAccount || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) resolve('');else {\n        // const parameter1 = [{type:'address',value: useAccount}, {type:'address',value: spender}]\n        const tokenID = formatTRXAddress(token);\n        // console.log('tokenID', tokenID)\n        // console.log('parameter1', parameter1)\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n          var _window5, _window5$tronWeb;\n          const instance = await ((_window5 = window) === null || _window5 === void 0 ? void 0 : (_window5$tronWeb = _window5.tronWeb) === null || _window5$tronWeb === void 0 ? void 0 : _window5$tronWeb.contract(ABI_TO_ADDRESS, tokenID));\n          const result = await instance.allowance(useAccount, spender).call();\n          // console.log(result.toString())\n          resolve(result.toString());\n        } else {\n          resolve('');\n        }\n      }\n    });\n  }, [account, chainId, token, spender]);\n  return {\n    setTrxAllowance,\n    getTrxAllowance\n    // trxAllowance: tal?.[selectCurrency?.address]\n  };\n}\n\nexport function getTRXTxnsStatus(txid) {\n  return new Promise(resolve => {\n    const data = {};\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      var _window6, _window6$tronWeb;\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n      (_window6 = window) === null || _window6 === void 0 ? void 0 : (_window6$tronWeb = _window6.tronWeb) === null || _window6$tronWeb === void 0 ? void 0 : _window6$tronWeb.trx.getTransactionInfo(txid).then(res => {\n        var _res$receipt, _res$receipt2, _res$receipt3;\n        console.log(res);\n        if ((res === null || res === void 0 ? void 0 : (_res$receipt = res.receipt) === null || _res$receipt === void 0 ? void 0 : _res$receipt.result) === 'SUCCESS') {\n          data.msg = 'Success';\n          data.info = res;\n        } else if ((res === null || res === void 0 ? void 0 : (_res$receipt2 = res.receipt) === null || _res$receipt2 === void 0 ? void 0 : _res$receipt2.result) && (res === null || res === void 0 ? void 0 : (_res$receipt3 = res.receipt) === null || _res$receipt3 === void 0 ? void 0 : _res$receipt3.result) !== 'SUCCESS') {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        } else {\n          data.msg = 'Null';\n          data.error = 'Query is empty!';\n        }\n        resolve(data);\n      });\n    } else {\n      data.msg = 'Null';\n      data.error = 'Query is empty!';\n      resolve(data);\n    }\n  });\n}\nexport function useTrxCrossChain(routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, useToChainId) {\n  const {\n    account\n  } = useActiveReact();\n  const {\n    t\n  } = useTranslation();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const addTransaction = useTransactionAdder();\n  const nativeBalance = useBaseBalances(account);\n  const tokenBalance = useTokensBalance(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals, chainId);\n  const balance = (selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'NATIVE' ? nativeBalance : tokenBalance;\n\n  // const [balance, setBalance] = useState<any>()\n\n  // const {getTrxBalance, getTrxTokenBalance} = useTrxBalance()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [typedValue, selectCurrency]);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    if (!account || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId) || !routerToken || !useToChainId) return {};\n    return {\n      balance: balance,\n      execute: async () => {\n        // let contract = await window?.tronWeb?.contract()\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n          var _window7, _window7$tronWeb;\n          const TRXAccount = (_window7 = window) === null || _window7 === void 0 ? void 0 : (_window7$tronWeb = _window7.tronWeb) === null || _window7$tronWeb === void 0 ? void 0 : _window7$tronWeb.defaultAddress.base58;\n          const formatRouterToken = fromHexAddress(routerToken);\n          const formatInputToken = fromHexAddress(inputToken);\n          // console.log('formatRouterToken',formatRouterToken)\n          // console.log('formatInputToken',formatInputToken)\n          // const formatReceiveAddress = formatTRXAddress(receiveAddress)\n          const formatReceiveAddress = receiveAddress;\n          if (TRXAccount.toLowerCase() === account.toLowerCase()) {\n            var _window8, _window8$tronWeb;\n            let txResult = '';\n            // const instance:any = await window?.tronWeb?.contract(isNaN(selectChain) ? ABI_TO_ADDRESS : ABI_TO_ADDRESS, formatRouterToken)\n            const instance = await ((_window8 = window) === null || _window8 === void 0 ? void 0 : (_window8$tronWeb = _window8.tronWeb) === null || _window8$tronWeb === void 0 ? void 0 : _window8$tronWeb.contract(ABI_TO_ADDRESS, formatRouterToken));\n            try {\n              if (destConfig.routerABI.indexOf('anySwapOutNative') !== -1) {\n                // anySwapOutNative\n                txResult = await instance.anySwapOutNative(...[formatInputToken, formatReceiveAddress, useToChainId], {\n                  value: inputAmount\n                }).send();\n              } else if (destConfig.routerABI.indexOf('anySwapOutUnderlying') !== -1) {\n                // anySwapOutUnderlying\n                const parameArr = [formatInputToken, formatReceiveAddress, inputAmount, useToChainId];\n                console.log(parameArr);\n                txResult = await instance.anySwapOutUnderlying(...parameArr).send();\n              } else if (destConfig.routerABI.indexOf('anySwapOut') !== -1) {\n                // anySwapOut\n                const parameArr = [formatInputToken, formatReceiveAddress, inputAmount, useToChainId];\n                console.log(parameArr);\n                txResult = await instance.anySwapOut(...parameArr).send();\n              }\n              const txReceipt = {\n                hash: txResult\n              };\n              console.log(txReceipt);\n              if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n                const data = {\n                  hash: txReceipt.hash,\n                  chainId: chainId,\n                  selectChain: selectChain,\n                  account: TRXAccount,\n                  value: inputAmount,\n                  formatvalue: typedValue,\n                  to: receiveAddress,\n                  symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                  version: destConfig.type,\n                  pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                  routerToken: routerToken\n                };\n                addTransaction(txReceipt, {\n                  summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n                  value: typedValue,\n                  toChainId: selectChain,\n                  toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n                  symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                  version: destConfig.type,\n                  routerToken: routerToken,\n                  token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n                  logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n                  isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n                  fromInfo: {\n                    symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                    name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                    decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                    address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n                  },\n                  toInfo: {\n                    symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                    name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                    decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                    address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n                  }\n                });\n                recordsTxns(data);\n                onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n              }\n            } catch (error) {\n              console.log(error);\n              onChangeViewErrorTip('Txns failure.', true);\n            }\n          }\n        } else {\n          onChangeViewErrorTip('Please install TronLink.', true);\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, balance, useToChainId]);\n}\nexport function useTrxSwapPoolCallback(routerToken, inputCurrency, inputToken, typedValue, swapType, selectChain, receiveAddress, destConfig, useToChainId\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n) {\n  const {\n    account,\n    chainId\n  } = useActiveReact();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    t\n  } = useTranslation();\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager();\n  // console.log(balance)\n  // console.log(inputCurrency)\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals), [inputCurrency, typedValue]);\n  const addTransaction = useTransactionAdder();\n  const nativeBalance = useBaseBalances(account);\n  const tokenBalance = useTokensBalance(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address, inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals, chainId);\n  const balance = (inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.tokenType) === 'NATIVE' ? nativeBalance : tokenBalance;\n  return useMemo(() => {\n    // console.log(routerToken)\n    // console.log(bridgeContract)\n    // console.log(chainId)\n    // console.log(inputCurrency)\n    // console.log(swapType)\n    // console.log(balance)\n    // console.log(inputAmount)\n\n    if (!chainId || !inputCurrency || !swapType) return NOT_APPLICABLE;\n    // console.log(typedValue)\n\n    const sufficientBalance = typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n    // console.log(sufficientBalance)\n    return {\n      wrapType: WrapType.WRAP,\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount ? async () => {\n        try {\n          if (window.tronWeb && window.tronWeb.defaultAddress.base58 && inputToken) {\n            // console.log(123)\n            // console.log(inputToken)\n            // const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS)\n            const formatInputToken = fromHexAddress(inputToken);\n            const formatRouterToken = fromHexAddress(routerToken);\n            let txResult;\n            if ((inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.tokenType) === 'NATIVE') {\n              if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                var _window9, _window9$tronWeb;\n                const instance = await ((_window9 = window) === null || _window9 === void 0 ? void 0 : (_window9$tronWeb = _window9.tronWeb) === null || _window9$tronWeb === void 0 ? void 0 : _window9$tronWeb.contract(ABI_TO_ADDRESS, formatRouterToken));\n                const parameArr = [formatInputToken, receiveAddress, useToChainId];\n                txResult = await instance.anySwapOutNative(...parameArr, {\n                  value: inputAmount\n                }).send();\n              } else {\n                var _window10, _window10$tronWeb;\n                const instance = await ((_window10 = window) === null || _window10 === void 0 ? void 0 : (_window10$tronWeb = _window10.tronWeb) === null || _window10$tronWeb === void 0 ? void 0 : _window10$tronWeb.contract(ABI_TO_ADDRESS, formatInputToken));\n                txResult = swapType === 'deposit' ? await instance.depositNative(...[inputToken, account], {\n                  value: inputAmount\n                }).send() : await instance.withdrawNative(inputToken, inputAmount, account).send();\n              }\n            } else {\n              if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                var _window11, _window11$tronWeb;\n                const instance = await ((_window11 = window) === null || _window11 === void 0 ? void 0 : (_window11$tronWeb = _window11.tronWeb) === null || _window11$tronWeb === void 0 ? void 0 : _window11$tronWeb.contract(ABI_TO_ADDRESS, formatRouterToken));\n                const parameArr = [formatInputToken, receiveAddress, inputAmount, useToChainId];\n                txResult = await instance.anySwapOut(...parameArr).send();\n              } else {\n                var _window12, _window12$tronWeb;\n                const instance = await ((_window12 = window) === null || _window12 === void 0 ? void 0 : (_window12$tronWeb = _window12.tronWeb) === null || _window12$tronWeb === void 0 ? void 0 : _window12$tronWeb.contract(ABI_TO_ADDRESS, formatInputToken));\n                txResult = swapType === 'deposit' ? await instance.deposit(inputAmount).send() : await instance.withdraw(inputAmount).send();\n              }\n            }\n            const txReceipt = {\n              hash: txResult\n            };\n            console.log(txReceipt);\n            if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n              addTransaction(txReceipt, {\n                summary: \"Cross bridge \".concat(typedValue, \" \").concat(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol),\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n                symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                version: destConfig.type,\n                routerToken: routerToken,\n                token: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address,\n                logoUrl: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.logoUrl,\n                isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n                fromInfo: {\n                  symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                  name: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.name,\n                  decimals: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals,\n                  address: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address\n                },\n                toInfo: {\n                  symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                  name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                  decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                  address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n                }\n              });\n              const data = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                version: destConfig.type,\n                pairid: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                routerToken: routerToken\n              };\n              recordsTxns(data);\n              onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n            } else {\n              addTransaction(txReceipt, {\n                summary: \"\".concat(swapType === 'deposit' ? 'Deposit' : 'Withdraw', \" \").concat(typedValue, \" \").concat(config.getBaseCoin(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol, chainId))\n              });\n            }\n          } else {\n            console.log('Could not swapout');\n          }\n        } catch (error) {\n          console.log('Could not swapout', error);\n          onChangeViewErrorTip(error, true);\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol\n      })\n    };\n  }, [chainId, inputCurrency, inputAmount, balance, addTransaction, t, inputToken, account, routerToken, selectChain, destConfig, useToChainId, userInterfaceBalanceValid]);\n}\nexport function useTrxPoolDatas() {\n  const getTrxPoolDatas = useCallback(async (calls, chainId) => {\n    return new Promise(resolve => {\n      const arr = [];\n      const labelArr = [];\n      // console.log(calls)\n      if (window.tronWeb && [ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) {\n        // console.log(calls)\n        // const useAccount = window.tronWeb.defaultAddress.base58\n        for (const item of calls) {\n          const anytoken = item.anytoken ? fromHexAddress(item.anytoken) : '';\n          const anytokenSource = item.anytoken;\n          // const anytoken = item.anytoken ? toHexAddress(item.anytoken) : ''\n          // const anytoken = item.anytoken\n          // const underlyingToken = item.token\n          const underlyingToken = item.token ? fromHexAddress(item.token) : '';\n          // console.log('anytoken', anytoken)\n          // console.log('underlyingToken', underlyingToken)\n          if (underlyingToken && anytoken) {\n            var _window13, _window13$tronWeb, _window14, _window14$tronWeb;\n            // console.log(underlyingToken, anytoken)\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            arr.push((_window13 = window) === null || _window13 === void 0 ? void 0 : (_window13$tronWeb = _window13.tronWeb) === null || _window13$tronWeb === void 0 ? void 0 : _window13$tronWeb.contract(ABI_TO_ADDRESS, underlyingToken).balanceOf(anytoken).call());\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balanceOf',\n              dec: item.dec\n            });\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"totalSupply()\", {}, {}, useAccount))\n            arr.push((_window14 = window) === null || _window14 === void 0 ? void 0 : (_window14$tronWeb = _window14.tronWeb) === null || _window14$tronWeb === void 0 ? void 0 : _window14$tronWeb.contract(ABI_TO_ADDRESS, underlyingToken).totalSupply().call());\n            labelArr.push({\n              key: anytokenSource,\n              label: 'totalSupply',\n              dec: item.dec\n            });\n          }\n          // console.log(item)\n          // console.log(chainId)\n          if (anytoken && isAddress(item.account, chainId)) {\n            var _window15, _window15$tronWeb;\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\n            arr.push((_window15 = window) === null || _window15 === void 0 ? void 0 : (_window15$tronWeb = _window15.tronWeb) === null || _window15$tronWeb === void 0 ? void 0 : _window15$tronWeb.contract(ABI_TO_ADDRESS, anytoken).balanceOf(item.account).call());\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balance',\n              dec: item.dec\n            });\n          }\n        }\n      }\n      // console.log(arr)\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        const list = {};\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key;\n          const l = labelArr[i].label;\n          // const dec = labelArr[i].dec\n          if (!list[k]) list[k] = {};\n          // list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\n          list[k][l] = res[i].toString();\n        }\n        // console.log(list)\n        resolve(list);\n      });\n    });\n  }, []);\n  return {\n    getTrxPoolDatas\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useTranslation","MaxUint256","trxAddress","useActiveReact","useBaseBalances","useTokensBalance","tryParseAmount3","ChainId","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","isAddress","ABI_TO_ADDRESS","useInterfaceBalanceValidManager","config","TronWeb","WrapType","NOT_APPLICABLE","wrapType","initTronWeb","chainId","fullNode","solidityNode","eventServer","TRX","tronWeb","toHexAddress","address","_tronWeb$address","str","toHex","toLowerCase","substr","fromHexAddress","isTRXAddress","indexOf","replace","formatTRXAddress","fromHex","useTrxAddress","account","state","trx","useLoginTrx","dispatch","loginTrx","window","request","method","then","res","code","defaultAddress","base58","alert","catch","err","console","log","confirm","open","useTrxBalance","_window","_window$tronWeb","_window$tronWeb$defau","TRXAccount","getTrxBalance","_ref","Promise","resolve","useAccount","_window2","_window2$tronWeb","getBalance","getTrxTokenBalance","_ref2","token","parameter1","type","value","tokenID","_window3","_window3$tronWeb","transactionBuilder","triggerSmartContract","useTrxAllowance","spender","setTrxAllowance","reject","TRX_TEST","includes","spenderID","_window4","_window4$tronWeb","instance","contract","result","approve","toString","send","txObj","hash","error","getTrxAllowance","_window5","_window5$tronWeb","allowance","call","getTRXTxnsStatus","txid","data","_window6","_window6$tronWeb","getTransactionInfo","_res$receipt","_res$receipt2","_res$receipt3","receipt","msg","info","useTrxCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","nativeBalance","tokenBalance","decimals","balance","tokenType","inputAmount","sufficientBalance","Number","toExact","execute","_window7","_window7$tronWeb","formatRouterToken","formatInputToken","formatReceiveAddress","_window8","_window8$tronWeb","txResult","routerABI","anySwapOutNative","parameArr","anySwapOutUnderlying","anySwapOut","txReceipt","formatvalue","to","symbol","version","pairid","summary","concat","toChainId","toAddress","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError","undefined","useTrxSwapPoolCallback","inputCurrency","swapType","userInterfaceBalanceValid","WRAP","_window9","_window9$tronWeb","_window10","_window10$tronWeb","depositNative","withdrawNative","_window11","_window11$tronWeb","_window12","_window12$tronWeb","deposit","withdraw","getBaseCoin","useTrxPoolDatas","getTrxPoolDatas","calls","arr","labelArr","item","anytoken","anytokenSource","underlyingToken","_window13","_window13$tronWeb","_window14","_window14$tronWeb","push","balanceOf","key","label","dec","totalSupply","_window15","_window15$tronWeb","all","list","i","len","length","k","l"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/trx/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\n// import useInterval from \"../useInterval\"\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { AppState, AppDispatch } from '../../state'\nimport { trxAddress } from './actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\n\nimport {useBaseBalances, useTokensBalance} from '../../hooks/useAllBalances'\n\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\n// import { BigAmount } from \"../../utils/formatBignumber\"\nimport { isAddress } from '../../utils/isAddress'\n\nimport {\n  ABI_TO_ADDRESS,\n  // ABI_TO_ADDRESS,\n  // ABI_TO_ADDRESS,\n  // ABI_TO_ADDRESS\n} from './crosschainABI'\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\nimport config from '../../config'\n// import useInterval from \"../useInterval\"\n// const tronweb = window.tronWeb\n\nimport TronWeb from 'tronweb'\n// import { BigAmount } from \"../../utils/formatBignumber\"\n// console.log(TronWeb)\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n  NOCONNECT\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n\nexport function initTronWeb (chainId?:any) {\n  let fullNode = 'https://api.shasta.trongrid.io';\n  let solidityNode = 'https://api.shasta.trongrid.io';\n  let eventServer = 'https://api.shasta.trongrid.io';\n  if (chainId === ChainId.TRX) {\n    fullNode = 'https://api.trongrid.io';\n    solidityNode = 'https://api.trongrid.io';\n    eventServer = 'https://api.trongrid.io';\n  }\n  const tronWeb = new TronWeb(\n    fullNode,\n    solidityNode,\n    eventServer\n  );\n  return tronWeb\n}\n\nexport function toHexAddress (address:string) {\n  const tronWeb = initTronWeb()\n  const str = tronWeb?.address?.toHex(address).toLowerCase()\n  return '0x' + str.substr(2)\n}\n\nexport function fromHexAddress (address:string) {\n  return '41' + address.substr(2)\n}\n\nexport function isTRXAddress (address:string) {\n  const tronWeb = initTronWeb()\n  if (address.indexOf('0x') === 0) {\n    address = address.replace('0x', '41')\n  }\n  return tronWeb?.isAddress(address)\n}\n\nexport function formatTRXAddress (address:string) {\n  const tronWeb = initTronWeb()\n  if (address.indexOf('0x') === 0) {\n    address = address.replace('0x', '41')\n    address = tronWeb?.address.fromHex(address)\n  }\n  return address\n}\n\nexport function useTrxAddress () {\n  const account:any = useSelector<AppState, AppState['trx']>(state => state.trx.trxAddress)\n  // console.log(window?.tronWeb?.isConnected())\n  return {\n    // trxAddress: account ? toHexAddress(account) : ''\n    trxAddress: account\n  }\n}\n\nexport function useLoginTrx () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginTrx = useCallback(() => {\n    // window.open('tronlinkoutside://pull.activity?param={}')\n    if (window.tronWeb) {\n      window.tronWeb.request({method: 'tron_requestAccounts'}).then((res:any) => {\n        if (res?.code === 200) {\n          dispatch(trxAddress({address: window.tronWeb.defaultAddress.base58}))\n        } else {\n          dispatch(trxAddress({address: ''}))\n          alert('Please connect TronLink.')\n        }\n      }).catch((err:any) => {\n        console.log(err)\n        dispatch(trxAddress({address: ''}))\n        alert('Please connect TronLink.')\n      })\n    } else {\n      if (confirm('Please open TronLink or install TronLink.') === true) {\n        window.open('https://www.tronlink.org/')\n      }\n    }\n  }, [])\n  return {\n    loginTrx\n  }\n}\n\nexport function useTrxBalance () {\n  const TRXAccount = window?.tronWeb?.defaultAddress?.base58\n  const getTrxBalance = useCallback(({account}) => {\n    return new Promise((resolve) => {\n      const useAccount = account ? account : TRXAccount\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount) {\n        window?.tronWeb?.trx.getBalance(useAccount).then((res:any) => {\n          // console.log(res)\n          resolve(res)\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [TRXAccount]) \n\n  const getTrxTokenBalance = useCallback(({account, token}) => {\n    return new Promise((resolve) => {\n      const useAccount = account ? account : TRXAccount\n      const parameter1 = [{type:'address',value: useAccount}]\n      const tokenID = fromHexAddress(token)\n      // console.log('tokenID', tokenID)\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n        window?.tronWeb?.transactionBuilder.triggerSmartContract(tokenID, \"balanceOf(address)\", {}, parameter1, useAccount).then((res:any) => {\n          // console.log(res)\n          resolve(res)\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [TRXAccount])\n\n  return {\n    getTrxBalance,\n    getTrxTokenBalance\n  }\n}\n\nexport function useTrxAllowance(\n  token:any,\n  spender: any,\n  chainId: any,\n  account: any,\n) {\n  const setTrxAllowance = useCallback((): Promise<any> => {\n    return new Promise(async(resolve, reject) => {\n      const useAccount = account\n      if (!token || !spender || !useAccount || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) resolve('')\n      else {\n        const tokenID = fromHexAddress(token)\n        const spenderID = fromHexAddress(spender)\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n          try {\n            // console.log(tokenID)\n            const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, tokenID)\n            const result  = await instance.approve(spenderID, MaxUint256.toString()).send()\n            // const result  = await instance.approve(spenderID, 0).send()\n            // console.log(result)\n            // console.log(MaxUint256)\n            const txObj:any = {hash: result}\n            // addTransaction(txObj, {\n            //   summary: selectCurrency?.symbol + ' approved, you can continue the cross chain transaction',\n            //   approval: { tokenAddress: token.address, spender: spender }\n            // })\n            resolve(txObj)\n          } catch (error) {\n            console.log(error)\n            reject(error)\n          }\n        } else {\n          resolve('')\n        }\n      }\n    })\n  }, [token, spender, account, chainId])\n\n  const getTrxAllowance = useCallback(() => {\n    return new Promise(async(resolve) => {\n      const useAccount = account\n      if (!token || !spender || !useAccount || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) resolve('')\n      else {\n        // const parameter1 = [{type:'address',value: useAccount}, {type:'address',value: spender}]\n        const tokenID = formatTRXAddress(token)\n        // console.log('tokenID', tokenID)\n        // console.log('parameter1', parameter1)\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58 && useAccount && tokenID) {\n          const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, tokenID)\n          const result  = await instance.allowance(useAccount, spender).call()\n          // console.log(result.toString())\n          resolve(result.toString())\n        } else {\n          resolve('')\n        }\n      }\n    })\n  }, [account, chainId, token, spender])\n\n  return {\n    setTrxAllowance,\n    getTrxAllowance,\n    // trxAllowance: tal?.[selectCurrency?.address]\n  }\n}\n\nexport function getTRXTxnsStatus (txid:string) {\n  return new Promise(resolve => {\n    const data:any = {}\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n      window?.tronWeb?.trx.getTransactionInfo(txid).then((res:any) => {\n        console.log(res)\n        if (res?.receipt?.result === 'SUCCESS') {\n          data.msg = 'Success'\n          data.info = res\n        } else if (res?.receipt?.result && res?.receipt?.result !== 'SUCCESS') {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      })\n    } else {\n      data.msg = 'Null'\n      data.error = 'Query is empty!'\n      resolve(data)\n    }\n  })\n}\n\n\nexport function useTrxCrossChain (\n  routerToken: any,\n  inputToken: any,\n  chainId:any,\n  selectCurrency:any,\n  selectChain:any,\n  receiveAddress:any,\n  typedValue:any,\n  destConfig:any,\n  useToChainId:any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const {account} = useActiveReact()\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const nativeBalance = useBaseBalances(account)\n  const tokenBalance = useTokensBalance(selectCurrency?.address, selectCurrency?.decimals, chainId)\n  const balance = selectCurrency?.tokenType === 'NATIVE' ? nativeBalance : tokenBalance\n\n  // const [balance, setBalance] = useState<any>()\n\n  // const {getTrxBalance, getTrxTokenBalance} = useTrxBalance()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  let sufficientBalance = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    if (!account || ![ChainId.TRX, ChainId.TRX_TEST].includes(chainId) || !routerToken || !useToChainId) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n        // let contract = await window?.tronWeb?.contract()\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n          const TRXAccount = window?.tronWeb?.defaultAddress.base58\n          const formatRouterToken = fromHexAddress(routerToken)\n          const formatInputToken = fromHexAddress(inputToken)\n          // console.log('formatRouterToken',formatRouterToken)\n          // console.log('formatInputToken',formatInputToken)\n          // const formatReceiveAddress = formatTRXAddress(receiveAddress)\n          const formatReceiveAddress = receiveAddress\n          if (TRXAccount.toLowerCase() === account.toLowerCase()) {\n            let txResult:any = ''\n            // const instance:any = await window?.tronWeb?.contract(isNaN(selectChain) ? ABI_TO_ADDRESS : ABI_TO_ADDRESS, formatRouterToken)\n            const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatRouterToken)\n            try {\n              if (destConfig.routerABI.indexOf('anySwapOutNative') !== -1) { // anySwapOutNative\n                txResult = await instance.anySwapOutNative(...[formatInputToken, formatReceiveAddress, useToChainId], {value: inputAmount}).send()\n              } else if (destConfig.routerABI.indexOf('anySwapOutUnderlying') !== -1) { // anySwapOutUnderlying\n                const parameArr = [formatInputToken, formatReceiveAddress, inputAmount, useToChainId]\n                console.log(parameArr)\n                txResult = await instance.anySwapOutUnderlying(...parameArr).send()\n              } else if (destConfig.routerABI.indexOf('anySwapOut') !== -1) { // anySwapOut\n                const parameArr = [formatInputToken, formatReceiveAddress, inputAmount, useToChainId]\n                console.log(parameArr)\n                txResult = await instance.anySwapOut(...parameArr).send()\n              }\n              const txReceipt:any = {hash: txResult}\n              console.log(txReceipt)\n              if (txReceipt?.hash) {\n                const data:any = {\n                  hash: txReceipt.hash,\n                  chainId: chainId,\n                  selectChain: selectChain,\n                  account: TRXAccount,\n                  value: inputAmount,\n                  formatvalue: typedValue,\n                  to: receiveAddress,\n                  symbol: selectCurrency?.symbol,\n                  version: destConfig.type,\n                  pairid: selectCurrency?.symbol,\n                  routerToken: routerToken\n                }\n                addTransaction(txReceipt, {\n                  summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                  value: typedValue,\n                  toChainId: selectChain,\n                  toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                  symbol: selectCurrency?.symbol,\n                  version: destConfig.type,\n                  routerToken: routerToken,\n                  token: selectCurrency?.address,\n                  logoUrl: selectCurrency?.logoUrl,\n                  isLiquidity: destConfig?.isLiquidity,\n                  fromInfo: {\n                    symbol: selectCurrency?.symbol,\n                    name: selectCurrency?.name,\n                    decimals: selectCurrency?.decimals,\n                    address: selectCurrency?.address,\n                  },\n                  toInfo: {\n                    symbol: destConfig?.symbol,\n                    name: destConfig?.name,\n                    decimals: destConfig?.decimals,\n                    address: destConfig?.address,\n                  },\n                })\n                recordsTxns(data)\n                onChangeViewDtil(txReceipt?.hash, true)\n              }\n            } catch (error) {\n              console.log(error);\n              onChangeViewErrorTip('Txns failure.', true)\n            }\n          }\n        } else {\n          onChangeViewErrorTip('Please install TronLink.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, balance, useToChainId])\n}\n\n\nexport function useTrxSwapPoolCallback(\n  routerToken:any,\n  inputCurrency: any,\n  inputToken: string | undefined,\n  typedValue: string | undefined,\n  swapType: string | undefined,\n  selectChain: any,\n  receiveAddress: any,\n  destConfig: any,\n  useToChainId: any,\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { account, chainId } = useActiveReact()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const { t } = useTranslation()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n  // console.log(balance)\n  // console.log(inputCurrency)\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, inputCurrency?.decimals), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  const nativeBalance = useBaseBalances(account)\n  const tokenBalance = useTokensBalance(inputCurrency?.address, inputCurrency?.decimals, chainId)\n  const balance = inputCurrency?.tokenType === 'NATIVE' ? nativeBalance : tokenBalance\n  \n  return useMemo(() => {\n    // console.log(routerToken)\n    // console.log(bridgeContract)\n    // console.log(chainId)\n    // console.log(inputCurrency)\n    // console.log(swapType)\n    // console.log(balance)\n    // console.log(inputAmount)\n    \n    if (!chainId || !inputCurrency || !swapType) return NOT_APPLICABLE\n    // console.log(typedValue)\n\n    const sufficientBalance = typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n    // console.log(sufficientBalance)\n    return {\n      wrapType: WrapType.WRAP,\n      execute:\n      (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n        ? async () => {\n            try {\n              if (window.tronWeb && window.tronWeb.defaultAddress.base58 && inputToken) {\n                // console.log(123)\n                // console.log(inputToken)\n                // const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS)\n                const formatInputToken = fromHexAddress(inputToken)\n                const formatRouterToken = fromHexAddress(routerToken)\n                let txResult:any\n                if (inputCurrency?.tokenType === 'NATIVE') {\n                  if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatRouterToken)\n                    const parameArr = [formatInputToken, receiveAddress, useToChainId]\n                    txResult = await instance.anySwapOutNative(...parameArr, {value: inputAmount}).send()\n                  } else {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatInputToken)\n                    txResult = swapType === 'deposit' ? await instance.depositNative(...[inputToken, account], {value: inputAmount}).send() : await instance.withdrawNative(inputToken,inputAmount,account).send()\n                  }\n                } else {\n                  if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatRouterToken)\n                    const parameArr = [formatInputToken, receiveAddress, inputAmount, useToChainId]\n                    txResult = await instance.anySwapOut(...parameArr).send()\n                  } else {\n                    const instance:any = await window?.tronWeb?.contract(ABI_TO_ADDRESS, formatInputToken)\n                    txResult = swapType === 'deposit' ? await instance.deposit(inputAmount).send() : await instance.withdraw(inputAmount).send()\n                  }\n                }\n                const txReceipt:any = {hash: txResult}\n                console.log(txReceipt)\n                if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n                  addTransaction(txReceipt, {\n                    summary: `Cross bridge ${typedValue} ${inputCurrency?.symbol}`,\n                    value: typedValue,\n                    toChainId: selectChain,\n                    toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                    symbol: inputCurrency?.symbol,\n                    version: destConfig.type,\n                    routerToken: routerToken,\n                    token: inputCurrency?.address,\n                    logoUrl: inputCurrency?.logoUrl,\n                    isLiquidity: destConfig?.isLiquidity,\n                    fromInfo: {\n                      symbol: inputCurrency?.symbol,\n                      name: inputCurrency?.name,\n                      decimals: inputCurrency?.decimals,\n                      address: inputCurrency?.address,\n                    },\n                    toInfo: {\n                      symbol: destConfig?.symbol,\n                      name: destConfig?.name,\n                      decimals: destConfig?.decimals,\n                      address: destConfig?.address,\n                    },\n                  })\n                  const data:any = {\n                    hash: txReceipt.hash,\n                    chainId: chainId,\n                    selectChain: selectChain,\n                    account: account,\n                    value: inputAmount,\n                    formatvalue: typedValue,\n                    to: receiveAddress,\n                    symbol: inputCurrency?.symbol,\n                    version: destConfig.type,\n                    pairid: inputCurrency?.symbol,\n                    routerToken: routerToken\n                  }\n                  recordsTxns(data)\n                  onChangeViewDtil(txReceipt?.hash, true)\n                } else {\n                  addTransaction(txReceipt, { summary: `${swapType === 'deposit' ? 'Deposit' : 'Withdraw'} ${typedValue} ${config.getBaseCoin(inputCurrency?.symbol, chainId)}` })\n                }\n              } else {\n                console.log('Could not swapout')\n              }\n            } catch (error) {\n              console.log('Could not swapout', error)\n              onChangeViewErrorTip(error, true)\n            }\n          }\n        : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: inputCurrency?.symbol})\n    }\n  }, [chainId, inputCurrency, inputAmount, balance, addTransaction, t, inputToken, account, routerToken, selectChain, destConfig, useToChainId, userInterfaceBalanceValid])\n}\n\n\nexport function useTrxPoolDatas () {\n  const getTrxPoolDatas = useCallback(async(calls, chainId) => {\n    return new Promise(resolve => {\n      const arr = []\n      const labelArr:any = []\n      // console.log(calls)\n      if (window.tronWeb && [ChainId.TRX, ChainId.TRX_TEST].includes(chainId) ) {\n        // console.log(calls)\n        // const useAccount = window.tronWeb.defaultAddress.base58\n        for (const item of calls) {\n          const anytoken = item.anytoken ? fromHexAddress(item.anytoken) : ''\n          const anytokenSource = item.anytoken\n          // const anytoken = item.anytoken ? toHexAddress(item.anytoken) : ''\n          // const anytoken = item.anytoken\n          // const underlyingToken = item.token\n          const underlyingToken = item.token ? fromHexAddress(item.token) : ''\n          // console.log('anytoken', anytoken)\n          // console.log('underlyingToken', underlyingToken)\n          if (underlyingToken && anytoken) {\n            // console.log(underlyingToken, anytoken)\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            arr.push(window?.tronWeb?.contract(ABI_TO_ADDRESS, underlyingToken).balanceOf(anytoken).call())\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balanceOf',\n              dec: item.dec\n            })\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"totalSupply()\", {}, {}, useAccount))\n            arr.push(window?.tronWeb?.contract(ABI_TO_ADDRESS, underlyingToken).totalSupply().call())\n            labelArr.push({\n              key: anytokenSource,\n              label: 'totalSupply',\n              dec: item.dec\n            })\n          }\n          // console.log(item)\n          // console.log(chainId)\n          if (anytoken && isAddress(item.account, chainId)) {\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\n            arr.push(window?.tronWeb?.contract(ABI_TO_ADDRESS, anytoken).balanceOf(item.account).call())\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balance',\n              dec: item.dec\n            })\n          }\n        }\n      }\n      // console.log(arr)\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        const list:any = {}\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key\n          const l = labelArr[i].label\n          // const dec = labelArr[i].dec\n          if (!list[k]) list[k] = {}\n          // list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\n          list[k][l] = res[i].toString()\n        }\n        // console.log(list)\n        resolve(list)\n      })\n    })\n  }, [])\n\n  return {\n    getTrxPoolDatas,\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}