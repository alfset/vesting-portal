{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useWallet, ConnectType } from '@terra-money/wallet-provider';\n// import { useWallet as useSolWallet } from '@solana/wallet-adapter-react';\n// import { useDispatch } from 'react-redux'\n// import { setOpenModal, ApplicationModal } from '../state/application/actions'\nimport { useWalletModalToggle } from '../state/application/hooks';\n// import { AppDispatch } from '../state/index'\nimport { useUserSelectChainId } from '../state/user/hooks';\nimport { ChainId } from '../config/chainConfig/chainId';\nimport config from '../config';\nimport { useActiveReact } from './useActiveReact';\nimport { useLogin } from '../nonevm/near';\nimport { connectXlmWallet } from '../nonevm/stellar';\nimport { useLoginTrx } from '../nonevm/trx';\nimport { useAdaLogin } from '../nonevm/cardano';\nimport { useLoginFlow } from '../nonevm/flow';\nimport { useLoginAptos } from '../nonevm/apt';\nimport { useLoginBtc } from '../nonevm/btc';\nimport { useLoginAtom } from '../nonevm/atom';\nimport { useLoginSol } from '../nonevm/solana';\nimport { useNasLogin } from '../nonevm/nas';\nexport function useConnectWallet() {\n  const {\n    account\n  } = useActiveReact();\n  // const dispatch = useDispatch<AppDispatch>()\n  const {\n    selectNetworkInfo\n  } = useUserSelectChainId();\n  const toggleWalletModal = useWalletModalToggle();\n  const {\n    connect\n  } = useWallet();\n  const {\n    login\n  } = useLogin();\n  const {\n    loginXlm\n  } = connectXlmWallet();\n  const {\n    loginTrx\n  } = useLoginTrx();\n  const loginAda = useAdaLogin();\n  const {\n    loginFlow\n  } = useLoginFlow();\n  const {\n    loginAptos\n  } = useLoginAptos();\n  const {\n    loginBtc\n  } = useLoginBtc();\n  const {\n    loginAtom\n  } = useLoginAtom();\n  const {\n    loginSol\n  } = useLoginSol();\n  const {\n    loginNas\n  } = useNasLogin();\n  const useChainId = useMemo(() => {\n    return selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.chainId;\n  }, [selectNetworkInfo]);\n  // const {publicKey} = useSolWallet()\n  // console.log(selectNetworkInfo)\n  return useCallback(() => {\n    var _config$chainInfo, _config$chainInfo$use;\n    if (useChainId === ChainId.TERRA) {\n      if (connect) {\n        try {\n          // connect(ConnectType.CHROME_EXTENSION)\n          if (!account) {\n            connect(ConnectType.CHROME_EXTENSION);\n          } else {\n            toggleWalletModal();\n            // dispatch(setOpenModal(ApplicationModal.WALLET))\n          }\n        } catch (error) {\n          alert('Please install Terra Station!');\n        }\n      } else {\n        alert('Please install Terra Station!');\n      }\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(useChainId) && (config === null || config === void 0 ? void 0 : (_config$chainInfo = config.chainInfo) === null || _config$chainInfo === void 0 ? void 0 : (_config$chainInfo$use = _config$chainInfo[useChainId]) === null || _config$chainInfo$use === void 0 ? void 0 : _config$chainInfo$use.chainType) !== 'NOWALLET') {\n      if (!account) {\n        loginBtc(useChainId);\n      } else {\n        toggleWalletModal();\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if (useChainId === ChainId.NAS) {\n      if (!account) {\n        loginNas(useChainId);\n      } else {\n        toggleWalletModal();\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId)) {\n      if (!account) {\n        login();\n      } else {\n        toggleWalletModal();\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(useChainId)) {\n      if (!account) {\n        loginXlm();\n      } else {\n        toggleWalletModal();\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(useChainId)) {\n      if (!account) {\n        loginTrx();\n      } else {\n        toggleWalletModal();\n      }\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAda();\n      } else {\n        toggleWalletModal();\n      }\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      if (!account) {\n        loginFlow();\n      } else {\n        toggleWalletModal();\n      }\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAptos(useChainId);\n      } else {\n        toggleWalletModal();\n      }\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAtom(useChainId);\n      } else {\n        toggleWalletModal();\n      }\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(useChainId)) {\n      if (!account) {\n        loginSol();\n      } else {\n        toggleWalletModal();\n      }\n    } else {\n      toggleWalletModal();\n    }\n  }, [useChainId, toggleWalletModal, account]);\n}\nexport function useLogoutWallet() {\n  const {\n    selectNetworkInfo\n  } = useUserSelectChainId();\n  const {\n    logoutFlow\n  } = useLoginFlow();\n  const {\n    logoutNear\n  } = useLogin();\n  const useChainId = useMemo(() => {\n    return selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.chainId;\n  }, [selectNetworkInfo]);\n  const logoutWallet = useCallback(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      logoutFlow();\n    } else if (ChainId.NEAR, ChainId.NEAR_TEST) {\n      logoutNear();\n    }\n  }, [useChainId]);\n  const isSupportLogout = useMemo(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST, ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId)) {\n      return true;\n    }\n    return false;\n  }, [useChainId]);\n  return {\n    logoutWallet,\n    isSupportLogout\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useWallet","ConnectType","useWalletModalToggle","useUserSelectChainId","ChainId","config","useActiveReact","useLogin","connectXlmWallet","useLoginTrx","useAdaLogin","useLoginFlow","useLoginAptos","useLoginBtc","useLoginAtom","useLoginSol","useNasLogin","useConnectWallet","account","selectNetworkInfo","toggleWalletModal","connect","login","loginXlm","loginTrx","loginAda","loginFlow","loginAptos","loginBtc","loginAtom","loginSol","loginNas","useChainId","chainId","_config$chainInfo","_config$chainInfo$use","TERRA","CHROME_EXTENSION","error","alert","BTC","BTC_TEST","includes","chainInfo","chainType","NAS","NEAR","NEAR_TEST","XLM","XLM_TEST","TRX","TRX_TEST","ADA","ADA_TEST","FLOW","FLOW_TEST","APT","APT_TEST","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","SOL","SOL_TEST","useLogoutWallet","logoutFlow","logoutNear","logoutWallet","isSupportLogout"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useWallet.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport { useWallet, ConnectType } from '@terra-money/wallet-provider'\n// import { useWallet as useSolWallet } from '@solana/wallet-adapter-react';\n// import { useDispatch } from 'react-redux'\n// import { setOpenModal, ApplicationModal } from '../state/application/actions'\nimport { useWalletModalToggle } from '../state/application/hooks'\n// import { AppDispatch } from '../state/index'\nimport { useUserSelectChainId } from '../state/user/hooks'\n\nimport { ChainId } from '../config/chainConfig/chainId'\nimport config from '../config'\n\nimport {useActiveReact} from './useActiveReact'\nimport {useLogin} from '../nonevm/near'\nimport {connectXlmWallet} from '../nonevm/stellar'\nimport {useLoginTrx} from '../nonevm/trx'\nimport {useAdaLogin} from '../nonevm/cardano'\nimport {useLoginFlow} from '../nonevm/flow'\nimport {useLoginAptos} from '../nonevm/apt'\nimport {useLoginBtc} from '../nonevm/btc'\nimport {useLoginAtom} from '../nonevm/atom'\nimport {useLoginSol} from '../nonevm/solana'\nimport {useNasLogin} from '../nonevm/nas'\n\nexport function useConnectWallet () {\n  const {account} = useActiveReact()\n  // const dispatch = useDispatch<AppDispatch>()\n  const {selectNetworkInfo} = useUserSelectChainId()\n  const toggleWalletModal = useWalletModalToggle()\n  const { connect } = useWallet()\n  const {login} = useLogin()\n  const {loginXlm} = connectXlmWallet()\n  const {loginTrx} = useLoginTrx()\n  const loginAda = useAdaLogin()\n  const {loginFlow} = useLoginFlow()\n  const {loginAptos} = useLoginAptos()\n  const {loginBtc} = useLoginBtc()\n  const {loginAtom} = useLoginAtom()\n  const {loginSol} = useLoginSol()\n  const {loginNas} = useNasLogin()\n\n  const useChainId = useMemo(() => {\n    return selectNetworkInfo?.chainId\n  }, [selectNetworkInfo])\n  // const {publicKey} = useSolWallet()\n  // console.log(selectNetworkInfo)\n  return useCallback(() => {\n    if (useChainId === ChainId.TERRA) {\n      if (connect) {\n        try {\n          // connect(ConnectType.CHROME_EXTENSION)\n          if (!account) {\n            connect(ConnectType.CHROME_EXTENSION)\n          } else {\n            toggleWalletModal()\n            // dispatch(setOpenModal(ApplicationModal.WALLET))\n          }\n        } catch (error) {\n          alert('Please install Terra Station!')\n        }\n      } else {\n        alert('Please install Terra Station!')\n      }\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(useChainId) && config?.chainInfo?.[useChainId]?.chainType !== 'NOWALLET') {\n      if (!account) {\n        loginBtc(useChainId)\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if (useChainId === ChainId.NAS) {\n      if (!account) {\n        loginNas(useChainId)\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ( [ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId) ) {\n      if (!account) {\n        login()\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(useChainId)) {\n      if (!account) {\n        loginXlm()\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(useChainId)) {\n      if (!account) {\n        loginTrx()\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAda()\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      if (!account) {\n        loginFlow()\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAptos(useChainId)\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAtom(useChainId)\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(useChainId)) {\n      if (!account) {\n        loginSol()\n      } else {\n        toggleWalletModal()\n      }\n    } else {\n      toggleWalletModal()\n    }\n  }, [useChainId, toggleWalletModal, account])\n}\n\nexport function useLogoutWallet () {\n  const {selectNetworkInfo} = useUserSelectChainId()\n  const {logoutFlow} = useLoginFlow()\n  const {logoutNear} = useLogin()\n  const useChainId = useMemo(() => {\n    return selectNetworkInfo?.chainId\n  }, [selectNetworkInfo])\n  const logoutWallet = useCallback(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      logoutFlow()\n    } else if (ChainId.NEAR, ChainId.NEAR_TEST) {\n      logoutNear()\n    }\n  }, [useChainId])\n\n  const isSupportLogout = useMemo(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST, ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId)) {\n      return true\n    }\n    return false\n  }, [useChainId])\n\n  return {\n    logoutWallet,\n    isSupportLogout\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}