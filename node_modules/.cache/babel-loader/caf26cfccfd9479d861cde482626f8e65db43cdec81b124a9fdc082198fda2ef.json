{"ast":null,"code":"import { useActiveWeb3React } from './index';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport { useUserSelectChainId } from '../state/user/hooks';\nimport { useMemo } from 'react';\n\n// import { useCurrentAddress } from '../nonevm/nas'\nimport { useNearAddress } from '../nonevm/near';\nimport { connectXlmWallet } from '../nonevm/stellar';\nimport { useTrxAddress } from '../nonevm/trx';\nimport { useAdaAddress } from '../nonevm/cardano';\nimport { useFlowAddress } from '../nonevm/flow';\nimport { useSolAddress } from '../nonevm/solana';\nimport { useNonevmAddress } from '../nonevm/hooks';\nimport { ChainId } from '../config/chainConfig/chainId';\n// import config from '../config'\n\nexport function useActiveReact() {\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const connectedWallet = useConnectedWallet();\n  const {\n    selectNetworkInfo\n  } = useUserSelectChainId();\n  // const nebAddress = useCurrentAddress()\n  const nearAddress = useNearAddress();\n  const {\n    trxAddress\n  } = useTrxAddress();\n  const {\n    xlmAddress\n  } = connectXlmWallet();\n  const {\n    adaAddress\n  } = useAdaAddress();\n  const {\n    flowAddress\n  } = useFlowAddress();\n  const {\n    solAddress\n  } = useSolAddress();\n  const {\n    nonevmAccount\n  } = useNonevmAddress((selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.chainId) && (selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.label) ? selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.chainId : chainId);\n  // console.log(nonevmAccount)\n  // const useChain = useMemo(() => {\n  //   if (chainId) {\n  //     return chainId\n  //   } else if (config.getCurChainInfo(chainId).chainID) {\n  //     return config.getCurChainInfo(chainId).chainID\n  //   }\n  //   return undefined\n  // }, [chainId])\n  return useMemo(() => {\n    let useAccount = account;\n    // const useChainId:any = selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : (chainId ? chainId : config.getCurChainInfo(chainId).chainID)\n    const useChainId = (selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.chainId) && (selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.label) ? selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.chainId : chainId;\n    // console.log(config)\n    // console.log(useChainId)\n    if ((selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.label) === ChainId.TERRA) {\n      useAccount = connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.walletAddress;\n    } else if ((selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.label) === ChainId.BTC) {\n      useAccount = '';\n    }\n    // else if (selectNetworkInfo?.label === ChainId.NAS) {\n    //   useAccount = nebAddress\n    // }\n    else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId)) {\n      useAccount = nearAddress;\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(useChainId)) {\n      useAccount = xlmAddress;\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(useChainId)) {\n      useAccount = trxAddress;\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = adaAddress;\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = flowAddress;\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = solAddress;\n    } else if (!isNaN(useChainId)) {\n      useAccount = account;\n    } else {\n      useAccount = nonevmAccount;\n    }\n    return {\n      account: useAccount,\n      chainId: useChainId,\n      evmAccount: account,\n      evmChainId: useChainId === chainId ? chainId : ''\n    };\n  }, [account, connectedWallet, selectNetworkInfo, chainId, nearAddress, xlmAddress, trxAddress, adaAddress, flowAddress, solAddress, nonevmAccount]);\n}","map":{"version":3,"names":["useActiveWeb3React","useConnectedWallet","useUserSelectChainId","useMemo","useNearAddress","connectXlmWallet","useTrxAddress","useAdaAddress","useFlowAddress","useSolAddress","useNonevmAddress","ChainId","useActiveReact","account","chainId","connectedWallet","selectNetworkInfo","nearAddress","trxAddress","xlmAddress","adaAddress","flowAddress","solAddress","nonevmAccount","label","useAccount","useChainId","TERRA","walletAddress","BTC","NEAR","NEAR_TEST","includes","XLM","XLM_TEST","TRX","TRX_TEST","ADA","ADA_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","isNaN","evmAccount","evmChainId"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useActiveReact.ts"],"sourcesContent":["import { useActiveWeb3React } from './index'\nimport { useConnectedWallet } from '@terra-money/wallet-provider'\nimport { useUserSelectChainId } from '../state/user/hooks'\nimport { useMemo } from 'react'\n\n// import { useCurrentAddress } from '../nonevm/nas'\nimport {useNearAddress} from '../nonevm/near'\nimport {connectXlmWallet} from '../nonevm/stellar'\nimport {useTrxAddress} from '../nonevm/trx'\nimport {useAdaAddress} from '../nonevm/cardano'\nimport {useFlowAddress} from '../nonevm/flow'\nimport {useSolAddress} from '../nonevm/solana'\nimport {useNonevmAddress} from '../nonevm/hooks'\n\n\nimport { ChainId } from '../config/chainConfig/chainId'\n// import config from '../config'\n\nexport function useActiveReact () {\n  const { account, chainId } = useActiveWeb3React()\n  const connectedWallet = useConnectedWallet()\n  const {selectNetworkInfo} = useUserSelectChainId()\n  // const nebAddress = useCurrentAddress()\n  const nearAddress = useNearAddress()\n  const {trxAddress} = useTrxAddress()\n  const {xlmAddress} = connectXlmWallet()\n  const {adaAddress} = useAdaAddress()\n  const {flowAddress} = useFlowAddress()\n  const {solAddress} = useSolAddress()\n  const {nonevmAccount} = useNonevmAddress(selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : chainId)\n  // console.log(nonevmAccount)\n  // const useChain = useMemo(() => {\n  //   if (chainId) {\n  //     return chainId\n  //   } else if (config.getCurChainInfo(chainId).chainID) {\n  //     return config.getCurChainInfo(chainId).chainID\n  //   }\n  //   return undefined\n  // }, [chainId])\n  return useMemo(() => {\n    let useAccount = account\n    // const useChainId:any = selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : (chainId ? chainId : config.getCurChainInfo(chainId).chainID)\n    const useChainId:any = selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : chainId\n    // console.log(config)\n    // console.log(useChainId)\n    if (selectNetworkInfo?.label === ChainId.TERRA) {\n      useAccount = connectedWallet?.walletAddress\n    } else if (selectNetworkInfo?.label === ChainId.BTC) {\n      useAccount = ''\n    }\n    // else if (selectNetworkInfo?.label === ChainId.NAS) {\n    //   useAccount = nebAddress\n    // }\n    else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId)) {\n      useAccount = nearAddress\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(useChainId)) {\n      useAccount = xlmAddress\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(useChainId)) {\n      useAccount = trxAddress\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = adaAddress\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = flowAddress\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = solAddress\n    } else if (!isNaN(useChainId)) {\n      useAccount = account\n    } else {\n      useAccount = nonevmAccount\n    }\n    return {\n      account: useAccount,\n      chainId: useChainId,\n      evmAccount: account,\n      evmChainId: useChainId === chainId ? chainId : '',\n    }\n  }, [account, connectedWallet, selectNetworkInfo, chainId, nearAddress, xlmAddress, trxAddress, adaAddress, flowAddress, solAddress, nonevmAccount])\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,SAAS;AAC5C,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,oBAAoB,QAAQ,qBAAqB;AAC1D,SAASC,OAAO,QAAQ,OAAO;;AAE/B;AACA,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,gBAAgB,QAAO,mBAAmB;AAClD,SAAQC,aAAa,QAAO,eAAe;AAC3C,SAAQC,aAAa,QAAO,mBAAmB;AAC/C,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,aAAa,QAAO,kBAAkB;AAC9C,SAAQC,gBAAgB,QAAO,iBAAiB;AAGhD,SAASC,OAAO,QAAQ,+BAA+B;AACvD;;AAEA,OAAO,SAASC,cAAcA,CAAA,EAAI;EAChC,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGd,kBAAkB,CAAC,CAAC;EACjD,MAAMe,eAAe,GAAGd,kBAAkB,CAAC,CAAC;EAC5C,MAAM;IAACe;EAAiB,CAAC,GAAGd,oBAAoB,CAAC,CAAC;EAClD;EACA,MAAMe,WAAW,GAAGb,cAAc,CAAC,CAAC;EACpC,MAAM;IAACc;EAAU,CAAC,GAAGZ,aAAa,CAAC,CAAC;EACpC,MAAM;IAACa;EAAU,CAAC,GAAGd,gBAAgB,CAAC,CAAC;EACvC,MAAM;IAACe;EAAU,CAAC,GAAGb,aAAa,CAAC,CAAC;EACpC,MAAM;IAACc;EAAW,CAAC,GAAGb,cAAc,CAAC,CAAC;EACtC,MAAM;IAACc;EAAU,CAAC,GAAGb,aAAa,CAAC,CAAC;EACpC,MAAM;IAACc;EAAa,CAAC,GAAGb,gBAAgB,CAAC,CAAAM,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEF,OAAO,MAAIE,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEQ,KAAK,IAAGR,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEF,OAAO,GAAGA,OAAO,CAAC;EACvI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOX,OAAO,CAAC,MAAM;IACnB,IAAIsB,UAAU,GAAGZ,OAAO;IACxB;IACA,MAAMa,UAAc,GAAG,CAAAV,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEF,OAAO,MAAIE,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEQ,KAAK,IAAGR,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEF,OAAO,GAAGA,OAAO;IACpH;IACA;IACA,IAAI,CAAAE,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEQ,KAAK,MAAKb,OAAO,CAACgB,KAAK,EAAE;MAC9CF,UAAU,GAAGV,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEa,aAAa;IAC7C,CAAC,MAAM,IAAI,CAAAZ,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEQ,KAAK,MAAKb,OAAO,CAACkB,GAAG,EAAE;MACnDJ,UAAU,GAAG,EAAE;IACjB;IACA;IACA;IACA;IAAA,KACK,IAAI,CAACd,OAAO,CAACmB,IAAI,EAAEnB,OAAO,CAACoB,SAAS,CAAC,CAACC,QAAQ,CAACN,UAAU,CAAC,EAAE;MAC/DD,UAAU,GAAGR,WAAW;IAC1B,CAAC,MAAM,IAAI,CAACN,OAAO,CAACsB,GAAG,EAAEtB,OAAO,CAACuB,QAAQ,CAAC,CAACF,QAAQ,CAACN,UAAU,CAAC,EAAE;MAC/DD,UAAU,GAAGN,UAAU;IACzB,CAAC,MAAM,IAAI,CAACR,OAAO,CAACwB,GAAG,EAAExB,OAAO,CAACyB,QAAQ,CAAC,CAACJ,QAAQ,CAACN,UAAU,CAAC,EAAE;MAC/DD,UAAU,GAAGP,UAAU;IACzB,CAAC,MAAM,IAAI,CAACP,OAAO,CAAC0B,GAAG,EAAE1B,OAAO,CAAC2B,QAAQ,CAAC,CAACN,QAAQ,CAACN,UAAU,CAAC,EAAE;MAC/D;MACAD,UAAU,GAAGL,UAAU;IACzB,CAAC,MAAM,IAAI,CAACT,OAAO,CAAC4B,IAAI,EAAE5B,OAAO,CAAC6B,SAAS,CAAC,CAACR,QAAQ,CAACN,UAAU,CAAC,EAAE;MACjE;MACAD,UAAU,GAAGJ,WAAW;IAC1B,CAAC,MAAM,IAAI,CAACV,OAAO,CAAC8B,GAAG,EAAE9B,OAAO,CAAC+B,QAAQ,CAAC,CAACV,QAAQ,CAACN,UAAU,CAAC,EAAE;MAC/D;MACAD,UAAU,GAAGH,UAAU;IACzB,CAAC,MAAM,IAAI,CAACqB,KAAK,CAACjB,UAAU,CAAC,EAAE;MAC7BD,UAAU,GAAGZ,OAAO;IACtB,CAAC,MAAM;MACLY,UAAU,GAAGF,aAAa;IAC5B;IACA,OAAO;MACLV,OAAO,EAAEY,UAAU;MACnBX,OAAO,EAAEY,UAAU;MACnBkB,UAAU,EAAE/B,OAAO;MACnBgC,UAAU,EAAEnB,UAAU,KAAKZ,OAAO,GAAGA,OAAO,GAAG;IACjD,CAAC;EACH,CAAC,EAAE,CAACD,OAAO,EAAEE,eAAe,EAAEC,iBAAiB,EAAEF,OAAO,EAAEG,WAAW,EAAEE,UAAU,EAAED,UAAU,EAAEE,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAEC,aAAa,CAAC,CAAC;AACrJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}