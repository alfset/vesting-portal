{"ast":null,"code":"import{useConnectedWallet}from'@terra-money/wallet-provider';import{useCallback,useEffect,useMemo,useRef,useState}from'react';import{useETHBalances}from'../state/wallet/hooks';import{useUserSelectChainId}from'../state/user/hooks';import useInterval from'./useInterval';import useTerraBalance,{useTerraBaseBalance}from'./useTerraBalance';import{useCurrentNasBalance,useNasTokenBalance}from'../nonevm/nas';import{useNearBalance}from'../nonevm/near';import{useTrxBalance}from'../nonevm/trx';import{useXlmBalance}from'../nonevm/stellar';import{useAdaBalance}from'../nonevm/cardano';import{useFlowBalance}from'../nonevm/flow';import{useSolBalance}from'../nonevm/solana';import{useAptosBalance}from'../nonevm/apt';import{useBtcBalance}from'../nonevm/btc';import{useAtomBalance}from'../nonevm/atom';import{useCurrencyBalance1}from'../state/wallet/hooks';import{useActiveReact}from'./useActiveReact';import{ChainId}from'../config/chainConfig/chainId';import{BigAmount}from'../utils/formatBignumber';import{tryParseAmount3}from'../state/swap/hooks';import config from'../config';export function useTokensBalance(token,dec,selectChainId){const{account}=useActiveReact();const connectedWallet=useConnectedWallet();const{getTerraBalances}=useTerraBalance();const{getNearTokenBalance}=useNearBalance();const{getNasTokenBalance}=useNasTokenBalance();const{getTrxTokenBalance}=useTrxBalance();const{getAllBalance}=useXlmBalance();const{adaBalanceList}=useAdaBalance();const{flowBalanceList}=useFlowBalance();const{getSolTokenBalance,getSolBalance}=useSolBalance();const{aptBalanceList}=useAptosBalance();const{btcBalanceList}=useBtcBalance();const{atomBalanceList}=useAtomBalance();const savedBalance=useRef();const evmBalance=useCurrencyBalance1(account,token,dec,selectChainId);const fetchBalance=useCallback(()=>{// console.log([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId))\nif(token){var _config$chainInfo,_config$chainInfo$sel;if([ChainId.TERRA].includes(selectChainId)&&(connectedWallet===null||connectedWallet===void 0?void 0:connectedWallet.walletAddress)){getTerraBalances({terraWhiteList:[{token:token}],account:connectedWallet===null||connectedWallet===void 0?void 0:connectedWallet.walletAddress}).then(res=>{const bl=res[token]&&(dec||dec===0)?BigAmount.format(dec,res[token]):undefined;savedBalance.current=bl;});}else if([ChainId.NEAR,ChainId.NEAR_TEST].includes(selectChainId)){getNearTokenBalance({token}).then(res=>{const bl=res&&(dec||dec===0)?BigAmount.format(dec,res):undefined;savedBalance.current=bl;});}else if([ChainId.NAS].includes(selectChainId)){getNasTokenBalance({account:'',token}).then(res=>{const bl=res&&(dec||dec===0)?BigAmount.format(dec,res):undefined;savedBalance.current=bl;}).catch(()=>{savedBalance.current='';});}else if([ChainId.TRX,ChainId.TRX_TEST].includes(selectChainId)){getTrxTokenBalance({token}).then(res=>{var _res$constant_result;// console.log(token)\n// console.log(res)\nconst bl='0x'+(res===null||res===void 0?void 0:(_res$constant_result=res.constant_result)===null||_res$constant_result===void 0?void 0:_res$constant_result[0]);savedBalance.current=bl&&(dec||dec===0)?BigAmount.format(dec,bl):undefined;});}else if([ChainId.XLM,ChainId.XLM_TEST].includes(selectChainId)){// console.log(selectChainId)\ngetAllBalance(selectChainId).then(res=>{// console.log(res)\nif(res===null||res===void 0?void 0:res.balances){var _res$token;if(res===null||res===void 0?void 0:(_res$token=res[token])===null||_res$token===void 0?void 0:_res$token.balance){var _res$token2;// const dec = 7\nconst blvalue=tryParseAmount3(res===null||res===void 0?void 0:(_res$token2=res[token])===null||_res$token2===void 0?void 0:_res$token2.balance,dec);const bl=res?BigAmount.format(dec,blvalue):undefined;savedBalance.current=bl;}}});}else if([ChainId.ADA,ChainId.ADA_TEST].includes(selectChainId)){if(adaBalanceList===null||adaBalanceList===void 0?void 0:adaBalanceList[token]){const bl=BigAmount.format(dec,adaBalanceList===null||adaBalanceList===void 0?void 0:adaBalanceList[token]);savedBalance.current=bl;}}else if([ChainId.FLOW,ChainId.FLOW_TEST].includes(selectChainId)){if(flowBalanceList===null||flowBalanceList===void 0?void 0:flowBalanceList[token]){const bl=BigAmount.format(dec,flowBalanceList===null||flowBalanceList===void 0?void 0:flowBalanceList[token]);savedBalance.current=bl;}}else if([ChainId.SOL,ChainId.SOL_TEST].includes(selectChainId)){// console.log(token)\nif(token==='native'){getSolBalance({chainId:selectChainId,account:account}).then(res=>{var _res$result;// console.log(res)\nif(res===null||res===void 0?void 0:(_res$result=res.result)===null||_res$result===void 0?void 0:_res$result.value){var _res$result2;const bl=BigAmount.format(dec,res===null||res===void 0?void 0:(_res$result2=res.result)===null||_res$result2===void 0?void 0:_res$result2.value);savedBalance.current=bl;}});}else{getSolTokenBalance({chainId:selectChainId,account:account,token}).then(res=>{var _res$result3,_res$result3$value;// console.log(res)\nif(res===null||res===void 0?void 0:(_res$result3=res.result)===null||_res$result3===void 0?void 0:(_res$result3$value=_res$result3.value)===null||_res$result3$value===void 0?void 0:_res$result3$value.amount){var _res$result4,_res$result4$value;const bl=BigAmount.format(dec,res===null||res===void 0?void 0:(_res$result4=res.result)===null||_res$result4===void 0?void 0:(_res$result4$value=_res$result4.value)===null||_res$result4$value===void 0?void 0:_res$result4$value.amount);savedBalance.current=bl;}});}}else if([ChainId.APT,ChainId.APT_TEST].includes(selectChainId)){// console.log(account)\nif(aptBalanceList===null||aptBalanceList===void 0?void 0:aptBalanceList[token]){var _aptBalanceList$token;const bl=BigAmount.format(dec,aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token=aptBalanceList[token])===null||_aptBalanceList$token===void 0?void 0:_aptBalanceList$token.balance);savedBalance.current=bl;}else if(dec){const bl=BigAmount.format(dec,'0');savedBalance.current=bl;}}else if([ChainId.BTC,ChainId.BTC_TEST].includes(selectChainId)&&(config===null||config===void 0?void 0:(_config$chainInfo=config.chainInfo)===null||_config$chainInfo===void 0?void 0:(_config$chainInfo$sel=_config$chainInfo[selectChainId])===null||_config$chainInfo$sel===void 0?void 0:_config$chainInfo$sel.chainType)!=='NOWALLET'){// console.log(account)\nif(btcBalanceList===null||btcBalanceList===void 0?void 0:btcBalanceList.NATIVE){const bl=BigAmount.format(dec,btcBalanceList===null||btcBalanceList===void 0?void 0:btcBalanceList.NATIVE);savedBalance.current=bl;}else if(dec){const bl=BigAmount.format(dec,'0');savedBalance.current=bl;}}else if([ChainId.ATOM_SEI,ChainId.ATOM_SEI_TEST,ChainId.ATOM_DCORE,ChainId.ATOM_DCORE_TEST].includes(selectChainId)){// console.log(account)\nif(atomBalanceList===null||atomBalanceList===void 0?void 0:atomBalanceList[token]){var _atomBalanceList$toke;const bl=BigAmount.format(dec,atomBalanceList===null||atomBalanceList===void 0?void 0:(_atomBalanceList$toke=atomBalanceList[token])===null||_atomBalanceList$toke===void 0?void 0:_atomBalanceList$toke.balance);savedBalance.current=bl;}else if(dec){const bl=BigAmount.format(dec,'0');savedBalance.current=bl;}}else{// console.log('evmBalance', evmBalance ? evmBalance.toExact() : '')\nsavedBalance.current=evmBalance;}}else{savedBalance.current='';// setBalance('')\n}},[token,connectedWallet,selectChainId,adaBalanceList,flowBalanceList,evmBalance,account,aptBalanceList,btcBalanceList,atomBalanceList]);useInterval(fetchBalance,1000*10,false);useEffect(()=>{savedBalance.current='';fetchBalance();},[fetchBalance,token,account]);return useMemo(()=>{// console.log(savedBalance)\nreturn savedBalance.current;},[savedBalance.current,selectChainId,token,account]);}export function useBaseBalances(uncheckedAddresses){var _useETHBalances;const{selectNetworkInfo}=useUserSelectChainId();const userEthBalance=(_useETHBalances=useETHBalances(uncheckedAddresses&&!(selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.label)?[uncheckedAddresses]:[]))===null||_useETHBalances===void 0?void 0:_useETHBalances[uncheckedAddresses!==null&&uncheckedAddresses!==void 0?uncheckedAddresses:''];// const userEthBalance = useETHBalances((uncheckedAddresses) ? [uncheckedAddresses] : [])?.[uncheckedAddresses ?? '']\nconst{getTerraBaseBalances}=useTerraBaseBalance();const{getNasBalance}=useCurrentNasBalance();const{getNearBalance}=useNearBalance();const{getTrxBalance}=useTrxBalance();const{getAllBalance}=useXlmBalance();const{adaBalanceList}=useAdaBalance();const{flowBalanceList}=useFlowBalance();const{getSolBalance}=useSolBalance();const{aptBalanceList}=useAptosBalance();const{btcBalanceList}=useBtcBalance();const{atomBalanceList}=useAtomBalance();const selectChainId=selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.label;const[balance,setBalance]=useState();const fetchBalancesCallback=useCallback(()=>{var _config$chainInfo2,_config$chainInfo2$se;if(selectChainId===ChainId.TERRA){getTerraBaseBalances().then(res=>{const bl=(res===null||res===void 0?void 0:res.uluna)?BigAmount.format(6,res===null||res===void 0?void 0:res.uluna):undefined;setBalance(bl);});}else if(selectChainId===ChainId.NAS){getNasBalance().then(res=>{// console.log(res)\nconst bl=res?BigAmount.format(18,res):undefined;setBalance(bl);});}else if([ChainId.NEAR,ChainId.NEAR_TEST].includes(selectChainId)){getNearBalance().then(res=>{const bl=(res===null||res===void 0?void 0:res.total)?BigAmount.format(24,res===null||res===void 0?void 0:res.total):undefined;setBalance(bl);});}else if([ChainId.TRX,ChainId.TRX_TEST].includes(selectChainId)){getTrxBalance({}).then(res=>{// console.log(res)\nconst bl=res||res===0?BigAmount.format(6,res):undefined;setBalance(bl);});}else if([ChainId.XLM,ChainId.XLM_TEST].includes(selectChainId)){// console.log(selectChainId)\ngetAllBalance(selectChainId,uncheckedAddresses).then(res=>{var _res$native;// console.log(res)\nif(res===null||res===void 0?void 0:(_res$native=res['native'])===null||_res$native===void 0?void 0:_res$native.balance){var _res$native2;const dec=7;const blvalue=tryParseAmount3(res===null||res===void 0?void 0:(_res$native2=res['native'])===null||_res$native2===void 0?void 0:_res$native2.balance,dec);const bl=res?BigAmount.format(dec,blvalue):undefined;setBalance(bl);}});}else if([ChainId.ADA,ChainId.ADA_TEST].includes(selectChainId)){if(adaBalanceList===null||adaBalanceList===void 0?void 0:adaBalanceList['NATIVE']){const bl=BigAmount.format(6,adaBalanceList===null||adaBalanceList===void 0?void 0:adaBalanceList['NATIVE']);setBalance(bl);}}else if([ChainId.FLOW,ChainId.FLOW_TEST].includes(selectChainId)){if(flowBalanceList===null||flowBalanceList===void 0?void 0:flowBalanceList['NATIVE']){const bl=BigAmount.format(8,flowBalanceList===null||flowBalanceList===void 0?void 0:flowBalanceList['NATIVE']);setBalance(bl);}}else if([ChainId.SOL,ChainId.SOL_TEST].includes(selectChainId)){getSolBalance({chainId:selectChainId,account:uncheckedAddresses}).then(res=>{var _res$result5;if(res===null||res===void 0?void 0:(_res$result5=res.result)===null||_res$result5===void 0?void 0:_res$result5.value){var _res$result6;const bl=BigAmount.format(9,res===null||res===void 0?void 0:(_res$result6=res.result)===null||_res$result6===void 0?void 0:_res$result6.value);setBalance(bl);}else{setBalance('');}// console.log(res)\n});}else if([ChainId.APT,ChainId.APT_TEST].includes(selectChainId)){const nativetoken='0x1::aptos_coin::AptosCoin';// console.log(aptBalanceList)\nif(aptBalanceList===null||aptBalanceList===void 0?void 0:aptBalanceList[nativetoken]){var _aptBalanceList$nativ;const bl=BigAmount.format(8,aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$nativ=aptBalanceList[nativetoken])===null||_aptBalanceList$nativ===void 0?void 0:_aptBalanceList$nativ.balance);setBalance(bl);}else{const bl=BigAmount.format(8,'0');setBalance(bl);}}else if([ChainId.BTC,ChainId.BTC_TEST].includes(selectChainId)&&(config===null||config===void 0?void 0:(_config$chainInfo2=config.chainInfo)===null||_config$chainInfo2===void 0?void 0:(_config$chainInfo2$se=_config$chainInfo2[selectChainId])===null||_config$chainInfo2$se===void 0?void 0:_config$chainInfo2$se.chainType)!=='NOWALLET'){// console.log(btcBalanceList)\nif(btcBalanceList===null||btcBalanceList===void 0?void 0:btcBalanceList.NATIVE){const bl=BigAmount.format(8,btcBalanceList===null||btcBalanceList===void 0?void 0:btcBalanceList.NATIVE);setBalance(bl);}else{const bl=BigAmount.format(8,'0');setBalance(bl);}}else if([ChainId.ATOM_SEI,ChainId.ATOM_SEI_TEST,ChainId.ATOM_DCORE,ChainId.ATOM_DCORE_TEST].includes(selectChainId)){var _atomBalanceList$NATI;// console.log(btcBalanceList)\nif(atomBalanceList===null||atomBalanceList===void 0?void 0:(_atomBalanceList$NATI=atomBalanceList.NATIVE)===null||_atomBalanceList$NATI===void 0?void 0:_atomBalanceList$NATI.balance){var _atomBalanceList$NATI2;const bl=BigAmount.format(6,atomBalanceList===null||atomBalanceList===void 0?void 0:(_atomBalanceList$NATI2=atomBalanceList.NATIVE)===null||_atomBalanceList$NATI2===void 0?void 0:_atomBalanceList$NATI2.balance);setBalance(bl);}else{const bl=BigAmount.format(6,'0');setBalance(bl);}}},[uncheckedAddresses,selectChainId,getAllBalance,adaBalanceList,flowBalanceList,aptBalanceList,btcBalanceList,atomBalanceList]);useEffect(()=>{fetchBalancesCallback();},[fetchBalancesCallback]);useInterval(fetchBalancesCallback,1000*10);return useMemo(()=>{// console.log(userEthBalance)\nif(!selectChainId){return userEthBalance;}else if(balance){return balance;}return undefined;},[balance,userEthBalance]);}","map":{"version":3,"names":["useConnectedWallet","useCallback","useEffect","useMemo","useRef","useState","useETHBalances","useUserSelectChainId","useInterval","useTerraBalance","useTerraBaseBalance","useCurrentNasBalance","useNasTokenBalance","useNearBalance","useTrxBalance","useXlmBalance","useAdaBalance","useFlowBalance","useSolBalance","useAptosBalance","useBtcBalance","useAtomBalance","useCurrencyBalance1","useActiveReact","ChainId","BigAmount","tryParseAmount3","config","useTokensBalance","token","dec","selectChainId","account","connectedWallet","getTerraBalances","getNearTokenBalance","getNasTokenBalance","getTrxTokenBalance","getAllBalance","adaBalanceList","flowBalanceList","getSolTokenBalance","getSolBalance","aptBalanceList","btcBalanceList","atomBalanceList","savedBalance","evmBalance","fetchBalance","_config$chainInfo","_config$chainInfo$sel","TERRA","includes","walletAddress","terraWhiteList","then","res","bl","format","undefined","current","NEAR","NEAR_TEST","NAS","catch","TRX","TRX_TEST","_res$constant_result","constant_result","XLM","XLM_TEST","balances","_res$token","balance","_res$token2","blvalue","ADA","ADA_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","chainId","_res$result","result","value","_res$result2","_res$result3","_res$result3$value","amount","_res$result4","_res$result4$value","APT","APT_TEST","_aptBalanceList$token","BTC","BTC_TEST","chainInfo","chainType","NATIVE","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","_atomBalanceList$toke","useBaseBalances","uncheckedAddresses","_useETHBalances","selectNetworkInfo","userEthBalance","label","getTerraBaseBalances","getNasBalance","getNearBalance","getTrxBalance","setBalance","fetchBalancesCallback","_config$chainInfo2","_config$chainInfo2$se","uluna","total","_res$native","_res$native2","_res$result5","_res$result6","nativetoken","_aptBalanceList$nativ","_atomBalanceList$NATI","_atomBalanceList$NATI2"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useAllBalances.ts"],"sourcesContent":["import { useConnectedWallet } from '@terra-money/wallet-provider'\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useETHBalances } from '../state/wallet/hooks'\nimport { useUserSelectChainId } from '../state/user/hooks'\nimport useInterval from './useInterval'\nimport useTerraBalance, {useTerraBaseBalance} from './useTerraBalance'\nimport { useCurrentNasBalance, useNasTokenBalance } from '../nonevm/nas'\nimport { useNearBalance } from '../nonevm/near'\nimport { useTrxBalance } from '../nonevm/trx'\nimport {useXlmBalance} from '../nonevm/stellar'\nimport {useAdaBalance} from '../nonevm/cardano'\nimport {useFlowBalance} from '../nonevm/flow'\nimport {useSolBalance} from '../nonevm/solana'\nimport {useAptosBalance} from '../nonevm/apt'\nimport {useBtcBalance} from '../nonevm/btc'\nimport {useAtomBalance} from '../nonevm/atom'\n\n\nimport {useCurrencyBalance1} from '../state/wallet/hooks'\nimport {useActiveReact} from './useActiveReact'\n\nimport { ChainId } from '../config/chainConfig/chainId'\nimport { BigAmount } from '../utils/formatBignumber'\nimport { tryParseAmount3 } from '../state/swap/hooks'\n\nimport config from '../config'\n\nexport function useTokensBalance (token:any, dec:any, selectChainId:any) {\n  const {account} = useActiveReact()\n  const connectedWallet = useConnectedWallet()\n  const {getTerraBalances} = useTerraBalance()\n\n  const { getNearTokenBalance } = useNearBalance()\n\n  const {getNasTokenBalance} = useNasTokenBalance()\n  \n  const {getTrxTokenBalance} = useTrxBalance()\n\n  const {getAllBalance} = useXlmBalance()\n\n  const {adaBalanceList} = useAdaBalance()\n  const {flowBalanceList} = useFlowBalance()\n  const {getSolTokenBalance, getSolBalance} = useSolBalance()\n  const {aptBalanceList} = useAptosBalance()\n  const {btcBalanceList} = useBtcBalance()\n  const {atomBalanceList} = useAtomBalance()\n\n  const savedBalance = useRef<any>()\n\n  const evmBalance = useCurrencyBalance1(account, token, dec, selectChainId)\n\n  const fetchBalance = useCallback(() => {\n    // console.log([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId))\n    if (token) {\n      if ([ChainId.TERRA].includes(selectChainId) && connectedWallet?.walletAddress) {\n        getTerraBalances({\n          terraWhiteList: [{\n            token: token\n          }],\n          account: connectedWallet?.walletAddress\n        }).then(res => {\n          const bl = res[token] && (dec || dec === 0) ? BigAmount.format(dec, res[token]) : undefined\n          savedBalance.current = bl\n        })\n      } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(selectChainId)) {\n        getNearTokenBalance({token}).then(res => {\n          const bl = res && (dec || dec === 0) ? BigAmount.format(dec, res) : undefined\n          savedBalance.current = bl\n        })\n      } else if ([ChainId.NAS].includes(selectChainId)) {\n        getNasTokenBalance({\n          account: '',\n          token\n        }).then((res:any) => {\n          const bl = res && (dec || dec === 0) ? BigAmount.format(dec, res) : undefined\n          savedBalance.current = bl\n        }).catch(() => {\n          savedBalance.current = ''\n        })\n      } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId)) {\n        getTrxTokenBalance({token}).then((res:any) => {\n          // console.log(token)\n          // console.log(res)\n          const bl:any = '0x' + res?.constant_result?.[0]\n          savedBalance.current = bl && (dec || dec === 0) ? BigAmount.format(dec, bl) : undefined\n        })\n      } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(selectChainId)) {\n        // console.log(selectChainId)\n        getAllBalance(selectChainId).then((res:any) => {\n          // console.log(res)\n          if (res?.balances) {\n            if (res?.[token]?.balance) {\n              // const dec = 7\n              const blvalue = tryParseAmount3(res?.[token]?.balance, dec)\n              const bl = res ? BigAmount.format(dec, blvalue) : undefined\n              savedBalance.current = bl\n            }\n          }\n        })\n      } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(selectChainId)) {\n        if (adaBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, adaBalanceList?.[token])\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(selectChainId)) {\n        if (flowBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, flowBalanceList?.[token])\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(selectChainId)) {\n        // console.log(token)\n        if (token === 'native') {\n          getSolBalance({chainId: selectChainId, account: account}).then((res:any) => {\n            // console.log(res)\n            if (res?.result?.value) {\n              const bl = BigAmount.format(dec, res?.result?.value)\n              savedBalance.current = bl\n            }\n          })\n        } else {\n          getSolTokenBalance({chainId: selectChainId, account: account, token}).then((res:any) => {\n            // console.log(res)\n            if (res?.result?.value?.amount) {\n              const bl = BigAmount.format(dec, res?.result?.value?.amount)\n              savedBalance.current = bl\n            }\n          })\n        }\n      } else if ([ChainId.APT, ChainId.APT_TEST].includes(selectChainId)) {\n        // console.log(account)\n        if (aptBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, aptBalanceList?.[token]?.balance)\n          savedBalance.current = bl\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0')\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(selectChainId) && config?.chainInfo?.[selectChainId]?.chainType !== 'NOWALLET') {\n        // console.log(account)\n        if (btcBalanceList?.NATIVE) {\n          const bl = BigAmount.format(dec, btcBalanceList?.NATIVE)\n          savedBalance.current = bl\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0')\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(selectChainId)) {\n        // console.log(account)\n        if (atomBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, atomBalanceList?.[token]?.balance)\n          savedBalance.current = bl\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0')\n          savedBalance.current = bl\n        }\n      } else {\n        // console.log('evmBalance', evmBalance ? evmBalance.toExact() : '')\n        savedBalance.current = evmBalance\n      }\n    } else {\n      savedBalance.current = ''\n      // setBalance('')\n    }\n  }, [token, connectedWallet, selectChainId, adaBalanceList, flowBalanceList, evmBalance, account, aptBalanceList, btcBalanceList, atomBalanceList])\n\n  useInterval(fetchBalance, 1000 * 10, false)\n\n  useEffect(() => {\n    \n    savedBalance.current = ''\n    fetchBalance()\n  }, [fetchBalance, token, account])\n\n  return useMemo(() => {\n    // console.log(savedBalance)\n    return savedBalance.current\n  }, [savedBalance.current, selectChainId, token, account])\n}\n\n\nexport function useBaseBalances (\n  uncheckedAddresses?: string | null | undefined\n) {\n  const {selectNetworkInfo} = useUserSelectChainId()\n  const userEthBalance = useETHBalances((uncheckedAddresses && !selectNetworkInfo?.label) ? [uncheckedAddresses] : [])?.[uncheckedAddresses ?? '']\n  // const userEthBalance = useETHBalances((uncheckedAddresses) ? [uncheckedAddresses] : [])?.[uncheckedAddresses ?? '']\n  const {getTerraBaseBalances} = useTerraBaseBalance()\n  const { getNasBalance } = useCurrentNasBalance()\n  const { getNearBalance } = useNearBalance()\n  const {getTrxBalance} = useTrxBalance()\n  const {getAllBalance} = useXlmBalance()\n  const {adaBalanceList} = useAdaBalance()\n  const {flowBalanceList} = useFlowBalance()\n  const {getSolBalance} = useSolBalance()\n  const {aptBalanceList} = useAptosBalance()\n  const {btcBalanceList} = useBtcBalance()\n  const {atomBalanceList} = useAtomBalance()\n  \n\n  const selectChainId = selectNetworkInfo?.label\n\n  const [balance, setBalance] = useState<any>()\n  const fetchBalancesCallback = useCallback(() => {\n    if (selectChainId === ChainId.TERRA) {\n      getTerraBaseBalances().then(res => {\n        const bl = res?.uluna ? BigAmount.format(6, res?.uluna) : undefined\n        setBalance(bl)\n      })\n    } else if (selectChainId === ChainId.NAS) {\n      getNasBalance().then(res => {\n        // console.log(res)\n        const bl = res ? BigAmount.format(18, res) : undefined\n        setBalance(bl)\n      })\n    } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(selectChainId)) {\n      getNearBalance().then(res => {\n        const bl = res?.total ? BigAmount.format(24, res?.total) : undefined\n        setBalance(bl)\n      })\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId)) {\n      getTrxBalance({}).then((res:any) => {\n        // console.log(res)\n        const bl = res || res === 0 ? BigAmount.format(6, res) : undefined\n        setBalance(bl)\n      })\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(selectChainId)) {\n      // console.log(selectChainId)\n      getAllBalance(selectChainId, uncheckedAddresses).then((res:any) => {\n        // console.log(res)\n        if (res?.['native']?.balance) {\n          const dec = 7\n          const blvalue = tryParseAmount3(res?.['native']?.balance, dec)\n          const bl = res ? BigAmount.format(dec, blvalue) : undefined\n          setBalance(bl)\n        }\n      })\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(selectChainId)) {\n\n      if (adaBalanceList?.['NATIVE']) {\n        const bl = BigAmount.format(6, adaBalanceList?.['NATIVE'])\n        setBalance(bl)\n      }\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(selectChainId)) {\n      if (flowBalanceList?.['NATIVE']) {\n        const bl = BigAmount.format(8, flowBalanceList?.['NATIVE'])\n        setBalance(bl)\n      }\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(selectChainId)) {\n      getSolBalance({chainId: selectChainId, account: uncheckedAddresses}).then((res:any) => {\n        if (res?.result?.value) {\n          const bl = BigAmount.format(9, res?.result?.value)\n          setBalance(bl)\n        } else {\n          setBalance('')\n        }\n        // console.log(res)\n      })\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(selectChainId)) {\n      const nativetoken = '0x1::aptos_coin::AptosCoin'\n      // console.log(aptBalanceList)\n      if (aptBalanceList?.[nativetoken]) {\n        const bl = BigAmount.format(8, aptBalanceList?.[nativetoken]?.balance)\n        setBalance(bl)\n      } else {\n        const bl = BigAmount.format(8, '0')\n        setBalance(bl)\n      }\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(selectChainId) && config?.chainInfo?.[selectChainId]?.chainType !== 'NOWALLET') {\n      // console.log(btcBalanceList)\n      if (btcBalanceList?.NATIVE) {\n        const bl = BigAmount.format(8, btcBalanceList?.NATIVE)\n        setBalance(bl)\n      } else {\n        const bl = BigAmount.format(8, '0')\n        setBalance(bl)\n      }\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(selectChainId)) {\n      // console.log(btcBalanceList)\n      if (atomBalanceList?.NATIVE?.balance) {\n        const bl = BigAmount.format(6, atomBalanceList?.NATIVE?.balance)\n        setBalance(bl)\n      } else {\n        const bl = BigAmount.format(6, '0')\n        setBalance(bl)\n      }\n    }\n  }, [uncheckedAddresses, selectChainId, getAllBalance, adaBalanceList, flowBalanceList,aptBalanceList, btcBalanceList, atomBalanceList])\n\n  useEffect(() => {\n    fetchBalancesCallback()\n  }, [fetchBalancesCallback])\n\n  useInterval(fetchBalancesCallback, 1000 * 10)\n\n  return useMemo(() => {\n    // console.log(userEthBalance)\n    if (!selectChainId) {\n      return userEthBalance\n    } else if (balance) {\n      return balance\n    }\n    return undefined\n  }, [balance, userEthBalance])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}