{"ast":null,"code":"import { getUrlData, postUrlData } from '../tools/axios';\nimport { USE_VERSION, timeout } from '../../config/constant';\nimport { getLocalConfig } from '../tools/tools';\nimport { CROSSCHAINBRIDGE } from './type';\nimport config from '../../config';\nexport function registerSwap(hash, chainId) {\n  return new Promise(resolve => {\n    console.log(hash);\n    const url = \"\".concat(config.bridgeApi, \"/v3/register?hash=\").concat(hash, \"&chainId=\").concat(chainId, \"&type=\").concat(USE_VERSION);\n    getUrlData(url).then(res => {\n      console.log(res);\n      resolve(res);\n    });\n  });\n}\nconst registerList = {};\n\n// console.log(window?.navigator)\n// console.log(window)\n// getUrlData('https://api.ipify.org/?format=json').then(res => console.log(res))\nexport function recordsTxns(_ref) {\n  let {\n    hash,\n    chainId,\n    selectChain,\n    account,\n    value,\n    formatvalue,\n    to,\n    symbol,\n    version,\n    pairid,\n    routerToken\n  } = _ref;\n  return new Promise(async resolve => {\n    // console.log(hash)\n    const url = \"\".concat(config.bridgeApi, \"/v3/records\");\n    const useVersion = version ? version : USE_VERSION;\n    // console.log(version)\n    // console.log(USE_VERSION)\n    // const ip:any = await getUrlData('https://api.ipify.org/?format=json')\n    const data = {\n      hash: hash,\n      srcChainID: chainId,\n      destChainID: selectChain,\n      token: routerToken ? routerToken : '',\n      from: account,\n      version: useVersion,\n      value: value,\n      formatvalue: formatvalue,\n      to: to,\n      symbol: symbol,\n      pairid: pairid\n      // userAgent: window?.navigator?.userAgent,\n      // userIP: window?.returnCitySN ? window?.returnCitySN : (ip?.data?.ip ? {cip: ip?.data?.ip} : '')\n    };\n\n    if (!registerList[hash]) {\n      registerList[hash] = {\n        hash,\n        chainId,\n        selectChain,\n        account,\n        value,\n        formatvalue,\n        to,\n        symbol,\n        version,\n        pairid,\n        routerToken,\n        isRegister: 0,\n        timestamp: Date.now()\n      };\n    }\n    postUrlData(url, data).then(res => {\n      console.log(res);\n      if (res.msg === 'Success' || res.data === 'Error') {\n        registerList[hash].isRegister = 1;\n      } else {\n        if (Date.now() - registerList[hash].timestamp <= 3000) {\n          setTimeout(() => {\n            recordsTxns(registerList[hash]);\n          }, 1000);\n        }\n      }\n      resolve(res);\n    });\n  });\n}\nconst approveList = {};\nexport function recordsApprove(_ref2) {\n  let {\n    token,\n    spender,\n    account,\n    amount,\n    symbol,\n    decimals,\n    hash,\n    chainId,\n    type\n  } = _ref2;\n  return new Promise(async resolve => {\n    // console.log(hash)\n    const url = \"\".concat(config.bridgeApi, \"/v3/records/approved\");\n    const data = {\n      token,\n      spender,\n      account,\n      amount,\n      symbol,\n      decimals,\n      hash,\n      chainId,\n      type\n    };\n    if (!approveList[hash]) {\n      approveList[hash] = {\n        token,\n        spender,\n        account,\n        amount,\n        symbol,\n        decimals,\n        hash,\n        chainId,\n        type,\n        isRegister: 0,\n        timestamp: Date.now()\n      };\n    }\n    postUrlData(url, data).then(res => {\n      console.log(res);\n      if (res.msg === 'Success' || res.data === 'Error') {\n        approveList[hash].isRegister = 1;\n      } else {\n        if (Date.now() - approveList[hash].timestamp <= 3000) {\n          setTimeout(() => {\n            recordsApprove(approveList[hash]);\n          }, 1000);\n        }\n      }\n      resolve(res);\n    });\n  });\n}\n// recordsApprove({\n//   token: '',\n//   spender: '0xb153fb3d196a8eb25522705560ac152eeec57901',\n//   account: '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249',\n//   amount: '0x0',\n//   symbol: 'WETH',\n//   decimals: '18',\n//   hash: '0xf31d62838189bae0a40c0420b2d6b79aa502d7850ee0f30abcd7aaa91fadaf3a',\n//   chainId: 1,\n//   type: 'Revoke'\n// })\nexport function getP2PInfo(account, chainId, symbol, token) {\n  return new Promise(resolve => {\n    // console.log(hash)\n    const lData = getLocalConfig(account, token, chainId, CROSSCHAINBRIDGE, timeout, undefined);\n    if (lData) {\n      // console.log(lData)\n      resolve({\n        p2pAddress: lData.p2pAddress\n      });\n    } else {\n      const url = \"\".concat(config.bridgeApi, \"/v2/register/\").concat(account, \"/\").concat(chainId, \"/\").concat(symbol);\n      getUrlData(url).then(res => {\n        // console.log(res)\n        if (res.msg === 'Success') {\n          var _res$data$P2shAddress, _res$data, _res$data2, _res$data2$info;\n          resolve({\n            p2pAddress: (_res$data$P2shAddress = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.P2shAddress) !== null && _res$data$P2shAddress !== void 0 ? _res$data$P2shAddress : res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$info = _res$data2.info) === null || _res$data2$info === void 0 ? void 0 : _res$data2$info.P2shAddress\n          });\n        } else {\n          resolve('');\n        }\n      });\n    }\n  });\n}","map":{"version":3,"names":["getUrlData","postUrlData","USE_VERSION","timeout","getLocalConfig","CROSSCHAINBRIDGE","config","registerSwap","hash","chainId","Promise","resolve","console","log","url","concat","bridgeApi","then","res","registerList","recordsTxns","_ref","selectChain","account","value","formatvalue","to","symbol","version","pairid","routerToken","useVersion","data","srcChainID","destChainID","token","from","isRegister","timestamp","Date","now","msg","setTimeout","approveList","recordsApprove","_ref2","spender","amount","decimals","type","getP2PInfo","lData","undefined","p2pAddress","_res$data$P2shAddress","_res$data","_res$data2","_res$data2$info","P2shAddress","info"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/bridge/register.ts"],"sourcesContent":["import {getUrlData, postUrlData} from '../tools/axios'\nimport {USE_VERSION, timeout} from '../../config/constant'\nimport {getLocalConfig} from '../tools/tools'\nimport {CROSSCHAINBRIDGE} from './type'\n\nimport config from '../../config'\n\nexport function registerSwap (hash:string, chainId:any) {\n  return new Promise(resolve => {\n    console.log(hash)\n    const url = `${config.bridgeApi}/v3/register?hash=${hash}&chainId=${chainId}&type=${USE_VERSION}`\n    getUrlData(url).then(res => {\n      console.log(res)\n      resolve(res)\n    })\n  })\n}\n\n\ninterface RecordsTxnsProp {\n  hash: string\n  chainId:any\n  selectChain:any,\n  account: string | null | undefined,\n  value: string,\n  formatvalue: string,\n  to: string,\n  symbol: string | undefined,\n  version?: string | undefined,\n  pairid?: string | undefined,\n  routerToken?: string | undefined,\n}\nconst registerList:any = {}\n\n// console.log(window?.navigator)\n// console.log(window)\n// getUrlData('https://api.ipify.org/?format=json').then(res => console.log(res))\nexport function recordsTxns ({\n  hash,\n  chainId,\n  selectChain,\n  account,\n  value,\n  formatvalue,\n  to,\n  symbol,\n  version,\n  pairid,\n  routerToken\n}: RecordsTxnsProp) {\n  return new Promise(async(resolve) => {\n    // console.log(hash)\n    const url = `${config.bridgeApi}/v3/records`\n    const useVersion = version ? version : USE_VERSION\n    // console.log(version)\n    // console.log(USE_VERSION)\n    // const ip:any = await getUrlData('https://api.ipify.org/?format=json')\n    const data = {\n      hash: hash,\n      srcChainID: chainId,\n      destChainID: selectChain,\n      token: routerToken ? routerToken : '',\n      from: account,\n      version: useVersion,\n      value: value,\n      formatvalue: formatvalue,\n      to: to,\n      symbol: symbol,\n      pairid: pairid,\n      // userAgent: window?.navigator?.userAgent,\n      // userIP: window?.returnCitySN ? window?.returnCitySN : (ip?.data?.ip ? {cip: ip?.data?.ip} : '')\n    }\n    if (!registerList[hash]) {\n      registerList[hash] = {\n        hash,\n        chainId,\n        selectChain,\n        account,\n        value,\n        formatvalue,\n        to,\n        symbol,\n        version,\n        pairid,\n        routerToken,\n        isRegister: 0,\n        timestamp: Date.now()\n      }\n    }\n    postUrlData(url, data).then((res:any) => {\n      console.log(res)\n      if (res.msg === 'Success' || res.data === 'Error') {\n        registerList[hash].isRegister = 1\n      } else {\n        if ((Date.now() - registerList[hash].timestamp) <= 3000) {\n          setTimeout(() => {\n            recordsTxns(registerList[hash])\n          }, 1000)\n        }\n      }\n      resolve(res)\n    })\n  })\n}\n\nconst approveList:any = {}\nexport function recordsApprove ({\n  token,\n  spender,\n  account,\n  amount,\n  symbol,\n  decimals,\n  hash,\n  chainId,\n  type,\n}: {\n  token: any,\n  spender: any,\n  account: any,\n  amount: any,\n  symbol: any,\n  decimals: any,\n  hash: any,\n  chainId: any,\n  type: any,\n}) {\n  return new Promise(async(resolve) => {\n    // console.log(hash)\n    const url = `${config.bridgeApi}/v3/records/approved`\n    const data = {\n      token,\n      spender,\n      account,\n      amount,\n      symbol,\n      decimals,\n      hash,\n      chainId,\n      type,\n    }\n    if (!approveList[hash]) {\n      approveList[hash] = {\n        token,\n        spender,\n        account,\n        amount,\n        symbol,\n        decimals,\n        hash,\n        chainId,\n        type,\n        isRegister: 0,\n        timestamp: Date.now()\n      }\n    }\n    postUrlData(url, data).then((res:any) => {\n      console.log(res)\n      if (res.msg === 'Success' || res.data === 'Error') {\n        approveList[hash].isRegister = 1\n      } else {\n        if ((Date.now() - approveList[hash].timestamp) <= 3000) {\n          setTimeout(() => {\n            recordsApprove(approveList[hash])\n          }, 1000)\n        }\n      }\n      resolve(res)\n    })\n  })\n}\n// recordsApprove({\n//   token: '',\n//   spender: '0xb153fb3d196a8eb25522705560ac152eeec57901',\n//   account: '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249',\n//   amount: '0x0',\n//   symbol: 'WETH',\n//   decimals: '18',\n//   hash: '0xf31d62838189bae0a40c0420b2d6b79aa502d7850ee0f30abcd7aaa91fadaf3a',\n//   chainId: 1,\n//   type: 'Revoke'\n// })\nexport function getP2PInfo (account:any, chainId:any, symbol:string, token:any) {\n  return new Promise(resolve => {\n    // console.log(hash)\n    const lData = getLocalConfig(account, token, chainId, CROSSCHAINBRIDGE, timeout, undefined)\n    if (lData) {\n      // console.log(lData)\n      resolve({p2pAddress: lData.p2pAddress})\n    } else {\n      const url = `${config.bridgeApi}/v2/register/${account}/${chainId}/${symbol}`\n      getUrlData(url).then((res:any) => {\n        // console.log(res)\n        if (res.msg === 'Success') {\n          resolve({p2pAddress: res?.data?.P2shAddress ?? res?.data?.info?.P2shAddress})\n        } else {\n          resolve('')\n        }\n      })\n    }\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}