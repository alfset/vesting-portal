{"ast":null,"code":"import{useActiveWeb3React}from'./index';import{useConnectedWallet}from'@terra-money/wallet-provider';import{useUserSelectChainId}from'../state/user/hooks';import{useMemo}from'react';// import { useCurrentAddress } from '../nonevm/nas'\nimport{useNearAddress}from'../nonevm/near';import{connectXlmWallet}from'../nonevm/stellar';import{useTrxAddress}from'../nonevm/trx';import{useAdaAddress}from'../nonevm/cardano';import{useFlowAddress}from'../nonevm/flow';import{useSolAddress}from'../nonevm/solana';import{useNonevmAddress}from'../nonevm/hooks';import{ChainId}from'../config/chainConfig/chainId';// import config from '../config'\nexport function useActiveReact(){const{account,chainId}=useActiveWeb3React();const connectedWallet=useConnectedWallet();const{selectNetworkInfo}=useUserSelectChainId();// const nebAddress = useCurrentAddress()\nconst nearAddress=useNearAddress();const{trxAddress}=useTrxAddress();const{xlmAddress}=connectXlmWallet();const{adaAddress}=useAdaAddress();const{flowAddress}=useFlowAddress();const{solAddress}=useSolAddress();const{nonevmAccount}=useNonevmAddress((selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.chainId)&&(selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.label)?selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.chainId:chainId);// console.log(nonevmAccount)\n// const useChain = useMemo(() => {\n//   if (chainId) {\n//     return chainId\n//   } else if (config.getCurChainInfo(chainId).chainID) {\n//     return config.getCurChainInfo(chainId).chainID\n//   }\n//   return undefined\n// }, [chainId])\nreturn useMemo(()=>{let useAccount=account;// const useChainId:any = selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : (chainId ? chainId : config.getCurChainInfo(chainId).chainID)\nconst useChainId=(selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.chainId)&&(selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.label)?selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.chainId:chainId;// console.log(config)\n// console.log(useChainId)\nif((selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.label)===ChainId.TERRA){useAccount=connectedWallet===null||connectedWallet===void 0?void 0:connectedWallet.walletAddress;}else if((selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.label)===ChainId.BTC){useAccount='';}// else if (selectNetworkInfo?.label === ChainId.NAS) {\n//   useAccount = nebAddress\n// }\nelse if([ChainId.NEAR,ChainId.NEAR_TEST].includes(useChainId)){useAccount=nearAddress;}else if([ChainId.XLM,ChainId.XLM_TEST].includes(useChainId)){useAccount=xlmAddress;}else if([ChainId.TRX,ChainId.TRX_TEST].includes(useChainId)){useAccount=trxAddress;}else if([ChainId.ADA,ChainId.ADA_TEST].includes(useChainId)){// console.log(adaAddress)\nuseAccount=adaAddress;}else if([ChainId.FLOW,ChainId.FLOW_TEST].includes(useChainId)){// console.log(adaAddress)\nuseAccount=flowAddress;}else if([ChainId.SOL,ChainId.SOL_TEST].includes(useChainId)){// console.log(adaAddress)\nuseAccount=solAddress;}else if(!isNaN(useChainId)){useAccount=account;}else{useAccount=nonevmAccount;}return{account:useAccount,chainId:useChainId,evmAccount:account,evmChainId:useChainId===chainId?chainId:''};},[account,connectedWallet,selectNetworkInfo,chainId,nearAddress,xlmAddress,trxAddress,adaAddress,flowAddress,solAddress,nonevmAccount]);}","map":{"version":3,"names":["useActiveWeb3React","useConnectedWallet","useUserSelectChainId","useMemo","useNearAddress","connectXlmWallet","useTrxAddress","useAdaAddress","useFlowAddress","useSolAddress","useNonevmAddress","ChainId","useActiveReact","account","chainId","connectedWallet","selectNetworkInfo","nearAddress","trxAddress","xlmAddress","adaAddress","flowAddress","solAddress","nonevmAccount","label","useAccount","useChainId","TERRA","walletAddress","BTC","NEAR","NEAR_TEST","includes","XLM","XLM_TEST","TRX","TRX_TEST","ADA","ADA_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","isNaN","evmAccount","evmChainId"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useActiveReact.ts"],"sourcesContent":["import { useActiveWeb3React } from './index'\nimport { useConnectedWallet } from '@terra-money/wallet-provider'\nimport { useUserSelectChainId } from '../state/user/hooks'\nimport { useMemo } from 'react'\n\n// import { useCurrentAddress } from '../nonevm/nas'\nimport {useNearAddress} from '../nonevm/near'\nimport {connectXlmWallet} from '../nonevm/stellar'\nimport {useTrxAddress} from '../nonevm/trx'\nimport {useAdaAddress} from '../nonevm/cardano'\nimport {useFlowAddress} from '../nonevm/flow'\nimport {useSolAddress} from '../nonevm/solana'\nimport {useNonevmAddress} from '../nonevm/hooks'\n\n\nimport { ChainId } from '../config/chainConfig/chainId'\n// import config from '../config'\n\nexport function useActiveReact () {\n  const { account, chainId } = useActiveWeb3React()\n  const connectedWallet = useConnectedWallet()\n  const {selectNetworkInfo} = useUserSelectChainId()\n  // const nebAddress = useCurrentAddress()\n  const nearAddress = useNearAddress()\n  const {trxAddress} = useTrxAddress()\n  const {xlmAddress} = connectXlmWallet()\n  const {adaAddress} = useAdaAddress()\n  const {flowAddress} = useFlowAddress()\n  const {solAddress} = useSolAddress()\n  const {nonevmAccount} = useNonevmAddress(selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : chainId)\n  // console.log(nonevmAccount)\n  // const useChain = useMemo(() => {\n  //   if (chainId) {\n  //     return chainId\n  //   } else if (config.getCurChainInfo(chainId).chainID) {\n  //     return config.getCurChainInfo(chainId).chainID\n  //   }\n  //   return undefined\n  // }, [chainId])\n  return useMemo(() => {\n    let useAccount = account\n    // const useChainId:any = selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : (chainId ? chainId : config.getCurChainInfo(chainId).chainID)\n    const useChainId:any = selectNetworkInfo?.chainId && selectNetworkInfo?.label ? selectNetworkInfo?.chainId : chainId\n    // console.log(config)\n    // console.log(useChainId)\n    if (selectNetworkInfo?.label === ChainId.TERRA) {\n      useAccount = connectedWallet?.walletAddress\n    } else if (selectNetworkInfo?.label === ChainId.BTC) {\n      useAccount = ''\n    }\n    // else if (selectNetworkInfo?.label === ChainId.NAS) {\n    //   useAccount = nebAddress\n    // }\n    else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId)) {\n      useAccount = nearAddress\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(useChainId)) {\n      useAccount = xlmAddress\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(useChainId)) {\n      useAccount = trxAddress\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = adaAddress\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = flowAddress\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(useChainId)) {\n      // console.log(adaAddress)\n      useAccount = solAddress\n    } else if (!isNaN(useChainId)) {\n      useAccount = account\n    } else {\n      useAccount = nonevmAccount\n    }\n    return {\n      account: useAccount,\n      chainId: useChainId,\n      evmAccount: account,\n      evmChainId: useChainId === chainId ? chainId : '',\n    }\n  }, [account, connectedWallet, selectNetworkInfo, chainId, nearAddress, xlmAddress, trxAddress, adaAddress, flowAddress, solAddress, nonevmAccount])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}