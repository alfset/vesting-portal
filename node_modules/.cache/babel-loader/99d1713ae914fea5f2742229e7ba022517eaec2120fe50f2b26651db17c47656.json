{"ast":null,"code":"// import { useEffect, useMemo, useRef } from 'react'\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { formatUnits } from '@ethersproject/units';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport useInterval from '../../hooks/useInterval';\nimport { tokenBalanceList } from './actions';\n// import {useTokenBalances} from './hooks'\n\nimport { useAllMergeBridgeTokenList } from '../lists/hooks';\nimport { useAllTransactions, isTransactionRecent } from '../transactions/hooks';\nimport ERC20_INTERFACE from '../../constants/abis/erc20';\nimport { useRpcState } from '../rpc/hooks';\nimport { getWeb3 } from '../../utils/tools/multicall';\nimport { useBatchData } from '../../utils/tools/useBatchData';\nimport { isAddress } from '../../utils/isAddress/index';\nimport { ChainId } from '../../config/chainConfig/chainId';\n\n// import config from '../../config'\n// import { fromWei } from '../../utils/tools/tools'\n// const startTime = Date.now()\nconst limit = 80;\n// const limit = 3\n\n// function getAllBalance () {\n//   return new Promise(resolve => {\n\n//   })\n// }\n\nfunction newTransactionsFirst(a, b) {\n  return b.addedTime - a.addedTime;\n}\nconst NON_ERC20 = {\n  [ChainId.ETH]: ['0x5cbe98480a790554403694b98bff71a525907f5d', '0x80fd8e18cc59177b4dbd2fae9c0efb8bf87edc1f'],\n  [ChainId.OPTIMISM]: ['0xf5ed69abb9b31ec7bec5a089290724035e3edb2c'],\n  [ChainId.CELO]: ['0x5566b6e4962ba83e05a426ad89031ec18e9cadd3'],\n  [ChainId.BNB]: ['0x43ba383b9934d8d45ea6348d00dbc1bae97d6e74'],\n  [ChainId.TT]: ['0x332730a4f6e03d9c55829435f10360e13cfa41ff']\n};\nexport default function Updater() {\n  const {\n    chainId,\n    account\n  } = useActiveReact();\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  // const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n  const allTokens = useAllMergeBridgeTokenList('mergeTokenList', chainId);\n  const rpcItem = useRpcState();\n  const tokenListRef = useRef(0);\n  const allTransactions = useAllTransactions();\n  // console.log(library)\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions);\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\n  }, [allTransactions]);\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt).map(tx => tx.hash);\n  const pendingLength = pending.length;\n  const calls = useMemo(() => {\n    const arr = [];\n    const norepeat = [];\n    const list = allTokens ? Object.values(allTokens !== null && allTokens !== void 0 ? allTokens : {}) : [];\n    // console.log(list)\n    if (account && !isNaN(chainId)) {\n      // for (const obj of list) {\n      for (let i = 0, len = list.length; i < len; i++) {\n        const obj = list[i];\n        const token = obj.address;\n        if (isAddress(obj.address)) {\n          var _NON_ERC20$chainId;\n          if (norepeat.includes(token)) continue;\n          if (NON_ERC20 === null || NON_ERC20 === void 0 ? void 0 : (_NON_ERC20$chainId = NON_ERC20[chainId]) === null || _NON_ERC20$chainId === void 0 ? void 0 : _NON_ERC20$chainId.includes(token.toLowerCase())) continue;\n          const destList = obj.destChains;\n          for (const destChainid in destList) {\n            const destChainList = destList[destChainid];\n            for (const destTokenKey in destChainList) {\n              var _NON_ERC20$chainId2;\n              const destTokenItem = destChainList[destTokenKey];\n              if (NON_ERC20 === null || NON_ERC20 === void 0 ? void 0 : (_NON_ERC20$chainId2 = NON_ERC20[chainId]) === null || _NON_ERC20$chainId2 === void 0 ? void 0 : _NON_ERC20$chainId2.includes(destTokenItem.fromanytoken.address.toLowerCase())) continue;\n              if (!norepeat.includes(destTokenItem.fromanytoken.address) && isAddress(destTokenItem.fromanytoken.address) && destTokenItem.isFromLiquidity) {\n                arr.push({\n                  dec: destTokenItem.fromanytoken.decimals,\n                  target: destTokenItem.fromanytoken.address,\n                  callData: ERC20_INTERFACE.encodeFunctionData('balanceOf', [account])\n                });\n              }\n            }\n          }\n          arr.push({\n            dec: obj.decimals,\n            target: token,\n            callData: ERC20_INTERFACE.encodeFunctionData('balanceOf', [account])\n          });\n        }\n      }\n    }\n    // console.log(arr)\n    return arr;\n  }, [allTokens, account, chainId]);\n  const getBalance = useCallback(arr => {\n    return new Promise(resolve => {\n      if (!chainId || isNaN(chainId) || arr.length <= 0) {\n        resolve('');\n        return;\n      }\n      const provider = rpcItem && rpcItem.origin === 'wallet' && library ? library === null || library === void 0 ? void 0 : library.provider : '';\n      useBatchData({\n        chainId,\n        calls: arr.map(_ref => {\n          let {\n            callData,\n            target\n          } = _ref;\n          return {\n            type: 'TOKEN',\n            callData,\n            target\n          };\n        }),\n        provider\n      }).then(res => {\n        // console.log(res)\n        if (res) {\n          const blList = {};\n          for (let i = 0, len = arr.length; i < len; i++) {\n            const token = arr[i].target.toLowerCase();\n            const dec = arr[i].dec;\n            const results = res[i];\n            let bl = '';\n            try {\n              bl = results === '0x' ? '0' : ERC20_INTERFACE.decodeFunctionResult('balanceOf', results)[0].toString();\n            } catch (error) {\n              // console.error(error)\n            }\n            blList[token] = {\n              // balance: fromWei(results, dec),\n              balance: bl ? formatUnits(bl, dec) : '',\n              balancestr: bl,\n              dec: dec\n              // blocknumber: res.blockNumber\n            };\n          }\n\n          dispatch(tokenBalanceList({\n            chainId,\n            account,\n            tokenList: blList\n          }));\n        }\n        resolve(res);\n      });\n    });\n  }, [rpcItem, chainId]);\n  const getETHBalance = useCallback(() => {\n    return new Promise(resolve => {\n      if (account) {\n        if (!chainId || isNaN(chainId)\n        // || !config.getCurChainInfo(chainId)?.multicalToken\n        ) {\n          resolve('');\n          return;\n        }\n        const provider = library ? library === null || library === void 0 ? void 0 : library.provider : '';\n        const web3 = getWeb3('', provider);\n        web3.eth.getBalance(account).then(res => {\n          // console.log(res)\n          const blList = {};\n          const dec = 18;\n          blList['NATIVE'] = {\n            balance: formatUnits(res, dec),\n            balancestr: res,\n            dec: dec,\n            blocknumber: ''\n          };\n          dispatch(tokenBalanceList({\n            chainId,\n            account,\n            tokenList: blList\n          }));\n          resolve(res);\n        });\n      } else {\n        resolve('');\n      }\n    });\n  }, [rpcItem, chainId, account]);\n  const getAllBalance = useCallback(() => {\n    const results = [];\n    let useLimit = limit;\n    // console.log(chainId)\n    if ([ChainId.ARBITRUM].includes(chainId.toString())) {\n      // useLimit = 3\n      useLimit = limit;\n    }\n    if (calls.length > useLimit) {\n      for (let i = 0, len = calls.length; i < len; i += useLimit) {\n        results.push(calls.slice(i, i + useLimit));\n      }\n    } else {\n      results.push(calls);\n    }\n    // console.log(calls)\n    // console.log(results)\n    const arr = [getETHBalance()];\n    for (const item of results) {\n      arr.push(getBalance(item));\n    }\n    const st = Date.now();\n    Promise.all(arr).then(res => {\n      console.log(Date.now() - st);\n      console.log(res);\n    });\n  }, [calls, chainId]);\n  useEffect(() => {\n    if (library && chainId && !isNaN(chainId) && account && !tokenListRef.current) {\n      tokenListRef.current = 1;\n      console.log(chainId);\n      getAllBalance();\n    }\n  }, [library, calls, chainId, account, rpcItem, getAllBalance]);\n  useEffect(() => {\n    if (account) tokenListRef.current = 0;\n  }, [account]);\n\n  // console.log(pending)\n  // console.log(pendingLength)\n  useEffect(() => {\n    // console.log('pendingLength')\n    if (chainId && !isNaN(chainId) && account && calls.length > 0) {\n      getAllBalance();\n    }\n  }, [pendingLength, getAllBalance]);\n  useInterval(getAllBalance, 1000 * 60 * 10, false);\n  return null;\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useDispatch","formatUnits","useActiveWeb3React","useActiveReact","useInterval","tokenBalanceList","useAllMergeBridgeTokenList","useAllTransactions","isTransactionRecent","ERC20_INTERFACE","useRpcState","getWeb3","useBatchData","isAddress","ChainId","limit","newTransactionsFirst","a","b","addedTime","NON_ERC20","ETH","OPTIMISM","CELO","BNB","TT","Updater","chainId","account","library","dispatch","allTokens","rpcItem","tokenListRef","allTransactions","sortedRecentTransactions","txs","Object","values","filter","sort","pending","tx","receipt","map","hash","pendingLength","length","calls","arr","norepeat","list","isNaN","i","len","obj","token","address","_NON_ERC20$chainId","includes","toLowerCase","destList","destChains","destChainid","destChainList","destTokenKey","_NON_ERC20$chainId2","destTokenItem","fromanytoken","isFromLiquidity","push","dec","decimals","target","callData","encodeFunctionData","getBalance","Promise","resolve","provider","origin","_ref","type","then","res","blList","results","bl","decodeFunctionResult","toString","error","balance","balancestr","tokenList","getETHBalance","web3","eth","blocknumber","getAllBalance","useLimit","ARBITRUM","slice","item","st","Date","now","all","console","log","current"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/wallet/updater.ts"],"sourcesContent":["// import { useEffect, useMemo, useRef } from 'react'\nimport { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { formatUnits } from '@ethersproject/units'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport useInterval from '../../hooks/useInterval'\nimport { AppDispatch } from '../index'\nimport { tokenBalanceList } from './actions'\n// import {useTokenBalances} from './hooks'\n\nimport { useAllMergeBridgeTokenList } from '../lists/hooks'\nimport {useAllTransactions, isTransactionRecent} from '../transactions/hooks'\nimport { TransactionDetails } from '../transactions/reducer'\n\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\n\nimport {useRpcState} from '../rpc/hooks'\n\nimport {getWeb3} from '../../utils/tools/multicall'\nimport {useBatchData} from '../../utils/tools/useBatchData'\nimport { isAddress } from '../../utils/isAddress/index'\nimport { ChainId } from '../../config/chainConfig/chainId'\n\n// import config from '../../config'\n// import { fromWei } from '../../utils/tools/tools'\n// const startTime = Date.now()\nconst limit = 80\n// const limit = 3\n\n// function getAllBalance () {\n//   return new Promise(resolve => {\n\n//   })\n// }\n\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nconst NON_ERC20:any = {\n  [ChainId.ETH]: [\n    '0x5cbe98480a790554403694b98bff71a525907f5d',\n    '0x80fd8e18cc59177b4dbd2fae9c0efb8bf87edc1f'\n  ],\n  [ChainId.OPTIMISM]: [\n    '0xf5ed69abb9b31ec7bec5a089290724035e3edb2c'\n  ],\n  [ChainId.CELO]: [\n    '0x5566b6e4962ba83e05a426ad89031ec18e9cadd3'\n  ],\n  [ChainId.BNB]: [\n    '0x43ba383b9934d8d45ea6348d00dbc1bae97d6e74'\n  ],\n  [ChainId.TT]: [\n    '0x332730a4f6e03d9c55829435f10360e13cfa41ff'\n  ],\n}\n\nexport default function Updater(): null {\n  const { chainId, account } = useActiveReact()\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  // const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n  const allTokens = useAllMergeBridgeTokenList('mergeTokenList', chainId)\n  const rpcItem = useRpcState()\n  const tokenListRef = useRef<any>(0)\n\n  const allTransactions = useAllTransactions()\n  // console.log(library)\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt).map(tx => tx.hash)\n  const pendingLength = pending.length\n  \n  const calls = useMemo(() => {\n    const arr = []\n    const norepeat:any = []\n    const list = allTokens ? Object.values(allTokens ?? {}) : []\n    // console.log(list)\n    if (account && !isNaN(chainId)) {\n      // for (const obj of list) {\n      for (let i = 0, len = list.length; i < len; i++) {\n        const obj:any = list[i]\n        const token:any = obj.address\n        if (isAddress(obj.address)) {\n          if (norepeat.includes(token)) continue\n          if (\n            NON_ERC20?.[chainId]?.includes(token.toLowerCase())\n          ) continue\n          const destList = obj.destChains\n          for (const destChainid in destList) {\n            const destChainList = destList[destChainid]\n            for (const destTokenKey in destChainList) {\n              const destTokenItem = destChainList[destTokenKey]\n              if (\n                NON_ERC20?.[chainId]?.includes(destTokenItem.fromanytoken.address.toLowerCase())\n              ) continue\n              if (!norepeat.includes(destTokenItem.fromanytoken.address) && isAddress(destTokenItem.fromanytoken.address) && destTokenItem.isFromLiquidity) {\n                arr.push({\n                  dec: destTokenItem.fromanytoken.decimals,\n                  target: destTokenItem.fromanytoken.address,\n                  callData: ERC20_INTERFACE.encodeFunctionData('balanceOf', [account]),\n                })\n              }\n            }\n          }\n          arr.push({\n            dec: obj.decimals,\n            target: token,\n            callData: ERC20_INTERFACE.encodeFunctionData('balanceOf', [account]),\n          })\n        }\n      }\n    }\n    // console.log(arr)\n    return arr\n  }, [allTokens, account, chainId])\n  const getBalance = useCallback((arr) => {\n    return new Promise(resolve => {\n      if (\n        !chainId\n        || isNaN(chainId)\n        || arr.length <= 0\n      ) {\n        resolve('')\n        return\n      }\n      const provider = rpcItem && rpcItem.origin === 'wallet' && library ? library?.provider : ''\n      useBatchData({\n        chainId, \n        calls: arr.map(({callData, target}: {callData:string, target:string}) => ({type: 'TOKEN', callData, target})), \n        provider\n      }).then((res) => {\n        // console.log(res)\n        if (res) {\n          const blList:any = {}\n          for (let i = 0, len = arr.length; i < len; i++) {\n            const token = arr[i].target.toLowerCase()\n            const dec = arr[i].dec\n            const results = res[i]\n            let bl = ''\n            try {\n              bl = results === '0x' ? '0' : ERC20_INTERFACE.decodeFunctionResult('balanceOf', results)[0].toString()\n            } catch (error) {\n              // console.error(error)\n            }\n            blList[token] = {\n              // balance: fromWei(results, dec),\n              balance: bl ? formatUnits(bl, dec) : '',\n              balancestr: bl,\n              dec: dec,\n              // blocknumber: res.blockNumber\n            }\n          }\n          dispatch(tokenBalanceList({\n            chainId,\n            account,\n            tokenList: blList\n          }))\n        }\n        resolve(res)\n      })\n    })\n  }, [rpcItem, chainId])\n\n  const getETHBalance = useCallback(() => {\n    return new Promise(resolve => {\n      if (account) {\n        if (\n          !chainId\n          || isNaN(chainId)\n          // || !config.getCurChainInfo(chainId)?.multicalToken\n        ) {\n          resolve('')\n          return\n        }\n        const provider = library ? library?.provider : ''\n        const web3 = getWeb3('', provider)\n        web3.eth.getBalance(account).then((res:any) => {\n          // console.log(res)\n          const blList:any = {}\n          const dec = 18\n          blList['NATIVE'] = {\n            balance: formatUnits(res, dec),\n            balancestr: res,\n            dec: dec,\n            blocknumber: ''\n          }\n          dispatch(tokenBalanceList({\n            chainId,\n            account,\n            tokenList: blList\n          }))\n          resolve(res)\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [rpcItem, chainId, account])\n\n  const getAllBalance = useCallback(() => {\n    const results = []\n    let useLimit = limit\n    // console.log(chainId)\n    if ([ChainId.ARBITRUM].includes(chainId.toString())) {\n      // useLimit = 3\n      useLimit = limit\n    }\n    if (calls.length > useLimit) {\n      for (let i = 0, len = calls.length; i < len; i += useLimit) {\n        results.push(calls.slice(i, i + useLimit))\n      }\n    } else {\n      results.push(calls)\n    }\n    // console.log(calls)\n    // console.log(results)\n    const arr = [getETHBalance()]\n    for (const item of results) {\n      arr.push(getBalance(item))\n    }\n    const st = Date.now()\n    Promise.all(arr).then(res => {\n      console.log(Date.now() - st)\n      console.log(res)\n    })\n  }, [calls, chainId])\n\n  useEffect(() => {\n    if (\n      library\n      && chainId\n      && !isNaN(chainId)\n      && account\n      && !tokenListRef.current\n    ) {\n      tokenListRef.current = 1\n      console.log(chainId)\n      getAllBalance()\n    }\n  }, [library, calls, chainId, account, rpcItem, getAllBalance])\n\n  useEffect(() => {\n    if (account) tokenListRef.current = 0\n  }, [account])\n\n  // console.log(pending)\n  // console.log(pendingLength)\n  useEffect(() => {\n    // console.log('pendingLength')\n    if (\n      chainId\n      && !isNaN(chainId)\n      && account\n      && calls.length > 0\n    ) {\n      getAllBalance()\n    }\n  }, [pendingLength, getAllBalance])\n\n  useInterval(getAllBalance, 1000 * 60 * 10, false)\n\n  return null\n}\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAC/D,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,SAASC,gBAAgB,QAAQ,WAAW;AAC5C;;AAEA,SAASC,0BAA0B,QAAQ,gBAAgB;AAC3D,SAAQC,kBAAkB,EAAEC,mBAAmB,QAAO,uBAAuB;AAG7E,OAAOC,eAAe,MAAM,4BAA4B;AAExD,SAAQC,WAAW,QAAO,cAAc;AAExC,SAAQC,OAAO,QAAO,6BAA6B;AACnD,SAAQC,YAAY,QAAO,gCAAgC;AAC3D,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,OAAO,QAAQ,kCAAkC;;AAE1D;AACA;AACA;AACA,MAAMC,KAAK,GAAG,EAAE;AAChB;;AAEA;AACA;;AAEA;AACA;;AAEA,SAASC,oBAAoBA,CAACC,CAAqB,EAAEC,CAAqB,EAAE;EAC1E,OAAOA,CAAC,CAACC,SAAS,GAAGF,CAAC,CAACE,SAAS;AAClC;AAEA,MAAMC,SAAa,GAAG;EACpB,CAACN,OAAO,CAACO,GAAG,GAAG,CACb,4CAA4C,EAC5C,4CAA4C,CAC7C;EACD,CAACP,OAAO,CAACQ,QAAQ,GAAG,CAClB,4CAA4C,CAC7C;EACD,CAACR,OAAO,CAACS,IAAI,GAAG,CACd,4CAA4C,CAC7C;EACD,CAACT,OAAO,CAACU,GAAG,GAAG,CACb,4CAA4C,CAC7C;EACD,CAACV,OAAO,CAACW,EAAE,GAAG,CACZ,4CAA4C;AAEhD,CAAC;AAED,eAAe,SAASC,OAAOA,CAAA,EAAS;EACtC,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGzB,cAAc,CAAC,CAAC;EAC7C,MAAM;IAAE0B;EAAQ,CAAC,GAAG3B,kBAAkB,CAAC,CAAC;EACxC,MAAM4B,QAAQ,GAAG9B,WAAW,CAAc,CAAC;EAC3C;EACA,MAAM+B,SAAS,GAAGzB,0BAA0B,CAAC,gBAAgB,EAAEqB,OAAO,CAAC;EACvE,MAAMK,OAAO,GAAGtB,WAAW,CAAC,CAAC;EAC7B,MAAMuB,YAAY,GAAGlC,MAAM,CAAM,CAAC,CAAC;EAEnC,MAAMmC,eAAe,GAAG3B,kBAAkB,CAAC,CAAC;EAC5C;EACA,MAAM4B,wBAAwB,GAAGrC,OAAO,CAAC,MAAM;IAC7C,MAAMsC,GAAG,GAAGC,MAAM,CAACC,MAAM,CAACJ,eAAe,CAAC;IAC1C,OAAOE,GAAG,CAACG,MAAM,CAAC/B,mBAAmB,CAAC,CAACgC,IAAI,CAACxB,oBAAoB,CAAC;EACnE,CAAC,EAAE,CAACkB,eAAe,CAAC,CAAC;EAErB,MAAMO,OAAO,GAAGN,wBAAwB,CAACI,MAAM,CAACG,EAAE,IAAI,CAACA,EAAE,CAACC,OAAO,CAAC,CAACC,GAAG,CAACF,EAAE,IAAIA,EAAE,CAACG,IAAI,CAAC;EACrF,MAAMC,aAAa,GAAGL,OAAO,CAACM,MAAM;EAEpC,MAAMC,KAAK,GAAGlD,OAAO,CAAC,MAAM;IAC1B,MAAMmD,GAAG,GAAG,EAAE;IACd,MAAMC,QAAY,GAAG,EAAE;IACvB,MAAMC,IAAI,GAAGpB,SAAS,GAAGM,MAAM,CAACC,MAAM,CAACP,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,CAAC,CAAC,CAAC,GAAG,EAAE;IAC5D;IACA,IAAIH,OAAO,IAAI,CAACwB,KAAK,CAACzB,OAAO,CAAC,EAAE;MAC9B;MACA,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,IAAI,CAACJ,MAAM,EAAEM,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC/C,MAAME,GAAO,GAAGJ,IAAI,CAACE,CAAC,CAAC;QACvB,MAAMG,KAAS,GAAGD,GAAG,CAACE,OAAO;QAC7B,IAAI5C,SAAS,CAAC0C,GAAG,CAACE,OAAO,CAAC,EAAE;UAAA,IAAAC,kBAAA;UAC1B,IAAIR,QAAQ,CAACS,QAAQ,CAACH,KAAK,CAAC,EAAE;UAC9B,IACEpC,SAAS,aAATA,SAAS,wBAAAsC,kBAAA,GAATtC,SAAS,CAAGO,OAAO,CAAC,cAAA+B,kBAAA,uBAApBA,kBAAA,CAAsBC,QAAQ,CAACH,KAAK,CAACI,WAAW,CAAC,CAAC,CAAC,EACnD;UACF,MAAMC,QAAQ,GAAGN,GAAG,CAACO,UAAU;UAC/B,KAAK,MAAMC,WAAW,IAAIF,QAAQ,EAAE;YAClC,MAAMG,aAAa,GAAGH,QAAQ,CAACE,WAAW,CAAC;YAC3C,KAAK,MAAME,YAAY,IAAID,aAAa,EAAE;cAAA,IAAAE,mBAAA;cACxC,MAAMC,aAAa,GAAGH,aAAa,CAACC,YAAY,CAAC;cACjD,IACE7C,SAAS,aAATA,SAAS,wBAAA8C,mBAAA,GAAT9C,SAAS,CAAGO,OAAO,CAAC,cAAAuC,mBAAA,uBAApBA,mBAAA,CAAsBP,QAAQ,CAACQ,aAAa,CAACC,YAAY,CAACX,OAAO,CAACG,WAAW,CAAC,CAAC,CAAC,EAChF;cACF,IAAI,CAACV,QAAQ,CAACS,QAAQ,CAACQ,aAAa,CAACC,YAAY,CAACX,OAAO,CAAC,IAAI5C,SAAS,CAACsD,aAAa,CAACC,YAAY,CAACX,OAAO,CAAC,IAAIU,aAAa,CAACE,eAAe,EAAE;gBAC5IpB,GAAG,CAACqB,IAAI,CAAC;kBACPC,GAAG,EAAEJ,aAAa,CAACC,YAAY,CAACI,QAAQ;kBACxCC,MAAM,EAAEN,aAAa,CAACC,YAAY,CAACX,OAAO;kBAC1CiB,QAAQ,EAAEjE,eAAe,CAACkE,kBAAkB,CAAC,WAAW,EAAE,CAAC/C,OAAO,CAAC;gBACrE,CAAC,CAAC;cACJ;YACF;UACF;UACAqB,GAAG,CAACqB,IAAI,CAAC;YACPC,GAAG,EAAEhB,GAAG,CAACiB,QAAQ;YACjBC,MAAM,EAAEjB,KAAK;YACbkB,QAAQ,EAAEjE,eAAe,CAACkE,kBAAkB,CAAC,WAAW,EAAE,CAAC/C,OAAO,CAAC;UACrE,CAAC,CAAC;QACJ;MACF;IACF;IACA;IACA,OAAOqB,GAAG;EACZ,CAAC,EAAE,CAAClB,SAAS,EAAEH,OAAO,EAAED,OAAO,CAAC,CAAC;EACjC,MAAMiD,UAAU,GAAGhF,WAAW,CAAEqD,GAAG,IAAK;IACtC,OAAO,IAAI4B,OAAO,CAACC,OAAO,IAAI;MAC5B,IACE,CAACnD,OAAO,IACLyB,KAAK,CAACzB,OAAO,CAAC,IACdsB,GAAG,CAACF,MAAM,IAAI,CAAC,EAClB;QACA+B,OAAO,CAAC,EAAE,CAAC;QACX;MACF;MACA,MAAMC,QAAQ,GAAG/C,OAAO,IAAIA,OAAO,CAACgD,MAAM,KAAK,QAAQ,IAAInD,OAAO,GAAGA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkD,QAAQ,GAAG,EAAE;MAC3FnE,YAAY,CAAC;QACXe,OAAO;QACPqB,KAAK,EAAEC,GAAG,CAACL,GAAG,CAACqC,IAAA;UAAA,IAAC;YAACP,QAAQ;YAAED;UAAwC,CAAC,GAAAQ,IAAA;UAAA,OAAM;YAACC,IAAI,EAAE,OAAO;YAAER,QAAQ;YAAED;UAAM,CAAC;QAAA,CAAC,CAAC;QAC7GM;MACF,CAAC,CAAC,CAACI,IAAI,CAAEC,GAAG,IAAK;QACf;QACA,IAAIA,GAAG,EAAE;UACP,MAAMC,MAAU,GAAG,CAAC,CAAC;UACrB,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGL,GAAG,CAACF,MAAM,EAAEM,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;YAC9C,MAAMG,KAAK,GAAGP,GAAG,CAACI,CAAC,CAAC,CAACoB,MAAM,CAACb,WAAW,CAAC,CAAC;YACzC,MAAMW,GAAG,GAAGtB,GAAG,CAACI,CAAC,CAAC,CAACkB,GAAG;YACtB,MAAMe,OAAO,GAAGF,GAAG,CAAC/B,CAAC,CAAC;YACtB,IAAIkC,EAAE,GAAG,EAAE;YACX,IAAI;cACFA,EAAE,GAAGD,OAAO,KAAK,IAAI,GAAG,GAAG,GAAG7E,eAAe,CAAC+E,oBAAoB,CAAC,WAAW,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC;YACxG,CAAC,CAAC,OAAOC,KAAK,EAAE;cACd;YAAA;YAEFL,MAAM,CAAC7B,KAAK,CAAC,GAAG;cACd;cACAmC,OAAO,EAAEJ,EAAE,GAAGtF,WAAW,CAACsF,EAAE,EAAEhB,GAAG,CAAC,GAAG,EAAE;cACvCqB,UAAU,EAAEL,EAAE;cACdhB,GAAG,EAAEA;cACL;YACF,CAAC;UACH;;UACAzC,QAAQ,CAACzB,gBAAgB,CAAC;YACxBsB,OAAO;YACPC,OAAO;YACPiE,SAAS,EAAER;UACb,CAAC,CAAC,CAAC;QACL;QACAP,OAAO,CAACM,GAAG,CAAC;MACd,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAACpD,OAAO,EAAEL,OAAO,CAAC,CAAC;EAEtB,MAAMmE,aAAa,GAAGlG,WAAW,CAAC,MAAM;IACtC,OAAO,IAAIiF,OAAO,CAACC,OAAO,IAAI;MAC5B,IAAIlD,OAAO,EAAE;QACX,IACE,CAACD,OAAO,IACLyB,KAAK,CAACzB,OAAO;QAChB;QAAA,EACA;UACAmD,OAAO,CAAC,EAAE,CAAC;UACX;QACF;QACA,MAAMC,QAAQ,GAAGlD,OAAO,GAAGA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkD,QAAQ,GAAG,EAAE;QACjD,MAAMgB,IAAI,GAAGpF,OAAO,CAAC,EAAE,EAAEoE,QAAQ,CAAC;QAClCgB,IAAI,CAACC,GAAG,CAACpB,UAAU,CAAChD,OAAO,CAAC,CAACuD,IAAI,CAAEC,GAAO,IAAK;UAC7C;UACA,MAAMC,MAAU,GAAG,CAAC,CAAC;UACrB,MAAMd,GAAG,GAAG,EAAE;UACdc,MAAM,CAAC,QAAQ,CAAC,GAAG;YACjBM,OAAO,EAAE1F,WAAW,CAACmF,GAAG,EAAEb,GAAG,CAAC;YAC9BqB,UAAU,EAAER,GAAG;YACfb,GAAG,EAAEA,GAAG;YACR0B,WAAW,EAAE;UACf,CAAC;UACDnE,QAAQ,CAACzB,gBAAgB,CAAC;YACxBsB,OAAO;YACPC,OAAO;YACPiE,SAAS,EAAER;UACb,CAAC,CAAC,CAAC;UACHP,OAAO,CAACM,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,MAAM;QACLN,OAAO,CAAC,EAAE,CAAC;MACb;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC9C,OAAO,EAAEL,OAAO,EAAEC,OAAO,CAAC,CAAC;EAE/B,MAAMsE,aAAa,GAAGtG,WAAW,CAAC,MAAM;IACtC,MAAM0F,OAAO,GAAG,EAAE;IAClB,IAAIa,QAAQ,GAAGpF,KAAK;IACpB;IACA,IAAI,CAACD,OAAO,CAACsF,QAAQ,CAAC,CAACzC,QAAQ,CAAChC,OAAO,CAAC8D,QAAQ,CAAC,CAAC,CAAC,EAAE;MACnD;MACAU,QAAQ,GAAGpF,KAAK;IAClB;IACA,IAAIiC,KAAK,CAACD,MAAM,GAAGoD,QAAQ,EAAE;MAC3B,KAAK,IAAI9C,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGN,KAAK,CAACD,MAAM,EAAEM,CAAC,GAAGC,GAAG,EAAED,CAAC,IAAI8C,QAAQ,EAAE;QAC1Db,OAAO,CAAChB,IAAI,CAACtB,KAAK,CAACqD,KAAK,CAAChD,CAAC,EAAEA,CAAC,GAAG8C,QAAQ,CAAC,CAAC;MAC5C;IACF,CAAC,MAAM;MACLb,OAAO,CAAChB,IAAI,CAACtB,KAAK,CAAC;IACrB;IACA;IACA;IACA,MAAMC,GAAG,GAAG,CAAC6C,aAAa,CAAC,CAAC,CAAC;IAC7B,KAAK,MAAMQ,IAAI,IAAIhB,OAAO,EAAE;MAC1BrC,GAAG,CAACqB,IAAI,CAACM,UAAU,CAAC0B,IAAI,CAAC,CAAC;IAC5B;IACA,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACrB5B,OAAO,CAAC6B,GAAG,CAACzD,GAAG,CAAC,CAACkC,IAAI,CAACC,GAAG,IAAI;MAC3BuB,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,EAAE,CAAC;MAC5BI,OAAO,CAACC,GAAG,CAACxB,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACpC,KAAK,EAAErB,OAAO,CAAC,CAAC;EAEpB9B,SAAS,CAAC,MAAM;IACd,IACEgC,OAAO,IACJF,OAAO,IACP,CAACyB,KAAK,CAACzB,OAAO,CAAC,IACfC,OAAO,IACP,CAACK,YAAY,CAAC4E,OAAO,EACxB;MACA5E,YAAY,CAAC4E,OAAO,GAAG,CAAC;MACxBF,OAAO,CAACC,GAAG,CAACjF,OAAO,CAAC;MACpBuE,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACrE,OAAO,EAAEmB,KAAK,EAAErB,OAAO,EAAEC,OAAO,EAAEI,OAAO,EAAEkE,aAAa,CAAC,CAAC;EAE9DrG,SAAS,CAAC,MAAM;IACd,IAAI+B,OAAO,EAAEK,YAAY,CAAC4E,OAAO,GAAG,CAAC;EACvC,CAAC,EAAE,CAACjF,OAAO,CAAC,CAAC;;EAEb;EACA;EACA/B,SAAS,CAAC,MAAM;IACd;IACA,IACE8B,OAAO,IACJ,CAACyB,KAAK,CAACzB,OAAO,CAAC,IACfC,OAAO,IACPoB,KAAK,CAACD,MAAM,GAAG,CAAC,EACnB;MACAmD,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACpD,aAAa,EAAEoD,aAAa,CAAC,CAAC;EAElC9F,WAAW,CAAC8F,aAAa,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC;EAEjD,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}