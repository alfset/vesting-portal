{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringUtils = exports.stringToConstantStyledString = exports.convertToSlug = exports.pad = exports.createPadder = exports.BetterStringArray = exports.safeAppend = exports.firstNotNullEmpty = exports.nullEmpty = exports.notNullEmpty = exports.StringRegex = void 0;\nexports.StringRegex = {\n  digitsRegex: /\\b\\d+\\b/gi\n};\nconst notNullEmpty = str => {\n  return str != null && str.length > 0;\n};\nexports.notNullEmpty = notNullEmpty;\nconst nullEmpty = str => {\n  return !(0, exports.notNullEmpty)(str);\n};\nexports.nullEmpty = nullEmpty;\nconst firstNotNullEmpty = function () {\n  for (var _len = arguments.length, strItems = new Array(_len), _key = 0; _key < _len; _key++) {\n    strItems[_key] = arguments[_key];\n  }\n  for (const item of strItems) {\n    if ((0, exports.notNullEmpty)(item)) {\n      return item;\n    }\n  }\n  return undefined;\n};\nexports.firstNotNullEmpty = firstNotNullEmpty;\nconst anyNullEmpty = strs => {\n  for (const str of strs) {\n    if ((0, exports.nullEmpty)(str)) {\n      return true;\n    }\n  }\n  return false;\n};\nconst safeAppend = function (str, value) {\n  let ifEmptyValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, exports.notNullEmpty)(str) ? str + value : ifEmptyValue != null ? ifEmptyValue : value;\n};\nexports.safeAppend = safeAppend;\nclass BetterStringArray extends Array {\n  pushIfNotNullEmpty(str) {\n    if ((0, exports.notNullEmpty)(str)) {\n      this.push(str);\n    }\n  }\n}\nexports.BetterStringArray = BetterStringArray;\nfunction createPadder(padCharacter, desiredTotalLength) {\n  let padFromRight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return input => {\n    return pad(input, padCharacter, desiredTotalLength, padFromRight);\n  };\n}\nexports.createPadder = createPadder;\nfunction pad(input, padCharacter, desiredTotalLength) {\n  let padFromRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const difference = desiredTotalLength - \"\".concat(input).length;\n  if (difference > 0) {\n    const padding = new Array(difference).fill(padCharacter);\n    if (padFromRight) {\n      return \"\".concat(input).concat(padding.join(\"\"));\n    }\n    return \"\".concat(padding.join(\"\")).concat(input);\n  }\n  return \"\".concat(input);\n}\nexports.pad = pad;\nconst regexAllSpaces = new RegExp(\"\\\\s+\", \"g\");\nconst regexDoubleDashes = new RegExp(\"--+\", \"g\");\nconst regexFirstDash = new RegExp(\"^-+\", \"g\");\nconst regexLastDash = new RegExp(\"-+$\", \"g\");\nconst regexSingleDash = new RegExp(\"-\", \"g\");\nconst regexRemoveNonWord = new RegExp(\"[^\\\\w\\\\-]+\", \"g\");\nconst regexAllUnderscores = new RegExp(\"_\", \"g\");\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nconst convertToSlug = function (text) {\n  let {\n    slugDivider = \"-\",\n    letterCase = \"LOWER\",\n    normalize = true,\n    excludeCharacters = []\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!text || text.length === 0) {\n    return \"\";\n  }\n  let resp = text.toString();\n  if (normalize) {\n    resp = resp.normalize(\"NFD\");\n  }\n  if (letterCase === \"LOWER\") {\n    resp = resp.toLowerCase();\n  } else if (letterCase === \"UPPER\") {\n    resp = resp.toUpperCase();\n  }\n  return resp.replace(regexAllSpaces, \"-\") // Replace spaces with -\n  .replace(excludeCharacters.length > 0 ? new RegExp(\"[^\\\\w\\\\-\".concat(excludeCharacters.map(c => escapeRegExp(c)).join(\"\"), \"]+\"), \"g\") : regexRemoveNonWord, \"\") // Remove all non-word chars\n  .replace(excludeCharacters.includes(\"_\") ? regexAllSpaces : regexAllUnderscores, \"-\") // replace underscores with dashes\n  .replace(regexDoubleDashes, \"-\") // Replace multiple - with single -\n  .replace(regexFirstDash, \"\") // Trim - from start of text\n  .replace(regexLastDash, \"\") // Trim - from end of text\n  .replace(regexSingleDash, slugDivider); // Replace all - with whatever the slug divider is\n  /*return resp\r\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n    // .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/_/g, \"-\") // replace underscores with dashes\r\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n    .replace(/^-+/, \"\") // Trim - from start of text\r\n    .replace(/-+$/, \"\") // Trim - from end of text\r\n    .replace(/-/g, slugDivider); // Replace all - with whatever the slug divider is*/\n};\n\nexports.convertToSlug = convertToSlug;\n// Replace spaces with underscores and make letters UPPERCASE:\n// eg. \"Some thing's\" -> \"SOME_THINGS\"\nconst stringToConstantStyledString = input => {\n  return (0, exports.convertToSlug)(input, {\n    normalize: true,\n    slugDivider: \"_\",\n    letterCase: \"UPPER\"\n  });\n  // return input.replace(/[^\\w\\s]/g, \"\").replace(\"/\\s+/g\", \"_\").toUpperCase();\n};\n\nexports.stringToConstantStyledString = stringToConstantStyledString;\nconst reverse = input => {\n  let r = \"\";\n  for (const char of input) {\n    r = \"\".concat(char).concat(r);\n  }\n  return r;\n};\nfunction isUriEncoded(uri) {\n  uri = uri || \"\";\n  return uri !== decodeURIComponent(uri);\n}\nconst decodeUriFully = uri => {\n  let failSafe = 0;\n  while (isUriEncoded(uri)) {\n    failSafe += 1;\n    uri = decodeURIComponent(uri);\n    if (failSafe > 20) {\n      throw new Error(\"String Utils: Decode URI Fully: Enacted while loop too many times with attempt to decode fully.\");\n    }\n  }\n  return uri;\n};\nconst removeAndTrim = function (input, removeText) {\n  let {\n    spaceAware = true,\n    insideWords = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let text = \"\".concat(input);\n  for (const rem of removeText) {\n    if (spaceAware) {\n      if (!insideWords) {\n        if (text.indexOf(\" \".concat(rem, \" \")) >= 0) {\n          text = text.replace(\" \".concat(rem, \" \"), \" \");\n        } else {\n          if (text.startsWith(\"\".concat(rem, \" \"))) {\n            text = text.substring(rem.length + 1);\n          }\n          if (text.endsWith(\" \".concat(rem))) {\n            text = text.substring(0, text.length - (rem.length + 1));\n          }\n        }\n      } else {\n        const checkNew = [new RegExp(\"\\\\s\".concat(rem, \"\\\\s\"), \"g\"), new RegExp(\"\\\\s\".concat(rem), \"g\"), new RegExp(\"\".concat(rem, \"\\\\s\"), \"g\")];\n        for (const remNew of checkNew) {\n          if (remNew.test(text)) {\n            console.log(\"Replacing \\\"\".concat(remNew, \"\\\" in \\\"\").concat(text, \"\\\"\"));\n            text = text.replace(remNew, \" \");\n            console.log(\"Text after: \\\"\".concat(text, \"\\\"\"));\n          }\n        }\n      }\n    } else {\n      if (text.indexOf(rem) >= 0) {\n        text = text.replace(rem, \"\");\n      }\n    }\n  }\n  return text.trim();\n};\nfunction sortCompareStrings(a, b) {\n  const aa = a.toLowerCase();\n  const bb = b.toLowerCase();\n  if (aa < bb)\n    //sort string ascending\n    return -1;\n  if (aa > bb) return 1;\n  return 0; //default return value (no sorting)\n}\n\nfunction comparePure(a, b) {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  return 0;\n}\nfunction onlyNotNullEmpty(strArray) {\n  let notNullEmptyArray = [];\n  for (const str of strArray) {\n    if ((0, exports.notNullEmpty)(str)) {\n      notNullEmptyArray.push(str);\n    }\n  }\n  return notNullEmptyArray;\n}\nconst joinIntoUrl = function () {\n  for (var _len2 = arguments.length, routes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    routes[_key2] = arguments[_key2];\n  }\n  return routes.filter(v => v).map((v, i, arr) => {\n    const isNotFirst = i !== 0;\n    const isNotLast = i !== arr.length - 1;\n    if (isNotFirst) {\n      v = v.startsWith(\"/\") ? v.slice(1) : v;\n    }\n    if (isNotLast) {\n      v = v.endsWith(\"/\") ? v.slice(0, -1) : v;\n    }\n    return v;\n  }).join(\"/\");\n};\nconst getUrlWithBaseUrl = (baseUrl, route) => {\n  const isRouteCompleted = route.startsWith(\"http://\") || route.startsWith(\"https://\");\n  if (isRouteCompleted) {\n    return route;\n  }\n  return joinIntoUrl(baseUrl, route);\n};\nconst isHashId = accountId => {\n  const hash = accountId.match(/^[a-zA-Z0-9]+$/);\n  return Boolean(hash);\n  // accountId.match(/^[a-zA-Z0-9]{64}$/)\n};\n\nexports.StringUtils = {\n  isUriEncoded,\n  decodeUriFully,\n  StringRegex: exports.StringRegex,\n  reverse,\n  notNullEmpty: exports.notNullEmpty,\n  nullEmpty: exports.nullEmpty,\n  anyNullEmpty,\n  safeAppend: exports.safeAppend,\n  createPadder,\n  pad,\n  convertToSlug: exports.convertToSlug,\n  stringToConstantStyledString: exports.stringToConstantStyledString,\n  removeAndTrim,\n  sortCompareStrings,\n  comparePure,\n  onlyNotNullEmpty,\n  firstNotNullEmpty: exports.firstNotNullEmpty,\n  joinIntoUrl,\n  getUrlWithBaseUrl,\n  isHashId\n};","map":{"version":3,"names":["exports","StringRegex","digitsRegex","notNullEmpty","str","length","nullEmpty","firstNotNullEmpty","_len","arguments","strItems","Array","_key","item","undefined","anyNullEmpty","strs","safeAppend","value","ifEmptyValue","BetterStringArray","pushIfNotNullEmpty","push","createPadder","padCharacter","desiredTotalLength","padFromRight","input","pad","difference","concat","padding","fill","join","regexAllSpaces","RegExp","regexDoubleDashes","regexFirstDash","regexLastDash","regexSingleDash","regexRemoveNonWord","regexAllUnderscores","escapeRegExp","string","replace","convertToSlug","text","slugDivider","letterCase","normalize","excludeCharacters","resp","toString","toLowerCase","toUpperCase","map","c","includes","stringToConstantStyledString","reverse","r","char","isUriEncoded","uri","decodeURIComponent","decodeUriFully","failSafe","Error","removeAndTrim","removeText","spaceAware","insideWords","rem","indexOf","startsWith","substring","endsWith","checkNew","remNew","test","console","log","trim","sortCompareStrings","a","b","aa","bb","comparePure","onlyNotNullEmpty","strArray","notNullEmptyArray","joinIntoUrl","_len2","routes","_key2","filter","v","i","arr","isNotFirst","isNotLast","slice","getUrlWithBaseUrl","baseUrl","route","isRouteCompleted","isHashId","accountId","hash","match","Boolean","StringUtils"],"sources":["./src/meteor-common/src/utils/StringUtils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}