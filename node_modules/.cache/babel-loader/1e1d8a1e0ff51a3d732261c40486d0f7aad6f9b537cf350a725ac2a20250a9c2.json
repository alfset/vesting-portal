{"ast":null,"code":"import{useCallback,useEffect,useMemo}from'react';import{useDispatch}from'react-redux';import{useActiveReact}from'../../hooks/useActiveReact';import{// useFetchMergeTokenListCallback,\nuseFetchTokenListVersionCallback}from'../../hooks/useFetchListCallback';// import { useFetchListCallback, useFetchTokenListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from'../../hooks/useInterval';import config from'../../config';export default function Updater(){const{chainId}=useActiveReact();const dispatch=useDispatch();const useChain=useMemo(()=>{if(chainId){return chainId;}else if(config.getCurChainInfo(chainId).chainID){return config.getCurChainInfo(chainId).chainID;}return undefined;},[chainId]);const fetchTokenListVersion=useFetchTokenListVersionCallback();const fetchTokenListsVersionCallback=useCallback(()=>{if(useChain){fetchTokenListVersion().catch(error=>console.debug('interval list fetching error',error));}},[fetchTokenListVersion,useChain]);// 每 半 分钟获取所有列表，但仅在我们初始化库之后\nuseInterval(fetchTokenListsVersionCallback,1000*30,false);useEffect(()=>{fetchTokenListsVersionCallback();},[dispatch,fetchTokenListsVersionCallback,useChain]);return null;}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useDispatch","useActiveReact","useFetchTokenListVersionCallback","useInterval","config","Updater","chainId","dispatch","useChain","getCurChainInfo","chainID","undefined","fetchTokenListVersion","fetchTokenListsVersionCallback","catch","error","console","debug"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/lists/updater.ts"],"sourcesContent":["\nimport { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport {\n  // useFetchMergeTokenListCallback,\n  useFetchTokenListVersionCallback\n } from '../../hooks/useFetchListCallback'\n// import { useFetchListCallback, useFetchTokenListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\n\nimport { AppDispatch } from '../index'\n\nimport config from '../../config'\n\nexport default function Updater(): null {\n  const { chainId } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID\n    }\n    return undefined\n  }, [chainId])\n  \n  const fetchTokenListVersion = useFetchTokenListVersionCallback()\n\n  const fetchTokenListsVersionCallback = useCallback(() => {\n    if (useChain) {\n      fetchTokenListVersion().catch(error => console.debug('interval list fetching error', error))\n    }\n  }, [fetchTokenListVersion, useChain])\n\n  // 每 半 分钟获取所有列表，但仅在我们初始化库之后\n  useInterval(fetchTokenListsVersionCallback, 1000 * 30, false)\n\n  useEffect(() => {\n    fetchTokenListsVersionCallback()\n  }, [dispatch, fetchTokenListsVersionCallback, useChain])\n\n  return null\n}\n"],"mappings":"AACA,OAASA,WAAW,CAAEC,SAAS,CAAEC,OAAO,KAAQ,OAAO,CACvD,OAASC,WAAW,KAAQ,aAAa,CACzC,OAASC,cAAc,KAAQ,4BAA4B,CAC3D,OACE;AACAC,gCAAgC,KAC1B,kCAAkC,CAC1C;AACA,MAAO,CAAAC,WAAW,KAAM,yBAAyB,CAIjD,MAAO,CAAAC,MAAM,KAAM,cAAc,CAEjC,cAAe,SAAS,CAAAC,OAAOA,CAAA,CAAS,CACtC,KAAM,CAAEC,OAAQ,CAAC,CAAGL,cAAc,CAAC,CAAC,CACpC,KAAM,CAAAM,QAAQ,CAAGP,WAAW,CAAc,CAAC,CAE3C,KAAM,CAAAQ,QAAQ,CAAGT,OAAO,CAAC,IAAM,CAC7B,GAAIO,OAAO,CAAE,CACX,MAAO,CAAAA,OAAO,CAChB,CAAC,IAAM,IAAIF,MAAM,CAACK,eAAe,CAACH,OAAO,CAAC,CAACI,OAAO,CAAE,CAClD,MAAO,CAAAN,MAAM,CAACK,eAAe,CAACH,OAAO,CAAC,CAACI,OAAO,CAChD,CACA,MAAO,CAAAC,SAAS,CAClB,CAAC,CAAE,CAACL,OAAO,CAAC,CAAC,CAEb,KAAM,CAAAM,qBAAqB,CAAGV,gCAAgC,CAAC,CAAC,CAEhE,KAAM,CAAAW,8BAA8B,CAAGhB,WAAW,CAAC,IAAM,CACvD,GAAIW,QAAQ,CAAE,CACZI,qBAAqB,CAAC,CAAC,CAACE,KAAK,CAACC,KAAK,EAAIC,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAEF,KAAK,CAAC,CAAC,CAC9F,CACF,CAAC,CAAE,CAACH,qBAAqB,CAAEJ,QAAQ,CAAC,CAAC,CAErC;AACAL,WAAW,CAACU,8BAA8B,CAAE,IAAI,CAAG,EAAE,CAAE,KAAK,CAAC,CAE7Df,SAAS,CAAC,IAAM,CACde,8BAA8B,CAAC,CAAC,CAClC,CAAC,CAAE,CAACN,QAAQ,CAAEM,8BAA8B,CAAEL,QAAQ,CAAC,CAAC,CAExD,MAAO,KAAI,CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}