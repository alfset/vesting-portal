{"ast":null,"code":"import axios from 'axios';\nexport function getIpfsImg(nftUrl) {\n  const url = \"https://gateway.pinata.cloud/ipfs/\".concat(nftUrl.replace('ipfs://', ''));\n  return new Promise(resolve => {\n    axios.get(url).then(res => {\n      const {\n        status,\n        data\n      } = res;\n      if (status === 200) {\n        resolve({\n          ...data,\n          imageUrl: data.image && data.image.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/'),\n          initurl: nftUrl,\n          useurl: url\n        });\n      } else {\n        console.log(res);\n        resolve({\n          imageUrl: '',\n          initurl: nftUrl,\n          useurl: url\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      resolve({\n        imageUrl: '',\n        initurl: nftUrl,\n        useurl: url\n      });\n    });\n  });\n}\nexport function getUriImg(nftUrl) {\n  return new Promise(resolve => {\n    axios.get(nftUrl).then(res => {\n      const {\n        status,\n        data\n      } = res;\n      if (status === 200) {\n        resolve({\n          ...data,\n          imageUrl: data.image,\n          initurl: nftUrl,\n          useurl: nftUrl\n        });\n      } else {\n        resolve({\n          imageUrl: '',\n          initurl: nftUrl,\n          useurl: nftUrl\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      resolve({\n        imageUrl: '',\n        initurl: nftUrl,\n        useurl: nftUrl\n      });\n    });\n  });\n}\nexport function getNftImage(nftUrl) {\n  if (nftUrl.indexOf('ipfs://') === 0) {\n    return getIpfsImg(nftUrl);\n  } else {\n    return getUriImg(nftUrl);\n  }\n}\nexport function getAllNftImage(list) {\n  const arr = [];\n  return new Promise(resolve => {\n    for (const url of list) {\n      arr.push(getNftImage(url));\n    }\n    Promise.all(arr).then(res => {\n      resolve(res);\n    });\n  });\n}","map":{"version":3,"names":["axios","getIpfsImg","nftUrl","url","concat","replace","Promise","resolve","get","then","res","status","data","imageUrl","image","initurl","useurl","console","log","catch","err","getUriImg","getNftImage","indexOf","getAllNftImage","list","arr","push","all"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/getNFTimage.ts"],"sourcesContent":["import axios from 'axios'\n\nexport function getIpfsImg (nftUrl:any) {\n  const url = `https://gateway.pinata.cloud/ipfs/${nftUrl.replace('ipfs://', '')}`\n  return new Promise(resolve => {\n    axios.get(url).then(res => {\n      const {status, data} = res\n      if (status === 200) {\n        resolve({\n          ...data,\n          imageUrl: data.image && data.image.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/'),\n          initurl: nftUrl,\n          useurl: url\n        })\n      } else {\n        console.log(res)\n        resolve({\n          imageUrl: '',\n          initurl: nftUrl,\n          useurl: url\n        })\n      }\n    }).catch(err => {\n      console.log(err)\n      resolve({\n        imageUrl: '',\n        initurl: nftUrl,\n        useurl: url\n      })\n    })\n  })\n}\n\nexport function getUriImg (nftUrl:any) {\n  return new Promise(resolve => {\n    axios.get(nftUrl).then(res => {\n      const {status, data} = res\n      if (status === 200) {\n        resolve({\n          ...data,\n          imageUrl: data.image,\n          initurl: nftUrl,\n          useurl: nftUrl\n        })\n      } else {\n        resolve({\n          imageUrl: '',\n          initurl: nftUrl,\n          useurl: nftUrl\n        })\n      }\n    }).catch(err => {\n      console.log(err)\n      resolve({\n        imageUrl: '',\n        initurl: nftUrl,\n        useurl: nftUrl\n      })\n    })\n  })\n}\n\nexport function getNftImage (nftUrl:any) {\n  if (nftUrl.indexOf('ipfs://') === 0) {\n    return getIpfsImg(nftUrl)\n  } else {\n    return getUriImg(nftUrl)\n  }\n}\n\nexport function getAllNftImage (list:any) {\n  const arr:any = []\n  return new Promise(resolve => {\n    for (const url of list) {\n      arr.push(getNftImage(url))\n    }\n    Promise.all(arr).then(res => {\n      resolve(res)\n    })\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}