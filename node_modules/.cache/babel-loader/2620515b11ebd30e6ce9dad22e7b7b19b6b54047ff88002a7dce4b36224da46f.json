{"ast":null,"code":"function wait(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nfunction waitRandom(min, max) {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled');\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry(fn, _ref) {\n  let {\n    n,\n    minWait,\n    maxWait\n  } = _ref;\n  let completed = false;\n  let rejectCancelled;\n  const promise = new Promise(async (resolve, reject) => {\n    rejectCancelled = reject;\n    while (true) {\n      let result;\n      try {\n        result = await fn();\n        if (!completed) {\n          resolve(result);\n          completed = true;\n        }\n        break;\n      } catch (error) {\n        if (completed) {\n          break;\n        }\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error);\n          completed = true;\n          break;\n        }\n        n--;\n      }\n      await waitRandom(minWait, maxWait);\n    }\n  });\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return;\n      completed = true;\n      rejectCancelled(new CancelledError());\n    }\n  };\n}","map":{"version":3,"names":["wait","ms","Promise","resolve","setTimeout","waitRandom","min","max","Math","round","random","CancelledError","Error","constructor","RetryableError","retry","fn","_ref","n","minWait","maxWait","completed","rejectCancelled","promise","reject","result","error","cancel"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/retry.ts"],"sourcesContent":["function wait(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number }\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAIA,CAACC,EAAU,EAAiB;EACvC,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AACxD;AAEA,SAASI,UAAUA,CAACC,GAAW,EAAEC,GAAW,EAAiB;EAC3D,OAAOP,IAAI,CAACM,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGF,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEA,GAAG,GAAGD,GAAG,CAAC,CAAC,CAAC;AACvE;;AAEA;AACA;AACA;AACA,OAAO,MAAMK,cAAc,SAASC,KAAK,CAAC;EACxCC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,WAAW,CAAC;EACpB;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,SAASF,KAAK,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,KAAKA,CACnBC,EAAoB,EAAAC,IAAA,EAEyB;EAAA,IAD7C;IAAEC,CAAC;IAAEC,OAAO;IAAEC;EAAyD,CAAC,GAAAH,IAAA;EAExE,IAAII,SAAS,GAAG,KAAK;EACrB,IAAIC,eAAuC;EAC3C,MAAMC,OAAO,GAAG,IAAIrB,OAAO,CAAI,OAAOC,OAAO,EAAEqB,MAAM,KAAK;IACxDF,eAAe,GAAGE,MAAM;IACxB,OAAO,IAAI,EAAE;MACX,IAAIC,MAAS;MACb,IAAI;QACFA,MAAM,GAAG,MAAMT,EAAE,CAAC,CAAC;QACnB,IAAI,CAACK,SAAS,EAAE;UACdlB,OAAO,CAACsB,MAAM,CAAC;UACfJ,SAAS,GAAG,IAAI;QAClB;QACA;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd,IAAIL,SAAS,EAAE;UACb;QACF;QACA,IAAIH,CAAC,IAAI,CAAC,IAAI,EAAEQ,KAAK,YAAYZ,cAAc,CAAC,EAAE;UAChDU,MAAM,CAACE,KAAK,CAAC;UACbL,SAAS,GAAG,IAAI;UAChB;QACF;QACAH,CAAC,EAAE;MACL;MACA,MAAMb,UAAU,CAACc,OAAO,EAAEC,OAAO,CAAC;IACpC;EACF,CAAC,CAAC;EACF,OAAO;IACLG,OAAO;IACPI,MAAM,EAAEA,CAAA,KAAM;MACZ,IAAIN,SAAS,EAAE;MACfA,SAAS,GAAG,IAAI;MAChBC,eAAe,CAAC,IAAIX,cAAc,CAAC,CAAC,CAAC;IACvC;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}