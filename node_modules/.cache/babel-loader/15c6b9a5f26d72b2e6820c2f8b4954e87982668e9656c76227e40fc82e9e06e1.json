{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';// import { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\nimport{// fetchTokenList,\nmergeTokenList,updateTokenlistTime}from'../state/lists/actions';import{poolList,updatePoollistTime}from'../state/pools/actions';import{nftlist,updateNftlistTime}from'../state/nft/actions';import{useActiveReact}from'./useActiveReact';import config from'../config';// import {spportChainArr} from '../config/chainConfig'\n// import {timeout, USE_VERSION, VERSION, bridgeApi} from '../config/constant'\nimport{MAIN_COIN_SORT// USE_VERSION,\n// controlConfig\n// VERSION\n}from'../config/constant';import{getUrlData}from'../utils/tools/axios';import{setTokenlist,getTokenlist,setPoollist,getPoollist,setNftlist,getNftlist}from'../utils/indexedDB';// console.log(controlConfig[USE_VERSION])\nfunction getVersion(){return new Promise(resolve=>{const url=\"\".concat(config.multiAridgeApi,\"/token/version\");getUrlData(url).then(version=>{resolve(version);});});}function getServerTokenlist(chainId){return new Promise(resolve=>{let list={};if(chainId){const url=\"\".concat(config.multiAridgeApi,\"/v4/tokenlistv4/\").concat(chainId);getUrlData(url).then(tokenList=>{// console.log(tokenList)\nif(tokenList.msg==='Success'&&tokenList.data){list=tokenList.data;resolve(list);}else{resolve('');}});}else{resolve('');}});}function getServerPoolTokenlist(chainId){return new Promise(resolve=>{const list={};if(chainId){const url=\"\".concat(config.multiAridgeApi,\"/v4/poollist/\").concat(chainId);getUrlData(url).then(tokenList=>{// console.log(tokenList)\nif(tokenList.msg==='Success'&&tokenList.data){const tList=tokenList.data;for(const tokenKey in tList){var _MAIN_COIN_SORT$tList,_MAIN_COIN_SORT$tList2;// if (controlConfig[USE_VERSION].hiddenCoin.includes(tokenKey)) continue\nlist[tokenKey]={...tList[tokenKey],key:tokenKey,sort:(_MAIN_COIN_SORT$tList=MAIN_COIN_SORT===null||MAIN_COIN_SORT===void 0?void 0:(_MAIN_COIN_SORT$tList2=MAIN_COIN_SORT[tList[tokenKey].symbol])===null||_MAIN_COIN_SORT$tList2===void 0?void 0:_MAIN_COIN_SORT$tList2.sort)!==null&&_MAIN_COIN_SORT$tList!==void 0?_MAIN_COIN_SORT$tList:1000};}resolve(list);}else{resolve('');}});}else{resolve('');}});}function getServerNftTokenlist(chainId){return new Promise(resolve=>{let list={};if(chainId){const url=\"\".concat(config.multiAridgeApi,\"/v4/nft/\").concat(chainId);getUrlData(url).then(tokenList=>{// console.log(tokenList)\nif(tokenList.msg==='Success'&&tokenList.data){list=tokenList.data;resolve(list);}else{resolve('');}});}else{resolve('');}});}export function useFetchTokenListVersionCallback(){const dispatch=useDispatch();const{chainId}=useActiveReact();const tokenlists=useSelector(state=>state.lists.mergeTokenList);const poollists=useSelector(state=>state.pools.poolList);const nftlists=useSelector(state=>state.nft.nftlist);const useChain=useMemo(()=>{if(chainId){return chainId;}else if(config.getCurChainInfo(chainId).chainID){return config.getCurChainInfo(chainId).chainID;}return undefined;},[chainId]);return useCallback(async()=>{// console.log(useChain)\nif(!useChain)return;// console.log(useChain)\nreturn getVersion().then(async res=>{// let curTokenList:any = {}\nif(res.msg==='Success'){var _curDbTokenList$versi,_curDbPoolList$versio,_curDbNftList$version;const serverVersion=res.data;const curDbTokenList=await getTokenlist(useChain);const curLSTokenList=tokenlists&&tokenlists[useChain]?tokenlists[useChain]:{};const localTokenVersion=(_curDbTokenList$versi=curDbTokenList===null||curDbTokenList===void 0?void 0:curDbTokenList.version)!==null&&_curDbTokenList$versi!==void 0?_curDbTokenList$versi:curLSTokenList===null||curLSTokenList===void 0?void 0:curLSTokenList.version;// console.log(serverVersion)\n// console.log(localTokenVersion)\n// console.log(localTokenVersion !== serverVersion)\nif(!serverVersion||!localTokenVersion||localTokenVersion!==serverVersion){getServerTokenlist(useChain).then(res=>{if(res){setTokenlist(useChain,res,serverVersion);dispatch(mergeTokenList({chainId:useChain,tokenList:res,version:serverVersion}));dispatch(updateTokenlistTime({}));}});}const curDbPoolList=await getPoollist(useChain);const curLSPoolList=poollists&&poollists[useChain]?poollists[useChain]:{};const localPoolVersion=(_curDbPoolList$versio=curDbPoolList===null||curDbPoolList===void 0?void 0:curDbPoolList.version)!==null&&_curDbPoolList$versio!==void 0?_curDbPoolList$versio:curLSPoolList===null||curLSPoolList===void 0?void 0:curLSPoolList.version;if(!serverVersion||!localPoolVersion||localPoolVersion!==serverVersion){getServerPoolTokenlist(useChain).then(res=>{// console.log(res)\nif(res){setPoollist(useChain,res,serverVersion);dispatch(poolList({chainId:useChain,tokenList:res,version:serverVersion}));dispatch(updatePoollistTime({}));}});}const curDbNftList=await getNftlist(useChain);const curLSNftList=nftlists&&nftlists[useChain]?nftlists[useChain]:{};const localNftVersion=(_curDbNftList$version=curDbNftList===null||curDbNftList===void 0?void 0:curDbNftList.version)!==null&&_curDbNftList$version!==void 0?_curDbNftList$version:curLSNftList===null||curLSNftList===void 0?void 0:curLSNftList.version;// console.log(curLSNftList)\n// console.log(curDbNftList)\nif(// USE_VERSION === VERSION.V7_TEST\n// && \n!serverVersion||!localNftVersion||localNftVersion!==serverVersion){getServerNftTokenlist(useChain).then(res=>{console.log(res);if(res){setNftlist(useChain,res,serverVersion);dispatch(nftlist({chainId:useChain,tokenList:res,version:serverVersion}));dispatch(updateNftlistTime({}));}});}}});},[dispatch,useChain]);}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","mergeTokenList","updateTokenlistTime","poolList","updatePoollistTime","nftlist","updateNftlistTime","useActiveReact","config","MAIN_COIN_SORT","getUrlData","setTokenlist","getTokenlist","setPoollist","getPoollist","setNftlist","getNftlist","getVersion","Promise","resolve","url","concat","multiAridgeApi","then","version","getServerTokenlist","chainId","list","tokenList","msg","data","getServerPoolTokenlist","tList","tokenKey","_MAIN_COIN_SORT$tList","_MAIN_COIN_SORT$tList2","key","sort","symbol","getServerNftTokenlist","useFetchTokenListVersionCallback","dispatch","tokenlists","state","lists","poollists","pools","nftlists","nft","useChain","getCurChainInfo","chainID","undefined","res","_curDbTokenList$versi","_curDbPoolList$versio","_curDbNftList$version","serverVersion","curDbTokenList","curLSTokenList","localTokenVersion","curDbPoolList","curLSPoolList","localPoolVersion","curDbNftList","curLSNftList","localNftVersion","console","log"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useFetchListCallback.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n// import { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\nimport { AppDispatch } from '../state'\nimport {\n  // fetchTokenList,\n  mergeTokenList,\n  updateTokenlistTime,\n} from '../state/lists/actions'\nimport { poolList, updatePoollistTime } from '../state/pools/actions'\nimport { nftlist, updateNftlistTime } from '../state/nft/actions'\nimport { AppState } from '../state'\n\nimport {useActiveReact} from './useActiveReact'\n\nimport config from '../config'\n// import {spportChainArr} from '../config/chainConfig'\n// import {timeout, USE_VERSION, VERSION, bridgeApi} from '../config/constant'\nimport {\n  MAIN_COIN_SORT,\n  // USE_VERSION,\n  // controlConfig\n  // VERSION\n} from '../config/constant'\nimport {getUrlData} from '../utils/tools/axios'\nimport {\n  setTokenlist,\n  getTokenlist,\n  setPoollist,\n  getPoollist,\n  setNftlist,\n  getNftlist\n} from '../utils/indexedDB'\n\n// console.log(controlConfig[USE_VERSION])\n\nfunction getVersion () {\n  return new Promise(resolve => {\n    const url = `${config.multiAridgeApi}/token/version`\n    getUrlData(url).then((version:any) => {\n      resolve(version)\n    })\n  })\n}\n\nfunction getServerTokenlist (chainId:any) {\n  return new Promise(resolve => {\n    let list:any = {}\n    if (chainId) {\n      const url = `${config.multiAridgeApi}/v4/tokenlistv4/${chainId}`\n      getUrlData(url).then((tokenList:any) => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          list = tokenList.data\n          resolve(list)\n        } else {\n          resolve('')\n        }\n      })\n    } else {\n      resolve('')\n    }\n  })\n}\n\nfunction getServerPoolTokenlist (chainId:any) {\n  return new Promise(resolve => {\n    const list:any = {}\n    if (chainId) {\n      const url = `${config.multiAridgeApi}/v4/poollist/${chainId}`\n      getUrlData(url).then((tokenList:any) => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          const tList = tokenList.data\n          for (const tokenKey in tList) {\n            // if (controlConfig[USE_VERSION].hiddenCoin.includes(tokenKey)) continue\n            list[tokenKey] = {\n              ...tList[tokenKey],\n              key: tokenKey,\n              sort: MAIN_COIN_SORT?.[tList[tokenKey].symbol]?.sort ?? 1000\n            }\n          }\n          resolve(list)\n        } else {\n          resolve('')\n        }\n      })\n    } else {\n      resolve('')\n    }\n  })\n}\n\nfunction getServerNftTokenlist (chainId:any) {\n  return new Promise(resolve => {\n    let list:any = {}\n    if (chainId) {\n      const url = `${config.multiAridgeApi}/v4/nft/${chainId}`\n      getUrlData(url).then((tokenList:any) => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          list = tokenList.data\n          resolve(list)\n        } else {\n          resolve('')\n        }\n      })\n    } else {\n      resolve('')\n    }\n  })\n}\n\nexport function useFetchTokenListVersionCallback(): () => Promise<any> {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const { chainId } = useActiveReact()\n  const tokenlists = useSelector<AppState, AppState['lists']['mergeTokenList']>(state => state.lists.mergeTokenList)\n  const poollists = useSelector<AppState, AppState['pools']['poolList']>(state => state.pools.poolList)\n  const nftlists = useSelector<AppState, AppState['nft']['nftlist']>(state => state.nft.nftlist)\n\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID\n    }\n    return undefined\n  }, [chainId])\n  \n  return useCallback(\n    async () => {\n      // console.log(useChain)\n      if (!useChain) return\n      // console.log(useChain)\n      \n      return getVersion().then(async(res:any) => {\n        // let curTokenList:any = {}\n\n        if (res.msg === 'Success') {\n          const serverVersion = res.data\n\n          \n          const curDbTokenList:any = await getTokenlist(useChain)\n          const curLSTokenList:any = tokenlists && tokenlists[useChain] ? tokenlists[useChain] : {}\n          const localTokenVersion = curDbTokenList?.version ?? curLSTokenList?.version\n          // console.log(serverVersion)\n          // console.log(localTokenVersion)\n          // console.log(localTokenVersion !== serverVersion)\n          if (\n            !serverVersion\n            || !localTokenVersion\n            || localTokenVersion !== serverVersion\n          ) {\n            getServerTokenlist(useChain).then(res => {\n              if (res) {\n                setTokenlist(useChain, res, serverVersion)\n                dispatch(mergeTokenList({ chainId: useChain, tokenList:res, version: serverVersion }))\n                dispatch(updateTokenlistTime({}))\n              }\n            })\n          }\n\n          const curDbPoolList:any = await getPoollist(useChain)\n          const curLSPoolList:any = poollists && poollists[useChain] ? poollists[useChain] : {}\n          const localPoolVersion = curDbPoolList?.version ?? curLSPoolList?.version\n          if (\n            !serverVersion\n            || !localPoolVersion\n            || localPoolVersion !== serverVersion\n          ) {\n            getServerPoolTokenlist(useChain).then(res => {\n              // console.log(res)\n              if (res) {\n                setPoollist(useChain, res, serverVersion)\n                dispatch(poolList({ chainId: useChain, tokenList:res, version: serverVersion }))\n                dispatch(updatePoollistTime({}))\n              }\n            })\n          }\n\n          const curDbNftList:any = await getNftlist(useChain)\n          const curLSNftList:any = nftlists && nftlists[useChain] ? nftlists[useChain] : {}\n          const localNftVersion = curDbNftList?.version ?? curLSNftList?.version\n          // console.log(curLSNftList)\n          // console.log(curDbNftList)\n          if (\n            // USE_VERSION === VERSION.V7_TEST\n            // && \n            (\n              !serverVersion\n              || !localNftVersion\n              || localNftVersion !== serverVersion\n            )\n          ) {\n            getServerNftTokenlist(useChain).then(res => {\n              console.log(res)\n              if (res) {\n                setNftlist(useChain, res, serverVersion)\n                dispatch(nftlist({ chainId: useChain, tokenList:res, version: serverVersion }))\n                dispatch(updateNftlistTime({}))\n              }\n            })\n          }\n        }\n      })\n    },\n    [dispatch, useChain]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}