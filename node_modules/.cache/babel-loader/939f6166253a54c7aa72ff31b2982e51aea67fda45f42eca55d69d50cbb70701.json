{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.liquidityPoolWithdraw = liquidityPoolWithdraw;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Creates a liquidity pool withdraw operation.\n *\n * @function\n * @alias Operation.liquidityPoolWithdraw\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.amount - Amount of pool shares to withdraw.\n * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.\n * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).\n */\nfunction liquidityPoolWithdraw() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (!opts.liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex');\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError('amount argument is required');\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (!this.isValidAmount(opts.minAmountA, true)) {\n    throw new TypeError('minAmountA argument is required');\n  }\n  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);\n  if (!this.isValidAmount(opts.minAmountB, true)) {\n    throw new TypeError('minAmountB argument is required');\n  }\n  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);\n  var liquidityPoolWithdrawOp = new _xdr2.default.LiquidityPoolWithdrawOp(attributes);\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","liquidityPoolWithdraw","_xdr","require","_xdr2","_interopRequireDefault","obj","__esModule","default","opts","arguments","length","undefined","attributes","liquidityPoolId","TypeError","PoolId","fromXDR","isValidAmount","amount","_toXDRAmount","minAmountA","minAmountB","liquidityPoolWithdrawOp","LiquidityPoolWithdrawOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/liquidity_pool_withdraw.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.liquidityPoolWithdraw = liquidityPoolWithdraw;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a liquidity pool withdraw operation.\n *\n * @function\n * @alias Operation.liquidityPoolWithdraw\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.amount - Amount of pool shares to withdraw.\n * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.\n * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).\n */\nfunction liquidityPoolWithdraw() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var attributes = {};\n  if (!opts.liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex');\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError('amount argument is required');\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n\n  if (!this.isValidAmount(opts.minAmountA, true)) {\n    throw new TypeError('minAmountA argument is required');\n  }\n  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);\n\n  if (!this.isValidAmount(opts.minAmountB, true)) {\n    throw new TypeError('minAmountB argument is required');\n  }\n  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);\n\n  var liquidityPoolWithdrawOp = new _xdr2.default.LiquidityPoolWithdrawOp(attributes);\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB;AAErD,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,SAASG,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,qBAAqBA,CAAA,EAAG;EAC/B,IAAIQ,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEjF,IAAIG,UAAU,GAAG,CAAC,CAAC;EACnB,IAAI,CAACJ,IAAI,CAACK,eAAe,EAAE;IACzB,MAAM,IAAIC,SAAS,CAAC,sCAAsC,CAAC;EAC7D;EACAF,UAAU,CAACC,eAAe,GAAGV,KAAK,CAACI,OAAO,CAACQ,MAAM,CAACC,OAAO,CAACR,IAAI,CAACK,eAAe,EAAE,KAAK,CAAC;EAEtF,IAAI,CAAC,IAAI,CAACI,aAAa,CAACT,IAAI,CAACU,MAAM,CAAC,EAAE;IACpC,MAAM,IAAIJ,SAAS,CAAC,6BAA6B,CAAC;EACpD;EACAF,UAAU,CAACM,MAAM,GAAG,IAAI,CAACC,YAAY,CAACX,IAAI,CAACU,MAAM,CAAC;EAElD,IAAI,CAAC,IAAI,CAACD,aAAa,CAACT,IAAI,CAACY,UAAU,EAAE,IAAI,CAAC,EAAE;IAC9C,MAAM,IAAIN,SAAS,CAAC,iCAAiC,CAAC;EACxD;EACAF,UAAU,CAACQ,UAAU,GAAG,IAAI,CAACD,YAAY,CAACX,IAAI,CAACY,UAAU,CAAC;EAE1D,IAAI,CAAC,IAAI,CAACH,aAAa,CAACT,IAAI,CAACa,UAAU,EAAE,IAAI,CAAC,EAAE;IAC9C,MAAM,IAAIP,SAAS,CAAC,iCAAiC,CAAC;EACxD;EACAF,UAAU,CAACS,UAAU,GAAG,IAAI,CAACF,YAAY,CAACX,IAAI,CAACa,UAAU,CAAC;EAE1D,IAAIC,uBAAuB,GAAG,IAAInB,KAAK,CAACI,OAAO,CAACgB,uBAAuB,CAACX,UAAU,CAAC;EACnF,IAAIY,YAAY,GAAG;IACjBC,IAAI,EAAEtB,KAAK,CAACI,OAAO,CAACmB,aAAa,CAAC1B,qBAAqB,CAACsB,uBAAuB;EACjF,CAAC;EACD,IAAI,CAACK,gBAAgB,CAACH,YAAY,EAAEhB,IAAI,CAAC;EAEzC,OAAO,IAAIL,KAAK,CAACI,OAAO,CAACqB,SAAS,CAACJ,YAAY,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}