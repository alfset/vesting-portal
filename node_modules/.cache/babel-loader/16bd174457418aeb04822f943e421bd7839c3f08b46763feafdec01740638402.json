{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registry = exports.isTxBodyEncodeObject = exports.isPbjsGeneratedType = exports.isTsProtoGeneratedType = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nconst tx_2 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\nfunction isTsProtoGeneratedType(type) {\n  return typeof type.fromPartial === \"function\";\n}\nexports.isTsProtoGeneratedType = isTsProtoGeneratedType;\nfunction isPbjsGeneratedType(type) {\n  return !isTsProtoGeneratedType(type);\n}\nexports.isPbjsGeneratedType = isPbjsGeneratedType;\nconst defaultTypeUrls = {\n  cosmosCoin: \"/cosmos.base.v1beta1.Coin\",\n  cosmosMsgSend: \"/cosmos.bank.v1beta1.MsgSend\",\n  cosmosTxBody: \"/cosmos.tx.v1beta1.TxBody\",\n  googleAny: \"/google.protobuf.Any\"\n};\nfunction isTxBodyEncodeObject(encodeObject) {\n  return encodeObject.typeUrl === \"/cosmos.tx.v1beta1.TxBody\";\n}\nexports.isTxBodyEncodeObject = isTxBodyEncodeObject;\nclass Registry {\n  /**\n   * Creates a new Registry for mapping protobuf type identifiers/type URLs to\n   * actual implementations. Those implementations are typically generated with ts-proto\n   * but we also support protobuf.js as a type generator.\n   *\n   * If there is no parameter given, a `new Registry()` adds the types `Coin` and `MsgSend`\n   * for historic reasons. Those can be overriden by customTypes.\n   *\n   * There are currently two methods for adding new types:\n   * 1. Passing types to the constructor.\n   * 2. Using the `register()` method\n   */\n  constructor(customTypes) {\n    const {\n      cosmosCoin,\n      cosmosMsgSend\n    } = defaultTypeUrls;\n    this.types = customTypes ? new Map([...customTypes]) : new Map([[cosmosCoin, coin_1.Coin], [cosmosMsgSend, tx_1.MsgSend]]);\n  }\n  register(typeUrl, type) {\n    this.types.set(typeUrl, type);\n  }\n  /**\n   * Looks up a type that was previously added to the registry.\n   *\n   * The generator information (ts-proto or pbjs) gets lost along the way.\n   * If you need to work with the result type in TypeScript, you can use:\n   *\n   * ```\n   * import { assert } from \"@cosmjs/utils\";\n   *\n   * const Coin = registry.lookupType(\"/cosmos.base.v1beta1.Coin\");\n   * assert(Coin); // Ensures not unset\n   * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect\n   *\n   * // Coin is typed TsProtoGeneratedType now.\n   * ```\n   */\n  lookupType(typeUrl) {\n    return this.types.get(typeUrl);\n  }\n  lookupTypeWithError(typeUrl) {\n    const type = this.lookupType(typeUrl);\n    if (!type) {\n      throw new Error(\"Unregistered type url: \".concat(typeUrl));\n    }\n    return type;\n  }\n  /**\n   * Takes a typeUrl/value pair and encodes the value to protobuf if\n   * the given type was previously registered.\n   *\n   * If the value has to be wrapped in an Any, this needs to be done\n   * manually after this call. Or use `encodeAsAny` instead.\n   */\n  encode(encodeObject) {\n    const {\n      value,\n      typeUrl\n    } = encodeObject;\n    if (isTxBodyEncodeObject(encodeObject)) {\n      return this.encodeTxBody(value);\n    }\n    const type = this.lookupTypeWithError(typeUrl);\n    const instance = isTsProtoGeneratedType(type) ? type.fromPartial(value) : type.create(value);\n    return type.encode(instance).finish();\n  }\n  /**\n   * Takes a typeUrl/value pair and encodes the value to an Any if\n   * the given type was previously registered.\n   */\n  encodeAsAny(encodeObject) {\n    const binaryValue = this.encode(encodeObject);\n    return any_1.Any.fromPartial({\n      typeUrl: encodeObject.typeUrl,\n      value: binaryValue\n    });\n  }\n  encodeTxBody(txBodyFields) {\n    const wrappedMessages = txBodyFields.messages.map(message => this.encodeAsAny(message));\n    const txBody = tx_2.TxBody.fromPartial({\n      ...txBodyFields,\n      messages: wrappedMessages\n    });\n    return tx_2.TxBody.encode(txBody).finish();\n  }\n  decode(_ref) {\n    let {\n      typeUrl,\n      value\n    } = _ref;\n    if (typeUrl === defaultTypeUrls.cosmosTxBody) {\n      return this.decodeTxBody(value);\n    }\n    const type = this.lookupTypeWithError(typeUrl);\n    const decoded = type.decode(value);\n    Object.entries(decoded).forEach(_ref2 => {\n      let [key, val] = _ref2;\n      if (typeof Buffer !== \"undefined\" && typeof Buffer.isBuffer !== \"undefined\" && Buffer.isBuffer(val)) {\n        decoded[key] = Uint8Array.from(val);\n      }\n    });\n    return decoded;\n  }\n  decodeTxBody(txBody) {\n    const decodedTxBody = tx_2.TxBody.decode(txBody);\n    return {\n      ...decodedTxBody,\n      messages: decodedTxBody.messages.map(_ref3 => {\n        let {\n          typeUrl: typeUrl,\n          value\n        } = _ref3;\n        if (!typeUrl) {\n          throw new Error(\"Missing type_url in Any\");\n        }\n        if (!value) {\n          throw new Error(\"Missing value in Any\");\n        }\n        return this.decode({\n          typeUrl,\n          value\n        });\n      })\n    };\n  }\n}\nexports.Registry = Registry;","map":{"version":3,"names":["tx_1","require","coin_1","tx_2","any_1","isTsProtoGeneratedType","type","fromPartial","exports","isPbjsGeneratedType","defaultTypeUrls","cosmosCoin","cosmosMsgSend","cosmosTxBody","googleAny","isTxBodyEncodeObject","encodeObject","typeUrl","Registry","constructor","customTypes","types","Map","Coin","MsgSend","register","set","lookupType","get","lookupTypeWithError","Error","concat","encode","value","encodeTxBody","instance","create","finish","encodeAsAny","binaryValue","Any","txBodyFields","wrappedMessages","messages","map","message","txBody","TxBody","decode","_ref","decodeTxBody","decoded","Object","entries","forEach","_ref2","key","val","Buffer","isBuffer","Uint8Array","from","decodedTxBody","_ref3"],"sources":["../src/registry.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}