{"ast":null,"code":"// import { Interface } from '@ethersproject/abi'\nimport ERC20_ABI from '../../constants/abis/erc20.json';\nimport multicallABI from '../../constants/multicall/abi.json';\nimport config from '../../config';\nconst Web3 = require('web3');\nconst TIMEOUT = 'timeout';\nexport function getWeb3(_ref) {\n  let {\n    rpc,\n    provider\n  } = _ref;\n  rpc = rpc ? rpc : '';\n  if (provider) {\n    // console.log(library)\n    const wFn = new Web3(provider);\n    // console.log(wFn)\n    return wFn;\n  } else {\n    // console.log(rpc)\n    const wFn = new Web3(new Web3.providers.HttpProvider(rpc));\n    return wFn;\n  }\n}\nexport function getContract(_ref2) {\n  let {\n    abi,\n    rpc,\n    provider\n  } = _ref2;\n  const web3 = getWeb3({\n    rpc,\n    provider\n  });\n  abi = abi ? abi : ERC20_ABI;\n  return new web3.eth.Contract(abi);\n}\nfunction timeoutWeb3() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(TIMEOUT);\n    }, [1000 * 60]);\n  });\n}\nfunction getBatchWeb3Data(_ref3) {\n  let {\n    rpc,\n    calls,\n    provider\n  } = _ref3;\n  return new Promise((resolve, reject) => {\n    const web3 = getWeb3({\n      rpc,\n      provider\n    });\n    const batch = new web3.BatchRequest();\n    // console.log(calls)\n    for (const obj of calls) {\n      if (obj.callData) {\n        batch.add(web3.eth.call.request({\n          data: obj.callData,\n          to: obj.target\n        }, 'latest'));\n      } else {\n        const property = obj.property ? obj.property : 'eth';\n        batch.add(web3[property][obj.methods].request(...obj.input));\n      }\n    }\n    batch.requestManager.sendBatch(batch.requests, (err, res) => {\n      if (err) {\n        reject(err);\n      } else {\n        // console.log(res)\n        const arr = res.map(_ref4 => {\n          let {\n            result\n          } = _ref4;\n          return result;\n        });\n        // console.log(arr)\n        resolve(arr);\n      }\n    });\n  });\n}\nexport function getMulticallData(_ref5) {\n  let {\n    chainId,\n    rpc,\n    calls,\n    provider\n  } = _ref5;\n  return new Promise((resolve, reject) => {\n    const contract = getContract({\n      abi: multicallABI,\n      rpc: rpc,\n      provider\n    });\n    contract.options.address = config.getCurChainInfo(chainId).multicalToken;\n    // console.log(chainId)\n    // console.log(rpc)\n    // console.log(calls)\n    // console.log(provider)\n    const arr = [];\n    for (const obj of calls) {\n      if (obj.target) {\n        arr.push({\n          target: obj.target,\n          callData: obj.callData\n        });\n      } else {\n        if (obj.methods === 'getBalance') {\n          // contract.methods.getEthBalance(...obj.input)\n          arr.push({\n            target: config.getCurChainInfo(chainId).multicalToken,\n            callData: contract.methods.getEthBalance(...obj.input).encodeABI()\n          });\n        }\n      }\n    }\n    // arr.push({\n    //   target: config.getCurChainInfo(chainId).multicalToken,\n    //   callData: contract.methods.getEthBalance('0xC03033d8b833fF7ca08BF2A58C9BC9d711257249').encodeABI()\n    // })\n    contract.methods.aggregate(arr).call((err, res) => {\n      // console.log(res)\n      if (err) {\n        // console.log(err)\n        // console.log(JSON.stringify(calls))\n        reject(err);\n      } else {\n        resolve(res.returnData);\n      }\n    });\n  });\n}\nfunction getBatchResult(_ref6) {\n  let {\n    chainId,\n    rpc,\n    calls,\n    provider\n  } = _ref6;\n  return new Promise((resolve, reject) => {\n    // console.log(config.getCurChainInfo(chainId).multicalToken)\n    // console.log(calls)\n    const useMethods = config.getCurChainInfo(chainId).multicalToken ? getMulticallData : getBatchWeb3Data;\n    // const useMethods = getBatchWeb3Data\n    Promise.race([timeoutWeb3(), useMethods({\n      chainId,\n      rpc,\n      calls,\n      provider\n    })]).then(res => {\n      if (res === TIMEOUT) {\n        reject(res);\n      } else {\n        resolve(res);\n      }\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nconst useNode = {};\nexport async function useBatchData(_ref7) {\n  let {\n    chainId,\n    calls,\n    provider\n  } = _ref7;\n  if (isNaN(chainId)) return undefined;\n  const rpcArr = config.getCurChainInfo(chainId).nodeRpcList;\n  const len = rpcArr.length - 1;\n  if (!useNode[chainId]) {\n    useNode[chainId] = {\n      rpc: rpcArr[0],\n      index: 0\n    };\n  }\n  let index = useNode[chainId].index;\n  const rpc = rpcArr[useNode[chainId].index];\n  let results = '';\n  try {\n    results = await getBatchResult({\n      chainId,\n      rpc,\n      calls,\n      provider\n    });\n  } catch (error) {\n    console.log('error');\n    console.log(error.toString());\n    if (error.toString().indexOf('Error: Returned error: execution reverted: Multicall aggregate: call failed') !== -1) {\n      // console.log(JSON.stringify(calls))\n      // console.log(calls.length)\n      results = '';\n    } else if (error.toString().indexOf('Invalid JSON RPC response') !== -1 || error.toString().indexOf('Error: Returned error') !== -1 || error === TIMEOUT) {\n      if (index < len && !provider) {\n        index++;\n        useNode[chainId] = {\n          rpc: rpcArr[index],\n          index: index\n        };\n        results = await useBatchData({\n          chainId,\n          calls,\n          provider\n        });\n      } else {\n        useNode[chainId] = {\n          rpc: rpcArr[0],\n          index: 0\n        };\n      }\n    } else {\n      results = error;\n    }\n  }\n  // console.log(results)\n  return results;\n}\n\n/*\n[\n  {\n    callData: '',\n    target: '',\n    methods: '',\n    input: []\n  }\n]\n*/\n\n// export async function init () {\n//   const arr = []\n//   const calls = [\n//     {\n//       \"type\": \"TOKEN\",\n//       \"callData\": \"0x70a08231000000000000000000000000c03033d8b833ff7ca08bf2a58c9bc9d711257249\",\n//       \"target\": \"0xe0eb31082bbf8252f7425c6dd72a8c6b3bfbe99f\"\n//     },\n//   ]\n//   const r = await useBatchData({\n//     chainId: '42161',\n//     calls\n//   })\n//   console.log(r)\n//   // for (const obj of calls) {\n\n//   //   const r = await useBatchData({\n//   //     chainId: '42161',\n//   //     calls: [obj]\n//   //   })\n//   //   console.log(r)\n//   //   if (!r) {\n//   //     arr.push(obj)\n//   //   }\n//   // }\n//   console.log(arr)\n// }\n// init()\n\n// export {\n//   getWeb3,\n//   useBatchData,\n//   getContract\n// }","map":{"version":3,"names":["ERC20_ABI","multicallABI","config","Web3","require","TIMEOUT","getWeb3","_ref","rpc","provider","wFn","providers","HttpProvider","getContract","_ref2","abi","web3","eth","Contract","timeoutWeb3","Promise","resolve","setTimeout","getBatchWeb3Data","_ref3","calls","reject","batch","BatchRequest","obj","callData","add","call","request","data","to","target","property","methods","input","requestManager","sendBatch","requests","err","res","arr","map","_ref4","result","getMulticallData","_ref5","chainId","contract","options","address","getCurChainInfo","multicalToken","push","getEthBalance","encodeABI","aggregate","returnData","getBatchResult","_ref6","useMethods","race","then","catch","error","useNode","useBatchData","_ref7","isNaN","undefined","rpcArr","nodeRpcList","len","length","index","results","console","log","toString","indexOf"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/tools/useBatchData.js"],"sourcesContent":["// import { Interface } from '@ethersproject/abi'\nimport ERC20_ABI from '../../constants/abis/erc20.json'\nimport multicallABI from '../../constants/multicall/abi.json'\nimport config from '../../config'\n\nconst Web3 = require('web3')\n\nconst TIMEOUT = 'timeout'\n\nexport function getWeb3 ({rpc, provider}) {\n  rpc = rpc ? rpc : ''\n  if (provider) {\n    // console.log(library)\n    const wFn = new Web3(provider)\n    // console.log(wFn)\n    return wFn\n  } else {\n    // console.log(rpc)\n    const wFn = new Web3(new Web3.providers.HttpProvider(rpc))\n    return wFn\n  }\n}\n\nexport function getContract({abi, rpc, provider}) {\n  const web3 = getWeb3({rpc, provider})\n  abi = abi ? abi : ERC20_ABI\n  return new web3.eth.Contract(abi)\n}\n\nfunction timeoutWeb3 () {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(TIMEOUT)\n    }, [1000 * 60])\n  })\n}\n\n\nfunction getBatchWeb3Data ({rpc, calls, provider}) {\n  return new Promise((resolve, reject) => {\n    const web3 = getWeb3({rpc, provider})\n    const batch = new web3.BatchRequest()\n    // console.log(calls)\n    for (const obj of calls) {\n      if (obj.callData) {\n        batch.add(web3.eth.call.request({data: obj.callData, to: obj.target}, 'latest'))\n      } else {\n        const property = obj.property ? obj.property : 'eth'\n        batch.add(web3[property][obj.methods].request(...obj.input))\n      }\n    }\n    batch.requestManager.sendBatch(batch.requests, (err, res) => {\n      if (err) {\n        reject(err)\n      } else {\n        // console.log(res)\n        const arr = res.map(({result}) => (result))\n        // console.log(arr)\n        resolve(arr)\n      }\n    })\n  })\n}\n\nexport function getMulticallData ({chainId, rpc, calls, provider}) {\n  return new Promise((resolve, reject) => {\n    const contract = getContract({abi: multicallABI, rpc: rpc, provider})\n    contract.options.address = config.getCurChainInfo(chainId).multicalToken\n    // console.log(chainId)\n    // console.log(rpc)\n    // console.log(calls)\n    // console.log(provider)\n    const arr = []\n    for (const obj of calls) {\n      if (obj.target) {\n        arr.push({\n          target: obj.target,\n          callData: obj.callData\n        })\n      } else {\n        if (obj.methods === 'getBalance') {\n          // contract.methods.getEthBalance(...obj.input)\n          arr.push({\n            target: config.getCurChainInfo(chainId).multicalToken,\n            callData: contract.methods.getEthBalance(...obj.input).encodeABI()\n          })\n        }\n      }\n    }\n    // arr.push({\n    //   target: config.getCurChainInfo(chainId).multicalToken,\n    //   callData: contract.methods.getEthBalance('0xC03033d8b833fF7ca08BF2A58C9BC9d711257249').encodeABI()\n    // })\n    contract.methods.aggregate(arr).call((err, res) => {\n      // console.log(res)\n      if (err) {\n        // console.log(err)\n        // console.log(JSON.stringify(calls))\n        reject(err)\n      } else {\n        resolve(res.returnData)\n      }\n    })\n  })\n}\n\nfunction getBatchResult ({chainId, rpc, calls, provider}) {\n  return new Promise((resolve, reject) => {\n    // console.log(config.getCurChainInfo(chainId).multicalToken)\n    // console.log(calls)\n    const useMethods = config.getCurChainInfo(chainId).multicalToken ? getMulticallData : getBatchWeb3Data\n    // const useMethods = getBatchWeb3Data\n    Promise.race([\n      timeoutWeb3(),\n      useMethods({chainId, rpc, calls, provider})\n    ]).then(res => {\n      if (res === TIMEOUT) {\n        reject(res)\n      } else {\n        resolve(res)\n      }\n    }).catch(error => {\n      reject(error)\n    })\n  })\n}\n\nconst useNode = {}\n\nexport async function useBatchData ({chainId, calls, provider}) {\n  if (isNaN(chainId)) return undefined\n  const rpcArr = config.getCurChainInfo(chainId).nodeRpcList\n  const len = rpcArr.length - 1\n  if (!useNode[chainId]) {\n    useNode[chainId] = {\n      rpc: rpcArr[0],\n      index: 0\n    }\n  }\n  let index = useNode[chainId].index\n  const rpc = rpcArr[useNode[chainId].index]\n  let results = ''\n  try {\n    results = await getBatchResult({chainId, rpc, calls, provider})\n  } catch (error) {\n    console.log('error')\n    console.log(error.toString())\n    if ( error.toString().indexOf('Error: Returned error: execution reverted: Multicall aggregate: call failed') !== -1) {\n      // console.log(JSON.stringify(calls))\n      // console.log(calls.length)\n      results = ''\n    } else if (\n      error.toString().indexOf('Invalid JSON RPC response') !== -1\n      || error.toString().indexOf('Error: Returned error') !== -1\n      || error === TIMEOUT\n    ) {\n      if (index < len && !provider) {\n        index ++\n        useNode[chainId] = {\n          rpc: rpcArr[index],\n          index: index\n        }\n        results = await useBatchData({chainId, calls, provider})\n      } else {\n        useNode[chainId] = {\n          rpc: rpcArr[0],\n          index: 0\n        }\n      }\n    } else {\n      results = error\n    }\n  }\n  // console.log(results)\n  return results\n}\n\n\n/*\n[\n  {\n    callData: '',\n    target: '',\n    methods: '',\n    input: []\n  }\n]\n*/\n\n// export async function init () {\n//   const arr = []\n//   const calls = [\n//     {\n//       \"type\": \"TOKEN\",\n//       \"callData\": \"0x70a08231000000000000000000000000c03033d8b833ff7ca08bf2a58c9bc9d711257249\",\n//       \"target\": \"0xe0eb31082bbf8252f7425c6dd72a8c6b3bfbe99f\"\n//     },\n//   ]\n//   const r = await useBatchData({\n//     chainId: '42161',\n//     calls\n//   })\n//   console.log(r)\n//   // for (const obj of calls) {\n\n//   //   const r = await useBatchData({\n//   //     chainId: '42161',\n//   //     calls: [obj]\n//   //   })\n//   //   console.log(r)\n//   //   if (!r) {\n//   //     arr.push(obj)\n//   //   }\n//   // }\n//   console.log(arr)\n// }\n// init()\n\n// export {\n//   getWeb3,\n//   useBatchData,\n//   getContract\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}