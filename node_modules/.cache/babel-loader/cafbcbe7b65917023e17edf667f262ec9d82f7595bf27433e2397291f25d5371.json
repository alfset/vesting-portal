{"ast":null,"code":"import axios from'axios';export function getIpfsImg(nftUrl){const url=\"https://gateway.pinata.cloud/ipfs/\".concat(nftUrl.replace('ipfs://',''));return new Promise(resolve=>{axios.get(url).then(res=>{const{status,data}=res;if(status===200){resolve({...data,imageUrl:data.image&&data.image.replace('ipfs://','https://gateway.pinata.cloud/ipfs/'),initurl:nftUrl,useurl:url});}else{console.log(res);resolve({imageUrl:'',initurl:nftUrl,useurl:url});}}).catch(err=>{console.log(err);resolve({imageUrl:'',initurl:nftUrl,useurl:url});});});}export function getUriImg(nftUrl){return new Promise(resolve=>{axios.get(nftUrl).then(res=>{const{status,data}=res;if(status===200){resolve({...data,imageUrl:data.image,initurl:nftUrl,useurl:nftUrl});}else{resolve({imageUrl:'',initurl:nftUrl,useurl:nftUrl});}}).catch(err=>{console.log(err);resolve({imageUrl:'',initurl:nftUrl,useurl:nftUrl});});});}export function getNftImage(nftUrl){if(nftUrl.indexOf('ipfs://')===0){return getIpfsImg(nftUrl);}else{return getUriImg(nftUrl);}}export function getAllNftImage(list){const arr=[];return new Promise(resolve=>{for(const url of list){arr.push(getNftImage(url));}Promise.all(arr).then(res=>{resolve(res);});});}","map":{"version":3,"names":["axios","getIpfsImg","nftUrl","url","concat","replace","Promise","resolve","get","then","res","status","data","imageUrl","image","initurl","useurl","console","log","catch","err","getUriImg","getNftImage","indexOf","getAllNftImage","list","arr","push","all"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/getNFTimage.ts"],"sourcesContent":["import axios from 'axios'\n\nexport function getIpfsImg (nftUrl:any) {\n  const url = `https://gateway.pinata.cloud/ipfs/${nftUrl.replace('ipfs://', '')}`\n  return new Promise(resolve => {\n    axios.get(url).then(res => {\n      const {status, data} = res\n      if (status === 200) {\n        resolve({\n          ...data,\n          imageUrl: data.image && data.image.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/'),\n          initurl: nftUrl,\n          useurl: url\n        })\n      } else {\n        console.log(res)\n        resolve({\n          imageUrl: '',\n          initurl: nftUrl,\n          useurl: url\n        })\n      }\n    }).catch(err => {\n      console.log(err)\n      resolve({\n        imageUrl: '',\n        initurl: nftUrl,\n        useurl: url\n      })\n    })\n  })\n}\n\nexport function getUriImg (nftUrl:any) {\n  return new Promise(resolve => {\n    axios.get(nftUrl).then(res => {\n      const {status, data} = res\n      if (status === 200) {\n        resolve({\n          ...data,\n          imageUrl: data.image,\n          initurl: nftUrl,\n          useurl: nftUrl\n        })\n      } else {\n        resolve({\n          imageUrl: '',\n          initurl: nftUrl,\n          useurl: nftUrl\n        })\n      }\n    }).catch(err => {\n      console.log(err)\n      resolve({\n        imageUrl: '',\n        initurl: nftUrl,\n        useurl: nftUrl\n      })\n    })\n  })\n}\n\nexport function getNftImage (nftUrl:any) {\n  if (nftUrl.indexOf('ipfs://') === 0) {\n    return getIpfsImg(nftUrl)\n  } else {\n    return getUriImg(nftUrl)\n  }\n}\n\nexport function getAllNftImage (list:any) {\n  const arr:any = []\n  return new Promise(resolve => {\n    for (const url of list) {\n      arr.push(getNftImage(url))\n    }\n    Promise.all(arr).then(res => {\n      resolve(res)\n    })\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}