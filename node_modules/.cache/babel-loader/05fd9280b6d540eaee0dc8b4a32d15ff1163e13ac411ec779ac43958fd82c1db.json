{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { WalletContext, WalletStatus } from '@terra-dev/use-wallet';\nimport { useEffect, useMemo, useState } from 'react';\nimport { WalletController } from '../controller';\nconst EMPTY_ARRAY = [];\nexport function WalletProvider(_ref) {\n  let {\n    children,\n    defaultNetwork,\n    walletConnectChainIds,\n    connectorOpts,\n    pushServerOpts,\n    createReadonlyWalletSession,\n    selectChromeExtension,\n    waitingChromeExtensionInstallCheck,\n    dangerously__chromeExtensionCompatibleBrowserCheck\n  } = _ref;\n  const [controller] = useState(() => new WalletController({\n    defaultNetwork,\n    walletConnectChainIds,\n    connectorOpts,\n    pushServerOpts,\n    createReadonlyWalletSession,\n    selectChromeExtension,\n    waitingChromeExtensionInstallCheck,\n    dangerously__chromeExtensionCompatibleBrowserCheck\n  }));\n  const [availableConnectTypes, setAvailableConnectTypes] = useState(() => []);\n  const [availableInstallTypes, setAvailableInstallTypes] = useState(() => []);\n  const [availableConnections, setAvailableConnections] = useState(() => []);\n  const [states, setStates] = useState(() => ({\n    status: WalletStatus.INITIALIZING,\n    network: defaultNetwork\n  }));\n  useEffect(() => {\n    const availableConnectTypesSubscription = controller.availableConnectTypes().subscribe({\n      next: value => {\n        setAvailableConnectTypes(value);\n      }\n    });\n    const availableInstallTypesSubscription = controller.availableInstallTypes().subscribe({\n      next: value => {\n        setAvailableInstallTypes(value);\n      }\n    });\n    const availableConnectionsSubscription = controller.availableConnections().subscribe({\n      next: value => {\n        setAvailableConnections(value);\n      }\n    });\n    const statesSubscription = controller.states().subscribe({\n      next: value => {\n        setStates(value);\n      }\n    });\n    return () => {\n      availableConnectTypesSubscription.unsubscribe();\n      availableInstallTypesSubscription.unsubscribe();\n      availableConnectionsSubscription.unsubscribe();\n      statesSubscription.unsubscribe();\n    };\n  }, [controller]);\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      status: states.status,\n      network: states.network,\n      wallets: states.status === WalletStatus.WALLET_CONNECTED ? states.wallets : EMPTY_ARRAY,\n      install: controller.install,\n      connect: controller.connect,\n      connectReadonly: controller.connectReadonly,\n      disconnect: controller.disconnect,\n      post: controller.post,\n      sign: controller.sign,\n      recheckStatus: controller.recheckStatus,\n      isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser\n    };\n  }, [availableConnectTypes, availableInstallTypes, availableConnections, controller.connect, controller.connectReadonly, controller.disconnect, controller.install, controller.post, controller.sign, controller.recheckStatus, controller.isChromeExtensionCompatibleBrowser, states]);\n  return _jsx(WalletContext.Provider, Object.assign({\n    value: state\n  }, {\n    children: children\n  }), void 0);\n}","map":{"version":3,"names":["WalletContext","WalletStatus","useEffect","useMemo","useState","WalletController","EMPTY_ARRAY","WalletProvider","_ref","children","defaultNetwork","walletConnectChainIds","connectorOpts","pushServerOpts","createReadonlyWalletSession","selectChromeExtension","waitingChromeExtensionInstallCheck","dangerously__chromeExtensionCompatibleBrowserCheck","controller","availableConnectTypes","setAvailableConnectTypes","availableInstallTypes","setAvailableInstallTypes","availableConnections","setAvailableConnections","states","setStates","status","INITIALIZING","network","availableConnectTypesSubscription","subscribe","next","value","availableInstallTypesSubscription","availableConnectionsSubscription","statesSubscription","unsubscribe","state","wallets","WALLET_CONNECTED","install","connect","connectReadonly","disconnect","post","sign","recheckStatus","isChromeExtensionCompatibleBrowser","_jsx","Provider","Object","assign"],"sources":["../../../../src/@terra-money/wallet-provider/react/WalletProvider.tsx"],"sourcesContent":["import {\n  Connection,\n  ConnectType,\n  Wallet,\n  WalletContext,\n  WalletInfo,\n  WalletStates,\n  WalletStatus,\n} from '@terra-dev/use-wallet';\nimport React, { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { WalletController, WalletControllerOptions } from '../controller';\n\nexport interface WalletProviderProps extends WalletControllerOptions {\n  children: ReactNode;\n}\n\nconst EMPTY_ARRAY: WalletInfo[] = [];\n\nexport function WalletProvider({\n  children,\n  defaultNetwork,\n  walletConnectChainIds,\n  connectorOpts,\n  pushServerOpts,\n  createReadonlyWalletSession,\n  selectChromeExtension,\n  waitingChromeExtensionInstallCheck,\n  dangerously__chromeExtensionCompatibleBrowserCheck,\n}: WalletProviderProps) {\n  const [controller] = useState<WalletController>(\n    () =>\n      new WalletController({\n        defaultNetwork,\n        walletConnectChainIds,\n        connectorOpts,\n        pushServerOpts,\n        createReadonlyWalletSession,\n        selectChromeExtension,\n        waitingChromeExtensionInstallCheck,\n        dangerously__chromeExtensionCompatibleBrowserCheck,\n      }),\n  );\n\n  const [availableConnectTypes, setAvailableConnectTypes] = useState<\n    ConnectType[]\n  >(() => []);\n\n  const [availableInstallTypes, setAvailableInstallTypes] = useState<\n    ConnectType[]\n  >(() => []);\n\n  const [availableConnections, setAvailableConnections] = useState<\n    Connection[]\n  >(() => []);\n\n  const [states, setStates] = useState<WalletStates>(() => ({\n    status: WalletStatus.INITIALIZING,\n    network: defaultNetwork,\n  }));\n\n  useEffect(() => {\n    const availableConnectTypesSubscription = controller\n      .availableConnectTypes()\n      .subscribe({\n        next: (value) => {\n          setAvailableConnectTypes(value);\n        },\n      });\n\n    const availableInstallTypesSubscription = controller\n      .availableInstallTypes()\n      .subscribe({\n        next: (value) => {\n          setAvailableInstallTypes(value);\n        },\n      });\n\n    const availableConnectionsSubscription = controller\n      .availableConnections()\n      .subscribe({\n        next: (value) => {\n          setAvailableConnections(value);\n        },\n      });\n\n    const statesSubscription = controller.states().subscribe({\n      next: (value) => {\n        setStates(value);\n      },\n    });\n\n    return () => {\n      availableConnectTypesSubscription.unsubscribe();\n      availableInstallTypesSubscription.unsubscribe();\n      availableConnectionsSubscription.unsubscribe();\n      statesSubscription.unsubscribe();\n    };\n  }, [controller]);\n\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      status: states.status,\n      network: states.network,\n      wallets:\n        states.status === WalletStatus.WALLET_CONNECTED\n          ? states.wallets\n          : EMPTY_ARRAY,\n      install: controller.install,\n      connect: controller.connect,\n      connectReadonly: controller.connectReadonly,\n      disconnect: controller.disconnect,\n      post: controller.post,\n      sign: controller.sign,\n      recheckStatus: controller.recheckStatus,\n      isChromeExtensionCompatibleBrowser:\n        controller.isChromeExtensionCompatibleBrowser,\n    };\n  }, [\n    availableConnectTypes,\n    availableInstallTypes,\n    availableConnections,\n    controller.connect,\n    controller.connectReadonly,\n    controller.disconnect,\n    controller.install,\n    controller.post,\n    controller.sign,\n    controller.recheckStatus,\n    controller.isChromeExtensionCompatibleBrowser,\n    states,\n  ]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}