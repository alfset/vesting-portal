{"ast":null,"code":"\"use strict\";\n\nvar utils = require('./utils/utils.js');\n\n/**\n * Admin API constructor.\n * Class encapsulate methods for admin APIs commands.\n * @see [Admin API documentation:]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md}.\n * @constructor\n *\n * @param {Neb} neb - Instance of Neb library.\n *\n * @example\n * var admin = new Admin( new Neb() );\n * // or just\n * var admin = new Neb().admin;\n */\nvar Admin = function (neb) {\n  this._setRequest(neb._request);\n};\n\n/**\n * @private\n * @param {Request} request - transport wrapper.\n */\nAdmin.prototype._setRequest = function (request) {\n  this._request = request;\n  this._path = '/admin';\n};\n\n/**\n * Method get info about nodes in Nebulas Network.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#nodeinfo}\n *\n * @return [nodeInfoObject]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#nodeinfo}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.nodeInfo().then(function(info) {\n * //code\n * });\n */\nAdmin.prototype.nodeInfo = function () {\n  return this._sendRequest(\"get\", \"/nodeinfo\", null);\n};\n\n/**\n * Method get list of available addresses.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#accounts}\n *\n * @return [accountsList]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#accounts}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.accounts().then(function(accounts) {\n * //code\n * });\n */\nAdmin.prototype.accounts = function () {\n  return this._sendRequest(\"get\", \"/accounts\", null);\n};\n\n/**\n * Method create a new account in Nebulas network with provided passphrase.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#newaccount}\n *\n * @param {Object} options\n * @param {Password} options.passphrase\n *\n * @return [address]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#newaccount}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.newAccount({passphrase: \"passphrase\"}).then(function(address) {\n * //code\n * });\n */\nAdmin.prototype.newAccount = function (options) {\n  options = utils.argumentsToObject(['passphrase'], arguments);\n  var params = {\n    \"passphrase\": options.passphrase\n  };\n  return this._sendRequest(\"post\", \"/account/new\", params);\n};\n\n/**\n * Method unlock account with provided passphrase.\n * After the default unlock time, the account will be locked.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#unlockaccount}\n *\n * @param {Object} options\n * @param {HexString} options.address\n * @param {Password} options.passphrase\n * @param {Number} options.duration\n *\n * @return [isUnLocked]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#unlockaccount}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.unlockAccount({\n *     address: \"n1cYKNHTeVW9v1NQRWuhZZn9ETbqAYozckh\",\n *     passphrase: \"passphrase\",\n *     duration: 1000000000\n * }).then(function(isUnLocked) {\n * //code\n * });\n */\nAdmin.prototype.unlockAccount = function (options) {\n  options = utils.argumentsToObject(['address', 'passphrase', 'duration'], arguments);\n  var params = {\n    \"address\": options.address,\n    \"passphrase\": options.passphrase,\n    \"duration\": options.duration\n  };\n  return this._sendRequest(\"post\", \"/account/unlock\", params);\n};\n\n/**\n * Method lock account.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#lockaccount}\n *\n * @param {Object} options\n * @param {HexString} options.address\n *\n * @return [isLocked]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#lockaccount}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.lockAccount({address: \"n1cYKNHTeVW9v1NQRWuhZZn9ETbqAYozckh\"}).then(function(isLocked) {\n * //code\n * });\n */\nAdmin.prototype.lockAccount = function (options) {\n  options = utils.argumentsToObject(['address'], arguments);\n  var params = {\n    \"address\": options.address\n  };\n  return this._sendRequest(\"post\", \"/account/lock\", params);\n};\n\n/**\n * Method wrap transaction sending functionality.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransaction}\n *\n * @param {TransactionOptions} options\n *\n * @return [Transcation hash and contract address]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransaction}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.sendTransaction({\n *    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000\n * }).then(function(tx) {\n * //code\n * });\n */\nAdmin.prototype.sendTransaction = function (options) {\n  options = utils.argumentsToObject(['from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract', 'binary'], arguments);\n  var params = {\n    \"from\": options.from,\n    \"to\": options.to,\n    \"value\": utils.toString(options.value),\n    \"nonce\": options.nonce,\n    \"gasPrice\": utils.toString(options.gasPrice),\n    \"gasLimit\": utils.toString(options.gasLimit),\n    \"contract\": options.contract,\n    \"binary\": options.binary\n  };\n  return this._sendRequest(\"post\", \"/transaction\", params);\n};\n\n/**\n * Method sign hash.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signhash}\n *\n * @param {Object} options\n * @param {HexString} options.address\n * @param {Base64} options.hash of hash bytes with base64 encode.\n * @param {UInt32} options.alg\n *\n * @return [data]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signhash}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.SignHash({\n *     address: \"n1cYKNHTeVW9v1NQRWuhZZn9ETbqAYozckh\",\n *     hash: \"OGQ5NjllZWY2ZWNhZDNjMjlhM2E2MjkyODBlNjg2Y2YwYzNmNWQ1YTg2YWZmM2NhMTIwMjBjOTIzYWRjNmM5Mg==\",\n *     alg: 1\n * }).then(function(data) {\n * //code\n * });\n */\nAdmin.prototype.signHash = function (options) {\n  options = utils.argumentsToObject(['address', 'hash', 'alg'], arguments);\n  var params = {\n    \"address\": options.address,\n    \"hash\": options.hash,\n    \"alg\": options.alg\n  };\n  return this._sendRequest(\"post\", \"/sign/hash\", params);\n};\n\n/**\n * Method sign transaction with passphrase.\n * The transaction's from addrees must be unlock before sign call.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signtransactionwithpassphrase}\n *\n * @param {TransactionOptions} options\n * @param {Password} options.passphrase\n *\n * @return [Transcation hash and contract address]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signtransactionwithpassphrase}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.signTransactionWithPassphrase({\n *    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000,\n *    passphrase: \"passphrase\"\n * }).then(function(tx) {\n * //code\n * });\n */\nAdmin.prototype.signTransactionWithPassphrase = function (options) {\n  options = utils.argumentsToObject(['from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract', 'binary', 'passphrase'], arguments);\n  var tx = {\n    \"from\": options.from,\n    \"to\": options.to,\n    \"value\": utils.toString(options.value),\n    \"nonce\": options.nonce,\n    \"gasPrice\": utils.toString(options.gasPrice),\n    \"gasLimit\": utils.toString(options.gasLimit),\n    \"contract\": options.contract,\n    \"binary\": options.binary\n  };\n  var params = {\n    \"transaction\": tx,\n    \"passphrase\": options.passphrase\n  };\n  return this._sendRequest(\"post\", \"/sign\", params);\n};\n\n/**\n * Method send transaction with passphrase.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransactionwithpassphrase}\n *\n * @param {TransactionOptions} options\n * @param {Password} options.passphrase\n *\n * @return [data]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransactionwithpassphrase}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.sendTransactionWithPassphrase({\n *    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000,\n *    passphrase: \"passphrase\"\n * }).then(function(tx) {\n * //code\n * });\n */\nAdmin.prototype.sendTransactionWithPassphrase = function (options) {\n  options = utils.argumentsToObject(['from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract', 'binary', 'passphrase'], arguments);\n  var tx = {\n    \"from\": options.from,\n    \"to\": options.to,\n    \"value\": utils.toString(options.value),\n    \"nonce\": options.nonce,\n    \"gasPrice\": utils.toString(options.gasPrice),\n    \"gasLimit\": utils.toString(options.gasLimit),\n    \"contract\": options.contract,\n    \"binary\": options.binary\n  };\n  var params = {\n    \"transaction\": tx,\n    \"passphrase\": options.passphrase\n  };\n  return this._sendRequest(\"post\", \"/transactionWithPassphrase\", params);\n};\n\n/**\n * Method start listen provided port.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#startpprof}\n *\n * @param {Object} options\n * @param {String} options.listen - Listen port.\n *\n * @return [isListenStrted]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#startpprof}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.startPprof({listen: '8080'}).then(function(isListenStrted) {\n * //code\n * });\n */\nAdmin.prototype.startPprof = function (options) {\n  options = utils.argumentsToObject(['listen'], arguments);\n  var params = {\n    \"listen\": options.listen\n  };\n  return this._sendRequest(\"post\", \"/pprof\", params);\n};\n\n/**\n * Method get config of node in Nebulas Network.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#getConfig}\n *\n * @return [config]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#getConfig}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.getConfig().then(function(info) {\n * //code\n * });\n */\nAdmin.prototype.getConfig = function () {\n  return this._sendRequest(\"get\", \"/getConfig\", null);\n};\nAdmin.prototype._sendRequest = function (method, api, params, callback) {\n  var action = this._path + api;\n  if (typeof callback === \"function\") {\n    return this._request.asyncRequest(method, action, params, callback);\n  } else {\n    return this._request.request(method, action, params);\n  }\n};\nmodule.exports = Admin;","map":{"version":3,"names":["utils","require","Admin","neb","_setRequest","_request","prototype","request","_path","nodeInfo","_sendRequest","accounts","newAccount","options","argumentsToObject","arguments","params","passphrase","unlockAccount","address","duration","lockAccount","sendTransaction","from","to","toString","value","nonce","gasPrice","gasLimit","contract","binary","signHash","hash","alg","signTransactionWithPassphrase","tx","sendTransactionWithPassphrase","startPprof","listen","getConfig","method","api","callback","action","asyncRequest","module","exports"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/nebulas/lib/admin.js"],"sourcesContent":["\n\"use strict\";\n\nvar utils = require('./utils/utils.js');\n\n/**\n * Admin API constructor.\n * Class encapsulate methods for admin APIs commands.\n * @see [Admin API documentation:]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md}.\n * @constructor\n *\n * @param {Neb} neb - Instance of Neb library.\n *\n * @example\n * var admin = new Admin( new Neb() );\n * // or just\n * var admin = new Neb().admin;\n */\nvar Admin = function (neb) {\n    this._setRequest(neb._request);\n};\n\n/**\n * @private\n * @param {Request} request - transport wrapper.\n */\nAdmin.prototype._setRequest = function (request) {\n    this._request = request;\n    this._path = '/admin';\n};\n\n/**\n * Method get info about nodes in Nebulas Network.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#nodeinfo}\n *\n * @return [nodeInfoObject]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#nodeinfo}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.nodeInfo().then(function(info) {\n * //code\n * });\n */\nAdmin.prototype.nodeInfo = function () {\n    return this._sendRequest(\"get\", \"/nodeinfo\", null);\n};\n\n/**\n * Method get list of available addresses.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#accounts}\n *\n * @return [accountsList]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#accounts}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.accounts().then(function(accounts) {\n * //code\n * });\n */\nAdmin.prototype.accounts = function () {\n    return this._sendRequest(\"get\", \"/accounts\", null);\n};\n\n/**\n * Method create a new account in Nebulas network with provided passphrase.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#newaccount}\n *\n * @param {Object} options\n * @param {Password} options.passphrase\n *\n * @return [address]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#newaccount}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.newAccount({passphrase: \"passphrase\"}).then(function(address) {\n * //code\n * });\n */\nAdmin.prototype.newAccount = function (options) {\n    options = utils.argumentsToObject(['passphrase'], arguments);\n    var params = { \"passphrase\": options.passphrase };\n    return this._sendRequest(\"post\", \"/account/new\", params);\n};\n\n/**\n * Method unlock account with provided passphrase.\n * After the default unlock time, the account will be locked.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#unlockaccount}\n *\n * @param {Object} options\n * @param {HexString} options.address\n * @param {Password} options.passphrase\n * @param {Number} options.duration\n *\n * @return [isUnLocked]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#unlockaccount}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.unlockAccount({\n *     address: \"n1cYKNHTeVW9v1NQRWuhZZn9ETbqAYozckh\",\n *     passphrase: \"passphrase\",\n *     duration: 1000000000\n * }).then(function(isUnLocked) {\n * //code\n * });\n */\nAdmin.prototype.unlockAccount = function (options) {\n    options = utils.argumentsToObject(['address', 'passphrase', 'duration'], arguments);\n    var params = {\n        \"address\": options.address,\n        \"passphrase\": options.passphrase,\n        \"duration\": options.duration\n    };\n    return this._sendRequest(\"post\", \"/account/unlock\", params);\n};\n\n/**\n * Method lock account.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#lockaccount}\n *\n * @param {Object} options\n * @param {HexString} options.address\n *\n * @return [isLocked]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#lockaccount}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.lockAccount({address: \"n1cYKNHTeVW9v1NQRWuhZZn9ETbqAYozckh\"}).then(function(isLocked) {\n * //code\n * });\n */\nAdmin.prototype.lockAccount = function (options) {\n    options = utils.argumentsToObject(['address'], arguments);\n    var params = { \"address\": options.address };\n    return this._sendRequest(\"post\", \"/account/lock\", params);\n};\n\n/**\n * Method wrap transaction sending functionality.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransaction}\n *\n * @param {TransactionOptions} options\n *\n * @return [Transcation hash and contract address]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransaction}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.sendTransaction({\n *    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000\n * }).then(function(tx) {\n * //code\n * });\n */\nAdmin.prototype.sendTransaction = function (options) {\n    options = utils.argumentsToObject(['from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract', 'binary'], arguments);\n    var params = {\n        \"from\": options.from,\n        \"to\": options.to,\n        \"value\": utils.toString(options.value),\n        \"nonce\": options.nonce,\n        \"gasPrice\": utils.toString(options.gasPrice),\n        \"gasLimit\": utils.toString(options.gasLimit),\n        \"contract\": options.contract,\n        \"binary\": options.binary\n    };\n    return this._sendRequest(\"post\", \"/transaction\", params);\n};\n\n/**\n * Method sign hash.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signhash}\n *\n * @param {Object} options\n * @param {HexString} options.address\n * @param {Base64} options.hash of hash bytes with base64 encode.\n * @param {UInt32} options.alg\n *\n * @return [data]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signhash}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.SignHash({\n *     address: \"n1cYKNHTeVW9v1NQRWuhZZn9ETbqAYozckh\",\n *     hash: \"OGQ5NjllZWY2ZWNhZDNjMjlhM2E2MjkyODBlNjg2Y2YwYzNmNWQ1YTg2YWZmM2NhMTIwMjBjOTIzYWRjNmM5Mg==\",\n *     alg: 1\n * }).then(function(data) {\n * //code\n * });\n */\nAdmin.prototype.signHash = function (options) {\n   options = utils.argumentsToObject(['address', 'hash', 'alg'], arguments);\n    var params = {\n        \"address\": options.address,\n        \"hash\": options.hash,\n        \"alg\": options.alg\n    };\n    return this._sendRequest(\"post\", \"/sign/hash\", params);\n};\n\n/**\n * Method sign transaction with passphrase.\n * The transaction's from addrees must be unlock before sign call.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signtransactionwithpassphrase}\n *\n * @param {TransactionOptions} options\n * @param {Password} options.passphrase\n *\n * @return [Transcation hash and contract address]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#signtransactionwithpassphrase}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.signTransactionWithPassphrase({\n *    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000,\n *    passphrase: \"passphrase\"\n * }).then(function(tx) {\n * //code\n * });\n */\nAdmin.prototype.signTransactionWithPassphrase = function (options) {\n    options = utils.argumentsToObject(['from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract', 'binary', 'passphrase'], arguments);\n    var tx = {\n        \"from\": options.from,\n        \"to\": options.to,\n        \"value\": utils.toString(options.value),\n        \"nonce\": options.nonce,\n        \"gasPrice\": utils.toString(options.gasPrice),\n        \"gasLimit\": utils.toString(options.gasLimit),\n        \"contract\": options.contract,\n        \"binary\": options.binary\n    };\n    var params = {\n        \"transaction\": tx,\n        \"passphrase\": options.passphrase\n    };\n    return this._sendRequest(\"post\", \"/sign\", params);\n};\n\n/**\n * Method send transaction with passphrase.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransactionwithpassphrase}\n *\n * @param {TransactionOptions} options\n * @param {Password} options.passphrase\n *\n * @return [data]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#sendtransactionwithpassphrase}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.sendTransactionWithPassphrase({\n *    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000,\n *    passphrase: \"passphrase\"\n * }).then(function(tx) {\n * //code\n * });\n */\nAdmin.prototype.sendTransactionWithPassphrase = function (options) {\n    options = utils.argumentsToObject(['from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract', 'binary', 'passphrase'], arguments);\n    var tx = {\n        \"from\": options.from,\n        \"to\": options.to,\n        \"value\": utils.toString(options.value),\n        \"nonce\": options.nonce,\n        \"gasPrice\": utils.toString(options.gasPrice),\n        \"gasLimit\": utils.toString(options.gasLimit),\n        \"contract\": options.contract,\n        \"binary\": options.binary\n    };\n    var params = {\n        \"transaction\": tx,\n        \"passphrase\": options.passphrase\n    };\n    return this._sendRequest(\"post\", \"/transactionWithPassphrase\", params);\n};\n\n/**\n * Method start listen provided port.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#startpprof}\n *\n * @param {Object} options\n * @param {String} options.listen - Listen port.\n *\n * @return [isListenStrted]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#startpprof}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.startPprof({listen: '8080'}).then(function(isListenStrted) {\n * //code\n * });\n */\nAdmin.prototype.startPprof = function (options) {\n    options = utils.argumentsToObject(['listen'], arguments);\n    var params = { \"listen\": options.listen };\n    return this._sendRequest(\"post\", \"/pprof\", params);\n};\n\n/**\n * Method get config of node in Nebulas Network.\n * @see {@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#getConfig}\n *\n * @return [config]{@link https://github.com/nebulasio/wiki/blob/master/rpc_admin.md#getConfig}\n *\n * @example\n * var admin = new Neb().admin;\n * admin.getConfig().then(function(info) {\n * //code\n * });\n */\nAdmin.prototype.getConfig = function () {\n    return this._sendRequest(\"get\", \"/getConfig\", null);\n};\n\nAdmin.prototype._sendRequest = function (method, api, params, callback) {\n    var action = this._path + api;\n    if (typeof callback === \"function\") {\n        return this._request.asyncRequest(method, action, params, callback);\n    } else {\n        return this._request.request(method, action, params);\n    }\n};\n\nmodule.exports = Admin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}