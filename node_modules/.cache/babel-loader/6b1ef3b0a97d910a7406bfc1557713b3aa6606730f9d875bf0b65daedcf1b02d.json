{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolAsset = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _clone = require('lodash/clone');\nvar _clone2 = _interopRequireDefault(_clone);\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _asset = require('./asset');\nvar _get_liquidity_pool_id = require('./get_liquidity_pool_id');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * LiquidityPoolAsset class represents a liquidity pool trustline change.\n *\n * @constructor\n * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.\n */\nvar LiquidityPoolAsset = exports.LiquidityPoolAsset = function () {\n  function LiquidityPoolAsset(assetA, assetB, fee) {\n    _classCallCheck(this, LiquidityPoolAsset);\n    if (!assetA || !(assetA instanceof _asset.Asset)) {\n      throw new Error('assetA is invalid');\n    }\n    if (!assetB || !(assetB instanceof _asset.Asset)) {\n      throw new Error('assetB is invalid');\n    }\n    if (_asset.Asset.compare(assetA, assetB) !== -1) {\n      throw new Error('Assets are not in lexicographic order');\n    }\n    if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) {\n      throw new Error('fee is invalid');\n    }\n    this.assetA = assetA;\n    this.assetB = assetB;\n    this.fee = fee;\n  }\n\n  /**\n   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object\n   * representation.\n   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolAsset}\n   */\n\n  _createClass(LiquidityPoolAsset, [{\n    key: 'toXDRObject',\n    /**\n     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.\n     *\n     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`\n     * please refer to the\n     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.\n     *\n     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.\n     */\n    value: function toXDRObject() {\n      var lpConstantProductParamsXdr = new _xdr2.default.LiquidityPoolConstantProductParameters({\n        assetA: this.assetA.toXDRObject(),\n        assetB: this.assetB.toXDRObject(),\n        fee: this.fee\n      });\n      var lpParamsXdr = new _xdr2.default.LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr);\n      return new _xdr2.default.ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);\n    }\n\n    /**\n     * @returns {LiquidityPoolParameters} Liquidity pool parameters.\n     */\n  }, {\n    key: 'getLiquidityPoolParameters',\n    value: function getLiquidityPoolParameters() {\n      return (0, _clone2.default)({\n        assetA: this.assetA,\n        assetB: this.assetB,\n        fee: this.fee\n      });\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: 'equals',\n    value: function equals(other) {\n      return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex');\n      return 'liquidity_pool:' + poolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(ctAssetXdr) {\n      var assetType = ctAssetXdr.switch();\n      if (assetType === _xdr2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();\n        return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());\n      }\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n  return LiquidityPoolAsset;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","LiquidityPoolAsset","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_clone","require","_clone2","_interopRequireDefault","_xdr","_xdr2","_asset","_get_liquidity_pool_id","obj","__esModule","default","_classCallCheck","instance","TypeError","assetA","assetB","fee","Asset","Error","compare","LiquidityPoolFeeV18","toXDRObject","lpConstantProductParamsXdr","LiquidityPoolConstantProductParameters","lpParamsXdr","LiquidityPoolParameters","ChangeTrustAsset","getLiquidityPoolParameters","getAssetType","equals","other","toString","poolId","getLiquidityPoolId","fromOperation","ctAssetXdr","assetType","switch","AssetType","assetTypePoolShare","liquidityPoolParameters","liquidityPool","constantProduct","name"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/liquidity_pool_asset.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolAsset = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _asset = require('./asset');\n\nvar _get_liquidity_pool_id = require('./get_liquidity_pool_id');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * LiquidityPoolAsset class represents a liquidity pool trustline change.\n *\n * @constructor\n * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.\n */\nvar LiquidityPoolAsset = exports.LiquidityPoolAsset = function () {\n  function LiquidityPoolAsset(assetA, assetB, fee) {\n    _classCallCheck(this, LiquidityPoolAsset);\n\n    if (!assetA || !(assetA instanceof _asset.Asset)) {\n      throw new Error('assetA is invalid');\n    }\n    if (!assetB || !(assetB instanceof _asset.Asset)) {\n      throw new Error('assetB is invalid');\n    }\n    if (_asset.Asset.compare(assetA, assetB) !== -1) {\n      throw new Error('Assets are not in lexicographic order');\n    }\n    if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) {\n      throw new Error('fee is invalid');\n    }\n\n    this.assetA = assetA;\n    this.assetB = assetB;\n    this.fee = fee;\n  }\n\n  /**\n   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object\n   * representation.\n   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolAsset}\n   */\n\n\n  _createClass(LiquidityPoolAsset, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.\n     *\n     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`\n     * please refer to the\n     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.\n     *\n     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.\n     */\n    value: function toXDRObject() {\n      var lpConstantProductParamsXdr = new _xdr2.default.LiquidityPoolConstantProductParameters({\n        assetA: this.assetA.toXDRObject(),\n        assetB: this.assetB.toXDRObject(),\n        fee: this.fee\n      });\n      var lpParamsXdr = new _xdr2.default.LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr);\n      return new _xdr2.default.ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);\n    }\n\n    /**\n     * @returns {LiquidityPoolParameters} Liquidity pool parameters.\n     */\n\n  }, {\n    key: 'getLiquidityPoolParameters',\n    value: function getLiquidityPoolParameters() {\n      return (0, _clone2.default)({\n        assetA: this.assetA,\n        assetB: this.assetB,\n        fee: this.fee\n      });\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(other) {\n      return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex');\n      return 'liquidity_pool:' + poolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(ctAssetXdr) {\n      var assetType = ctAssetXdr.switch();\n      if (assetType === _xdr2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();\n        return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());\n      }\n\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n\n  return LiquidityPoolAsset;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}