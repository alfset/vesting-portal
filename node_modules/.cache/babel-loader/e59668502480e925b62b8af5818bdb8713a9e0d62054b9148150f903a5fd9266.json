{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignerKey = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _strkey = require('./strkey');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * A container class with helpers to convert between signer keys\n * (`xdr.SignerKey`) and {@link StrKey}s.\n *\n * It's primarly used for manipulating the `extraSigners` precondition on a\n * {@link Transaction}.\n *\n * @see {@link TransactionBuilder.setExtraSigners}\n */\nvar SignerKey = exports.SignerKey = function () {\n  function SignerKey() {\n    _classCallCheck(this, SignerKey);\n  }\n  _createClass(SignerKey, null, [{\n    key: 'decodeAddress',\n    /**\n     * Decodes a StrKey address into an xdr.SignerKey instance.\n     *\n     * Only ED25519 public keys (G...), pre-auth transactions (T...), hashes\n     * (H...), and signed payloads (P...) can be signer keys.\n     *\n     * @param   {string} address  a StrKey-encoded signer address\n     * @returns {xdr.SignerKey}\n     */\n    value: function decodeAddress(address) {\n      var signerKeyMap = {\n        ed25519PublicKey: _xdr2.default.SignerKey.signerKeyTypeEd25519,\n        preAuthTx: _xdr2.default.SignerKey.signerKeyTypePreAuthTx,\n        sha256Hash: _xdr2.default.SignerKey.signerKeyTypeHashX,\n        signedPayload: _xdr2.default.SignerKey.signerKeyTypeEd25519SignedPayload\n      };\n      var vb = _strkey.StrKey.getVersionByteForPrefix(address);\n      var encoder = signerKeyMap[vb];\n      if (!encoder) {\n        throw new Error('invalid signer key type (' + vb + ')');\n      }\n      var raw = (0, _strkey.decodeCheck)(vb, address);\n      switch (vb) {\n        case 'signedPayload':\n          return encoder(new _xdr2.default.SignerKeyEd25519SignedPayload({\n            ed25519: raw.slice(0, 32),\n            payload: raw.slice(32 + 4)\n          }));\n        case 'ed25519PublicKey': // falls through\n        case 'preAuthTx': // falls through\n        case 'sha256Hash': // falls through\n        default:\n          return encoder(raw);\n      }\n    }\n\n    /**\n     * Encodes a signer key into its StrKey equivalent.\n     *\n     * @param   {xdr.SignerKey} signerKey   the signer\n     * @returns {string} the StrKey representation of the signer\n     */\n  }, {\n    key: 'encodeSignerKey',\n    value: function encodeSignerKey(signerKey) {\n      var strkeyType = void 0;\n      var raw = void 0;\n      switch (signerKey.switch()) {\n        case _xdr2.default.SignerKeyType.signerKeyTypeEd25519():\n          strkeyType = 'ed25519PublicKey';\n          raw = signerKey.value();\n          break;\n        case _xdr2.default.SignerKeyType.signerKeyTypePreAuthTx():\n          strkeyType = 'preAuthTx';\n          raw = signerKey.value();\n          break;\n        case _xdr2.default.SignerKeyType.signerKeyTypeHashX():\n          strkeyType = 'sha256Hash';\n          raw = signerKey.value();\n          break;\n        case _xdr2.default.SignerKeyType.signerKeyTypeEd25519SignedPayload():\n          strkeyType = 'signedPayload';\n          raw = signerKey.ed25519SignedPayload().toXDR('raw');\n          break;\n        default:\n          throw new Error('invalid SignerKey (type: ' + signerKey.switch() + ')');\n      }\n      return (0, _strkey.encodeCheck)(strkeyType, raw);\n    }\n  }]);\n  return SignerKey;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","SignerKey","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_xdr","require","_xdr2","_interopRequireDefault","_strkey","obj","__esModule","default","_classCallCheck","instance","TypeError","decodeAddress","address","signerKeyMap","ed25519PublicKey","signerKeyTypeEd25519","preAuthTx","signerKeyTypePreAuthTx","sha256Hash","signerKeyTypeHashX","signedPayload","signerKeyTypeEd25519SignedPayload","vb","StrKey","getVersionByteForPrefix","encoder","Error","raw","decodeCheck","SignerKeyEd25519SignedPayload","ed25519","slice","payload","encodeSignerKey","signerKey","strkeyType","switch","SignerKeyType","ed25519SignedPayload","toXDR","encodeCheck"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/signerkey.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignerKey = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A container class with helpers to convert between signer keys\n * (`xdr.SignerKey`) and {@link StrKey}s.\n *\n * It's primarly used for manipulating the `extraSigners` precondition on a\n * {@link Transaction}.\n *\n * @see {@link TransactionBuilder.setExtraSigners}\n */\nvar SignerKey = exports.SignerKey = function () {\n  function SignerKey() {\n    _classCallCheck(this, SignerKey);\n  }\n\n  _createClass(SignerKey, null, [{\n    key: 'decodeAddress',\n\n    /**\n     * Decodes a StrKey address into an xdr.SignerKey instance.\n     *\n     * Only ED25519 public keys (G...), pre-auth transactions (T...), hashes\n     * (H...), and signed payloads (P...) can be signer keys.\n     *\n     * @param   {string} address  a StrKey-encoded signer address\n     * @returns {xdr.SignerKey}\n     */\n    value: function decodeAddress(address) {\n      var signerKeyMap = {\n        ed25519PublicKey: _xdr2.default.SignerKey.signerKeyTypeEd25519,\n        preAuthTx: _xdr2.default.SignerKey.signerKeyTypePreAuthTx,\n        sha256Hash: _xdr2.default.SignerKey.signerKeyTypeHashX,\n        signedPayload: _xdr2.default.SignerKey.signerKeyTypeEd25519SignedPayload\n      };\n\n      var vb = _strkey.StrKey.getVersionByteForPrefix(address);\n      var encoder = signerKeyMap[vb];\n      if (!encoder) {\n        throw new Error('invalid signer key type (' + vb + ')');\n      }\n\n      var raw = (0, _strkey.decodeCheck)(vb, address);\n      switch (vb) {\n        case 'signedPayload':\n          return encoder(new _xdr2.default.SignerKeyEd25519SignedPayload({\n            ed25519: raw.slice(0, 32),\n            payload: raw.slice(32 + 4)\n          }));\n\n        case 'ed25519PublicKey': // falls through\n        case 'preAuthTx': // falls through\n        case 'sha256Hash': // falls through\n        default:\n          return encoder(raw);\n      }\n    }\n\n    /**\n     * Encodes a signer key into its StrKey equivalent.\n     *\n     * @param   {xdr.SignerKey} signerKey   the signer\n     * @returns {string} the StrKey representation of the signer\n     */\n\n  }, {\n    key: 'encodeSignerKey',\n    value: function encodeSignerKey(signerKey) {\n      var strkeyType = void 0;\n      var raw = void 0;\n\n      switch (signerKey.switch()) {\n        case _xdr2.default.SignerKeyType.signerKeyTypeEd25519():\n          strkeyType = 'ed25519PublicKey';\n          raw = signerKey.value();\n          break;\n\n        case _xdr2.default.SignerKeyType.signerKeyTypePreAuthTx():\n          strkeyType = 'preAuthTx';\n          raw = signerKey.value();\n          break;\n\n        case _xdr2.default.SignerKeyType.signerKeyTypeHashX():\n          strkeyType = 'sha256Hash';\n          raw = signerKey.value();\n          break;\n\n        case _xdr2.default.SignerKeyType.signerKeyTypeEd25519SignedPayload():\n          strkeyType = 'signedPayload';\n          raw = signerKey.ed25519SignedPayload().toXDR('raw');\n          break;\n\n        default:\n          throw new Error('invalid SignerKey (type: ' + signerKey.switch() + ')');\n      }\n\n      return (0, _strkey.encodeCheck)(strkeyType, raw);\n    }\n  }]);\n\n  return SignerKey;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}