{"ast":null,"code":"import { updateTerraHash } from '../terra';\nimport { updateNasHash } from '../nas';\nimport { updateNearHash } from '../near';\nimport { updateXlmHash } from '../stellar';\nimport { getTRXTxnsStatus } from '../trx';\nimport { getADATxnsStatus } from '../cardano';\nimport { getFLOWTxnsStatus } from '../flow';\nimport { getSolTxnsStatus } from '../solana';\nimport { getAptTxnsStatus } from '../apt';\nimport { getBtcHash } from '../btc';\nimport { getAtomTxnsStatus } from '../atom';\nimport { ChainId } from '../../config/chainConfig/chainId';\nexport function getHashInfo(hash, chainId) {\n  return new Promise(resolve => {\n    if ([ChainId.TERRA].includes(chainId)) {\n      updateTerraHash(hash).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.NAS].includes(chainId)) {\n      updateNasHash(hash).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) {\n      updateNearHash(hash, chainId).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(chainId)) {\n      updateXlmHash(hash, chainId).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) {\n      getTRXTxnsStatus(hash).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(chainId)) {\n      getADATxnsStatus(hash, chainId).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      getFLOWTxnsStatus(hash, chainId).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(chainId)) {\n      getSolTxnsStatus(hash, chainId).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n      getAptTxnsStatus(hash, chainId).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(chainId)) {\n      getBtcHash(hash, chainId).then(res => {\n        resolve(res);\n      });\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n      getAtomTxnsStatus(hash, chainId).then(res => {\n        resolve(res);\n      });\n    }\n  });\n}","map":{"version":3,"names":["updateTerraHash","updateNasHash","updateNearHash","updateXlmHash","getTRXTxnsStatus","getADATxnsStatus","getFLOWTxnsStatus","getSolTxnsStatus","getAptTxnsStatus","getBtcHash","getAtomTxnsStatus","ChainId","getHashInfo","hash","chainId","Promise","resolve","TERRA","includes","then","res","NAS","NEAR","NEAR_TEST","XLM","XLM_TEST","TRX","TRX_TEST","ADA","ADA_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","APT","APT_TEST","BTC","BTC_TEST","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/getHash/index.ts"],"sourcesContent":["import {updateTerraHash} from '../terra'\nimport {updateNasHash} from '../nas'\nimport {updateNearHash} from '../near'\nimport {updateXlmHash} from '../stellar'\nimport {getTRXTxnsStatus} from '../trx'\nimport {getADATxnsStatus} from '../cardano'\nimport {getFLOWTxnsStatus} from '../flow'\nimport {getSolTxnsStatus} from '../solana'\nimport {getAptTxnsStatus} from '../apt'\nimport {getBtcHash} from '../btc'\nimport {getAtomTxnsStatus} from '../atom'\n\nimport { ChainId } from '../../config/chainConfig/chainId'\n\nexport function getHashInfo(hash: any, chainId: any) {\n  return new Promise(resolve => {\n    if ([ChainId.TERRA].includes(chainId)) {\n      updateTerraHash(hash).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.NAS].includes(chainId)) {\n      updateNasHash(hash).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) {\n      updateNearHash(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(chainId)) {\n      updateXlmHash(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) {\n      getTRXTxnsStatus(hash).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(chainId)) {\n      getADATxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      getFLOWTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(chainId)) {\n      getSolTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n      getAptTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(chainId)) {\n      getBtcHash(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n      getAtomTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    }\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}