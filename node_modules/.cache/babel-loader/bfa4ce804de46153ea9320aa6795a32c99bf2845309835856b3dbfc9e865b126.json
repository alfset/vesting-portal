{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgAggregateExchangeRateVote = exports.aggregateVoteHash = void 0;\nvar SHA256_1 = require(\"jscrypto/SHA256\");\nvar json_1 = require(\"../../../util/json\");\nvar MsgAggregateExchangeRatePrevote_1 = require(\"./MsgAggregateExchangeRatePrevote\");\nvar Coins_1 = require(\"../../Coins\");\nvar any_1 = require(\"@terra-money/terra.proto/google/protobuf/any\");\nvar tx_1 = require(\"@classic-terra/terra.proto/terra/oracle/v1beta1/tx\");\n/**\n * Calculates the aggregate vote hash\n * @param exchangeRates exchange rates\n * @param salt salt\n * @param validator validator operator address\n */\nfunction aggregateVoteHash(exchangeRates, salt, validator) {\n  var payload = \"\".concat(salt, \":\").concat(exchangeRates.toDecCoins().toString(), \":\").concat(validator);\n  return SHA256_1.SHA256.hash(payload).toString().substring(0, 40);\n}\nexports.aggregateVoteHash = aggregateVoteHash;\n/**\n * Aggregate analog of MsgExchangeRateVote: submits an oracle vote for multiple denominations\n * through a single message rather than multiple messages.\n */\nvar MsgAggregateExchangeRateVote = /** @class */function (_super) {\n  __extends(MsgAggregateExchangeRateVote, _super);\n  /**\n   * @param exchange_rate exchange rates\n   * @param salt salt\n   * @param feeder feeder address\n   * @param validator validator operator address\n   */\n  function MsgAggregateExchangeRateVote(exchange_rates, salt, feeder, validator) {\n    var _this = _super.call(this) || this;\n    _this.salt = salt;\n    _this.feeder = feeder;\n    _this.validator = validator;\n    _this.exchange_rates = new Coins_1.Coins(exchange_rates).toDecCoins();\n    return _this;\n  }\n  MsgAggregateExchangeRateVote.fromAmino = function (data, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = data.value,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    var xrs = Coins_1.Coins.fromString(exchange_rates);\n    return new MsgAggregateExchangeRateVote(xrs, salt, feeder, validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.toAmino = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    return {\n      type: 'oracle/MsgAggregateExchangeRateVote',\n      value: {\n        exchange_rates: exchange_rates.toDecCoins().toString(),\n        salt: salt,\n        feeder: feeder,\n        validator: validator\n      }\n    };\n  };\n  MsgAggregateExchangeRateVote.fromData = function (proto, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var exchange_rates = proto.exchange_rates,\n      salt = proto.salt,\n      feeder = proto.feeder,\n      validator = proto.validator;\n    var xrs = Coins_1.Coins.fromString(exchange_rates);\n    return new MsgAggregateExchangeRateVote(xrs, salt, feeder, validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.toData = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    return {\n      '@type': '/terra.oracle.v1beta1.MsgAggregateExchangeRateVote',\n      exchange_rates: exchange_rates.toDecCoins().toString(),\n      salt: salt,\n      feeder: feeder,\n      validator: validator\n    };\n  };\n  MsgAggregateExchangeRateVote.fromProto = function (proto, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var xrs = Coins_1.Coins.fromString(proto.exchangeRates);\n    return new MsgAggregateExchangeRateVote(xrs, proto.salt, proto.feeder, proto.validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.toProto = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    var _a = this,\n      exchange_rates = _a.exchange_rates,\n      salt = _a.salt,\n      feeder = _a.feeder,\n      validator = _a.validator;\n    return tx_1.MsgAggregateExchangeRateVote.fromPartial({\n      exchangeRates: exchange_rates.toString(),\n      feeder: feeder,\n      salt: salt,\n      validator: validator\n    });\n  };\n  /**\n   * Gets the aggregate vote hash for the MsgAggregateExchangeRateVote, for the creation of\n   *  the corresponding prevote message.\n   */\n  MsgAggregateExchangeRateVote.prototype.getAggregateVoteHash = function () {\n    return aggregateVoteHash(this.exchange_rates, this.salt, this.validator);\n  };\n  /**\n   * You can generate the corresponding aggregate prevote message.\n   * This will return a [[MsgAggregateExchangeRatePrevote]] with the proper vote hash and values,\n   * determined by the current attributes of the object.\n   *\n   * @returns the corresponding prevote message to send\n   */\n  MsgAggregateExchangeRateVote.prototype.getPrevote = function () {\n    return new MsgAggregateExchangeRatePrevote_1.MsgAggregateExchangeRatePrevote(this.getAggregateVoteHash(), this.feeder, this.validator);\n  };\n  MsgAggregateExchangeRateVote.prototype.packAny = function (isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return any_1.Any.fromPartial({\n      typeUrl: '/terra.oracle.v1beta1.MsgAggregateExchangeRateVote',\n      value: tx_1.MsgAggregateExchangeRateVote.encode(this.toProto(isClassic)).finish()\n    });\n  };\n  MsgAggregateExchangeRateVote.unpackAny = function (msgAny, isClassic) {\n    if (!isClassic) {\n      throw new Error('Not supported for the network');\n    }\n    return MsgAggregateExchangeRateVote.fromProto(tx_1.MsgAggregateExchangeRateVote.decode(msgAny.value), isClassic);\n  };\n  return MsgAggregateExchangeRateVote;\n}(json_1.JSONSerializable);\nexports.MsgAggregateExchangeRateVote = MsgAggregateExchangeRateVote;","map":{"version":3,"names":["SHA256_1","require","json_1","MsgAggregateExchangeRatePrevote_1","Coins_1","any_1","tx_1","aggregateVoteHash","exchangeRates","salt","validator","payload","concat","toDecCoins","toString","SHA256","hash","substring","exports","MsgAggregateExchangeRateVote","_super","__extends","exchange_rates","feeder","_this","call","Coins","fromAmino","data","isClassic","Error","_a","value","xrs","fromString","prototype","toAmino","type","fromData","proto","toData","fromProto","toProto","fromPartial","getAggregateVoteHash","getPrevote","MsgAggregateExchangeRatePrevote","packAny","Any","typeUrl","encode","finish","unpackAny","msgAny","decode","JSONSerializable"],"sources":["../../../../src/core/oracle/msgs/MsgAggregateExchangeRateVote.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}