{"ast":null,"code":"import React from 'react';\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar GestureFlag;\n(function (GestureFlag) {\n  GestureFlag[\"OnStart\"] = \"start\";\n  GestureFlag[\"OnChange\"] = \"change\";\n  GestureFlag[\"OnEnd\"] = \"end\";\n})(GestureFlag || (GestureFlag = {}));\n\n// blank function\nvar noop = function noop() {}; // returns a function that chains all functions given as parameters\n\nvar chainFns = function chainFns() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return fns.forEach(function (fn) {\n      return fn.apply(void 0, args);\n    });\n  };\n}; // vector add\n\nvar addV = function addV(v1, v2) {\n  return v1.map(function (v, i) {\n    return v + v2[i];\n  });\n}; // vector substract\n\nvar subV = function subV(v1, v2) {\n  return v1.map(function (v, i) {\n    return v - v2[i];\n  });\n};\nvar setListeners = function setListeners(add) {\n  return function (el, listeners, options) {\n    var action = add ? 'addEventListener' : 'removeEventListener';\n    listeners.forEach(function (_ref) {\n      var type = _ref[0],\n        fn = _ref[1];\n      return el[action](type, fn, options);\n    });\n  };\n};\nvar addListeners = /*#__PURE__*/\nsetListeners(true);\nvar removeListeners = /*#__PURE__*/\nsetListeners(false);\n/**\r\n * Gets modifier keys from event\r\n * @param event\r\n * @returns modifier keys\r\n */\n\nfunction getModifierKeys(event) {\n  var shiftKey = event.shiftKey,\n    altKey = event.altKey,\n    metaKey = event.metaKey,\n    ctrlKey = event.ctrlKey;\n  return {\n    shiftKey: shiftKey,\n    altKey: altKey,\n    metaKey: metaKey,\n    ctrlKey: ctrlKey\n  };\n}\n/**\r\n * Gets scroll event data\r\n * @param event\r\n * @returns scroll event data\r\n */\n\nfunction getScrollEventData(event) {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  var _event$currentTarget = event.currentTarget,\n    scrollX = _event$currentTarget.scrollX,\n    scrollY = _event$currentTarget.scrollY,\n    scrollLeft = _event$currentTarget.scrollLeft,\n    scrollTop = _event$currentTarget.scrollTop;\n  return _extends({\n    xy: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0]\n  }, getModifierKeys(event));\n}\n/**\r\n * Gets wheel event data\r\n * @param event\r\n * @returns wheel event data\r\n */\n\nfunction getWheelEventData(event) {\n  var deltaX = event.deltaX,\n    deltaY = event.deltaY; //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n\n  return _extends({\n    xy: [deltaX, deltaY]\n  }, getModifierKeys(event));\n}\n/**\r\n * Gets pointer event data\r\n * @param event\r\n * @returns pointer event data\r\n */\n\nfunction getPointerEventData(event) {\n  var touches = event.touches,\n    buttons = event.buttons,\n    changedTouches = event.changedTouches;\n  var touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null;\n  var _ref2 = touchEvents ? touchEvents[0] : event,\n    clientX = _ref2.clientX,\n    clientY = _ref2.clientY;\n  var down = touchEvents && touchEvents.length > 0 || buttons > 0;\n  return _extends({\n    xy: [clientX, clientY],\n    touches: touchEvents && touchEvents.length || 0,\n    down: down,\n    buttons: buttons\n  }, getModifierKeys(event));\n}\n/**\r\n * Gets two touches event data\r\n * @param event\r\n * @returns two touches event data\r\n */\n\nfunction getTwoTouchesEventData(event) {\n  var touches = event.touches;\n  var dx = touches[1].clientX - touches[0].clientX;\n  var dy = touches[1].clientY - touches[0].clientY;\n  var da = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI];\n  var origin = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2];\n  return _extends({\n    da: da,\n    origin: origin,\n    touches: 2,\n    down: touches.length > 0\n  }, getModifierKeys(event));\n}\n/**\r\n * Calculates velocity\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time offset\r\n * @param len the length of the delta vector\r\n * @returns velocity\r\n */\n\nfunction calculateVelocity(delta, delta_t, len) {\n  len = len || Math.hypot.apply(Math, delta);\n  return delta_t ? len / delta_t : 0;\n}\n/**\r\n * Calculates velocities vector\r\n * @template T the expected vector type\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time offset\r\n * @returns velocities vector\r\n */\n\nfunction calculateVelocities(delta, delta_t) {\n  return delta_t ? delta.map(function (v) {\n    return v / delta_t;\n  }) : Array(delta.length).fill(0);\n}\n/**\r\n * Calculates distance\r\n * @param movement the difference between current and initial vectors\r\n * @returns distance\r\n */\n\nfunction calculateDistance(movement) {\n  return Math.hypot.apply(Math, movement);\n}\n/**\r\n * Calculates direction\r\n * @template T the expected vector type\r\n * @param delta\r\n * @param len\r\n * @returns direction\r\n */\n\nfunction calculateDirection(delta, len) {\n  len = len || Math.hypot.apply(Math, delta) || 1;\n  return delta.map(function (v) {\n    return v / len;\n  });\n}\n/**\r\n * Calculates all kinematics\r\n * @template T the expected vector type\r\n * @param movement the difference between current and initial vectors\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time difference between current and previous timestamps\r\n * @returns all kinematics\r\n */\n\nfunction calculateAllKinematics(movement, delta, delta_t) {\n  var len = Math.hypot.apply(Math, delta);\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len)\n  };\n}\n/**\r\n * Whether the browser supports GestureEvent (ie Safari)\r\n * @returns true if the browser supports gesture event\r\n */\n\nfunction gestureEventSupported() {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: Unreachable code error\n    return 'constructor' in GestureEvent;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\r\n * Some gestures might use the state key from another gesture (i.e. hover)\r\n * so mappedKeys is a commodity object to get the state key and handler key\r\n * for every gesture\r\n */\n\nvar mappedKeys = {\n  drag: {\n    stateKey: 'drag',\n    handlerKey: 'onDrag'\n  },\n  pinch: {\n    stateKey: 'pinch',\n    handlerKey: 'onPinch'\n  },\n  move: {\n    stateKey: 'move',\n    handlerKey: 'onMove'\n  },\n  scroll: {\n    stateKey: 'scroll',\n    handlerKey: 'onScroll'\n  },\n  wheel: {\n    stateKey: 'wheel',\n    handlerKey: 'onWheel'\n  },\n  hover: {\n    stateKey: 'move',\n    handlerKey: 'onHover'\n  }\n}; // default config (will extend user config)\n\nvar defaultConfig = {\n  domTarget: undefined,\n  event: {\n    passive: true,\n    capture: false\n  },\n  window: typeof window !== 'undefined' ? window : undefined,\n  dragDelay: false,\n  passiveEvents: true,\n  pointerEvents: false,\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true\n}; // common initial state for all gestures\n\nvar initialCommon = {\n  event: undefined,\n  currentTarget: undefined,\n  pointerId: undefined,\n  values: [0, 0],\n  delta: [0, 0],\n  movement: [0, 0],\n  offset: [0, 0],\n  direction: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  first: false,\n  last: false,\n  active: false,\n  time: undefined,\n  cancel: noop,\n  canceled: false,\n  memo: undefined,\n  args: undefined\n}; // initial state for coordinates-based gestures\n\nvar initialCoordinates = {\n  xy: [0, 0],\n  vxvy: [0, 0],\n  velocity: 0,\n  distance: 0\n}; // xy coordinates\n// initial state for distance and angle-based gestures (pinch)\n\nvar initialDistanceAngle = {\n  da: [0, 0],\n  vdva: [0, 0],\n  origin: undefined,\n  turns: 0\n}; // distance and angle\n// initial state object (used by the gesture controller)\n\nvar initialState = {\n  shared: {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false\n  },\n  move: /*#__PURE__*/\n  _extends({}, initialCommon, {}, initialCoordinates),\n  drag: /*#__PURE__*/\n  _extends({}, initialCommon, {}, initialCoordinates),\n  scroll: /*#__PURE__*/\n  _extends({}, initialCommon, {}, initialCoordinates),\n  wheel: /*#__PURE__*/\n  _extends({}, initialCommon, {}, initialCoordinates),\n  pinch: /*#__PURE__*/\n  _extends({}, initialCommon, {}, initialDistanceAngle)\n}; // generic end state for all gestures\n\nvar genericEndState = {\n  first: false,\n  last: true,\n  active: false\n};\n\n/**\r\n * Recognizer abstract class\r\n * @template GestureType whether the Recognizer should deal with coordinates or distance / angle\r\n */\n\nvar Recognizer = /*#__PURE__*/\nfunction () {\n  /**\r\n   * Creates an instance of a gesture recognizer.\r\n   * @param gestureKey drag, move, hover, pinch, etc.\r\n   * @param controller the controller attached to the gesture\r\n   * @param [args] the args that should be passed to the gesture handler\r\n   */\n  function Recognizer(gestureKey, controller, args) {\n    var _this = this;\n    if (args === void 0) {\n      args = [];\n    }\n    this.gestureKey = gestureKey;\n    this.controller = controller;\n    this.args = args;\n    /**\r\n     * Continuous gestures are scroll or wheel, where the next gesture continues the previous one.\r\n     * In other words, these gestures also start with a delta.\r\n     */\n\n    this.continuousGesture = false; // convenience method to set a timeout for a given gesture\n\n    this.setTimeout = function (callback, ms) {\n      var _window;\n      if (ms === void 0) {\n        ms = 140;\n      }\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n      _this.controller.timeouts[_this.stateKey] = (_window = window).setTimeout.apply(_window, [callback, ms].concat(args));\n    }; // convenience method to clear a timeout for a given gesture\n\n    this.clearTimeout = function () {\n      clearTimeout(_this.controller.timeouts[_this.stateKey]);\n    }; // convenience method to add window listeners for a given gesture\n\n    this.addWindowListeners = function (listeners) {\n      _this.controller.addWindowListeners(_this.stateKey, listeners);\n    }; // convenience method to remove window listeners for a given gesture\n\n    this.removeWindowListeners = function () {\n      _this.controller.removeWindowListeners(_this.stateKey);\n    };\n    /**\r\n     * convenience method to update the controller state for a given gesture\r\n     * @param sharedState shared partial state object\r\n     * @param gestureState partial state object for the gesture handled by the recognizer\r\n     * @param [gestureFlag] if set, will also fire the gesture handler set by the user\r\n     */\n\n    this.updateState = function (sharedState, gestureState) {\n      _this.controller.updateState(sharedState, gestureState, _this.stateKey);\n    };\n    this.fireGestureHandler = function (gestureFlag) {\n      _this.controller.fireGestureHandler(_this.gestureKey, gestureFlag);\n    }; // generic onStart function\n\n    this.onStart = function (event, payload) {\n      var _this$getPayloadFromE = _this.getPayloadFromEvent(event),\n        values = _this$getPayloadFromE.values,\n        gesturePayload = _this$getPayloadFromE.gesturePayload,\n        sharedPayload = _this$getPayloadFromE.sharedPayload; // TODO probably needs some rework, initialState and resetState should be different\n\n      var startState = _extends({}, initialState[_this.stateKey], {\n        values: values,\n        event: event,\n        first: true,\n        active: true,\n        time: event.timeStamp,\n        args: _this.args\n      });\n      var _this$state = _this.state,\n        prevValues = _this$state.values,\n        offset = _this$state.offset;\n      if (_this.continuousGesture) {\n        startState.initial = startState.previous = prevValues;\n        startState.delta = startState.movement = subV(values, prevValues);\n        startState.offset = values;\n        Object.assign(startState, calculateAllKinematics(startState.movement, startState.delta, 0));\n      } else {\n        startState.initial = startState.previous = values;\n        startState.offset = offset;\n      }\n      _this.updateState(_extends({}, _this.sharedStartState, {}, sharedPayload), _extends({}, startState, {}, gesturePayload, {}, payload));\n      _this.fireGestureHandler(GestureFlag.OnStart);\n    }; // generic onChange function\n\n    this.onChange = function (event, payload) {\n      var _this$getPayloadFromE2 = _this.getPayloadFromEvent(event),\n        values = _this$getPayloadFromE2.values,\n        gesturePayload = _this$getPayloadFromE2.gesturePayload,\n        sharedPayload = _this$getPayloadFromE2.sharedPayload;\n      var kinematics = _this.getKinematics(values, event);\n      _this.updateState(_extends({}, sharedPayload), _extends({\n        first: false\n      }, kinematics, {}, gesturePayload, {}, payload));\n      _this.fireGestureHandler(GestureFlag.OnChange);\n    }; // generic onEnd function\n\n    this.onEnd = function (event, payload) {\n      if (!_this.state.active) return;\n      _this.removeWindowListeners();\n      _this.updateState(_this.sharedEndState, _extends({\n        event: event\n      }, genericEndState, {}, payload));\n      _this.fireGestureHandler(GestureFlag.OnEnd);\n    }; // generic cancel function\n\n    this.onCancel = function (event) {\n      _this.updateState(null, {\n        canceled: true,\n        cancel: noop\n      });\n      requestAnimationFrame(function () {\n        return _this.onEnd(event);\n      });\n    }; // generic gesture handler for timeout-based gestures\n\n    this.timeoutHandler = function (event) {\n      if (!_this.enabled) return;\n      _this.clearTimeout();\n      _this.setTimeout(_this.onEnd);\n      if (!_this.state.active) _this.onStart(event);else _this.onChange(event);\n    }; // mapping this.stateKey to the state key the gesture handles\n    // (ie hover actually deals with the move gesture state)\n\n    this.stateKey = mappedKeys[gestureKey].stateKey;\n  } // is the gesture enabled\n\n  _createClass(Recognizer, [{\n    key: \"enabled\",\n    get: function get() {\n      return this.controller.config.enabled && this.controller.config[this.gestureKey];\n    } // get the controller state for a given gesture\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.controller.state[this.stateKey];\n    }\n  }]);\n  return Recognizer;\n}();\n\n/**\r\n * Abstract class for coordinates-based gesture recongizers\r\n */\n\nvar CoordinatesRecognizer = /*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(CoordinatesRecognizer, _Recognizer);\n  function CoordinatesRecognizer() {\n    return _Recognizer.apply(this, arguments) || this;\n  }\n  var _proto = CoordinatesRecognizer.prototype;\n  _proto.getKinematics = function getKinematics(values, event) {\n    // we get the gesture specific state\n    var _this$state = this.state,\n      xy = _this$state.values,\n      initial = _this$state.initial,\n      offset = _this$state.offset,\n      time = _this$state.time; // offset is the difference between the current and initial value vectors\n\n    var movement = subV(values, initial); // delta is the difference between the current and previous value vectors\n\n    var delta = subV(values, xy);\n    var delta_t = event.timeStamp - time;\n    var _calculateAllKinemati = calculateAllKinematics(movement, delta, delta_t),\n      velocity = _calculateAllKinemati.velocity,\n      velocities = _calculateAllKinemati.velocities,\n      distance = _calculateAllKinemati.distance,\n      direction = _calculateAllKinemati.direction;\n    return {\n      event: event,\n      values: values,\n      movement: movement,\n      offset: addV(offset, delta),\n      delta: delta,\n      velocity: velocity,\n      vxvy: velocities,\n      distance: distance,\n      direction: direction,\n      previous: xy,\n      time: event.timeStamp\n    };\n  };\n  return CoordinatesRecognizer;\n}(Recognizer);\nvar DEFAULT_DRAG_DELAY = 180;\nvar DragRecognizer = /*#__PURE__*/\nfunction (_CoordinatesRecognize) {\n  _inheritsLoose(DragRecognizer, _CoordinatesRecognize);\n  function DragRecognizer(controller, args) {\n    var _this;\n    _this = _CoordinatesRecognize.call(this, 'drag', controller, args) || this;\n    _this.sharedStartState = {\n      dragging: true,\n      down: true\n    };\n    _this.sharedEndState = {\n      dragging: false,\n      down: false,\n      buttons: 0,\n      touches: 0\n    };\n    _this.delayedEvent = false;\n    _this.onDragStart = function (event) {\n      if (!_this.enabled) return; // making sure we're not dragging the element when more than one finger press the screen\n\n      var _getPointerEventData = getPointerEventData(event),\n        touches = _getPointerEventData.touches;\n      if (touches > 1) return;\n      var currentTarget = event.currentTarget,\n        pointerId = event.pointerId;\n      if (_this.controller.config.pointerEvents) {\n        // if pointers events\n        currentTarget && currentTarget.setPointerCapture(pointerId);\n      } else {\n        _this.removeWindowListeners();\n        var dragListeners = [['mousemove', _this.onDragChange], ['touchmove', _this.onDragChange], ['mouseup', _this.onDragEnd], ['touchend', _this.onDragEnd], ['touchcancel', _this.onDragEnd]];\n        _this.addWindowListeners(dragListeners);\n      }\n      if (_this.controller.config.dragDelay) {\n        var dragDelay = typeof _this.controller.config.dragDelay === 'number' ? _this.controller.config.dragDelay : DEFAULT_DRAG_DELAY;\n        if (typeof event.persist === 'function') event.persist();\n        _this.delayedEvent = true;\n        _this.setTimeout(function () {\n          return _this.startDrag(event);\n        }, dragDelay);\n      } else {\n        _this.startDrag(event);\n      }\n    };\n    _this.startDrag = function (event) {\n      var currentTarget = event.currentTarget,\n        pointerId = event.pointerId;\n      _this.onStart(event, {\n        currentTarget: currentTarget,\n        pointerId: pointerId,\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n      _this.delayedEvent = false;\n    };\n    _this.onDragChange = function (event) {\n      var _this$state = _this.state,\n        canceled = _this$state.canceled,\n        active = _this$state.active;\n      if (canceled) return;\n      if (!active) {\n        if (_this.delayedEvent) {\n          _this.clearTimeout();\n          _this.startDrag(event);\n        }\n        return;\n      }\n      var _getPointerEventData2 = getPointerEventData(event),\n        buttons = _getPointerEventData2.buttons,\n        touches = _getPointerEventData2.touches;\n      if (buttons === 0 && touches === 0) {\n        _this.onEnd(event);\n        return;\n      }\n      _this.onChange(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n    _this.onDragEnd = function (event) {\n      _this.clearTimeout();\n      _this.delayedEvent = false;\n      if (!_this.state.active) return;\n      var _this$state2 = _this.state,\n        currentTarget = _this$state2.currentTarget,\n        pointerId = _this$state2.pointerId;\n      if (currentTarget && _this.controller.config.pointerEvents) currentTarget.releasePointerCapture(pointerId);\n      _this.onEnd(event);\n    };\n    return _this;\n  }\n  var _proto = DragRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getPointerEventData3 = getPointerEventData(event),\n      xy = _getPointerEventData3.xy,\n      sharedPayload = _objectWithoutPropertiesLoose(_getPointerEventData3, [\"xy\"]);\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerDown', this.onDragStart], ['onPointerMove', this.onDragChange], [['onPointerUp'], this.onDragEnd]];\n    }\n    return [[['onMouseDown', 'onTouchStart'], this.onDragStart]];\n  };\n  return DragRecognizer;\n}(CoordinatesRecognizer);\nvar ScrollRecognizer = /*#__PURE__*/\nfunction (_CoordinatesRecognize) {\n  _inheritsLoose(ScrollRecognizer, _CoordinatesRecognize);\n  function ScrollRecognizer(controller, args) {\n    var _this;\n    _this = _CoordinatesRecognize.call(this, 'scroll', controller, args) || this;\n    _this.sharedStartState = {\n      scrolling: true\n    };\n    _this.sharedEndState = {\n      scrolling: false,\n      velocity: 0,\n      vxvy: [0, 0]\n    };\n    _this.continuousGesture = true;\n    return _this;\n  }\n  var _proto = ScrollRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getScrollEventData = getScrollEventData(event),\n      xy = _getScrollEventData.xy,\n      sharedPayload = _objectWithoutPropertiesLoose(_getScrollEventData, [\"xy\"]);\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onScroll', this.timeoutHandler]];\n  };\n  return ScrollRecognizer;\n}(CoordinatesRecognizer);\nvar WheelRecognizer = /*#__PURE__*/\nfunction (_CoordinatesRecognize) {\n  _inheritsLoose(WheelRecognizer, _CoordinatesRecognize);\n  function WheelRecognizer(controller, args) {\n    var _this;\n    _this = _CoordinatesRecognize.call(this, 'wheel', controller, args) || this;\n    _this.sharedStartState = {\n      wheeling: true\n    };\n    _this.sharedEndState = {\n      wheeling: false,\n      velocity: 0,\n      vxvy: [0, 0]\n    };\n    _this.continuousGesture = true;\n    _this.onWheel = function (event) {\n      if (event.ctrlKey && _this.controller.actions.has('onPinch')) return;\n      _this.timeoutHandler(event);\n    };\n    return _this;\n  }\n  var _proto = WheelRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var prevXY = this.state.xy;\n    var _getWheelEventData = getWheelEventData(event),\n      xy = _getWheelEventData.xy,\n      sharedPayload = _objectWithoutPropertiesLoose(_getWheelEventData, [\"xy\"]);\n    var values = addV(xy, prevXY);\n    return {\n      values: values,\n      sharedPayload: sharedPayload\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onWheel', this.onWheel]];\n  };\n  return WheelRecognizer;\n}(CoordinatesRecognizer);\nvar MoveRecognizer = /*#__PURE__*/\nfunction (_CoordinatesRecognize) {\n  _inheritsLoose(MoveRecognizer, _CoordinatesRecognize);\n  function MoveRecognizer(controller, args) {\n    var _this;\n    _this = _CoordinatesRecognize.call(this, 'move', controller, args) || this;\n    _this.sharedStartState = {\n      moving: true\n    };\n    _this.sharedEndState = {\n      moving: false,\n      velocity: 0,\n      vxvy: [0, 0]\n    };\n    return _this;\n  }\n  var _proto = MoveRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getPointerEventData = getPointerEventData(event),\n      xy = _getPointerEventData.xy,\n      sharedPayload = _objectWithoutPropertiesLoose(_getPointerEventData, [\"xy\"]);\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerMove', this.timeoutHandler]];\n    }\n    return [['onMouseMove', this.timeoutHandler]];\n  };\n  return MoveRecognizer;\n}(CoordinatesRecognizer);\nvar HoverRecognizer = /*#__PURE__*/\nfunction (_CoordinatesRecognize) {\n  _inheritsLoose(HoverRecognizer, _CoordinatesRecognize);\n  function HoverRecognizer(controller, args) {\n    var _this;\n    _this = _CoordinatesRecognize.call(this, 'hover', controller, args) || this;\n    _this.onPointerEnter = function (event) {\n      if (!_this.enabled) return;\n      var _this$getPayloadFromE = _this.getPayloadFromEvent(event),\n        values = _this$getPayloadFromE.values,\n        sharedPayload = _this$getPayloadFromE.sharedPayload;\n      _this.updateState(_extends({\n        hovering: true\n      }, sharedPayload), {\n        values: values,\n        event: event,\n        args: _this.args\n      });\n      _this.fireGestureHandler(GestureFlag.OnChange);\n    };\n    _this.onPointerLeave = function (event) {\n      if (!_this.enabled) return;\n      var _this$getPayloadFromE2 = _this.getPayloadFromEvent(event),\n        values = _this$getPayloadFromE2.values,\n        sharedPayload = _this$getPayloadFromE2.sharedPayload;\n      var kinematics = _this.getKinematics(values, event);\n      _this.updateState(_extends({\n        hovering: false,\n        moving: false\n      }, sharedPayload), _extends({}, kinematics, {}, genericEndState, {\n        velocity: 0,\n        vxvy: [0, 0]\n      })); // when the mouse leaves the element, we also fire the move handler\n      // without waiting for move to end with debounce\n\n      _this.controller.fireGestureHandler('move', GestureFlag.OnEnd);\n      _this.controller.fireGestureHandler('hover', GestureFlag.OnChange);\n    };\n    return _this;\n  }\n  var _proto = HoverRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getPointerEventData = getPointerEventData(event),\n      xy = _getPointerEventData.xy,\n      sharedPayload = _objectWithoutPropertiesLoose(_getPointerEventData, [\"xy\"]);\n    return {\n      values: xy,\n      sharedPayload: sharedPayload\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerEnter', this.onPointerEnter], ['onPointerLeave', this.onPointerLeave]];\n    }\n    return [['onMouseEnter', this.onPointerEnter], ['onMouseLeave', this.onPointerLeave]];\n  };\n  return HoverRecognizer;\n}(CoordinatesRecognizer);\n\n/**\r\n * Abstract class for distance/angle-based gesture recongizers\r\n */\n\nvar DistanceAngleRecognizer = /*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(DistanceAngleRecognizer, _Recognizer);\n  function DistanceAngleRecognizer(gestureKey, controller, args) {\n    if (args === void 0) {\n      args = [];\n    }\n    return _Recognizer.call(this, gestureKey, controller, args) || this;\n  }\n  var _proto = DistanceAngleRecognizer.prototype;\n  _proto.getKinematics = function getKinematics(_ref, event) {\n    var d = _ref[0],\n      a = _ref[1];\n    var _this$state = this.state,\n      da = _this$state.values,\n      turns = _this$state.turns,\n      initial = _this$state.initial,\n      offset = _this$state.offset,\n      time = _this$state.time; // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n\n    a = a !== void 0 ? a : da[1];\n    var delta_d = d - da[0];\n    var delta_a = a - da[1];\n    /**\r\n     * The angle value might jump from 179deg to -179deg when we actually want to\r\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\r\n     * is supsiciously high (ie > 270deg) and increase the `turns` value\r\n     */\n\n    var newTurns = Math.abs(delta_a) > 270 ? turns + Math.sign(delta_a) : turns; // we update the angle difference to its corrected value\n\n    delta_a -= 360 * (newTurns - turns);\n    var delta = [delta_d, delta_a];\n    var movement_d = d - initial[0];\n    var movement_a = a - 360 * newTurns - initial[1];\n    var movement = [movement_d, movement_a];\n    var delta_t = event.timeStamp - time;\n    var vdva = calculateVelocities(delta, delta_t);\n    var direction = calculateDirection(delta);\n    return {\n      event: event,\n      values: [d, a],\n      movement: movement,\n      delta: delta,\n      offset: addV(offset, delta),\n      vdva: vdva,\n      direction: direction,\n      turns: newTurns,\n      previous: da,\n      time: event.timeStamp\n    };\n  };\n  return DistanceAngleRecognizer;\n}(Recognizer);\nvar PinchRecognizer = /*#__PURE__*/\nfunction (_DistanceAngleRecogni) {\n  _inheritsLoose(PinchRecognizer, _DistanceAngleRecogni);\n  function PinchRecognizer(controller, args) {\n    var _this;\n    _this = _DistanceAngleRecogni.call(this, 'pinch', controller, args) || this;\n    _this.sharedStartState = {\n      pinching: true\n    };\n    _this.sharedEndState = {\n      pinching: false,\n      down: false,\n      touches: 0\n    };\n    _this.onPinchStart = function (event) {\n      if (!_this.enabled || event.touches.length !== 2) return;\n      _this.onStart(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n    _this.onPinchChange = function (event) {\n      var _this$state = _this.state,\n        canceled = _this$state.canceled,\n        active = _this$state.active,\n        time = _this$state.time;\n      if (canceled || !active || event.touches.length !== 2 || event.timeStamp === time) return;\n      _this.onChange(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n    return _this;\n  }\n  var _proto = PinchRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getTwoTouchesEventDa = getTwoTouchesEventData(event),\n      da = _getTwoTouchesEventDa.da,\n      origin = _getTwoTouchesEventDa.origin,\n      sharedPayload = _objectWithoutPropertiesLoose(_getTwoTouchesEventDa, [\"da\", \"origin\"]);\n    return {\n      values: da,\n      gesturePayload: {\n        origin: origin\n      },\n      sharedPayload: sharedPayload\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onTouchStart', this.onPinchStart], ['onTouchMove', this.onPinchChange], [['onTouchEnd', 'onTouchCancel'], this.onEnd]];\n  };\n  return PinchRecognizer;\n}(DistanceAngleRecognizer);\nvar PinchWheelRecognizer = /*#__PURE__*/\nfunction (_DistanceAngleRecogni) {\n  _inheritsLoose(PinchWheelRecognizer, _DistanceAngleRecogni);\n  function PinchWheelRecognizer(controller, args) {\n    var _this;\n    _this = _DistanceAngleRecogni.call(this, 'pinch', controller, args) || this;\n    _this.sharedStartState = {\n      pinching: true\n    };\n    _this.sharedEndState = {\n      pinching: false\n    };\n    _this.onWheel = function (event) {\n      if (!event.ctrlKey) return;\n      if (!_this.controller.config.passiveEvents) event.preventDefault();else if (process.env.NODE_ENV === 'development') console.warn('To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.');\n      _this.timeoutHandler(event);\n    };\n    return _this;\n  }\n  var _proto = PinchWheelRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    var _getWheelEventData = getWheelEventData(event),\n      _getWheelEventData$xy = _getWheelEventData.xy,\n      delta_d = _getWheelEventData$xy[1],\n      sharedPayload = _objectWithoutPropertiesLoose(_getWheelEventData, [\"xy\"]);\n    var _this$state$da = this.state.da,\n      prev_d = _this$state$da[0],\n      prev_a = _this$state$da[1];\n    var d = prev_d - delta_d;\n    var a = prev_a !== void 0 ? prev_a : 0;\n    var origin = [event.clientX, event.clientY];\n    return {\n      values: [d, a],\n      gesturePayload: {\n        origin: origin\n      },\n      sharedPayload: sharedPayload\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onWheel', this.onWheel]];\n  };\n  return PinchWheelRecognizer;\n}(DistanceAngleRecognizer);\nvar SCALE_FACTOR = 260;\nvar PinchWebKitGestureRecognizer = /*#__PURE__*/\nfunction (_DistanceAngleRecogni) {\n  _inheritsLoose(PinchWebKitGestureRecognizer, _DistanceAngleRecogni);\n  function PinchWebKitGestureRecognizer(controller, args) {\n    var _this;\n    _this = _DistanceAngleRecogni.call(this, 'pinch', controller, args) || this;\n    _this.sharedStartState = {\n      pinching: true,\n      down: true,\n      touches: 2\n    };\n    _this.sharedEndState = {\n      pinching: false,\n      down: false,\n      touches: 0\n    };\n    _this.onPinchStart = function (event) {\n      if (!_this.enabled) return;\n      event.preventDefault();\n      var origin = _this.origin ? _this.origin : [event.clientX, event.clientY];\n      _this.onStart(event, {\n        origin: origin,\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n    _this.onPinchChange = function (event) {\n      var _this$state = _this.state,\n        canceled = _this$state.canceled,\n        active = _this$state.active;\n      if (canceled || !active) return;\n      event.preventDefault();\n      _this.onChange(event, {\n        cancel: function cancel() {\n          return _this.onCancel(event);\n        }\n      });\n    };\n    _this.onGestureEnd = function (event) {\n      _this.onEnd(event);\n      event.preventDefault();\n      _this.origin = undefined;\n    };\n    _this.updateTouchData = function (event) {\n      if (!_this.enabled || event.touches.length !== 2) return;\n      var _getTwoTouchesEventDa = getTwoTouchesEventData(event),\n        origin = _getTwoTouchesEventDa.origin;\n      _this.origin = origin;\n    };\n    return _this;\n  }\n  var _proto = PinchWebKitGestureRecognizer.prototype;\n  _proto.getPayloadFromEvent = function getPayloadFromEvent(event) {\n    return {\n      values: [event.scale * SCALE_FACTOR, event.rotation]\n    };\n  };\n  _proto.getEventBindings = function getEventBindings() {\n    return [['onGestureStart', this.onPinchStart], ['onGestureChange', this.onPinchChange], [['onGestureEnd', 'onTouchCancel'], this.onGestureEnd], [['onTouchStart', 'onTouchMove'], this.updateTouchData]];\n  };\n  return PinchWebKitGestureRecognizer;\n}(DistanceAngleRecognizer);\n\n/**\r\n * Gesture controller will create gesture recognizers (which handle the gesture logic)\r\n * and keep track of the state for all gestures\r\n *\r\n * @template BinderType the type the bind function should return\r\n */\n\nvar GestureController = function GestureController(handlers, config) {\n  var _this = this;\n  this.handlers = handlers;\n  this.config = config;\n  this.state = initialState; // state for all gestures\n\n  this.timeouts = {}; // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n\n  this.bindings = {}; // an object holding the handlers associated to the gestures\n\n  this.domListeners = []; // when config.domTarget is set, we attach events directly to the dom\n\n  this.windowListeners = {}; // keeps track of window listeners added by gestures (drag only at the moment)\n\n  /**\r\n   * Function run on component unmount\r\n   * Cleans timeouts and removes dom listeners set by the bind function\r\n   */\n\n  this.clean = function () {\n    _this.cleanOnBind();\n    Object.values(_this.timeouts).forEach(clearTimeout);\n    Object.keys(_this.windowListeners).forEach(function (stateKey) {\n      return _this.removeWindowListeners(stateKey);\n    });\n  };\n  /**\r\n   * Function run every time the bind function is run (ie on every render)\r\n   * Reset the binding object and remove dom listeners attached to config.domTarget\r\n   */\n\n  this.cleanOnBind = function () {\n    _this.bindings = {};\n    var domTarget = _this.config.domTarget;\n    if (domTarget) {\n      removeListeners(domTarget, _this.domListeners, _this.config.event);\n      _this.domListeners = [];\n    }\n  };\n  /**\r\n   * Commodity function to let gesture recognizer update global state\r\n   * @param sharedState shared partial state object\r\n   * @param gestureState partial gesture specific state object\r\n   * @param stateKey the state key ('drag', 'move'...)\r\n   */\n\n  this.updateState = function (sharedState, gestureState, stateKey) {\n    var _extends2;\n    var newGestureState = _extends({}, _this.state[stateKey], {}, gestureState);\n    if ('da' in newGestureState) newGestureState.da = newGestureState.values;else if ('xy' in newGestureState) newGestureState.xy = newGestureState.values;\n    _this.state = _extends({}, _this.state, (_extends2 = {\n      shared: _extends({}, _this.state.shared, {}, sharedState)\n    }, _extends2[stateKey] = newGestureState, _extends2));\n  }; // fire the gesture handler defined by the user\n\n  this.fireGestureHandler = function (gestureKey, gestureFlag) {\n    // gets the state key and handler key from the gesture key\n    // gestureKey: 'hover' -> stateKey: 'move', handlerKey: 'onHover'\n    var _mappedKeys$gestureKe = mappedKeys[gestureKey],\n      stateKey = _mappedKeys$gestureKe.stateKey,\n      handlerKey = _mappedKeys$gestureKe.handlerKey;\n    var state = _extends({}, _this.state.shared, {}, _this.state[stateKey]);\n    if (state.event) state.event.gesture = gestureKey;\n    if (gestureFlag === GestureFlag.OnStart) {\n      var handlerStart = handlerKey + \"Start\";\n      var _handler = _this.handlers[handlerStart];\n      _handler && _handler(state);\n    } // whenever a flag is set, we run the default on[Gesture] function\n    // i.e. GestureFlag.OnStart would trigger both onDragStart and onDrag\n\n    var handler = _this.handlers[handlerKey];\n    if (handler) {\n      var newMemo = handler(state);\n      _this.state[stateKey].memo = newMemo !== void 0 ? newMemo : _this.state[stateKey].memo;\n    }\n    if (gestureFlag === GestureFlag.OnEnd) {\n      var handlerEnd = handlerKey + \"End\";\n      var _handler2 = _this.handlers[handlerEnd];\n      _handler2 && _handler2(state);\n    }\n  };\n  /**\r\n   * Commodity function to let recognizers simply add listeners to config.window\r\n   * @param stateKey\r\n   * @param listeners\r\n   */\n\n  this.addWindowListeners = function (stateKey, listeners) {\n    if (!_this.config.window) return; // we use this.windowListeners to keep track of the listeners we add\n\n    _this.windowListeners[stateKey] = listeners;\n    addListeners(_this.config.window, listeners, _this.config.event);\n  }; // commodity function to let recognizers simply remove listeners from config.window\n\n  this.removeWindowListeners = function (stateKey) {\n    if (!_this.config.window) return;\n    var listeners = _this.windowListeners[stateKey];\n    if (listeners) {\n      removeListeners(_this.config.window, listeners, _this.config.event);\n      delete _this.windowListeners[stateKey];\n    }\n  };\n  /**\r\n   * Adds a recognizer to this.bindings\r\n   * @param recognizer\r\n   */\n\n  this.addRecognizer = function (recognizer) {\n    recognizer.getEventBindings().map(_this.addEventBindings);\n  };\n  /**\r\n   * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).\r\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\r\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\r\n   * that key.\r\n   */\n\n  this.addEventBindings = function (_ref) {\n    var eventNames = _ref[0],\n      fn = _ref[1];\n    var eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames;\n    eventNamesArray.forEach(function (eventName) {\n      _this.bindings[eventName] = _this.bindings[eventName] ? [].concat(_this.bindings[eventName], [fn]) : [fn];\n    });\n  };\n  /**\r\n   * When config.domTarget is set, this function will add dom listeners to it\r\n   */\n\n  this.addDomTargetListeners = function () {\n    var domTarget = _this.config.domTarget; // we iterate on the entries of this.binding\n    // for each event, we chain the array of functions mapped to it\n    // and push it to this.domListeners\n\n    Object.entries(_this.bindings).forEach(function (_ref2) {\n      var event = _ref2[0],\n        fns = _ref2[1];\n      _this.domListeners.push([event.substr(2).toLowerCase(), chainFns.apply(void 0, fns)]);\n    });\n    addListeners(domTarget, _this.domListeners, _this.config.event);\n  };\n  /**\r\n   * getBindings will return an object that will be bound by users\r\n   * to the react component they want to interact with\r\n   */\n\n  this.getBindings = function () {\n    var output = {};\n    var captureString = _this.config.event.capture ? 'Capture' : '';\n    Object.entries(_this.bindings).forEach(function (_ref3) {\n      var event = _ref3[0],\n        fns = _ref3[1];\n      var fnsArray = Array.isArray(fns) ? fns : [fns];\n      var key = event + captureString;\n      output[key] = chainFns.apply(void 0, fnsArray);\n    });\n    return output;\n  };\n  this.bind = function () {\n    var domTarget = _this.config.domTarget;\n    var genuineHandlers = _extends({}, _this.handlers); // cleaning before adding\n\n    _this.cleanOnBind();\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (_this.actions.has('onDrag')) {\n      _this.addRecognizer(new DragRecognizer(_this, args));\n      delete genuineHandlers.onDrag;\n      delete genuineHandlers.onDragStart;\n      delete genuineHandlers.onDragEnd;\n    }\n    if (_this.actions.has('onScroll')) {\n      _this.addRecognizer(new ScrollRecognizer(_this, args));\n      delete genuineHandlers.onScroll;\n      delete genuineHandlers.onScrollStart;\n      delete genuineHandlers.onScrollEnd;\n    }\n    if (_this.actions.has('onWheel')) {\n      _this.addRecognizer(new WheelRecognizer(_this, args));\n      delete genuineHandlers.onWheel;\n      delete genuineHandlers.onWheelStart;\n      delete genuineHandlers.onWheelEnd;\n    }\n    if (_this.actions.has('onMove')) {\n      _this.addRecognizer(new MoveRecognizer(_this, args));\n      delete genuineHandlers.onMove;\n      delete genuineHandlers.onMoveStart;\n      delete genuineHandlers.onMoveEnd;\n    }\n    if (_this.actions.has('onHover')) {\n      _this.addRecognizer(new HoverRecognizer(_this, args));\n      delete genuineHandlers.onHover;\n    }\n    if (_this.actions.has('onPinch')) {\n      // since react doesn't have handlers for gesture events we can only use them\n      // domTarget is set (and when the browser supprots them).\n      if (domTarget && gestureEventSupported()) {\n        _this.addRecognizer(new PinchWebKitGestureRecognizer(_this, args));\n      } else {\n        _this.addRecognizer(new PinchRecognizer(_this, args));\n        _this.addRecognizer(new PinchWheelRecognizer(_this, args));\n      }\n      delete genuineHandlers.onPinch;\n      delete genuineHandlers.onPinchStart;\n      delete genuineHandlers.onPinchEnd;\n    } // we also add event bindings for genuine handlers\n\n    Object.entries(genuineHandlers).map(function (_ref4) {\n      var event = _ref4[0],\n        fn = _ref4[1];\n\n      // we're cheating when it comes to event type :(\n      _this.addEventBindings([event, fn]);\n    }); // if config.domTarget is set we add event listeners to it and return the clean function\n\n    if (domTarget) {\n      _this.addDomTargetListeners();\n      return _this.clean;\n    } // if not, we return an object that contains gesture handlers mapped to react handler event keys\n\n    return _this.getBindings();\n  }; // if handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n  // actions will include 'onDrag' and 'onMove'\n\n  this.actions = new Set(Object.keys(this.handlers).map(function (k) {\n    return k.replace(/End|Start/, '');\n  }));\n};\nfunction useGesture(handlers, config) {\n  // the gesture controller will keep track of all gesture states\n  var gestureController = React.useRef();\n  if (!gestureController.current) {\n    // we initialize the gesture controller once\n    gestureController.current = new GestureController(handlers, getDerivedConfig(config));\n  }\n  React.useEffect(function () {\n    // every time handlers or config change, we let the gesture controller compute\n    // them so that the gesture handlers functions are aware of the changes\n    gestureController.current.config = getDerivedConfig(config);\n    gestureController.current.handlers = handlers;\n  }, [handlers, config]); // when the user component unmounts, we run our gesture controller clean function\n\n  React.useEffect(function () {\n    return gestureController.current.clean;\n  }, []); // we return the bind function of our controller, which returns an binding object or\n  // a cleaning function depending on whether config.domTarget is set\n\n  return gestureController.current.bind;\n}\n/* SHORTHAND HANDLERS */\n\nvar useDrag = function useDrag(handler, config) {\n  return useGesture({\n    onDrag: handler\n  }, config);\n};\nvar useMove = function useMove(handler, config) {\n  return useGesture({\n    onMove: handler\n  }, config);\n};\nvar useHover = function useHover(handler, config) {\n  return useGesture({\n    onHover: handler\n  }, config);\n};\nvar useScroll = function useScroll(handler, config) {\n  return useGesture({\n    onScroll: handler\n  }, config);\n};\nvar useWheel = function useWheel(handler, config) {\n  return useGesture({\n    onWheel: handler\n  }, config);\n};\nvar usePinch = function usePinch(handler, config) {\n  return useGesture({\n    onPinch: handler\n  }, config);\n};\nfunction getDerivedConfig(config) {\n  var derivedConfig = _extends({}, defaultConfig, {}, config);\n  var domTarget = derivedConfig.domTarget;\n  var realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget;\n  derivedConfig.domTarget = realDomTarget;\n  var passive = derivedConfig.event.passive !== void 0 ? derivedConfig.event.passive : true; // TODO make test to check if passive is correctly passed to config\n  // if there isn't a domtarget or if event.passive is true, then passiveEvents is true\n\n  derivedConfig.passiveEvents = !derivedConfig.domTarget || passive;\n  return derivedConfig;\n}\nexport { addV, subV, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };","map":{"version":3,"names":["GestureFlag","noop","chainFns","fns","Array","_len","_key","arguments","args","_len2","_key2","forEach","fn","apply","addV","v1","v2","map","v","i","subV","setListeners","add","el","listeners","options","action","_ref","type","addListeners","removeListeners","getModifierKeys","event","shiftKey","altKey","metaKey","ctrlKey","getScrollEventData","currentTarget","scrollX","_event$currentTarget","scrollY","scrollLeft","scrollTop","xy","getWheelEventData","deltaX","deltaY","getPointerEventData","touches","buttons","changedTouches","touchEvents","length","clientX","_ref2","clientY","down","getTwoTouchesEventData","dx","dy","da","Math","hypot","atan2","PI","origin","calculateVelocity","delta","delta_t","len","calculateVelocities","fill","calculateDistance","movement","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","gestureEventSupported","GestureEvent","e","mappedKeys","drag","stateKey","handlerKey","pinch","move","scroll","wheel","hover","defaultConfig","domTarget","undefined","passive","capture","window","dragDelay","passiveEvents","pointerEvents","enabled","initialCommon","pointerId","values","offset","initial","previous","first","last","active","time","cancel","canceled","memo","initialCoordinates","vxvy","initialDistanceAngle","vdva","turns","initialState","shared","hovering","scrolling","wheeling","dragging","moving","pinching","genericEndState","Recognizer","gestureKey","controller","callback","ms","_this","timeouts","_window","setTimeout","concat","clearTimeout","addWindowListeners","removeWindowListeners","sharedState","gestureState","updateState","gestureFlag","fireGestureHandler","payload","getPayloadFromEvent","_this$getPayloadFromE","gesturePayload","sharedPayload","startState","_extends","timeStamp","state","prevValues","_this$state","continuousGesture","Object","assign","sharedStartState","OnStart","_this$getPayloadFromE2","kinematics","getKinematics","OnChange","sharedEndState","OnEnd","requestAnimationFrame","onEnd","onStart","onChange","config","CoordinatesRecognizer","_calculateAllKinemati","DEFAULT_DRAG_DELAY","DragRecognizer","_getPointerEventData","setPointerCapture","dragListeners","onDragChange","onDragEnd","persist","delayedEvent","startDrag","onCancel","_getPointerEventData2","_this$state2","releasePointerCapture","_getPointerEventData3","_objectWithoutPropertiesLoose","getEventBindings","onDragStart","ScrollRecognizer","_getScrollEventData","timeoutHandler","WheelRecognizer","actions","has","prevXY","_getWheelEventData","onWheel","MoveRecognizer","HoverRecognizer","onPointerEnter","onPointerLeave","DistanceAngleRecognizer","_Recognizer","call","d","a","delta_d","delta_a","newTurns","abs","sign","movement_d","movement_a","PinchRecognizer","_getTwoTouchesEventDa","onPinchStart","onPinchChange","PinchWheelRecognizer","preventDefault","process","env","NODE_ENV","console","warn","_getWheelEventData$xy","prev_d","_this$state$da","prev_a","SCALE_FACTOR","PinchWebKitGestureRecognizer","scale","rotation","onGestureEnd","updateTouchData","GestureController","handlers","cleanOnBind","keys","windowListeners","bindings","domListeners","newGestureState","_extends2","_mappedKeys$gestureKe","gesture","handlerStart","_handler","handler","newMemo","handlerEnd","_handler2","recognizer","addEventBindings","eventNames","eventNamesArray","isArray","eventName","entries","push","substr","toLowerCase","output","captureString","_ref3","fnsArray","key","genuineHandlers","addRecognizer","onDrag","onScroll","onScrollStart","onScrollEnd","onWheelStart","onWheelEnd","onMove","onMoveStart","onMoveEnd","onHover","onPinch","onPinchEnd","_ref4","addDomTargetListeners","clean","getBindings","Set","k","replace","useGesture","gestureController","React","useRef","current","getDerivedConfig","useEffect","bind","useDrag","useMove","useHover","useScroll","useWheel","usePinch","derivedConfig","realDomTarget"],"sources":["../src/types.ts","../src/utils.ts","../src/defaults.ts","../src/recognizers/Recognizer.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/recognizers/DragRecognizer.ts","../src/recognizers/ScrollRecognizer.ts","../src/recognizers/WheelRecognizer.ts","../src/recognizers/MoveRecognizer.ts","../src/recognizers/HoverRecognizer.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/PinchRecognizer.ts","../src/recognizers/PinchWheelRecognizer.ts","../src/recognizers/PinchWebKitGestureRecognizer.ts","../src/controllers/GestureController.ts","../src/hooks.ts"],"sourcesContent":["import React from 'react'\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\nexport type AtLeastOneOf<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U]\n\nexport type Vector2 = [number, number]\nexport type Fn = (...args: any[]) => any\n\nexport type EventOptions = { capture?: boolean; passive?: boolean }\n\nexport interface GestureConfig {\n  domTarget?: EventTarget | React.RefObject<EventTarget> | null\n  event: EventOptions\n  window?: EventTarget\n  dragDelay: boolean | number\n  passiveEvents: boolean\n  pointerEvents: boolean\n  enabled: boolean\n  drag: boolean\n  pinch: boolean\n  scroll: boolean\n  wheel: boolean\n  hover: boolean\n  move: boolean\n}\n\nexport enum GestureFlag {\n  OnStart = 'start',\n  OnChange = 'change',\n  OnEnd = 'end',\n}\n\nexport type WebKitGestureEvent = React.PointerEvent & { scale: number; rotation: number }\nexport type UseGestureEvent<\n  T extends React.SyntheticEvent = React.MouseEvent | React.TouchEvent | React.WheelEvent | React.PointerEvent | WebKitGestureEvent\n> = T & {\n  gesture?: GestureKey\n}\n\nexport interface ReactEventHandlers {\n  // Mouse Events\n  onMouseDown?: React.MouseEventHandler\n  onMouseDownCapture?: React.MouseEventHandler\n  onMouseEnter?: React.MouseEventHandler\n  onMouseLeave?: React.MouseEventHandler\n  onMouseMove?: React.MouseEventHandler\n  onMouseMoveCapture?: React.MouseEventHandler\n  onMouseOut?: React.MouseEventHandler\n  onMouseOutCapture?: React.MouseEventHandler\n  onMouseOver?: React.MouseEventHandler\n  onMouseOverCapture?: React.MouseEventHandler\n  onMouseUp?: React.MouseEventHandler\n  onMouseUpCapture?: React.MouseEventHandler\n  // Touch Events\n  onTouchCancel?: React.TouchEventHandler\n  onTouchCancelCapture?: React.TouchEventHandler\n  onTouchEnd?: React.TouchEventHandler\n  onTouchEndCapture?: React.TouchEventHandler\n  onTouchMove?: React.TouchEventHandler\n  onTouchMoveCapture?: React.TouchEventHandler\n  onTouchStart?: React.TouchEventHandler\n  onTouchStartCapture?: React.TouchEventHandler\n\n  // Pointer Events\n  onPointerDown?: React.PointerEventHandler\n  onPointerDownCapture?: React.PointerEventHandler\n  onPointerMove?: React.PointerEventHandler\n  onPointerMoveCapture?: React.PointerEventHandler\n  onPointerUp?: React.PointerEventHandler\n  onPointerUpCapture?: React.PointerEventHandler\n  onPointerCancel?: React.PointerEventHandler\n  onPointerCancelCapture?: React.PointerEventHandler\n  onPointerEnter?: React.PointerEventHandler\n  onPointerEnterCapture?: React.PointerEventHandler\n  onPointerLeave?: React.PointerEventHandler\n  onPointerLeaveCapture?: React.PointerEventHandler\n  onPointerOver?: React.PointerEventHandler\n  onPointerOverCapture?: React.PointerEventHandler\n  onPointerOut?: React.PointerEventHandler\n  onPointerOutCapture?: React.PointerEventHandler\n  onGotPointerCapture?: React.PointerEventHandler\n  onGotPointerCaptureCapture?: React.PointerEventHandler\n  onLostPointerCapture?: React.PointerEventHandler\n  onLostPointerCaptureCapture?: React.PointerEventHandler\n\n  // UI Events\n  onScroll?: React.UIEventHandler\n  onScrollCapture?: React.UIEventHandler\n\n  // Wheel Events\n  onWheel?: React.WheelEventHandler\n  onWheelCapture?: React.WheelEventHandler\n\n  // Cheat mode for Gesture Events\n  onGestureStart?: Fn\n  onGestureChange?: Fn\n  onGestureEnd?: Fn\n}\n\nexport type ReactEventHandlerKey = keyof ReactEventHandlers\n\nexport type GestureKey = 'drag' | 'pinch' | 'move' | 'scroll' | 'wheel' | 'hover'\nexport type StateKey = Exclude<GestureKey, 'hover'>\n\nexport interface SharedGestureState {\n  hovering: boolean\n  scrolling: boolean\n  wheeling: boolean\n  dragging: boolean\n  moving: boolean\n  pinching: boolean\n  touches: number\n  down: boolean\n  buttons: number\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\nexport interface CommonGestureState {\n  event?: UseGestureEvent\n  currentTarget?: EventTarget | null\n  pointerId?: number | null\n  values: Vector2\n  delta: Vector2\n  movement: Vector2\n  offset: Vector2\n  initial: Vector2\n  previous: Vector2\n  direction: Vector2\n  first: boolean\n  last: boolean\n  active: boolean\n  time?: number\n  cancel?(): void\n  canceled: boolean\n  memo?: any\n  args?: any\n}\n\nexport interface Coordinates {\n  xy: Vector2\n  velocity: number\n  vxvy: Vector2\n  distance: number\n}\n\nexport interface DistanceAngle {\n  da: Vector2\n  vdva: Vector2\n  origin?: Vector2\n  turns: number\n}\n\nexport type GestureState<T extends Coordinates | DistanceAngle = Coordinates | DistanceAngle> = T & CommonGestureState\nexport type FullGestureState<T extends Coordinates | DistanceAngle> = SharedGestureState & GestureState<T>\n\nexport type StateObject = { shared: SharedGestureState } & { [K in StateKey]: GestureState<Coordinates | DistanceAngle> }\n\nexport type Handler<T extends Coordinates | DistanceAngle> = (state: FullGestureState<T>) => any | void\nexport type HandlerKey = 'onDrag' | 'onPinch' | 'onMove' | 'onHover' | 'onScroll' | 'onWheel'\n\nexport type GestureHandlers = {\n  onDrag: Handler<Coordinates>\n  onDragStart: Handler<Coordinates>\n  onDragEnd: Handler<Coordinates>\n  onHover: Handler<Coordinates>\n  onMove: Handler<Coordinates>\n  onMoveStart: Handler<Coordinates>\n  onMoveEnd: Handler<Coordinates>\n  onScroll: Handler<Coordinates>\n  onScrollStart: Handler<Coordinates>\n  onScrollEnd: Handler<Coordinates>\n  onWheel: Handler<Coordinates>\n  onWheelStart: Handler<Coordinates>\n  onWheelEnd: Handler<Coordinates>\n  onPinch: Handler<DistanceAngle>\n  onPinchStart: Handler<DistanceAngle>\n  onPinchEnd: Handler<DistanceAngle>\n}\n\n/* Handlers should also accept DomAttributes to prevent overrides */\nexport type GestureHandlersPartial = AtLeastOneOf<GestureHandlers> &\n  Partial<Omit<React.DOMAttributes<Element>, 'onDrag' | 'onScroll' | 'onWheel'>>\n","import React from 'react'\nimport { Fn, Vector2, EventOptions, Coordinates, FullGestureState, DistanceAngle, UseGestureEvent } from './types'\n\n// blank function\nexport const noop = () => {}\n\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\n// vector add\nexport const addV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v + v2[i])\n\n// vector substract\nexport const subV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v - v2[i])\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([type, fn]) => el[action](type, fn, options))\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: UseGestureEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\ntype ScrollEventData = Pick<FullGestureState<Coordinates>, 'xy'> & ModifierKeys\n\n/**\n * Gets scroll event data\n * @param event\n * @returns scroll event data\n */\nexport function getScrollEventData(event: UseGestureEvent): ScrollEventData {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = <Element & Window>event.currentTarget\n  return { xy: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0], ...getModifierKeys(event) }\n}\n\ntype WheelEventData = Pick<FullGestureState<Coordinates>, 'xy'> & ModifierKeys\n\n/**\n * Gets wheel event data\n * @param event\n * @returns wheel event data\n */\nexport function getWheelEventData(event: UseGestureEvent<React.WheelEvent>): WheelEventData {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { xy: [deltaX, deltaY], ...getModifierKeys(event) }\n}\n\ntype PointerEventData = Pick<FullGestureState<Coordinates>, 'xy' | 'touches' | 'down' | 'buttons'> & ModifierKeys\n/**\n * Gets pointer event data\n * @param event\n * @returns pointer event data\n */\nexport function getPointerEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): PointerEventData {\n  const { touches, buttons, changedTouches } = event as any\n  const touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : event\n  const down = (touchEvents && touchEvents.length > 0) || buttons > 0\n  return {\n    xy: [clientX, clientY],\n    touches: (touchEvents && touchEvents.length) || 0,\n    down,\n    buttons,\n    ...getModifierKeys(event),\n  }\n}\n\ntype TwoTouchesEventData = Pick<FullGestureState<DistanceAngle>, 'da' | 'touches' | 'down' | 'origin'> & ModifierKeys\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent): TwoTouchesEventData {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const da: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { da, origin, touches: 2, down: touches.length > 0, ...getModifierKeys(event) }\n}\n\n/**\n * Calculates velocity\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @param len the length of the delta vector\n * @returns velocity\n */\nexport function calculateVelocity(delta: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...delta)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(delta: T, delta_t: number): T {\n  return delta_t ? <T>delta.map(v => v / delta_t) : <T>Array(delta.length).fill(0)\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param delta\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(delta: T, len?: number): T {\n  len = len || Math.hypot(...delta) || 1\n  return <T>delta.map(v => v / len!)\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...delta)\n\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len),\n  }\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function gestureEventSupported(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: Unreachable code error\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n","import { noop } from './utils'\nimport { GestureConfig, HandlerKey, CommonGestureState, Coordinates, DistanceAngle, StateObject, StateKey, GestureKey } from './types'\n\ntype MappedKeys = { [K in GestureKey]: { stateKey: StateKey; handlerKey: HandlerKey } }\n\n/**\n * Some gestures might use the state key from another gesture (i.e. hover)\n * so mappedKeys is a commodity object to get the state key and handler key\n * for every gesture\n */\nexport const mappedKeys: MappedKeys = {\n  drag: { stateKey: 'drag', handlerKey: 'onDrag' },\n  pinch: { stateKey: 'pinch', handlerKey: 'onPinch' },\n  move: { stateKey: 'move', handlerKey: 'onMove' },\n  scroll: { stateKey: 'scroll', handlerKey: 'onScroll' },\n  wheel: { stateKey: 'wheel', handlerKey: 'onWheel' },\n  hover: { stateKey: 'move', handlerKey: 'onHover' },\n}\n\n// default config (will extend user config)\nexport const defaultConfig: GestureConfig = {\n  domTarget: undefined,\n  event: { passive: true, capture: false },\n  window: typeof window !== 'undefined' ? window : undefined,\n  dragDelay: false,\n  passiveEvents: true,\n  pointerEvents: false,\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true,\n}\n\n// common initial state for all gestures\nexport const initialCommon: CommonGestureState = {\n  event: undefined,\n  currentTarget: undefined,\n  pointerId: undefined,\n  values: [0, 0],\n  delta: [0, 0],\n  movement: [0, 0],\n  offset: [0, 0],\n  direction: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  first: false,\n  last: false,\n  active: false,\n  time: undefined,\n  cancel: noop,\n  canceled: false,\n  memo: undefined,\n  args: undefined,\n}\n\n// initial state for coordinates-based gestures\nconst initialCoordinates: Coordinates = { xy: [0, 0], vxvy: [0, 0], velocity: 0, distance: 0 } // xy coordinates\n\n// initial state for distance and angle-based gestures (pinch)\nconst initialDistanceAngle: DistanceAngle = { da: [0, 0], vdva: [0, 0], origin: undefined, turns: 0 } // distance and angle\n\n// initial state object (used by the gesture controller)\nexport const initialState: StateObject = {\n  shared: {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false,\n  },\n  move: { ...initialCommon, ...initialCoordinates },\n  drag: { ...initialCommon, ...initialCoordinates },\n  scroll: { ...initialCommon, ...initialCoordinates },\n  wheel: { ...initialCommon, ...initialCoordinates },\n  pinch: { ...initialCommon, ...initialDistanceAngle },\n}\n\n// generic end state for all gestures\nexport const genericEndState: Partial<CommonGestureState> = { first: false, last: true, active: false }\n","import { mappedKeys, genericEndState, initialState } from '../defaults'\nimport GestureController from '../controllers/GestureController'\nimport {\n  Coordinates,\n  DistanceAngle,\n  StateKey,\n  GestureState,\n  GestureKey,\n  SharedGestureState,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  UseGestureEvent,\n  Vector2,\n} from '../types'\nimport { noop, subV, calculateAllKinematics } from '../utils'\n\ntype PayloadFromEvent = {\n  values: Vector2\n  gesturePayload?: Partial<GestureState>\n  sharedPayload?: Partial<SharedGestureState>\n}\n\n/**\n * Recognizer abstract class\n * @template GestureType whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<GestureType extends Coordinates | DistanceAngle = Coordinates | DistanceAngle> {\n  protected stateKey: StateKey\n  protected sharedStartState?: Partial<SharedGestureState>\n  protected sharedEndState?: Partial<SharedGestureState>\n\n  /**\n   * Continuous gestures are scroll or wheel, where the next gesture continues the previous one.\n   * In other words, these gestures also start with a delta.\n   */\n  protected continuousGesture = false\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param gestureKey drag, move, hover, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly gestureKey: GestureKey,\n    protected readonly controller: GestureController,\n    protected readonly args: any[] = []\n  ) {\n    // mapping this.stateKey to the state key the gesture handles\n    // (ie hover actually deals with the move gesture state)\n    this.stateKey = mappedKeys[gestureKey].stateKey\n  }\n\n  // is the gesture enabled\n  protected get enabled(): boolean {\n    return this.controller.config.enabled && this.controller.config[this.gestureKey]\n  }\n  // get the controller state for a given gesture\n  protected get state() {\n    return this.controller.state[this.stateKey] as GestureState<GestureType>\n  }\n\n  // convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  protected abstract getPayloadFromEvent(event: UseGestureEvent): PayloadFromEvent\n\n  /**\n   * Utility function to get kinematics of the gesture\n   * @values values we want to calculate the kinematics from\n   * @event\n   * @returns set of values including movement, velocity, velocities, distance and direction\n   */\n  protected abstract getKinematics(values: [number, number | undefined], event: UseGestureEvent): Partial<GestureState<GestureType>>\n\n  // should return the bindings for a given gesture\n  public abstract getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][]\n\n  /**\n   * convenience method to update the controller state for a given gesture\n   * @param sharedState shared partial state object\n   * @param gestureState partial state object for the gesture handled by the recognizer\n   * @param [gestureFlag] if set, will also fire the gesture handler set by the user\n   */\n  protected updateState = (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState<GestureType>>): void => {\n    this.controller.updateState(sharedState, gestureState, this.stateKey)\n  }\n\n  protected fireGestureHandler = (gestureFlag: GestureFlag): void => {\n    this.controller.fireGestureHandler(this.gestureKey, gestureFlag)\n  }\n\n  // generic onStart function\n  protected onStart = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    const { values, gesturePayload, sharedPayload } = this.getPayloadFromEvent(event)\n\n    // TODO probably needs some rework, initialState and resetState should be different\n\n    const startState: GestureState<GestureType> = {\n      ...(initialState[this.stateKey] as GestureState<GestureType>),\n      values,\n      event,\n      first: true,\n      active: true,\n      time: event.timeStamp,\n      args: this.args,\n    }\n\n    const { values: prevValues, offset } = this.state\n\n    if (this.continuousGesture) {\n      startState.initial = startState.previous = prevValues\n      startState.delta = startState.movement = subV(values, prevValues)\n      startState.offset = values\n      Object.assign(startState, calculateAllKinematics(startState.movement, startState.delta, 0))\n    } else {\n      startState.initial = startState.previous = values\n      startState.offset = offset\n    }\n\n    this.updateState({ ...this.sharedStartState, ...sharedPayload }, { ...startState, ...gesturePayload, ...payload })\n    this.fireGestureHandler(GestureFlag.OnStart)\n  }\n\n  // generic onChange function\n  protected onChange = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    const { values, gesturePayload, sharedPayload } = this.getPayloadFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n    this.updateState({ ...sharedPayload }, { first: false, ...kinematics, ...gesturePayload, ...payload })\n    this.fireGestureHandler(GestureFlag.OnChange)\n  }\n\n  // generic onEnd function\n  protected onEnd = (event: UseGestureEvent, payload?: Partial<GestureState<GestureType>>): void => {\n    if (!this.state.active) return\n    this.removeWindowListeners()\n    this.updateState(this.sharedEndState!, { event, ...genericEndState, ...payload } as Partial<GestureState<GestureType>>)\n    this.fireGestureHandler(GestureFlag.OnEnd)\n  }\n\n  // generic cancel function\n  protected onCancel = (event: UseGestureEvent): void => {\n    this.updateState(null, { canceled: true, cancel: noop } as Partial<GestureState<GestureType>>)\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  // generic gesture handler for timeout-based gestures\n  protected timeoutHandler = (event: UseGestureEvent) => {\n    if (!this.enabled) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    if (!this.state.active) this.onStart(event)\n    else this.onChange(event)\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, subV, calculateAllKinematics } from '../utils'\nimport { Coordinates, GestureState, Vector2, UseGestureEvent } from '../types'\n\n/**\n * Abstract class for coordinates-based gesture recongizers\n */\nexport default abstract class CoordinatesRecognizer extends Recognizer<Coordinates> {\n  getKinematics(values: Vector2, event: UseGestureEvent): Partial<GestureState<Coordinates>> {\n    // we get the gesture specific state\n    const { values: xy, initial, offset, time } = this.state\n\n    // offset is the difference between the current and initial value vectors\n    const movement = subV(values, initial)\n    // delta is the difference between the current and previous value vectors\n    const delta = subV(values, xy)\n\n    const delta_t = event.timeStamp - time!\n    const { velocity, velocities, distance, direction } = calculateAllKinematics(movement, delta, delta_t)\n\n    return {\n      event,\n      values,\n      movement,\n      offset: addV(offset, delta),\n      delta,\n      velocity,\n      vxvy: velocities,\n      distance,\n      direction,\n      previous: xy,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nconst DEFAULT_DRAG_DELAY = 180\n\nexport default class DragRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { dragging: true, down: true }\n  sharedEndState = { dragging: false, down: false, buttons: 0, touches: 0 }\n\n  delayedEvent = false\n\n  constructor(controller: GestureController, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  onDragStart = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n\n    // making sure we're not dragging the element when more than one finger press the screen\n    const { touches } = getPointerEventData(event)\n    if (touches > 1) return\n\n    const { currentTarget, pointerId } = event as PointerEvent\n    if (this.controller.config.pointerEvents) {\n      // if pointers events\n      currentTarget && (currentTarget as any).setPointerCapture(pointerId)\n    } else {\n      this.removeWindowListeners()\n      const dragListeners: [string, Fn][] = [\n        ['mousemove', this.onDragChange],\n        ['touchmove', this.onDragChange],\n        ['mouseup', this.onDragEnd],\n        ['touchend', this.onDragEnd],\n        ['touchcancel', this.onDragEnd],\n      ]\n      this.addWindowListeners(dragListeners)\n    }\n\n    if (this.controller.config.dragDelay) {\n      const dragDelay = typeof this.controller.config.dragDelay === 'number' ? this.controller.config.dragDelay : DEFAULT_DRAG_DELAY\n      if (typeof event.persist === 'function') event.persist()\n      this.delayedEvent = true\n      this.setTimeout(() => this.startDrag(event), dragDelay)\n    } else {\n      this.startDrag(event)\n    }\n  }\n\n  startDrag = (event: UseGestureEvent): void => {\n    const { currentTarget, pointerId } = event as PointerEvent\n    this.onStart(event, { currentTarget, pointerId, cancel: () => this.onCancel(event) })\n    this.delayedEvent = false\n  }\n\n  onDragChange = (event: UseGestureEvent): void => {\n    const { canceled, active } = this.state\n    if (canceled) return\n\n    if (!active) {\n      if (this.delayedEvent) {\n        this.clearTimeout()\n        this.startDrag(event)\n      }\n      return\n    }\n\n    const { buttons, touches } = getPointerEventData(event)\n\n    if (buttons === 0 && touches === 0) {\n      this.onEnd(event)\n      return\n    }\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onDragEnd = (event: UseGestureEvent): void => {\n    this.clearTimeout()\n    this.delayedEvent = false\n\n    if (!this.state.active) return\n\n    const { currentTarget, pointerId } = this.state\n    if (currentTarget && this.controller.config.pointerEvents) (currentTarget as any).releasePointerCapture(pointerId)\n    this.onEnd(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerDown', this.onDragStart], ['onPointerMove', this.onDragChange], [['onPointerUp'], this.onDragEnd]]\n    }\n    return [[['onMouseDown', 'onTouchStart'], this.onDragStart]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getScrollEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { scrolling: true }\n  sharedEndState = { scrolling: false, velocity: 0, vxvy: [0, 0] }\n  continuousGesture = true\n\n  constructor(controller: GestureController, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getScrollEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onScroll', this.timeoutHandler]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { addV, getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class WheelRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { wheeling: true }\n  sharedEndState = { wheeling: false, velocity: 0, vxvy: [0, 0] }\n  continuousGesture = true\n\n  constructor(controller: GestureController, args: any[]) {\n    super('wheel', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WheelEvent>) {\n    const { xy: prevXY } = this.state\n    const { xy, ...sharedPayload } = getWheelEventData(event)\n    const values = addV(xy, prevXY)\n\n    return { values, sharedPayload }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (event.ctrlKey && this.controller.actions.has('onPinch')) return\n    this.timeoutHandler(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onWheel]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class MoveRecognizer extends CoordinatesRecognizer {\n  sharedStartState = { moving: true }\n  sharedEndState = { moving: false, velocity: 0, vxvy: [0, 0] }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('move', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerMove', this.timeoutHandler]]\n    }\n    return [['onMouseMove', this.timeoutHandler]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { GestureFlag, UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class HoverRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('hover', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent) {\n    const { xy, ...sharedPayload } = getPointerEventData(event)\n    return { values: xy, sharedPayload }\n  }\n\n  onPointerEnter = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n    const { values, sharedPayload } = this.getPayloadFromEvent(event)\n    this.updateState({ hovering: true, ...sharedPayload }, { values, event, args: this.args })\n    this.fireGestureHandler(GestureFlag.OnChange)\n  }\n\n  onPointerLeave = (event: UseGestureEvent): void => {\n    if (!this.enabled) return\n    const { values, sharedPayload } = this.getPayloadFromEvent(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateState({ hovering: false, moving: false, ...sharedPayload }, { ...kinematics, ...genericEndState, velocity: 0, vxvy: [0, 0] })\n\n    // when the mouse leaves the element, we also fire the move handler\n    // without waiting for move to end with debounce\n    this.controller.fireGestureHandler('move', GestureFlag.OnEnd)\n    this.controller.fireGestureHandler('hover', GestureFlag.OnChange)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.controller.config.pointerEvents) {\n      return [['onPointerEnter', this.onPointerEnter], ['onPointerLeave', this.onPointerLeave]]\n    }\n    return [['onMouseEnter', this.onPointerEnter], ['onMouseLeave', this.onPointerLeave]]\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, calculateVelocities, calculateDirection } from '../utils'\nimport { DistanceAngle, GestureState, Vector2, UseGestureEvent, GestureKey } from '../types'\nimport GestureController from '../controllers/GestureController'\n\n/**\n * Abstract class for distance/angle-based gesture recongizers\n */\nexport default abstract class DistanceAngleRecognizer extends Recognizer<DistanceAngle> {\n  constructor(gestureKey: GestureKey, controller: GestureController, args: any[] = []) {\n    super(gestureKey, controller, args)\n  }\n\n  getKinematics([d, a]: [number, number?], event: UseGestureEvent): Partial<GestureState<DistanceAngle>> {\n    const { values: da, turns, initial, offset, time } = this.state\n\n    // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n    a = a !== void 0 ? a : da[1]\n\n    const delta_d = d - da[0]\n    let delta_a = a - da[1]\n\n    /**\n     * The angle value might jump from 179deg to -179deg when we actually want to\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\n     * is supsiciously high (ie > 270deg) and increase the `turns` value\n     */\n    const newTurns = Math.abs(delta_a) > 270 ? turns + Math.sign(delta_a) : turns\n\n    // we update the angle difference to its corrected value\n    delta_a -= 360 * (newTurns - turns)\n    const delta = [delta_d, delta_a] as Vector2\n\n    const movement_d = d - initial[0]\n    const movement_a = a - 360 * newTurns - initial[1]\n    const movement: Vector2 = [movement_d, movement_a]\n\n    const delta_t = event.timeStamp - time!\n    const vdva = calculateVelocities(delta, delta_t)\n    const direction = calculateDirection(delta)\n    return {\n      event,\n      values: [d, a],\n      movement,\n      delta,\n      offset: addV(offset, delta),\n      vdva,\n      direction,\n      turns: newTurns,\n      previous: da,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn } from '../types'\n\nexport default class PinchRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true }\n  sharedEndState = { pinching: false, down: false, touches: 0 }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<TouchEvent>) {\n    const { da, origin, ...sharedPayload } = getTwoTouchesEventData(event)\n    return { values: da, gesturePayload: { origin }, sharedPayload }\n  }\n\n  onPinchStart = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2) return\n    this.onStart(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onPinchChange = (event: UseGestureEvent<TouchEvent>): void => {\n    const { canceled, active, time } = this.state\n    if (canceled || !active || event.touches.length !== 2 || event.timeStamp === time) return\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onTouchStart', this.onPinchStart], ['onTouchMove', this.onPinchChange], [['onTouchEnd', 'onTouchCancel'], this.onEnd]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, Fn, Vector2 } from '../types'\n\nexport default class PinchWheelRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true }\n  sharedEndState = { pinching: false }\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WheelEvent>) {\n    const {\n      xy: [, delta_d],\n      ...sharedPayload\n    } = getWheelEventData(event)\n    const {\n      da: [prev_d, prev_a],\n    } = this.state\n    const d = prev_d - delta_d\n    const a = prev_a !== void 0 ? prev_a : 0\n    const origin: Vector2 = [event.clientX, event.clientY]\n    return { values: [d, a] as Vector2, gesturePayload: { origin }, sharedPayload }\n  }\n\n  onWheel = (event: UseGestureEvent<WheelEvent>): void => {\n    if (!event.ctrlKey) return\n\n    if (!this.controller.config.passiveEvents) event.preventDefault()\n    else if (process.env.NODE_ENV === 'development')\n      console.warn(\n        'To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.'\n      )\n\n    this.timeoutHandler(event)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onWheel]]\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { UseGestureEvent, ReactEventHandlerKey, WebKitGestureEvent, Fn, Vector2 } from '../types'\n\nconst SCALE_FACTOR = 260\n\nexport default class PinchWebKitGestureRecognizer extends DistanceAngleRecognizer {\n  sharedStartState = { pinching: true, down: true, touches: 2 }\n  sharedEndState = { pinching: false, down: false, touches: 0 }\n  private origin?: Vector2\n\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  getPayloadFromEvent(event: UseGestureEvent<WebKitGestureEvent>) {\n    return { values: [event.scale * SCALE_FACTOR, event.rotation] as Vector2 }\n  }\n\n  onPinchStart = (event: WebKitGestureEvent): void => {\n    if (!this.enabled) return\n    event.preventDefault()\n    const origin: Vector2 = this.origin ? this.origin : [event.clientX, event.clientY]\n\n    this.onStart(event, { origin, cancel: () => this.onCancel(event) })\n  }\n\n  onPinchChange = (event: WebKitGestureEvent): void => {\n    const { canceled, active } = this.state\n    if (canceled || !active) return\n    event.preventDefault()\n\n    this.onChange(event, { cancel: () => this.onCancel(event) })\n  }\n\n  onGestureEnd = (event: WebKitGestureEvent): void => {\n    this.onEnd(event)\n    event.preventDefault()\n    this.origin = undefined\n  }\n\n  updateTouchData = (event: UseGestureEvent<TouchEvent>): void => {\n    if (!this.enabled || event.touches.length !== 2) return\n    const { origin } = getTwoTouchesEventData(event)\n    this.origin = origin\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [\n      ['onGestureStart', this.onPinchStart],\n      ['onGestureChange', this.onPinchChange],\n      [['onGestureEnd', 'onTouchCancel'], this.onGestureEnd],\n      [['onTouchStart', 'onTouchMove'], this.updateTouchData],\n    ]\n  }\n}\n","import {\n  StateKey,\n  StateObject,\n  GestureState,\n  SharedGestureState,\n  GestureKey,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  ReactEventHandlers,\n  GestureConfig,\n  GestureHandlers,\n  HandlerKey,\n  GestureHandlersPartial,\n} from '../types'\n\nimport { initialState, mappedKeys } from '../defaults'\nimport { addListeners, removeListeners, gestureEventSupported, chainFns } from '../utils'\n\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport HoverRecognizer from '../recognizers/HoverRecognizer'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport PinchWheelRecognizer from '../recognizers/PinchWheelRecognizer'\nimport PinchWebKitGestureRecognizer from '../recognizers/PinchWebKitGestureRecognizer'\nimport Recognizer from 'recognizers/Recognizer'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] | Fn }>\n\n/**\n * Gesture controller will create gesture recognizers (which handle the gesture logic)\n * and keep track of the state for all gestures\n *\n * @template BinderType the type the bind function should return\n */\nexport default class GestureController {\n  public state: StateObject = initialState // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  public actions: Set<HandlerKey>\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n  constructor(public handlers: GestureHandlersPartial, public config: GestureConfig) {\n    // if handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n    // actions will include 'onDrag' and 'onMove'\n    this.actions = new Set(Object.keys(this.handlers).map(k => <HandlerKey>k.replace(/End|Start/, '')))\n  }\n\n  /**\n   * Function run on component unmount\n   * Cleans timeouts and removes dom listeners set by the bind function\n   */\n  public clean = (): void => {\n    this.cleanOnBind()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(<StateKey>stateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render)\n   * Reset the binding object and remove dom listeners attached to config.domTarget\n   */\n  private cleanOnBind = (): void => {\n    this.bindings = {}\n    const { domTarget } = this.config\n    if (domTarget) {\n      removeListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Commodity function to let gesture recognizer update global state\n   * @param sharedState shared partial state object\n   * @param gestureState partial gesture specific state object\n   * @param stateKey the state key ('drag', 'move'...)\n   */\n  public updateState = (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState>, stateKey: StateKey): void => {\n    const newGestureState = { ...this.state[stateKey], ...gestureState }\n\n    if ('da' in newGestureState) newGestureState.da = newGestureState.values\n    else if ('xy' in newGestureState) newGestureState.xy = newGestureState.values\n\n    this.state = {\n      ...this.state,\n      shared: { ...this.state.shared, ...sharedState },\n      [stateKey]: newGestureState,\n    }\n  }\n\n  // fire the gesture handler defined by the user\n  public fireGestureHandler = (gestureKey: GestureKey, gestureFlag: GestureFlag): void => {\n    // gets the state key and handler key from the gesture key\n    // gestureKey: 'hover' -> stateKey: 'move', handlerKey: 'onHover'\n    const { stateKey, handlerKey } = mappedKeys[gestureKey]\n    const state = { ...this.state.shared, ...this.state[stateKey] }\n    if (state.event) state.event.gesture = gestureKey\n\n    if (gestureFlag === GestureFlag.OnStart) {\n      const handlerStart = `${handlerKey}Start` as keyof GestureHandlers\n      const handler = this.handlers[handlerStart] as any\n      handler && handler(state)\n    }\n\n    // whenever a flag is set, we run the default on[Gesture] function\n    // i.e. GestureFlag.OnStart would trigger both onDragStart and onDrag\n    const handler = this.handlers[handlerKey] as any\n    if (handler) {\n      const newMemo = handler(state)\n      this.state[stateKey].memo = newMemo !== void 0 ? newMemo : this.state[stateKey].memo\n    }\n\n    if (gestureFlag === GestureFlag.OnEnd) {\n      const handlerEnd = `${handlerKey}End` as keyof GestureHandlers\n      const handler = this.handlers[handlerEnd] as any\n      handler && handler(state)\n    }\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window\n   * @param stateKey\n   * @param listeners\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.event)\n  }\n\n  // commodity function to let recognizers simply remove listeners from config.window\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.event)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * Adds a recognizer to this.bindings\n   * @param recognizer\n   */\n  private addRecognizer = (recognizer: Recognizer): void => {\n    recognizer.getEventBindings().map(this.addEventBindings)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  private addEventBindings = ([eventNames, fn]: [ReactEventHandlerKey | ReactEventHandlerKey[], Fn]): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n\n    eventNamesArray.forEach(eventName => {\n      this.bindings[eventName] = this.bindings[eventName] ? [...(<Fn[]>this.bindings[eventName]), fn] : [fn]\n    })\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  private addDomTargetListeners = (): void => {\n    const { domTarget } = this.config\n\n    // we iterate on the entries of this.binding\n    // for each event, we chain the array of functions mapped to it\n    // and push it to this.domListeners\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(<Fn[]>fns))])\n    })\n\n    addListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with\n   */\n  private getBindings = (): ReactEventHandlers => {\n    const output: ReactEventHandlers = {}\n    const captureString = this.config.event.capture ? 'Capture' : ''\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      output[key] = chainFns(...(<Fn[]>fnsArray))\n    })\n\n    return output\n  }\n\n  public bind = (...args: any[]): Fn | ReactEventHandlers => {\n    const { domTarget } = this.config\n\n    const genuineHandlers = { ...this.handlers }\n\n    // cleaning before adding\n    this.cleanOnBind()\n\n    if (this.actions.has('onDrag')) {\n      this.addRecognizer(new DragRecognizer(this, args))\n      delete genuineHandlers.onDrag\n      delete genuineHandlers.onDragStart\n      delete genuineHandlers.onDragEnd\n    }\n    if (this.actions.has('onScroll')) {\n      this.addRecognizer(new ScrollRecognizer(this, args))\n      delete genuineHandlers.onScroll\n      delete genuineHandlers.onScrollStart\n      delete genuineHandlers.onScrollEnd\n    }\n    if (this.actions.has('onWheel')) {\n      this.addRecognizer(new WheelRecognizer(this, args))\n      delete genuineHandlers.onWheel\n      delete genuineHandlers.onWheelStart\n      delete genuineHandlers.onWheelEnd\n    }\n    if (this.actions.has('onMove')) {\n      this.addRecognizer(new MoveRecognizer(this, args))\n      delete genuineHandlers.onMove\n      delete genuineHandlers.onMoveStart\n      delete genuineHandlers.onMoveEnd\n    }\n    if (this.actions.has('onHover')) {\n      this.addRecognizer(new HoverRecognizer(this, args))\n      delete genuineHandlers.onHover\n    }\n    if (this.actions.has('onPinch')) {\n      // since react doesn't have handlers for gesture events we can only use them\n      // domTarget is set (and when the browser supprots them).\n      if (domTarget && gestureEventSupported()) {\n        this.addRecognizer(new PinchWebKitGestureRecognizer(this, args))\n      } else {\n        this.addRecognizer(new PinchRecognizer(this, args))\n        this.addRecognizer(new PinchWheelRecognizer(this, args))\n      }\n      delete genuineHandlers.onPinch\n      delete genuineHandlers.onPinchStart\n      delete genuineHandlers.onPinchEnd\n    }\n\n    // we also add event bindings for genuine handlers\n    Object.entries(genuineHandlers).map(([event, fn]) => {\n      // we're cheating when it comes to event type :(\n      this.addEventBindings([<ReactEventHandlerKey>event, <Fn>fn])\n    })\n\n    // if config.domTarget is set we add event listeners to it and return the clean function\n    if (domTarget) {\n      this.addDomTargetListeners()\n      return this.clean\n    }\n\n    // if not, we return an object that contains gesture handlers mapped to react handler event keys\n    return this.getBindings()\n  }\n}\n","import React from 'react'\nimport GestureController from './controllers/GestureController'\nimport { Handler, GestureHandlersPartial, GestureConfig, Coordinates, Fn, ReactEventHandlers, DistanceAngle, Omit } from './types'\nimport { defaultConfig } from './defaults'\n\n/** API\n * const bind = useDrag(() => { ... })\n * const bind = usePinch(() => { ... })\n * const bind = useMove(() => { ... })\n * const bind = useScroll(() => { ... })\n * const bind = useWheel(() => { ... })\n *\n * Handlers object:\n * const bind = useGesture({ onDrag: () => { ... }, onMove: () => { ... } })\n *\n * DomTarget:\n * const bind = useGesture({ onScroll: () => { ... } }, { domTarget: window })\n * React.useEffect(bind, [bind])\n */\n\ntype PartialGestureConfig = Partial<Omit<GestureConfig, 'passiveEvents'>>\ntype GetBinderTypeFromDomTarget<T extends PartialGestureConfig> = T['domTarget'] extends object ? Fn : ReactEventHandlers\n\nexport function useGesture<Config extends PartialGestureConfig>(\n  handlers: GestureHandlersPartial,\n  config?: Config\n): (...args: any[]) => GetBinderTypeFromDomTarget<Config> {\n  // the gesture controller will keep track of all gesture states\n  const gestureController = React.useRef<GestureController>()\n\n  if (!gestureController.current) {\n    // we initialize the gesture controller once\n    gestureController.current = new GestureController(handlers, getDerivedConfig(config))\n  }\n\n  React.useEffect(() => {\n    // every time handlers or config change, we let the gesture controller compute\n    // them so that the gesture handlers functions are aware of the changes\n    gestureController.current!.config = getDerivedConfig(config)\n    gestureController.current!.handlers = handlers\n  }, [handlers, config])\n\n  // when the user component unmounts, we run our gesture controller clean function\n  React.useEffect(() => gestureController.current!.clean, [])\n\n  // we return the bind function of our controller, which returns an binding object or\n  // a cleaning function depending on whether config.domTarget is set\n  return gestureController.current.bind as (...args: any[]) => GetBinderTypeFromDomTarget<Config>\n}\n\n/* SHORTHAND HANDLERS */\nexport const useDrag = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onDrag: handler }, config)\nexport const useMove = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onMove: handler }, config)\nexport const useHover = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onHover: handler }, config)\nexport const useScroll = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onScroll: handler }, config)\nexport const useWheel = (handler: Handler<Coordinates>, config?: PartialGestureConfig) => useGesture({ onWheel: handler }, config)\nexport const usePinch = (handler: Handler<DistanceAngle>, config?: PartialGestureConfig) => useGesture({ onPinch: handler }, config)\n\nfunction getDerivedConfig(config?: Partial<GestureConfig>): GestureConfig {\n  const derivedConfig = { ...defaultConfig, ...config }\n  const { domTarget } = derivedConfig\n  const realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  derivedConfig.domTarget = realDomTarget\n\n  const passive = derivedConfig.event.passive !== void 0 ? derivedConfig.event.passive : true\n\n  // TODO make test to check if passive is correctly passed to config\n\n  // if there isn't a domtarget or if event.passive is true, then passiveEvents is true\n  derivedConfig.passiveEvents = !derivedConfig.domTarget || passive\n\n  return derivedConfig\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}