{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = a => a instanceof Uint8Array;\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\nexports.bytesToHex = bytesToHex;\nfunction numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? \"0\".concat(hex) : hex;\n}\nexports.numberToHexUnpadded = numberToHexUnpadded;\nfunction hexToNumber(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : \"0x\".concat(hex));\n}\nexports.hexToNumber = hexToNumber;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\nexports.hexToBytes = hexToBytes;\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\nexports.bytesToNumberBE = bytesToNumberBE;\nfunction bytesToNumberLE(bytes) {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexports.bytesToNumberLE = bytesToNumberLE;\nfunction numberToBytesBE(n, len) {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexports.numberToBytesBE = numberToBytesBE;\nfunction numberToBytesLE(n, len) {\n  return numberToBytesBE(n, len).reverse();\n}\nexports.numberToBytesLE = numberToBytesLE;\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n  return hexToBytes(numberToHexUnpadded(n));\n}\nexports.numberToVarBytesBE = numberToVarBytesBE;\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n  let res;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(\"\".concat(title, \" must be valid hex string, got \\\"\").concat(hex, \"\\\". Cause: \").concat(e));\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(\"\".concat(title, \" must be hex string or Uint8Array\"));\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error(\"\".concat(title, \" expected \").concat(expectedLength, \" bytes, got \").concat(len));\n  return res;\n}\nexports.ensureBytes = ensureBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach(a => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\nexports.concatBytes = concatBytes;\nfunction equalBytes(b1, b2) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\nexports.equalBytes = equalBytes;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n  if (typeof str !== 'string') throw new Error(\"utf8ToBytes expected string, got \".concat(typeof str));\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexports.utf8ToBytes = utf8ToBytes;\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\nexports.bitLen = bitLen;\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n  return n >> BigInt(pos) & _1n;\n}\nexports.bitGet = bitGet;\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n  return n | (value ? _1n : _0n) << BigInt(pos);\n};\nexports.bitSet = bitSet;\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = n => (_2n << BigInt(n - 1)) - _1n;\nexports.bitMask = bitMask;\n// DRBG\nconst u8n = data => new Uint8Array(data); // creates Uint8Array\nconst u8fr = arr => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = function () {\n    for (var _len2 = arguments.length, b = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      b[_key2] = arguments[_key2];\n    }\n    return hmacFn(k, v, ...b);\n  }; // hmac(k)(v, ...values)\n  const reseed = function () {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : u8n();\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed, pred) => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\nexports.createHmacDrbg = createHmacDrbg;\n// Validating curves and fields\nconst validatorFns = {\n  bigint: val => typeof val === 'bigint',\n  function: val => typeof val === 'function',\n  boolean: val => typeof val === 'boolean',\n  string: val => typeof val === 'string',\n  isSafeInteger: val => Number.isSafeInteger(val),\n  array: val => Array.isArray(val),\n  field: (val, object) => object.Fp.isValid(val),\n  hash: val => typeof val === 'function' && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators) {\n  let optValidators = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const checkField = (fieldName, type, isOptional) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error(\"Invalid validator \\\"\".concat(type, \"\\\", expected function\"));\n    const val = object[fieldName];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\"Invalid param \".concat(String(fieldName), \"=\").concat(val, \" (\").concat(typeof val, \"), expected \").concat(type));\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type, true);\n  return object;\n}\nexports.validateObject = validateObject;\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });","map":{"version":3,"names":["_0n","BigInt","_1n","_2n","u8a","a","Uint8Array","hexes","Array","from","length","v","i","toString","padStart","bytesToHex","bytes","Error","hex","exports","numberToHexUnpadded","num","concat","hexToNumber","hexToBytes","len","array","j","hexByte","slice","byte","Number","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","res","e","concatBytes","_len","arguments","arrays","_key","r","reduce","sum","pad","forEach","set","equalBytes","b1","b2","utf8ToBytes","str","TextEncoder","encode","bitLen","bitGet","pos","bitSet","value","bitMask","u8n","data","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","fill","h","_len2","b","_key2","reseed","seed","undefined","gen","out","sl","push","genUntil","pred","validatorFns","bigint","val","function","boolean","string","isSafeInteger","isArray","field","object","Fp","isValid","hash","outputLen","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries"],"sources":["../src/abstract/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}