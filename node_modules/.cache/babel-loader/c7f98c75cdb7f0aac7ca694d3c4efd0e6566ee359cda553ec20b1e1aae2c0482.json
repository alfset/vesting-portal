{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst varuint = require('../varint');\nconst bip32Derivation = require('./bip32Derivation');\nconst isValidBIP340Key = pubkey => pubkey.length === 32;\nfunction makeConverter(TYPE_BYTE) {\n  const parent = bip32Derivation.makeConverter(TYPE_BYTE, isValidBIP340Key);\n  function decode(keyVal) {\n    const nHashes = varuint.decode(keyVal.value);\n    const nHashesLen = varuint.encodingLength(nHashes);\n    const base = parent.decode({\n      key: keyVal.key,\n      value: keyVal.value.slice(nHashesLen + nHashes * 32)\n    });\n    const leafHashes = new Array(nHashes);\n    for (let i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32) {\n      leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);\n    }\n    return Object.assign({}, base, {\n      leafHashes\n    });\n  }\n  function encode(data) {\n    const base = parent.encode(data);\n    const nHashesLen = varuint.encodingLength(data.leafHashes.length);\n    const nHashesBuf = Buffer.allocUnsafe(nHashesLen);\n    varuint.encode(data.leafHashes.length, nHashesBuf);\n    const value = Buffer.concat([nHashesBuf, ...data.leafHashes, base.value]);\n    return Object.assign({}, base, {\n      value\n    });\n  }\n  const expected = '{ ' + 'masterFingerprint: Buffer; ' + 'pubkey: Buffer; ' + 'path: string; ' + 'leafHashes: Buffer[]; ' + '}';\n  function check(data) {\n    return Array.isArray(data.leafHashes) && data.leafHashes.every(leafHash => Buffer.isBuffer(leafHash) && leafHash.length === 32) && parent.check(data);\n  }\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAddToArray: parent.canAddToArray\n  };\n}\nexports.makeConverter = makeConverter;","map":{"version":3,"names":["Object","defineProperty","exports","value","varuint","require","bip32Derivation","isValidBIP340Key","pubkey","length","makeConverter","TYPE_BYTE","parent","decode","keyVal","nHashes","nHashesLen","encodingLength","base","key","slice","leafHashes","Array","i","_offset","assign","encode","data","nHashesBuf","Buffer","allocUnsafe","concat","expected","check","isArray","every","leafHash","isBuffer","canAddToArray"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip174/src/lib/converter/shared/tapBip32Derivation.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst varuint = require('../varint');\nconst bip32Derivation = require('./bip32Derivation');\nconst isValidBIP340Key = pubkey => pubkey.length === 32;\nfunction makeConverter(TYPE_BYTE) {\n  const parent = bip32Derivation.makeConverter(TYPE_BYTE, isValidBIP340Key);\n  function decode(keyVal) {\n    const nHashes = varuint.decode(keyVal.value);\n    const nHashesLen = varuint.encodingLength(nHashes);\n    const base = parent.decode({\n      key: keyVal.key,\n      value: keyVal.value.slice(nHashesLen + nHashes * 32),\n    });\n    const leafHashes = new Array(nHashes);\n    for (let i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32) {\n      leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);\n    }\n    return Object.assign({}, base, { leafHashes });\n  }\n  function encode(data) {\n    const base = parent.encode(data);\n    const nHashesLen = varuint.encodingLength(data.leafHashes.length);\n    const nHashesBuf = Buffer.allocUnsafe(nHashesLen);\n    varuint.encode(data.leafHashes.length, nHashesBuf);\n    const value = Buffer.concat([nHashesBuf, ...data.leafHashes, base.value]);\n    return Object.assign({}, base, { value });\n  }\n  const expected =\n    '{ ' +\n    'masterFingerprint: Buffer; ' +\n    'pubkey: Buffer; ' +\n    'path: string; ' +\n    'leafHashes: Buffer[]; ' +\n    '}';\n  function check(data) {\n    return (\n      Array.isArray(data.leafHashes) &&\n      data.leafHashes.every(\n        leafHash => Buffer.isBuffer(leafHash) && leafHash.length === 32,\n      ) &&\n      parent.check(data)\n    );\n  }\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAddToArray: parent.canAddToArray,\n  };\n}\nexports.makeConverter = makeConverter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}