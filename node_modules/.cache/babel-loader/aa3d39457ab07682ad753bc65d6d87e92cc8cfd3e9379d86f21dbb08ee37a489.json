{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nconst mod = require(\"./modular.js\");\nconst ut = require(\"./utils.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst curve_js_1 = require(\"./curve.js\");\nfunction validatePointOpts(curve) {\n  const opts = (0, curve_js_1.validateBasic)(curve);\n  ut.validateObject(opts, {\n    a: 'field',\n    b: 'field'\n  }, {\n    allowedPrivateKeyLengths: 'array',\n    wrapPrivateKey: 'boolean',\n    isTorsionFree: 'function',\n    clearCofactor: 'function',\n    allowInfinityPoint: 'boolean',\n    fromBytes: 'function',\n    toBytes: 'function'\n  });\n  const {\n    endo,\n    Fp,\n    a\n  } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({\n    ...opts\n  });\n}\n// ASN.1 DER encoding utilities\nconst {\n  bytesToNumberBE: b2n,\n  hexToBytes: h2b\n} = ut;\nexports.DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor() {\n      let m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      super(m);\n    }\n  },\n  _parseInt(data) {\n    const {\n      Err: E\n    } = exports.DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000)) throw new E('Invalid signature integer: unnecessary leading zero');\n    return {\n      d: b2n(res),\n      l: data.subarray(len + 2)\n    }; // d is data, l is left\n  },\n\n  toSig(hex) {\n    // parse DER signature\n    const {\n      Err: E\n    } = exports.DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const {\n      d: r,\n      l: sBytes\n    } = exports.DER._parseInt(data.subarray(2));\n    const {\n      d: s,\n      l: rBytesLeft\n    } = exports.DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return {\n      r,\n      s\n    };\n  },\n  hexFromSig(sig) {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = s => Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s;\n    const h = num => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? \"0\".concat(hex) : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return \"30\".concat(h(rhl + shl + 4), \"02\").concat(rl).concat(r, \"02\").concat(sl).concat(s);\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n  const CURVE = validatePointOpts(opts);\n  const {\n    Fp\n  } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {\n    const a = point.toAffine();\n    return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n  });\n  const fromBytes = CURVE.fromBytes || (bytes => {\n    // const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n    return {\n      x,\n      y\n    };\n  });\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    const {\n      a,\n      b\n    } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num) {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key) {\n    const {\n      allowedPrivateKeyLengths: lengths,\n      nByteLength,\n      wrapPrivateKey,\n      n\n    } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num;\n    try {\n      num = typeof key === 'bigint' ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\"private key must be \".concat(nByteLength, \" bytes, hex or bigint, not \").concat(typeof key));\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n  const pointPrecomputes = new Map();\n  function assertPrjPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point {\n    constructor(px, py, pz) {\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p) {\n      const {\n        x,\n        y\n      } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = i => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex) {\n      const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // A point on curve is valid if it conforms to equation.\n    assertValidity() {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const {\n        x,\n        y\n      } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY() {\n      const {\n        y\n      } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n    /**\n     * Compare one point to another.\n     */\n    equals(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate() {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const {\n        a,\n        b\n      } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, comp => {\n        const toInv = Fp.invertBatch(comp.map(p => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n) {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const {\n        endo\n      } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n      // Apply endomorphism\n      let {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar) {\n      assertGE(scalar);\n      let n = scalar;\n      let point, fake; // Fake point is used to const-time mult\n      const {\n        endo\n      } = CURVE;\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = endo.splitScalar(n);\n        let {\n          p: k1p,\n          f: f1p\n        } = this.wNAF(k1);\n        let {\n          p: k2p,\n          f: f2p\n        } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const {\n          p,\n          f\n        } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q, a, b) {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (P, a // Select faster multiply() method\n      ) => a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz) {\n      const {\n        px: x,\n        py: y,\n        pz: z\n      } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return {\n        x: Fp.ZERO,\n        y: Fp.ZERO\n      };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return {\n        x: ax,\n        y: ay\n      };\n    }\n    isTorsionFree() {\n      const {\n        h: cofactor,\n        isTorsionFree\n      } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor() {\n      const {\n        h: cofactor,\n        clearCofactor\n      } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this);\n      return this.multiplyUnsafe(CURVE.h);\n    }\n    toRawBytes() {\n      let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n    toHex() {\n      let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n  const _bits = CURVE.nBitLength;\n  const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  };\n}\nexports.weierstrassPoints = weierstrassPoints;\nfunction validateOpts(curve) {\n  const opts = (0, curve_js_1.validateBasic)(curve);\n  ut.validateObject(opts, {\n    hash: 'hash',\n    hmac: 'function',\n    randomBytes: 'function'\n  }, {\n    bits2int: 'function',\n    bits2int_modN: 'function',\n    lowS: 'boolean'\n  });\n  return Object.freeze({\n    lowS: true,\n    ...opts\n  });\n}\nfunction weierstrass(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER\n  } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n  function isValidFieldElement(num) {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n\n  function modN(a) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed) {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n          x,\n          y\n        };\n      } else {\n        throw new Error(\"Point of length \".concat(len, \" was invalid. Expected \").concat(compressedLen, \" compressed bytes or \").concat(uncompressedLen, \" uncompressed bytes\"));\n      }\n    }\n  });\n  const numToNByteStr = num => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n  function isBiggerThanHalfOrder(number) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature {\n    constructor(r, s, recovery) {\n      this.r = r;\n      this.s = s;\n      this.recovery = recovery;\n      this.assertValidity();\n    }\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex) {\n      const l = CURVE.nByteLength;\n      hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex) {\n      const {\n        r,\n        s\n      } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));\n      return new Signature(r, s);\n    }\n    assertValidity() {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n    addRecoveryBit(recovery) {\n      return new Signature(this.r, this.s, recovery);\n    }\n    recoverPublicKey(msgHash) {\n      const {\n        r,\n        s,\n        recovery: rec\n      } = this;\n      const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return isBiggerThanHalfOrder(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return exports.DER.hexFromSig({\n        r: this.r,\n        s: this.s\n      });\n    }\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  const utils = {\n    isValidPrivateKey(privateKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: () => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute() {\n      let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    }\n  };\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey) {\n    let isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA, publicB) {\n    let isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int = CURVE.bits2int || function (bytes) {\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n    const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  const bits2int_modN = CURVE.bits2int_modN || function (bytes) {\n    return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK)) throw new Error(\"bigint expected < 2^\".concat(CURVE.nBitLength));\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n    const {\n      hash,\n      randomBytes\n    } = CURVE;\n    let {\n      lowS,\n      prehash,\n      extraEntropy: ent\n    } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n    if (prehash) msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes\n    }\n\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n\n    return {\n      seed,\n      k2sig\n    };\n  }\n  const defaultSigOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  const defaultVerOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash, privKey) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    const {\n      seed,\n      k2sig\n    } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey) {\n    var _Point$BASE$multiplyA;\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultVerOpts;\n    const sg = signature;\n    msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n    publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const {\n      lowS,\n      prehash\n    } = opts;\n    let _sig = undefined;\n    let P;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof exports.DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const {\n          r,\n          s\n        } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if (error.message === 'PARSE') throw new Error(\"signature must be Signature instance, Uint8Array or hex string\");\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const {\n      r,\n      s\n    } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = (_Point$BASE$multiplyA = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)) === null || _Point$BASE$multiplyA === void 0 ? void 0 : _Point$BASE$multiplyA.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils\n  };\n}\nexports.weierstrass = weierstrass;\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u, v) => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u, v) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return u => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const {\n      isValid,\n      value\n    } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return {\n      x,\n      y\n    };\n  };\n}\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;","map":{"version":3,"names":["mod","require","ut","utils_js_1","curve_js_1","validatePointOpts","curve","opts","validateBasic","validateObject","a","b","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","toBytes","endo","Fp","eql","ZERO","Error","beta","splitScalar","Object","freeze","bytesToNumberBE","b2n","hexToBytes","h2b","exports","DER","Err","DERErr","constructor","m","arguments","length","undefined","_parseInt","data","E","len","res","subarray","d","l","toSig","hex","Uint8Array","r","sBytes","s","rBytesLeft","hexFromSig","sig","slice","Number","parseInt","h","num","toString","concat","shl","rhl","sl","rl","_0n","BigInt","_1n","_2n","_3n","_4n","weierstrassPoints","CURVE","_c","point","_isCompressed","toAffine","concatBytes","from","x","y","bytes","tail","BYTES","weierstrassEquation","x2","sqr","x3","mul","add","Gy","Gx","isWithinCurveOrder","n","assertGE","normPrivateKeyToScalar","key","lengths","nByteLength","bytesToHex","includes","padStart","ensureBytes","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","isValid","fromAffine","p","is0","i","ONE","normalizeZ","points","toInv","invertBatch","map","fromHex","P","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","neg","double","b3","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","Q","G","sum","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","nBitLength","Math","ceil","ProjectivePoint","validateOpts","hash","hmac","randomBytes","bits2int","bits2int_modN","lowS","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","isValidFieldElement","ORDER","modN","invN","invert","cat","head","y2","sqrt","isYOdd","isHeadOdd","numToNByteStr","numberToBytesBE","isBiggerThanHalfOrder","number","HALF","normalizeS","slcNum","to","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","getMinHashLength","mapHashToField","precompute","getPublicKey","isProbPub","item","arr","str","getSharedSecret","privateA","publicB","delta","ORDER_MASK","bitMask","int2octets","prepSig","defaultSigOpts","some","k","prehash","extraEntropy","ent","h1int","seedArgs","e","push","seed","k2sig","kBytes","ik","q","normS","defaultVerOpts","sign","privKey","C","drbg","createHmacDrbg","outputLen","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","derError","message","is","v","SWUFpSqrtRatio","Z","o","c1","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","pow","c7","sqrtRatio","u","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","value","y1","mapToCurveSimpleSWU","validateField","A","B","tv6","div"],"sources":["../src/abstract/weierstrass.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}