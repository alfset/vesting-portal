{"ast":null,"code":"// -- NetworkMonitor --------------------------------------------------------- //\nclass NetworkMonitor {\n  constructor() {\n    this._eventEmitters = [];\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {\n      window.addEventListener('online', () => this.trigger('online'));\n      window.addEventListener('offline', () => this.trigger('offline'));\n    }\n  }\n  on(event, callback) {\n    this._eventEmitters.push({\n      event,\n      callback\n    });\n  }\n  trigger(event) {\n    let eventEmitters = [];\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n    eventEmitters.forEach(eventEmitter => {\n      eventEmitter.callback();\n    });\n  }\n}\nexport default NetworkMonitor;","map":{"version":3,"names":["NetworkMonitor","constructor","_eventEmitters","window","addEventListener","trigger","on","event","callback","push","eventEmitters","filter","eventEmitter","forEach"],"sources":["../../../../../src/@terra-dev/walletconnect/impl/socket-transport/network.ts"],"sourcesContent":["import {\n  NetworkEvent,\n  INetworkEventEmitter,\n  INetworkMonitor,\n} from '@walletconnect/types';\n\n// -- NetworkMonitor --------------------------------------------------------- //\n\nclass NetworkMonitor implements INetworkMonitor {\n  private _eventEmitters: INetworkEventEmitter[];\n\n  constructor() {\n    this._eventEmitters = [];\n\n    if (\n      typeof window !== 'undefined' &&\n      typeof (window as any).addEventListener !== 'undefined'\n    ) {\n      window.addEventListener('online', () => this.trigger('online'));\n      window.addEventListener('offline', () => this.trigger('offline'));\n    }\n  }\n\n  public on(event: NetworkEvent, callback: () => void): void {\n    this._eventEmitters.push({\n      event,\n      callback,\n    });\n  }\n\n  public trigger(event: NetworkEvent): void {\n    let eventEmitters: INetworkEventEmitter[] = [];\n\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(\n        (eventEmitter: INetworkEventEmitter) => eventEmitter.event === event,\n      );\n    }\n\n    eventEmitters.forEach((eventEmitter: INetworkEventEmitter) => {\n      eventEmitter.callback();\n    });\n  }\n}\n\nexport default NetworkMonitor;\n"],"mappings":"AAMA;AAEA,MAAMA,cAAc;EAGlBC,YAAA;IACE,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB,IACE,OAAOC,MAAM,KAAK,WAAW,IAC7B,OAAQA,MAAc,CAACC,gBAAgB,KAAK,WAAW,EACvD;MACAD,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;MAC/DF,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,MAAM,IAAI,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;;EAErE;EAEOC,EAAEA,CAACC,KAAmB,EAAEC,QAAoB;IACjD,IAAI,CAACN,cAAc,CAACO,IAAI,CAAC;MACvBF,KAAK;MACLC;KACD,CAAC;EACJ;EAEOH,OAAOA,CAACE,KAAmB;IAChC,IAAIG,aAAa,GAA2B,EAAE;IAE9C,IAAIH,KAAK,EAAE;MACTG,aAAa,GAAG,IAAI,CAACR,cAAc,CAACS,MAAM,CACvCC,YAAkC,IAAKA,YAAY,CAACL,KAAK,KAAKA,KAAK,CACrE;;IAGHG,aAAa,CAACG,OAAO,CAAED,YAAkC,IAAI;MAC3DA,YAAY,CAACJ,QAAQ,EAAE;IACzB,CAAC,CAAC;EACJ;;AAGF,eAAeR,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}