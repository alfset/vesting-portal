{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst typeFields_1 = require('../../typeFields');\nfunction decode(keyVal) {\n  if (keyVal.key[0] !== typeFields_1.InputTypes.TAP_MERKLE_ROOT || keyVal.key.length !== 1) {\n    throw new Error('Decode Error: could not decode tapMerkleRoot with key 0x' + keyVal.key.toString('hex'));\n  }\n  if (!check(keyVal.value)) {\n    throw new Error('Decode Error: tapMerkleRoot not a 32-byte hash');\n  }\n  return keyVal.value;\n}\nexports.decode = decode;\nfunction encode(value) {\n  const key = Buffer.from([typeFields_1.InputTypes.TAP_MERKLE_ROOT]);\n  return {\n    key,\n    value\n  };\n}\nexports.encode = encode;\nexports.expected = 'Buffer';\nfunction check(data) {\n  return Buffer.isBuffer(data) && data.length === 32;\n}\nexports.check = check;\nfunction canAdd(currentData, newData) {\n  return !!currentData && !!newData && currentData.tapMerkleRoot === undefined;\n}\nexports.canAdd = canAdd;","map":{"version":3,"names":["Object","defineProperty","exports","value","typeFields_1","require","decode","keyVal","key","InputTypes","TAP_MERKLE_ROOT","length","Error","toString","check","encode","Buffer","from","expected","data","isBuffer","canAdd","currentData","newData","tapMerkleRoot","undefined"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip174/src/lib/converter/input/tapMerkleRoot.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../../typeFields');\nfunction decode(keyVal) {\n  if (\n    keyVal.key[0] !== typeFields_1.InputTypes.TAP_MERKLE_ROOT ||\n    keyVal.key.length !== 1\n  ) {\n    throw new Error(\n      'Decode Error: could not decode tapMerkleRoot with key 0x' +\n        keyVal.key.toString('hex'),\n    );\n  }\n  if (!check(keyVal.value)) {\n    throw new Error('Decode Error: tapMerkleRoot not a 32-byte hash');\n  }\n  return keyVal.value;\n}\nexports.decode = decode;\nfunction encode(value) {\n  const key = Buffer.from([typeFields_1.InputTypes.TAP_MERKLE_ROOT]);\n  return { key, value };\n}\nexports.encode = encode;\nexports.expected = 'Buffer';\nfunction check(data) {\n  return Buffer.isBuffer(data) && data.length === 32;\n}\nexports.check = check;\nfunction canAdd(currentData, newData) {\n  return !!currentData && !!newData && currentData.tapMerkleRoot === undefined;\n}\nexports.canAdd = canAdd;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,YAAY,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAChD,SAASC,MAAMA,CAACC,MAAM,EAAE;EACtB,IACEA,MAAM,CAACC,GAAG,CAAC,CAAC,CAAC,KAAKJ,YAAY,CAACK,UAAU,CAACC,eAAe,IACzDH,MAAM,CAACC,GAAG,CAACG,MAAM,KAAK,CAAC,EACvB;IACA,MAAM,IAAIC,KAAK,CACb,0DAA0D,GACxDL,MAAM,CAACC,GAAG,CAACK,QAAQ,CAAC,KAAK,CAC7B,CAAC;EACH;EACA,IAAI,CAACC,KAAK,CAACP,MAAM,CAACJ,KAAK,CAAC,EAAE;IACxB,MAAM,IAAIS,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOL,MAAM,CAACJ,KAAK;AACrB;AACAD,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvB,SAASS,MAAMA,CAACZ,KAAK,EAAE;EACrB,MAAMK,GAAG,GAAGQ,MAAM,CAACC,IAAI,CAAC,CAACb,YAAY,CAACK,UAAU,CAACC,eAAe,CAAC,CAAC;EAClE,OAAO;IAAEF,GAAG;IAAEL;EAAM,CAAC;AACvB;AACAD,OAAO,CAACa,MAAM,GAAGA,MAAM;AACvBb,OAAO,CAACgB,QAAQ,GAAG,QAAQ;AAC3B,SAASJ,KAAKA,CAACK,IAAI,EAAE;EACnB,OAAOH,MAAM,CAACI,QAAQ,CAACD,IAAI,CAAC,IAAIA,IAAI,CAACR,MAAM,KAAK,EAAE;AACpD;AACAT,OAAO,CAACY,KAAK,GAAGA,KAAK;AACrB,SAASO,MAAMA,CAACC,WAAW,EAAEC,OAAO,EAAE;EACpC,OAAO,CAAC,CAACD,WAAW,IAAI,CAAC,CAACC,OAAO,IAAID,WAAW,CAACE,aAAa,KAAKC,SAAS;AAC9E;AACAvB,OAAO,CAACmB,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}