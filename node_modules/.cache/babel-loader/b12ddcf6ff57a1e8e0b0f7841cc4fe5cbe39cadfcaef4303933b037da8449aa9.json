{"ast":null,"code":"import{useCallback,useState,useMemo,useEffect}from\"react\";import*as fcl from\"@onflow/fcl\";import{useTranslation}from'react-i18next';import{// useDispatch,\nuseSelector}from'react-redux';// import { useTranslation } from 'react-i18next'\n// import { ChainId } from \"../../config/chainConfig/chainId\";\nimport config from\"../../config\";import{useActiveReact}from'../../hooks/useActiveReact';import{tryParseAmount3}from'../../state/swap/hooks';import{recordsTxns}from'../../utils/bridge/register';import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';import{BigAmount}from\"../../utils/formatBignumber\";import{ChainId}from\"../../config/chainConfig/chainId\";// import {\n//   flowAddress\n// } from './actions'\nexport function useLoginFlow(){const loginFlow=useCallback(()=>{fcl.authenticate();},[]);const logoutFlow=useCallback(()=>{fcl.unauthenticate();},[]);return{loginFlow,logoutFlow};}export function useFlowAddress(){const account=useSelector(state=>state.flow.flowAddress);return{flowAddress:account};}export function useFlowBalance(){const flowBalanceList=useSelector(state=>state.flow.flowBalanceList);// console.log(flowBalanceList)\nconst getFlowTokenBalance=useCallback(account=>{return new Promise(resolve=>{fcl.query({cadence:\"\\n          import FungibleToken from 0xFungibleToken\\n          pub fun main(account:Address):UFix64 {\\n            // Get the accounts' public account objects\\n            let recipient = getAccount(account)\\n            let receiverRef = recipient.getCapability<&{FungibleToken.Balance}>(/public/exampleTokenBalance)\\n            let tokenBalance=receiverRef.borrow()??panic(\\\"get receiver for capability fails\\\")\\n            return tokenBalance.balance\\n          }\\n        \",args:(arg,t)=>[arg(account,t.Address)]}).then(res=>{console.log(res);resolve(res);}).catch(err=>{console.log(err);resolve('');});});},[]);return{flowBalanceList,getFlowTokenBalance};}export function getFLOWTxnsStatus(txid,chainId){const data={msg:'Error',info:''};return new Promise(resolve=>{const url=\"\".concat(config.chainInfo[chainId].nodeRpc,\"/transaction_results/\").concat(txid);fetch(url).then(res=>res.json()).then(json=>{console.log(json);if(json){if(json.execution==='Failure'){data.msg='Failure';data.error='Txns is failure!';}else if(json.execution==='Success'){data.msg='Success';data.info=json;}else{data.msg='Null';data.error='Query is empty!';}}else{data.msg='Null';data.error='Query is empty!';}resolve(data);}).catch(err=>{data.error='Query is empty!';console.log(err);resolve(data);});});}export function useSendFlowTxns(){const transferFn=useCallback((receiveAddress,amount)=>{// console.log(receiveAddress)\n// console.log(amount)\nreturn new Promise(resolve=>{fcl.mutate({cadence:\"\\n          import FungibleToken from 0xFungibleToken\\n          import FlowToken from 0xFlowToken\\n          transaction(receiveAddress:Address, amount:UFix64 ) {\\n            let sentVault: @FungibleToken.Vault\\n            prepare(signer: AuthAccount) {\\n                let vaultRef = signer.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\\n              ?? panic(\\\"Could not borrow reference to the owner''s Vault!\\\")\\n                self.sentVault <- vaultRef.withdraw(amount: amount)\\n            }\\n            execute {\\n                let receiverRef =  getAccount(receiveAddress)\\n                    .getCapability(/public/flowTokenReceiver)\\n                    .borrow<&{FungibleToken.Receiver}>()\\n              ?? panic(\\\"Could not borrow receiver reference to the recipient''s Vault\\\")\\n                receiverRef.deposit(from: <-self.sentVault)\\n            }\\n          }\\n        \",args:(arg,t)=>[arg(receiveAddress,t.Address),arg(amount.toFixed(8),t.UFix64)]}).then(res=>{console.log(res);resolve(res);}).catch(err=>{console.log(err);});});},[]);const swapoutFn=useCallback((routerToken,anyToken,receiveAddress,amount,toChainId)=>{return new Promise(resolve=>{fcl.mutate({cadence:\"\\n          import FungibleToken from 0xFungibleToken\\n          import FlowToken from 0xFlowToken\\n          import Router from \".concat(routerToken,\"\\n          transaction(routerToken:String, anyToken:String, receiveAddress:String, amount:UFix64, toChainId:UInt64) {\\n            let vaultRef: &{FungibleToken.Provider}\\n            let vaultStoragePath:StoragePath\\n            prepare(acct: AuthAccount) {\\n                self.vaultStoragePath= /storage/exampleTokenVault\\n                self.vaultRef = acct.borrow<&{FungibleToken.Provider}>(from:self.vaultStoragePath)\\n                                        ?? panic(\\\"Could not borrow a reference to the owner's vault\\\")\\n            }\\n            execute {\\n                log(\\\"vaultStoragePath:\\\".concat(self.vaultStoragePath.toString()))\\n                let temporaryVault <- self.vaultRef.withdraw(amount: amount)\\n                Router.swapOut(token:anyToken,to: receiveAddress,toChainId:toChainId,value:<-temporaryVault)\\n            }\\n          }\\n        \"),args:(arg,t)=>[arg(routerToken,t.String),arg(anyToken,t.String),arg(receiveAddress,t.String),arg(amount.toFixed(8),t.UFix64),arg(toChainId,t.UInt64)]}).then(res=>{console.log(res);resolve(res);}).catch(err=>{console.log(err);});});},[]);return{transferFn,swapoutFn};}export function useAdaCrossChain(routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig){const{account}=useActiveReact();const{t}=useTranslation();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const addTransaction=useTransactionAdder();const{swapoutFn}=useSendFlowTxns();const{getFlowTokenBalance}=useFlowBalance();const inputValue=typedValue;const[balance,setBalance]=useState();useEffect(()=>{if([ChainId.FLOW,ChainId.FLOW_TEST].includes(chainId)){getFlowTokenBalance(account).then(res=>{// console.log(res)\nconst dec=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals;// console.log(token)\n// console.log(res?.[token]?.balance)\nif(res){const blvalue=tryParseAmount3(res,dec);const bl=res?BigAmount.format(dec,blvalue):undefined;setBalance(bl);}else{setBalance(0);}});}},[selectCurrency,account,chainId]);const inputAmount=useMemo(()=>tryParseAmount3(inputValue+'',selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[inputValue,selectCurrency]);let sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(inputValue);}catch(error){console.log(error);}return useMemo(()=>{if(!account||![ChainId.FLOW,ChainId.FLOW_TEST].includes(chainId)||!routerToken)return{};return{balance:balance,execute:async()=>{try{const txResult=await swapoutFn(routerToken,inputToken,receiveAddress,typedValue,selectChain);console.log(txResult);if(txResult===null||txResult===void 0?void 0:txResult.status){var _txResult$data;const txReceipt={hash:txResult===null||txResult===void 0?void 0:(_txResult$data=txResult.data)===null||_txResult$data===void 0?void 0:_txResult$data.transactionId};console.log(txReceipt);if(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}}else{// onChangeViewErrorTip('Txns failure.', true)\nonChangeViewErrorTip(JSON.stringify(txResult),true);}}catch(error){console.log(error);onChangeViewErrorTip('Txns failure.',true);}},inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[receiveAddress,account,selectCurrency,inputAmount,chainId,routerToken,selectChain,destConfig,inputToken,balance]);}","map":{"version":3,"names":["useCallback","useState","useMemo","useEffect","fcl","useTranslation","useSelector","config","useActiveReact","tryParseAmount3","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","BigAmount","ChainId","useLoginFlow","loginFlow","authenticate","logoutFlow","unauthenticate","useFlowAddress","account","state","flow","flowAddress","useFlowBalance","flowBalanceList","getFlowTokenBalance","Promise","resolve","query","cadence","args","arg","t","Address","then","res","console","log","catch","err","getFLOWTxnsStatus","txid","chainId","data","msg","info","url","concat","chainInfo","nodeRpc","fetch","json","execution","error","useSendFlowTxns","transferFn","receiveAddress","amount","mutate","toFixed","UFix64","swapoutFn","routerToken","anyToken","toChainId","String","UInt64","useAdaCrossChain","inputToken","selectCurrency","selectChain","typedValue","destConfig","onChangeViewDtil","onChangeViewErrorTip","addTransaction","inputValue","balance","setBalance","FLOW","FLOW_TEST","includes","dec","decimals","blvalue","bl","format","undefined","inputAmount","sufficientBalance","Number","toExact","execute","txResult","status","_txResult$data","txReceipt","hash","transactionId","value","formatvalue","to","symbol","version","type","pairid","summary","toAddress","indexOf","toLowerCase","token","address","logoUrl","isLiquidity","fromInfo","name","toInfo","JSON","stringify","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/flow/index.ts"],"sourcesContent":["import { useCallback, useState, useMemo, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  // useDispatch,\n  useSelector\n} from 'react-redux'\n// import { useTranslation } from 'react-i18next'\nimport {\n  AppState,\n  // AppDispatch\n} from '../../state'\n// import { ChainId } from \"../../config/chainConfig/chainId\";\nimport config from \"../../config\";\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { BigAmount } from \"../../utils/formatBignumber\"\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n// import {\n//   flowAddress\n// } from './actions'\n\nexport function useLoginFlow () {\n  const loginFlow = useCallback(() => {\n    fcl.authenticate()\n  }, [])\n\n  const logoutFlow = useCallback(() => {\n    fcl.unauthenticate()\n  }, [])\n  return {\n    loginFlow,\n    logoutFlow\n  }\n}\n\nexport function useFlowAddress () {\n  const account:any = useSelector<AppState, AppState['flow']>(state => state.flow.flowAddress)\n  return {\n    flowAddress: account\n  }\n}\n\nexport function useFlowBalance () {\n  const flowBalanceList:any = useSelector<AppState, AppState['flow']>(state => state.flow.flowBalanceList)\n  // console.log(flowBalanceList)\n\n  const getFlowTokenBalance = useCallback((account) => {\n    return new Promise(resolve => {\n      fcl.query({\n        cadence: `\n          import FungibleToken from 0xFungibleToken\n          pub fun main(account:Address):UFix64 {\n            // Get the accounts' public account objects\n            let recipient = getAccount(account)\n            let receiverRef = recipient.getCapability<&{FungibleToken.Balance}>(/public/exampleTokenBalance)\n            let tokenBalance=receiverRef.borrow()??panic(\"get receiver for capability fails\")\n            return tokenBalance.balance\n          }\n        `,\n        args: (arg:any, t:any) => [arg(account, t.Address)],\n      }).then((res:any) => {\n        console.log(res)\n        resolve(res)\n      }).catch((err:any) => {\n        console.log(err)\n        resolve('')\n      })\n    })\n  }, [])\n\n  return {\n    flowBalanceList,\n    getFlowTokenBalance\n  }\n}\n\nexport function getFLOWTxnsStatus (txid:string, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    const url = `${config.chainInfo[chainId].nodeRpc}/transaction_results/${txid}`\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json)\n      if (json) {\n        if (json.execution === 'Failure') {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else if (json.execution === 'Success') {\n          data.msg = 'Success'\n          data.info = json\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      data.error = 'Query is empty!'\n      console.log(err)\n      resolve(data)\n    })\n  })\n}\n\nexport function useSendFlowTxns () {\n  const transferFn = useCallback((receiveAddress:any, amount:any) => {\n    // console.log(receiveAddress)\n    // console.log(amount)\n    return new Promise(resolve => {\n      fcl.mutate({\n        cadence: `\n          import FungibleToken from 0xFungibleToken\n          import FlowToken from 0xFlowToken\n          transaction(receiveAddress:Address, amount:UFix64 ) {\n            let sentVault: @FungibleToken.Vault\n            prepare(signer: AuthAccount) {\n                let vaultRef = signer.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n              ?? panic(\"Could not borrow reference to the owner''s Vault!\")\n                self.sentVault <- vaultRef.withdraw(amount: amount)\n            }\n            execute {\n                let receiverRef =  getAccount(receiveAddress)\n                    .getCapability(/public/flowTokenReceiver)\n                    .borrow<&{FungibleToken.Receiver}>()\n              ?? panic(\"Could not borrow receiver reference to the recipient''s Vault\")\n                receiverRef.deposit(from: <-self.sentVault)\n            }\n          }\n        `,\n        args: (arg:any, t:any) => [arg(receiveAddress, t.Address), arg(amount.toFixed(8), t.UFix64)],\n      }).then((res:any) => {\n        console.log(res)\n        resolve(res)\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    })\n  }, [])\n  const swapoutFn = useCallback((routerToken:any, anyToken:any, receiveAddress:any, amount:any, toChainId:any) => {\n    return new Promise(resolve => {\n      fcl.mutate({\n        cadence: `\n          import FungibleToken from 0xFungibleToken\n          import FlowToken from 0xFlowToken\n          import Router from ${routerToken}\n          transaction(routerToken:String, anyToken:String, receiveAddress:String, amount:UFix64, toChainId:UInt64) {\n            let vaultRef: &{FungibleToken.Provider}\n            let vaultStoragePath:StoragePath\n            prepare(acct: AuthAccount) {\n                self.vaultStoragePath= /storage/exampleTokenVault\n                self.vaultRef = acct.borrow<&{FungibleToken.Provider}>(from:self.vaultStoragePath)\n                                        ?? panic(\"Could not borrow a reference to the owner's vault\")\n            }\n            execute {\n                log(\"vaultStoragePath:\".concat(self.vaultStoragePath.toString()))\n                let temporaryVault <- self.vaultRef.withdraw(amount: amount)\n                Router.swapOut(token:anyToken,to: receiveAddress,toChainId:toChainId,value:<-temporaryVault)\n            }\n          }\n        `,\n        args: (arg:any, t:any) => [arg(routerToken, t.String), arg(anyToken, t.String), arg(receiveAddress, t.String), arg(amount.toFixed(8), t.UFix64), arg(toChainId, t.UInt64)],\n      }).then((res:any) => {\n        console.log(res)\n        resolve(res)\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    })\n  }, [])\n  return {\n    transferFn,\n    swapoutFn\n  }\n}\n\n\nexport function useAdaCrossChain (\n  routerToken: any,\n  inputToken: any,\n  chainId:any,\n  selectCurrency:any,\n  selectChain:any,\n  receiveAddress:any,\n  typedValue:any,\n  destConfig:any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const {account} = useActiveReact()\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n\n  const addTransaction = useTransactionAdder()\n  const {swapoutFn} = useSendFlowTxns()\n  const {getFlowTokenBalance} = useFlowBalance()\n\n  const inputValue = typedValue\n\n  const [balance, setBalance] = useState<any>()\n\n  useEffect(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      getFlowTokenBalance(account).then((res:any) => {\n        // console.log(res)\n        const dec = selectCurrency?.decimals\n        // console.log(token)\n        // console.log(res?.[token]?.balance)\n        if (res) {\n          const blvalue = tryParseAmount3(res, dec)\n          const bl = res ? BigAmount.format(dec, blvalue) : undefined\n          setBalance(bl)\n        } else {\n          setBalance(0)\n        }\n      })\n    }\n  }, [selectCurrency, account, chainId])\n\n  const inputAmount = useMemo(() => tryParseAmount3(inputValue + '', selectCurrency?.decimals), [inputValue, selectCurrency])\n\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(inputValue))\n  } catch (error) {\n    console.log(error)\n  }\n  return useMemo(() => {\n    if (!account || ![ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId) || !routerToken ) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n        try {\n          \n          const txResult:any = await swapoutFn(routerToken, inputToken, receiveAddress, typedValue, selectChain)\n          console.log(txResult)\n          if (txResult?.status) {\n            const txReceipt:any = {hash: txResult?.data?.transactionId}\n            console.log(txReceipt)\n            if (txReceipt?.hash) {\n              const data:any = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency?.symbol,\n                routerToken: routerToken\n              }\n              addTransaction(txReceipt, {\n                summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                routerToken: routerToken,\n                token: selectCurrency?.address,\n                logoUrl: selectCurrency?.logoUrl,\n                isLiquidity: destConfig?.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency?.symbol,\n                  name: selectCurrency?.name,\n                  decimals: selectCurrency?.decimals,\n                  address: selectCurrency?.address,\n                },\n                toInfo: {\n                  symbol: destConfig?.symbol,\n                  name: destConfig?.name,\n                  decimals: destConfig?.decimals,\n                  address: destConfig?.address,\n                },\n              })\n              recordsTxns(data)\n              onChangeViewDtil(txReceipt?.hash, true)\n            }\n          } else {\n            // onChangeViewErrorTip('Txns failure.', true)\n            onChangeViewErrorTip(JSON.stringify(txResult), true)\n          }\n        } catch (error) {\n          console.log(error);\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, balance])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}