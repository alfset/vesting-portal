{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.TypedError;\n  }\n});\nObject.defineProperty(exports, \"ErrorContext\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.ErrorContext;\n  }\n});\nconst borsh_1 = require(\"borsh\");\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nclass JsonRpcProvider extends provider_1.Provider {\n  /**\n   * @param connectionInfoOrUrl ConnectionInfo or RPC API endpoint URL (deprecated)\n   */\n  constructor(connectionInfoOrUrl) {\n    super();\n    if (connectionInfoOrUrl != null && typeof connectionInfoOrUrl == 'object') {\n      this.connection = connectionInfoOrUrl;\n    } else {\n      const deprecate = depd_1.default('JsonRpcProvider(url?: string)');\n      deprecate('use `JsonRpcProvider(connectionInfo: ConnectionInfo)` instead');\n      this.connection = {\n        url: connectionInfoOrUrl\n      };\n    }\n  }\n  /**\n   * Gets the RPC's status\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n   */\n  async status() {\n    return this.sendJsonRpc('status', []);\n  }\n  /**\n   * Sends a signed transaction to the RPC and waits until transaction is fully complete\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n   *\n   * @param signedTransaction The signed transaction being sent\n   */\n  async sendTransaction(signedTransaction) {\n    const bytes = signedTransaction.encode();\n    return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n  }\n  /**\n   * Sends a signed transaction to the RPC and immediately returns transaction hash\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n   * @param signedTransaction The signed transaction being sent\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n  async sendTransactionAsync(signedTransaction) {\n    const bytes = signedTransaction.encode();\n    return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n  }\n  /**\n   * Gets a transaction's status from the RPC\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n   *\n   * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n   * @param accountId The NEAR account that signed the transaction\n   */\n  async txStatus(txHash, accountId) {\n    if (typeof txHash === 'string') {\n      return this.txStatusString(txHash, accountId);\n    } else {\n      return this.txStatusUint8Array(txHash, accountId);\n    }\n  }\n  async txStatusUint8Array(txHash, accountId) {\n    return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n  }\n  async txStatusString(txHash, accountId) {\n    return this.sendJsonRpc('tx', [txHash, accountId]);\n  }\n  /**\n   * Gets a transaction's status from the RPC with receipts\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n   * @param txHash The hash of the transaction\n   * @param accountId The NEAR account that signed the transaction\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n  async txStatusReceipts(txHash, accountId) {\n    return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n  }\n  /**\n   * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n   * Query the RPC by passing an {@link RpcQueryRequest}\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n   *\n   * @typeParam T the shape of the returned query response\n   */\n  async query() {\n    let result;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 1) {\n      result = await this.sendJsonRpc('query', args[0]);\n    } else {\n      const [path, data] = args;\n      result = await this.sendJsonRpc('query', [path, data]);\n    }\n    if (result && result.error) {\n      throw new errors_1.TypedError(\"Querying \".concat(args, \" failed: \").concat(result.error, \".\\n\").concat(JSON.stringify(result, null, 2)), rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n    }\n    return result;\n  }\n  /**\n   * Query for block info from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n   *\n   * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n   */\n  async block(blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    let {\n      blockId\n    } = blockQuery;\n    if (typeof blockQuery !== 'object') {\n      const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n      deprecate('use `block({ blockId })` or `block({ finality })` instead');\n      blockId = blockQuery;\n    }\n    return this.sendJsonRpc('block', {\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Query changes in block from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n   */\n  async blockChanges(blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', {\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n   * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n   *\n   * @param chunkId Hash of a chunk ID or shard ID\n   */\n  async chunk(chunkId) {\n    return this.sendJsonRpc('chunk', [chunkId]);\n  }\n  /**\n   * Query validators of the epoch defined by the given block id.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n  async validators(blockId) {\n    return this.sendJsonRpc('validators', [blockId]);\n  }\n  /**\n   * @deprecated\n   * Gets the genesis config from RPC\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n   */\n  async experimental_genesisConfig() {\n    const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n    deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n    return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', {\n      sync_checkpoint: 'genesis'\n    });\n  }\n  /**\n   * Gets the protocol config at a block from RPC\n   * @see {@link }\n   *\n   * @param blockReference specifies the block to get the protocol config for\n   */\n  async experimental_protocolConfig(blockReference) {\n    return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n  }\n  /**\n   * @deprecated Use {@link lightClientProof} instead\n   */\n  async experimental_lightClientProof(request) {\n    const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n    deprecate('use `lightClientProof` instead');\n    return await this.lightClientProof(request);\n  }\n  /**\n   * Gets a light client execution proof for verifying execution outcomes\n   * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n   */\n  async lightClientProof(request) {\n    return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n  }\n  /**\n   * Gets access key changes for a given array of accountIds\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n   * @returns {Promise<ChangeResult>}\n   */\n  async accessKeyChanges(accountIdArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'all_access_key_changes',\n      account_ids: accountIdArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets single access key changes for a given array of access keys\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n   * @returns {Promise<ChangeResult>}\n   */\n  async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'single_access_key_changes',\n      keys: accessKeyArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets account changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n  async accountChanges(accountIdArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'account_changes',\n      account_ids: accountIdArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets contract state changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: If you pass a keyPrefix it must be base64 encoded\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n  async contractStateChanges(accountIdArray, blockQuery) {\n    let keyPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'data_changes',\n      account_ids: accountIdArray,\n      key_prefix_base64: keyPrefix,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Gets contract code changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: Change is returned in a base64 encoded WASM file\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n  async contractCodeChanges(accountIdArray, blockQuery) {\n    const {\n      finality\n    } = blockQuery;\n    const {\n      blockId\n    } = blockQuery;\n    return this.sendJsonRpc('EXPERIMENTAL_changes', {\n      changes_type: 'contract_code_changes',\n      account_ids: accountIdArray,\n      block_id: blockId,\n      finality\n    });\n  }\n  /**\n   * Returns gas price for a specific block_height or block_hash.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n  async gasPrice(blockId) {\n    return await this.sendJsonRpc('gas_price', [blockId]);\n  }\n  /**\n   * Directly call the RPC specifying the method and params\n   *\n   * @param method RPC method\n   * @param params Parameters to the method\n   */\n  async sendJsonRpc(method, params) {\n    const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {\n      try {\n        const request = {\n          method,\n          params,\n          id: _nextId++,\n          jsonrpc: '2.0'\n        };\n        const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n        if (response.error) {\n          if (typeof response.error.data === 'object') {\n            if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n              // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n              throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n            }\n            throw rpc_errors_1.parseRpcError(response.error.data);\n          } else {\n            const errorMessage = \"[\".concat(response.error.code, \"] \").concat(response.error.message, \": \").concat(response.error.data);\n            // NOTE: All this hackery is happening because structured errors not implemented\n            // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n            if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error') || errorMessage.includes('query has timed out')) {\n              throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n            }\n            throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n          }\n        }\n        // Success when response.error is not exist\n        return response;\n      } catch (error) {\n        if (error.type === 'TimeoutError') {\n          if (!process.env['NEAR_NO_LOGS']) {\n            console.warn(\"Retrying request to \".concat(method, \" as it has timed out\"), params);\n          }\n          return null;\n        }\n        throw error;\n      }\n    });\n    const {\n      result\n    } = response;\n    // From jsonrpc spec:\n    // result\n    //   This member is REQUIRED on success.\n    //   This member MUST NOT exist if there was an error invoking the method.\n    if (typeof result === 'undefined') {\n      throw new errors_1.TypedError(\"Exceeded \".concat(REQUEST_RETRY_NUMBER, \" attempts for request to \").concat(method, \".\"), 'RetriesExceeded');\n    }\n    return result;\n  }\n}\nexports.JsonRpcProvider = JsonRpcProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JsonRpcProvider","ErrorContext","TypedError","depd_1","require","provider_1","web_1","errors_1","enumerable","get","borsh_1","exponential_backoff_1","rpc_errors_1","REQUEST_RETRY_NUMBER","REQUEST_RETRY_WAIT","REQUEST_RETRY_WAIT_BACKOFF","_nextId","Provider","constructor","connectionInfoOrUrl","connection","deprecate","default","url","status","sendJsonRpc","sendTransaction","signedTransaction","bytes","encode","Buffer","from","toString","sendTransactionAsync","txStatus","txHash","accountId","txStatusString","txStatusUint8Array","baseEncode","txStatusReceipts","query","result","_len","arguments","length","args","Array","_key","path","data","error","concat","JSON","stringify","getErrorTypeFromErrorMessage","block","blockQuery","finality","blockId","block_id","blockChanges","chunk","chunkId","validators","experimental_genesisConfig","sync_checkpoint","experimental_protocolConfig","blockReference","experimental_lightClientProof","request","lightClientProof","accessKeyChanges","accountIdArray","changes_type","account_ids","singleAccessKeyChanges","accessKeyArray","keys","accountChanges","contractStateChanges","keyPrefix","undefined","key_prefix_base64","contractCodeChanges","gasPrice","method","params","response","id","jsonrpc","fetchJson","error_message","error_type","parseRpcError","errorMessage","code","message","includes","type","process","env","console","warn"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/near-api-js/lib/providers/json-rpc-provider.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", { enumerable: true, get: function () { return errors_1.TypedError; } });\nObject.defineProperty(exports, \"ErrorContext\", { enumerable: true, get: function () { return errors_1.ErrorContext; } });\nconst borsh_1 = require(\"borsh\");\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param connectionInfoOrUrl ConnectionInfo or RPC API endpoint URL (deprecated)\n     */\n    constructor(connectionInfoOrUrl) {\n        super();\n        if (connectionInfoOrUrl != null && typeof connectionInfoOrUrl == 'object') {\n            this.connection = connectionInfoOrUrl;\n        }\n        else {\n            const deprecate = depd_1.default('JsonRpcProvider(url?: string)');\n            deprecate('use `JsonRpcProvider(connectionInfo: ConnectionInfo)` instead');\n            this.connection = { url: connectionInfoOrUrl };\n        }\n    }\n    /**\n     * Gets the RPC's status\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n     */\n    async status() {\n        return this.sendJsonRpc('status', []);\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    async sendTransaction(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransactionAsync(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    async txStatus(txHash, accountId) {\n        if (typeof txHash === 'string') {\n            return this.txStatusString(txHash, accountId);\n        }\n        else {\n            return this.txStatusUint8Array(txHash, accountId);\n        }\n    }\n    async txStatusUint8Array(txHash, accountId) {\n        return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    async txStatusString(txHash, accountId) {\n        return this.sendJsonRpc('tx', [txHash, accountId]);\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatusReceipts(txHash, accountId) {\n        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    async query(...args) {\n        let result;\n        if (args.length === 1) {\n            result = await this.sendJsonRpc('query', args[0]);\n        }\n        else {\n            const [path, data] = args;\n            result = await this.sendJsonRpc('query', [path, data]);\n        }\n        if (result && result.error) {\n            throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n        }\n        return result;\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    async block(blockQuery) {\n        const { finality } = blockQuery;\n        let { blockId } = blockQuery;\n        if (typeof blockQuery !== 'object') {\n            const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n            deprecate('use `block({ blockId })` or `block({ finality })` instead');\n            blockId = blockQuery;\n        }\n        return this.sendJsonRpc('block', { block_id: blockId, finality });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n    async blockChanges(blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    async chunk(chunkId) {\n        return this.sendJsonRpc('chunk', [chunkId]);\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.sendJsonRpc('validators', [blockId]);\n    }\n    /**\n     * @deprecated\n     * Gets the genesis config from RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n     */\n    async experimental_genesisConfig() {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n        deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', { sync_checkpoint: 'genesis' });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    async experimental_protocolConfig(blockReference) {\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n    }\n    /**\n     * @deprecated Use {@link lightClientProof} instead\n     */\n    async experimental_lightClientProof(request) {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n        deprecate('use `lightClientProof` instead');\n        return await this.lightClientProof(request);\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n    async lightClientProof(request) {\n        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accessKeyChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'all_access_key_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'single_access_key_changes',\n            keys: accessKeyArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accountChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'account_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'data_changes',\n            account_ids: accountIdArray,\n            key_prefix_base64: keyPrefix,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractCodeChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'contract_code_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async gasPrice(blockId) {\n        return await this.sendJsonRpc('gas_price', [blockId]);\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    async sendJsonRpc(method, params) {\n        const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {\n            try {\n                const request = {\n                    method,\n                    params,\n                    id: (_nextId++),\n                    jsonrpc: '2.0'\n                };\n                const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n                if (response.error) {\n                    if (typeof response.error.data === 'object') {\n                        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                            throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                        }\n                        throw rpc_errors_1.parseRpcError(response.error.data);\n                    }\n                    else {\n                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                        // NOTE: All this hackery is happening because structured errors not implemented\n                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                        if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                            || errorMessage.includes('query has timed out')) {\n                            throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n                        }\n                        throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n                    }\n                }\n                // Success when response.error is not exist\n                return response;\n            }\n            catch (error) {\n                if (error.type === 'TimeoutError') {\n                    if (!process.env['NEAR_NO_LOGS']) {\n                        console.warn(`Retrying request to ${method} as it has timed out`, params);\n                    }\n                    return null;\n                }\n                throw error;\n            }\n        });\n        const { result } = response;\n        // From jsonrpc spec:\n        // result\n        //   This member is REQUIRED on success.\n        //   This member MUST NOT exist if there was an error invoking the method.\n        if (typeof result === 'undefined') {\n            throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n        }\n        return result;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}