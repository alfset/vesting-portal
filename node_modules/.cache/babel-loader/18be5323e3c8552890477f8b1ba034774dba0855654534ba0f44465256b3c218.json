{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FederationServer = exports.FEDERATION_RESPONSE_MAX_SIZE = void 0;\nvar tslib_1 = require(\"tslib\");\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\nvar stellar_base_1 = require(\"stellar-base\");\nvar urijs_1 = tslib_1.__importDefault(require(\"urijs\"));\nvar config_1 = require(\"./config\");\nvar errors_1 = require(\"./errors\");\nvar stellar_toml_resolver_1 = require(\"./stellar_toml_resolver\");\nexports.FEDERATION_RESPONSE_MAX_SIZE = 100 * 1024;\nvar FederationServer = function () {\n  function FederationServer(serverURL, domain, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    this.serverURL = urijs_1.default(serverURL);\n    this.domain = domain;\n    var allowHttp = typeof opts.allowHttp === \"undefined\" ? config_1.Config.isAllowHttp() : opts.allowHttp;\n    this.timeout = typeof opts.timeout === \"undefined\" ? config_1.Config.getTimeout() : opts.timeout;\n    if (this.serverURL.protocol() !== \"https\" && !allowHttp) {\n      throw new Error(\"Cannot connect to insecure federation server\");\n    }\n  }\n  FederationServer.resolve = function (value, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var addressParts, domain, federationServer;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (value.indexOf(\"*\") < 0) {\n              if (!stellar_base_1.StrKey.isValidEd25519PublicKey(value)) {\n                return [2, Promise.reject(new Error(\"Invalid Account ID\"))];\n              }\n              return [2, Promise.resolve({\n                account_id: value\n              })];\n            }\n            addressParts = value.split(\"*\");\n            domain = addressParts[1];\n            if (addressParts.length !== 2 || !domain) {\n              return [2, Promise.reject(new Error(\"Invalid Stellar address\"))];\n            }\n            return [4, FederationServer.createForDomain(domain, opts)];\n          case 1:\n            federationServer = _a.sent();\n            return [2, federationServer.resolveAddress(value)];\n        }\n      });\n    });\n  };\n  FederationServer.createForDomain = function (domain, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var tomlObject;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, stellar_toml_resolver_1.StellarTomlResolver.resolve(domain, opts)];\n          case 1:\n            tomlObject = _a.sent();\n            if (!tomlObject.FEDERATION_SERVER) {\n              return [2, Promise.reject(new Error(\"stellar.toml does not contain FEDERATION_SERVER field\"))];\n            }\n            return [2, new FederationServer(tomlObject.FEDERATION_SERVER, domain, opts)];\n        }\n      });\n    });\n  };\n  FederationServer.prototype.resolveAddress = function (address) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var stellarAddress, url;\n      return tslib_1.__generator(this, function (_a) {\n        stellarAddress = address;\n        if (address.indexOf(\"*\") < 0) {\n          if (!this.domain) {\n            return [2, Promise.reject(new Error(\"Unknown domain. Make sure `address` contains a domain (ex. `bob*stellar.org`) or pass `domain` parameter when instantiating the server object.\"))];\n          }\n          stellarAddress = address + \"*\" + this.domain;\n        }\n        url = this.serverURL.query({\n          type: \"name\",\n          q: stellarAddress\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n  FederationServer.prototype.resolveAccountId = function (accountId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var url;\n      return tslib_1.__generator(this, function (_a) {\n        url = this.serverURL.query({\n          type: \"id\",\n          q: accountId\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n  FederationServer.prototype.resolveTransactionId = function (transactionId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var url;\n      return tslib_1.__generator(this, function (_a) {\n        url = this.serverURL.query({\n          type: \"txid\",\n          q: transactionId\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n  FederationServer.prototype._sendRequest = function (url) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var timeout;\n      return tslib_1.__generator(this, function (_a) {\n        timeout = this.timeout;\n        return [2, axios_1.default.get(url.toString(), {\n          maxContentLength: exports.FEDERATION_RESPONSE_MAX_SIZE,\n          timeout: timeout\n        }).then(function (response) {\n          if (typeof response.data.memo !== \"undefined\" && typeof response.data.memo !== \"string\") {\n            throw new Error(\"memo value should be of type string\");\n          }\n          return response.data;\n        }).catch(function (response) {\n          if (response instanceof Error) {\n            if (response.message.match(/^maxContentLength size/)) {\n              throw new Error(\"federation response exceeds allowed size of \" + exports.FEDERATION_RESPONSE_MAX_SIZE);\n            } else {\n              return Promise.reject(response);\n            }\n          } else {\n            return Promise.reject(new errors_1.BadResponseError(\"Server query failed. Server responded: \" + response.status + \" \" + response.statusText, response.data));\n          }\n        })];\n      });\n    });\n  };\n  return FederationServer;\n}();\nexports.FederationServer = FederationServer;","map":{"version":3,"names":["axios_1","tslib_1","__importDefault","require","stellar_base_1","urijs_1","config_1","errors_1","stellar_toml_resolver_1","exports","FEDERATION_RESPONSE_MAX_SIZE","FederationServer","serverURL","domain","opts","default","allowHttp","Config","isAllowHttp","timeout","getTimeout","protocol","Error","resolve","value","indexOf","StrKey","isValidEd25519PublicKey","Promise","reject","account_id","addressParts","split","length","createForDomain","federationServer","_a","sent","resolveAddress","StellarTomlResolver","tomlObject","FEDERATION_SERVER","prototype","address","stellarAddress","url","query","type","q","_sendRequest","resolveAccountId","accountId","resolveTransactionId","transactionId","get","toString","maxContentLength","then","response","data","memo","catch","message","match","BadResponseError","status","statusText"],"sources":["../src/federation_server.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}