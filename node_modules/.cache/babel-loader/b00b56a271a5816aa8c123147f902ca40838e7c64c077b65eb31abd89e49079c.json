{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateJsonAndGetSize = exports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.isValidJson = exports.JsonStruct = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\nconst misc_1 = require(\"./misc\");\nexports.JsonStruct = (0, superstruct_1.define)('Json', value => {\n  const [isValid] = validateJsonAndGetSize(value, true);\n  if (!isValid) {\n    return 'Expected a valid JSON-serializable value';\n  }\n  return true;\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n  return (0, superstruct_1.is)(value, exports.JsonStruct);\n}\nexports.isValidJson = isValidJson;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, superstruct_1.object)({\n  code: (0, superstruct_1.integer)(),\n  message: (0, superstruct_1.string)(),\n  data: (0, superstruct_1.optional)(exports.JsonStruct),\n  stack: (0, superstruct_1.optional)((0, superstruct_1.string)())\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.optional)((0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]));\nexports.JsonRpcRequestStruct = (0, superstruct_1.object)({\n  id: exports.JsonRpcIdStruct,\n  jsonrpc: exports.JsonRpcVersionStruct,\n  method: (0, superstruct_1.string)(),\n  params: exports.JsonRpcParamsStruct\n});\nexports.JsonRpcNotificationStruct = (0, superstruct_1.omit)(exports.JsonRpcRequestStruct, ['id']);\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n  return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value,\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n  (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n  return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value,\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n  (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n  id: exports.JsonRpcIdStruct,\n  jsonrpc: exports.JsonRpcVersionStruct,\n  result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n  error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct)\n});\nexports.JsonRpcSuccessStruct = (0, superstruct_1.object)({\n  id: exports.JsonRpcIdStruct,\n  jsonrpc: exports.JsonRpcVersionStruct,\n  result: exports.JsonStruct\n});\nexports.JsonRpcFailureStruct = (0, superstruct_1.object)({\n  id: exports.JsonRpcIdStruct,\n  jsonrpc: exports.JsonRpcVersionStruct,\n  error: exports.JsonRpcErrorStruct\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([exports.JsonRpcSuccessStruct, exports.JsonRpcFailureStruct]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n  return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response,\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n  (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n  return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value,\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n  (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n  return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value,\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n  (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n  return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value,\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n  (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n  return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value,\n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n  (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n  const {\n    permitEmptyString,\n    permitFractions,\n    permitNull\n  } = Object.assign({\n    permitEmptyString: true,\n    permitFractions: false,\n    permitNull: true\n  }, options);\n  /**\n   * Type guard for {@link JsonRpcId}.\n   *\n   * @param id - The JSON-RPC ID value to check.\n   * @returns Whether the given ID is valid per the options given to the\n   * factory.\n   */\n  const isValidJsonRpcId = id => {\n    return Boolean(typeof id === 'number' && (permitFractions || Number.isInteger(id)) || typeof id === 'string' && (permitEmptyString || id.length > 0) || permitNull && id === null);\n  };\n  return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n/**\n * Checks whether a value is JSON serializable and counts the total number\n * of bytes needed to store the serialized version of the value.\n *\n * @param jsObject - Potential JSON serializable object.\n * @param skipSizingProcess - Skip JSON size calculation (default: false).\n * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n * the value was serializable and a number of bytes that it will use when serialized to JSON.\n */\nfunction validateJsonAndGetSize(jsObject) {\n  let skipSizingProcess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const seenObjects = new Set();\n  /**\n   * Checks whether a value is JSON serializable and counts the total number\n   * of bytes needed to store the serialized version of the value.\n   *\n   * This function assumes the encoding of the JSON is done in UTF-8.\n   *\n   * @param value - Potential JSON serializable value.\n   * @param skipSizing - Skip JSON size calculation (default: false).\n   * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n   * the value was serializable and a number of bytes that it will use when serialized to JSON.\n   */\n  function getJsonSerializableInfo(value, skipSizing) {\n    if (value === undefined) {\n      return [false, 0];\n    } else if (value === null) {\n      // Return already specified constant size for null (special object)\n      return [true, skipSizing ? 0 : misc_1.JsonSize.Null];\n    }\n    // Check and calculate sizes for basic (and some special) types\n    const typeOfValue = typeof value;\n    try {\n      if (typeOfValue === 'function') {\n        return [false, 0];\n      } else if (typeOfValue === 'string' || value instanceof String) {\n        return [true, skipSizing ? 0 : (0, misc_1.calculateStringSize)(value) + misc_1.JsonSize.Quote * 2];\n      } else if (typeOfValue === 'boolean' || value instanceof Boolean) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        // eslint-disable-next-line eqeqeq\n        return [true, value == true ? misc_1.JsonSize.True : misc_1.JsonSize.False];\n      } else if (typeOfValue === 'number' || value instanceof Number) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        return [true, (0, misc_1.calculateNumberSize)(value)];\n      } else if (value instanceof Date) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        return [true,\n        // Note: Invalid dates will serialize to null\n        isNaN(value.getDate()) ? misc_1.JsonSize.Null : misc_1.JsonSize.Date + misc_1.JsonSize.Quote * 2];\n      }\n    } catch (_) {\n      return [false, 0];\n    }\n    // If object is not plain and cannot be serialized properly,\n    // stop here and return false for serialization\n    if (!(0, misc_1.isPlainObject)(value) && !Array.isArray(value)) {\n      return [false, 0];\n    }\n    // Circular object detection (handling)\n    // Check if the same object already exists\n    if (seenObjects.has(value)) {\n      return [false, 0];\n    }\n    // Add new object to the seen objects set\n    // Only the plain objects should be added (Primitive types are skipped)\n    seenObjects.add(value);\n    // Continue object decomposition\n    try {\n      return [true, Object.entries(value).reduce((sum, _ref, idx, arr) => {\n        let [key, nestedValue] = _ref;\n        // Recursively process next nested object or primitive type\n        // eslint-disable-next-line prefer-const\n        let [valid, size] = getJsonSerializableInfo(nestedValue, skipSizing);\n        if (!valid) {\n          throw new Error('JSON validation did not pass. Validation process stopped.');\n        }\n        // Circular object detection\n        // Once a child node is visited and processed remove it from the set.\n        // This will prevent false positives with the same adjacent objects.\n        seenObjects.delete(value);\n        if (skipSizing) {\n          return 0;\n        }\n        // Objects will have be serialized with \"key\": value,\n        // therefore we include the key in the calculation here\n        const keySize = Array.isArray(value) ? 0 : key.length + misc_1.JsonSize.Comma + misc_1.JsonSize.Colon * 2;\n        const separator = idx < arr.length - 1 ? misc_1.JsonSize.Comma : 0;\n        return sum + keySize + size + separator;\n      },\n      // Starts at 2 because the serialized JSON string data (plain text)\n      // will minimally contain {}/[]\n      skipSizing ? 0 : misc_1.JsonSize.Wrapper * 2)];\n    } catch (_) {\n      return [false, 0];\n    }\n  }\n  return getJsonSerializableInfo(jsObject, skipSizingProcess);\n}\nexports.validateJsonAndGetSize = validateJsonAndGetSize;","map":{"version":3,"names":["superstruct_1","require","assert_1","misc_1","exports","JsonStruct","define","value","isValid","validateJsonAndGetSize","isValidJson","is","jsonrpc2","JsonRpcVersionStruct","literal","JsonRpcIdStruct","nullable","union","number","string","JsonRpcErrorStruct","object","code","integer","message","data","optional","stack","JsonRpcParamsStruct","record","array","JsonRpcRequestStruct","id","jsonrpc","method","params","JsonRpcNotificationStruct","omit","isJsonRpcNotification","assertIsJsonRpcNotification","ErrorWrapper","assertStruct","isJsonRpcRequest","assertIsJsonRpcRequest","PendingJsonRpcResponseStruct","result","unknown","error","JsonRpcSuccessStruct","JsonRpcFailureStruct","JsonRpcResponseStruct","isPendingJsonRpcResponse","response","assertIsPendingJsonRpcResponse","isJsonRpcResponse","assertIsJsonRpcResponse","isJsonRpcSuccess","assertIsJsonRpcSuccess","isJsonRpcFailure","assertIsJsonRpcFailure","isJsonRpcError","assertIsJsonRpcError","getJsonRpcIdValidator","options","permitEmptyString","permitFractions","permitNull","Object","assign","isValidJsonRpcId","Boolean","Number","isInteger","length","jsObject","skipSizingProcess","arguments","undefined","seenObjects","Set","getJsonSerializableInfo","skipSizing","JsonSize","Null","typeOfValue","String","calculateStringSize","Quote","True","False","calculateNumberSize","Date","isNaN","getDate","_","isPlainObject","Array","isArray","has","add","entries","reduce","sum","_ref","idx","arr","key","nestedValue","valid","size","Error","delete","keySize","Comma","Colon","separator","Wrapper"],"sources":["../src/json.ts"],"sourcesContent":["import {\n  array,\n  define,\n  Infer,\n  integer,\n  is,\n  literal,\n  nullable,\n  number,\n  object,\n  omit,\n  optional,\n  record,\n  string,\n  Struct,\n  union,\n  unknown,\n} from 'superstruct';\n\nimport { AssertionErrorConstructor, assertStruct } from './assert';\nimport {\n  calculateNumberSize,\n  calculateStringSize,\n  isPlainObject,\n  JsonSize,\n} from './misc';\n\nexport const JsonStruct = define<Json>('Json', (value) => {\n  const [isValid] = validateJsonAndGetSize(value, true);\n  if (!isValid) {\n    return 'Expected a valid JSON-serializable value';\n  }\n  return true;\n});\n\n/**\n * Any JSON-compatible value.\n */\nexport type Json =\n  | null\n  | boolean\n  | number\n  | string\n  | Json[]\n  | { [prop: string]: Json };\n\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nexport function isValidJson(value: unknown): value is Json {\n  return is(value, JsonStruct);\n}\n\n/**\n * The string '2.0'.\n */\nexport const jsonrpc2 = '2.0' as const;\nexport const JsonRpcVersionStruct = literal(jsonrpc2);\n\n/**\n * A String specifying the version of the JSON-RPC protocol.\n * MUST be exactly \"2.0\".\n */\nexport type JsonRpcVersion2 = typeof jsonrpc2;\n\nexport const JsonRpcIdStruct = nullable(union([number(), string()]));\n\n/**\n * An identifier established by the Client that MUST contain a String, Number,\n * or NULL value if included. If it is not included it is assumed to be a\n * notification. The value SHOULD normally not be Null and Numbers SHOULD\n * NOT contain fractional parts.\n */\nexport type JsonRpcId = Infer<typeof JsonRpcIdStruct>;\n\nexport const JsonRpcErrorStruct = object({\n  code: integer(),\n  message: string(),\n  data: optional(JsonStruct),\n  stack: optional(string()),\n});\n\n/**\n * Mark a certain key of a type as optional.\n */\nexport type OptionalField<\n  Type extends Record<string, unknown>,\n  Key extends keyof Type,\n> = Omit<Type, Key> & Partial<Pick<Type, Key>>;\n\n/**\n * A JSON-RPC error object.\n *\n * Note that TypeScript infers `unknown | undefined` as `unknown`, meaning that\n * the `data` field is not optional. To make it optional, we use the\n * `OptionalField` helper, to explicitly make it optional.\n */\nexport type JsonRpcError = OptionalField<\n  Infer<typeof JsonRpcErrorStruct>,\n  'data'\n>;\n\nexport const JsonRpcParamsStruct = optional(\n  union([record(string(), JsonStruct), array(JsonStruct)]),\n);\nexport type JsonRpcParams = Infer<typeof JsonRpcParamsStruct>;\n\nexport const JsonRpcRequestStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  method: string(),\n  params: JsonRpcParamsStruct,\n});\n\nexport type InferWithParams<\n  Type extends Struct<any>,\n  Params extends JsonRpcParams,\n> = Omit<Infer<Type>, 'params'> &\n  (keyof Params extends undefined\n    ? {\n        params?: Params;\n      }\n    : {\n        params: Params;\n      });\n\n/**\n * A JSON-RPC request object.\n */\nexport type JsonRpcRequest<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcRequestStruct, Params>;\n\nexport const JsonRpcNotificationStruct = omit(JsonRpcRequestStruct, ['id']);\n\n/**\n * A JSON-RPC notification object.\n */\nexport type JsonRpcNotification<Params extends JsonRpcParams = JsonRpcParams> =\n  InferWithParams<typeof JsonRpcNotificationStruct, Params>;\n\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nexport function isJsonRpcNotification(\n  value: unknown,\n): value is JsonRpcNotification {\n  return is(value, JsonRpcNotificationStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nexport function assertIsJsonRpcNotification(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcNotification {\n  assertStruct(\n    value,\n    JsonRpcNotificationStruct,\n    'Invalid JSON-RPC notification',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nexport function isJsonRpcRequest(value: unknown): value is JsonRpcRequest {\n  return is(value, JsonRpcRequestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nexport function assertIsJsonRpcRequest(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcRequest {\n  assertStruct(\n    value,\n    JsonRpcRequestStruct,\n    'Invalid JSON-RPC request',\n    ErrorWrapper,\n  );\n}\n\nexport const PendingJsonRpcResponseStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: optional(unknown()),\n  error: optional(JsonRpcErrorStruct),\n});\n\n/**\n * A JSON-RPC response object that has not yet been resolved.\n */\nexport type PendingJsonRpcResponse<Result extends Json> = Omit<\n  Infer<typeof PendingJsonRpcResponseStruct>,\n  'result'\n> & {\n  result?: Result;\n};\n\nexport const JsonRpcSuccessStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  result: JsonStruct,\n});\n\n/**\n * A successful JSON-RPC response object.\n */\nexport type JsonRpcSuccess<Result extends Json> = Omit<\n  Infer<typeof JsonRpcSuccessStruct>,\n  'result'\n> & {\n  result: Result;\n};\n\nexport const JsonRpcFailureStruct = object({\n  id: JsonRpcIdStruct,\n  jsonrpc: JsonRpcVersionStruct,\n  error: JsonRpcErrorStruct as Struct<JsonRpcError>,\n});\n\n/**\n * A failed JSON-RPC response object.\n */\nexport type JsonRpcFailure = Infer<typeof JsonRpcFailureStruct>;\n\nexport const JsonRpcResponseStruct = union([\n  JsonRpcSuccessStruct,\n  JsonRpcFailureStruct,\n]);\n\n/**\n * A JSON-RPC response object. Must be checked to determine whether it's a\n * success or failure.\n *\n * @template Result - The type of the result.\n */\nexport type JsonRpcResponse<Result extends Json> =\n  | JsonRpcSuccess<Result>\n  | JsonRpcFailure;\n\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nexport function isPendingJsonRpcResponse(\n  response: unknown,\n): response is PendingJsonRpcResponse<Json> {\n  return is(response, PendingJsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nexport function assertIsPendingJsonRpcResponse(\n  response: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts response is PendingJsonRpcResponse<Json> {\n  assertStruct(\n    response,\n    PendingJsonRpcResponseStruct,\n    'Invalid pending JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nexport function isJsonRpcResponse(\n  response: unknown,\n): response is JsonRpcResponse<Json> {\n  return is(response, JsonRpcResponseStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nexport function assertIsJsonRpcResponse(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcResponse<Json> {\n  assertStruct(\n    value,\n    JsonRpcResponseStruct,\n    'Invalid JSON-RPC response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nexport function isJsonRpcSuccess(\n  value: unknown,\n): value is JsonRpcSuccess<Json> {\n  return is(value, JsonRpcSuccessStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nexport function assertIsJsonRpcSuccess(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcSuccess<Json> {\n  assertStruct(\n    value,\n    JsonRpcSuccessStruct,\n    'Invalid JSON-RPC success response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nexport function isJsonRpcFailure(value: unknown): value is JsonRpcFailure {\n  return is(value, JsonRpcFailureStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nexport function assertIsJsonRpcFailure(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcFailure {\n  assertStruct(\n    value,\n    JsonRpcFailureStruct,\n    'Invalid JSON-RPC failure response',\n    ErrorWrapper,\n  );\n}\n\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nexport function isJsonRpcError(value: unknown): value is JsonRpcError {\n  return is(value, JsonRpcErrorStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nexport function assertIsJsonRpcError(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is JsonRpcError {\n  assertStruct(\n    value,\n    JsonRpcErrorStruct,\n    'Invalid JSON-RPC error',\n    ErrorWrapper,\n  );\n}\n\ntype JsonRpcValidatorOptions = {\n  permitEmptyString?: boolean;\n  permitFractions?: boolean;\n  permitNull?: boolean;\n};\n\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nexport function getJsonRpcIdValidator(options?: JsonRpcValidatorOptions) {\n  const { permitEmptyString, permitFractions, permitNull } = {\n    permitEmptyString: true,\n    permitFractions: false,\n    permitNull: true,\n    ...options,\n  };\n\n  /**\n   * Type guard for {@link JsonRpcId}.\n   *\n   * @param id - The JSON-RPC ID value to check.\n   * @returns Whether the given ID is valid per the options given to the\n   * factory.\n   */\n  const isValidJsonRpcId = (id: unknown): id is JsonRpcId => {\n    return Boolean(\n      (typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n        (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n        (permitNull && id === null),\n    );\n  };\n\n  return isValidJsonRpcId;\n}\n\n/**\n * Checks whether a value is JSON serializable and counts the total number\n * of bytes needed to store the serialized version of the value.\n *\n * @param jsObject - Potential JSON serializable object.\n * @param skipSizingProcess - Skip JSON size calculation (default: false).\n * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n * the value was serializable and a number of bytes that it will use when serialized to JSON.\n */\nexport function validateJsonAndGetSize(\n  jsObject: unknown,\n  skipSizingProcess = false,\n): [isValid: boolean, plainTextSizeInBytes: number] {\n  const seenObjects = new Set();\n  /**\n   * Checks whether a value is JSON serializable and counts the total number\n   * of bytes needed to store the serialized version of the value.\n   *\n   * This function assumes the encoding of the JSON is done in UTF-8.\n   *\n   * @param value - Potential JSON serializable value.\n   * @param skipSizing - Skip JSON size calculation (default: false).\n   * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether\n   * the value was serializable and a number of bytes that it will use when serialized to JSON.\n   */\n  function getJsonSerializableInfo(\n    value: unknown,\n    skipSizing: boolean,\n  ): [isValid: boolean, plainTextSizeInBytes: number] {\n    if (value === undefined) {\n      return [false, 0];\n    } else if (value === null) {\n      // Return already specified constant size for null (special object)\n      return [true, skipSizing ? 0 : JsonSize.Null];\n    }\n\n    // Check and calculate sizes for basic (and some special) types\n    const typeOfValue = typeof value;\n    try {\n      if (typeOfValue === 'function') {\n        return [false, 0];\n      } else if (typeOfValue === 'string' || value instanceof String) {\n        return [\n          true,\n          skipSizing\n            ? 0\n            : calculateStringSize(value as string) + JsonSize.Quote * 2,\n        ];\n      } else if (typeOfValue === 'boolean' || value instanceof Boolean) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        // eslint-disable-next-line eqeqeq\n        return [true, value == true ? JsonSize.True : JsonSize.False];\n      } else if (typeOfValue === 'number' || value instanceof Number) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        return [true, calculateNumberSize(value as number)];\n      } else if (value instanceof Date) {\n        if (skipSizing) {\n          return [true, 0];\n        }\n        return [\n          true,\n          // Note: Invalid dates will serialize to null\n          isNaN(value.getDate())\n            ? JsonSize.Null\n            : JsonSize.Date + JsonSize.Quote * 2,\n        ];\n      }\n    } catch (_) {\n      return [false, 0];\n    }\n\n    // If object is not plain and cannot be serialized properly,\n    // stop here and return false for serialization\n    if (!isPlainObject(value) && !Array.isArray(value)) {\n      return [false, 0];\n    }\n\n    // Circular object detection (handling)\n    // Check if the same object already exists\n    if (seenObjects.has(value)) {\n      return [false, 0];\n    }\n    // Add new object to the seen objects set\n    // Only the plain objects should be added (Primitive types are skipped)\n    seenObjects.add(value);\n\n    // Continue object decomposition\n    try {\n      return [\n        true,\n        Object.entries(value).reduce(\n          (sum, [key, nestedValue], idx, arr) => {\n            // Recursively process next nested object or primitive type\n            // eslint-disable-next-line prefer-const\n            let [valid, size] = getJsonSerializableInfo(\n              nestedValue,\n              skipSizing,\n            );\n            if (!valid) {\n              throw new Error(\n                'JSON validation did not pass. Validation process stopped.',\n              );\n            }\n\n            // Circular object detection\n            // Once a child node is visited and processed remove it from the set.\n            // This will prevent false positives with the same adjacent objects.\n            seenObjects.delete(value);\n\n            if (skipSizing) {\n              return 0;\n            }\n\n            // Objects will have be serialized with \"key\": value,\n            // therefore we include the key in the calculation here\n            const keySize = Array.isArray(value)\n              ? 0\n              : key.length + JsonSize.Comma + JsonSize.Colon * 2;\n\n            const separator = idx < arr.length - 1 ? JsonSize.Comma : 0;\n\n            return sum + keySize + size + separator;\n          },\n          // Starts at 2 because the serialized JSON string data (plain text)\n          // will minimally contain {}/[]\n          skipSizing ? 0 : JsonSize.Wrapper * 2,\n        ),\n      ];\n    } catch (_) {\n      return [false, 0];\n    }\n  }\n\n  return getJsonSerializableInfo(jsObject, skipSizingProcess);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}