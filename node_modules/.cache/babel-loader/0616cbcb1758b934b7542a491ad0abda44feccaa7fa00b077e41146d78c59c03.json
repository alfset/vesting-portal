{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decimal = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n// Too large values lead to massive memory usage. Limit to something sensible.\n// The largest value we need is 18 (Ether).\nconst maxFractionalDigits = 100;\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\nclass Decimal {\n  constructor(atomics, fractionalDigits) {\n    if (!atomics.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid string format. Only non-negative integers in decimal representation supported.\");\n    }\n    this.data = {\n      atomics: new bn_js_1.default(atomics),\n      fractionalDigits: fractionalDigits\n    };\n  }\n  static fromUserInput(input, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    const badCharacter = input.match(/[^0-9.]/);\n    if (badCharacter) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      throw new Error(\"Invalid character at position \".concat(badCharacter.index + 1));\n    }\n    let whole;\n    let fractional;\n    if (input === \"\") {\n      whole = \"0\";\n      fractional = \"\";\n    } else if (input.search(/\\./) === -1) {\n      // integer format, no separator\n      whole = input;\n      fractional = \"\";\n    } else {\n      const parts = input.split(\".\");\n      switch (parts.length) {\n        case 0:\n        case 1:\n          throw new Error(\"Fewer than two elements in split result. This must not happen here.\");\n        case 2:\n          if (!parts[1]) throw new Error(\"Fractional part missing\");\n          whole = parts[0];\n          fractional = parts[1].replace(/0+$/, \"\");\n          break;\n        default:\n          throw new Error(\"More than one separator found\");\n      }\n    }\n    if (fractional.length > fractionalDigits) {\n      throw new Error(\"Got more fractional digits than supported\");\n    }\n    const quantity = \"\".concat(whole).concat(fractional.padEnd(fractionalDigits, \"0\"));\n    return new Decimal(quantity, fractionalDigits);\n  }\n  static fromAtomics(atomics, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(atomics, fractionalDigits);\n  }\n  /**\n   * Creates a Decimal with value 0.0 and the given number of fractial digits.\n   *\n   * Fractional digits are not relevant for the value but needed to be able\n   * to perform arithmetic operations with other decimals.\n   */\n  static zero(fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(\"0\", fractionalDigits);\n  }\n  /**\n   * Creates a Decimal with value 1.0 and the given number of fractial digits.\n   *\n   * Fractional digits are not relevant for the value but needed to be able\n   * to perform arithmetic operations with other decimals.\n   */\n  static one(fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(\"1\" + \"0\".repeat(fractionalDigits), fractionalDigits);\n  }\n  static verifyFractionalDigits(fractionalDigits) {\n    if (!Number.isInteger(fractionalDigits)) throw new Error(\"Fractional digits is not an integer\");\n    if (fractionalDigits < 0) throw new Error(\"Fractional digits must not be negative\");\n    if (fractionalDigits > maxFractionalDigits) {\n      throw new Error(\"Fractional digits must not exceed \".concat(maxFractionalDigits));\n    }\n  }\n  static compare(a, b) {\n    if (a.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    return a.data.atomics.cmp(new bn_js_1.default(b.atomics));\n  }\n  get atomics() {\n    return this.data.atomics.toString();\n  }\n  get fractionalDigits() {\n    return this.data.fractionalDigits;\n  }\n  /** Creates a new instance with the same value */\n  clone() {\n    return new Decimal(this.atomics, this.fractionalDigits);\n  }\n  /** Returns the greatest decimal <= this which has no fractional part (rounding down) */\n  floor() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n    if (fractional.isZero()) {\n      return this.clone();\n    } else {\n      return Decimal.fromAtomics(whole.mul(factor).toString(), this.fractionalDigits);\n    }\n  }\n  /** Returns the smallest decimal >= this which has no fractional part (rounding up) */\n  ceil() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n    if (fractional.isZero()) {\n      return this.clone();\n    } else {\n      return Decimal.fromAtomics(whole.addn(1).mul(factor).toString(), this.fractionalDigits);\n    }\n  }\n  toString() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n    if (fractional.isZero()) {\n      return whole.toString();\n    } else {\n      const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n      const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n      return \"\".concat(whole.toString(), \".\").concat(trimmedFractionalPart);\n    }\n  }\n  /**\n   * Returns an approximation as a float type. Only use this if no\n   * exact calculation is required.\n   */\n  toFloatApproximation() {\n    const out = Number(this.toString());\n    if (Number.isNaN(out)) throw new Error(\"Conversion to number failed\");\n    return out;\n  }\n  /**\n   * a.plus(b) returns a+b.\n   *\n   * Both values need to have the same fractional digits.\n   */\n  plus(b) {\n    if (this.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    const sum = this.data.atomics.add(new bn_js_1.default(b.atomics));\n    return new Decimal(sum.toString(), this.fractionalDigits);\n  }\n  /**\n   * a.minus(b) returns a-b.\n   *\n   * Both values need to have the same fractional digits.\n   * The resulting difference needs to be non-negative.\n   */\n  minus(b) {\n    if (this.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    const difference = this.data.atomics.sub(new bn_js_1.default(b.atomics));\n    if (difference.ltn(0)) throw new Error(\"Difference must not be negative\");\n    return new Decimal(difference.toString(), this.fractionalDigits);\n  }\n  /**\n   * a.multiply(b) returns a*b.\n   *\n   * We only allow multiplication by unsigned integers to avoid rounding errors.\n   */\n  multiply(b) {\n    const product = this.data.atomics.mul(new bn_js_1.default(b.toString()));\n    return new Decimal(product.toString(), this.fractionalDigits);\n  }\n  equals(b) {\n    return Decimal.compare(this, b) === 0;\n  }\n  isLessThan(b) {\n    return Decimal.compare(this, b) < 0;\n  }\n  isLessThanOrEqual(b) {\n    return Decimal.compare(this, b) <= 0;\n  }\n  isGreaterThan(b) {\n    return Decimal.compare(this, b) > 0;\n  }\n  isGreaterThanOrEqual(b) {\n    return Decimal.compare(this, b) >= 0;\n  }\n}\nexports.Decimal = Decimal;","map":{"version":3,"names":["bn_js_1","__importDefault","require","maxFractionalDigits","Decimal","constructor","atomics","fractionalDigits","match","Error","data","default","fromUserInput","input","verifyFractionalDigits","badCharacter","concat","index","whole","fractional","search","parts","split","length","replace","quantity","padEnd","fromAtomics","zero","one","repeat","Number","isInteger","compare","a","b","cmp","toString","clone","floor","factor","pow","div","mod","isZero","mul","ceil","addn","fullFractionalPart","padStart","trimmedFractionalPart","toFloatApproximation","out","isNaN","plus","sum","add","minus","difference","sub","ltn","multiply","product","equals","isLessThan","isLessThanOrEqual","isGreaterThan","isGreaterThanOrEqual","exports"],"sources":["../src/decimal.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}