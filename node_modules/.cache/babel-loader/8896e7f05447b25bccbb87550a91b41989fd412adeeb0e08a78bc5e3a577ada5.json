{"ast":null,"code":"import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nonevmAddress } from '../hooks/actions';\nimport { useActiveReact } from '../../hooks/useActiveReact';\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager\n// useUserTransactionTTL,\n// useUserSlippageTolerance\n} from '../../state/user/hooks';\nimport { BigAmount } from '../../utils/formatBignumber';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { ChainId } from \"../../config/chainConfig/chainId\";\nimport config from '../../config';\nimport { getP2PInfo } from '../../utils/bridge/register';\nimport { createAddress } from '../../utils/isAddress/BTC';\nimport { setLocalConfig } from '../../utils/tools/tools';\nimport { CROSSCHAINBRIDGE } from '../../utils/bridge/type';\nimport { isAddress } from \"../../utils/isAddress\";\nexport function useLoginBtc() {\n  const dispatch = useDispatch();\n  const loginBtc = useCallback(async chainId => {\n    // console.log(chainId)\n    console.log(window.bitcoin);\n    if (window.bitcoin) {\n      if (window.bitcoin.enable) {\n        window.bitcoin.enable().then(res => {\n          var _res$;\n          console.log(res);\n          // window.bitcoin.request({\n          //   method: 'wallet_getAddresses',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.request({\n          //   method: 'wallet_getConnectedNetwork',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.request({\n          //   method: 'wallet_signMessage',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.getAccount().then((res:any) => {\n          //   console.log(res)\n          //   dispatch(nonevmAddress({chainId, account: res.address}))\n          // }).catch((error:any) => {\n          //   console.log(error)\n          //   dispatch(nonevmAddress({chainId, account: ''}))\n          // })\n          // window.providerManager.getProviderFor('BTC').getMethod('wallet.getAddresses')().then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          dispatch(nonevmAddress({\n            chainId,\n            account: res === null || res === void 0 ? void 0 : (_res$ = res[0]) === null || _res$ === void 0 ? void 0 : _res$.address\n          }));\n        }).catch(error => {\n          console.log(error);\n          dispatch(nonevmAddress({\n            chainId,\n            account: ''\n          }));\n        });\n      } else if (window.bitcoin.getAccount) {\n        // window.bitcoin.getAccount().then((res:any) => {\n        //   console.log(res)\n        //   dispatch(nonevmAddress({chainId, account: res.address}))\n        // }).catch((error:any) => {\n        //   console.log(error)\n        //   dispatch(nonevmAddress({chainId, account: ''}))\n        // })\n        dispatch(nonevmAddress({\n          chainId,\n          account: ''\n        }));\n      }\n    } else {\n      if (confirm('Please install Bitcoin Wallet.') === true) {\n        window.open('https://mathwallet.org/bitcoin-wallet');\n      }\n    }\n  }, []);\n  return {\n    loginBtc\n  };\n}\nexport function useBtcBalance() {\n  const btcBalanceList = useSelector(state => state.btc.btcBalanceList);\n  const getBtcBalance = useCallback(async function (chainId, address) {\n    // console.log(chainId, address, token)\n    // console.log(!isAddress(address, chainId),address,chainId)\n    if (!isAddress(address, chainId) || ![ChainId.BTC, ChainId.BTC_TEST].includes(chainId)) {\n      return null;\n    }\n    const rpc = config.chainInfo[chainId].nodeRpc;\n    // const url = `${rpc}address/${address}/utxo`\n    const url = \"\".concat(rpc, \"/address/\").concat(address);\n    // const options = {\n    //   \"method\": \"gethistory\",\n    //   \"params\": [\"BLOCK\", [address]]\n    // }\n    const result = await fetch(url).then(response => response.json()).catch(err => console.error(err));\n    // console.log(result)\n    return result;\n  }, []);\n  return {\n    getBtcBalance,\n    btcBalanceList\n    // getAptosTokenBalance,\n  };\n}\n\nexport function getBtcHash(hash, chainId) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const rpc = config.chainInfo[chainId].nodeRpc;\n    const url = \"\".concat(rpc, \"/tx/\").concat(hash);\n    // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json);\n      if (json) {\n        if (json.status.confirmed === true) {\n          data.msg = 'Success';\n          data.info = json;\n        } else if (json.status.confirmed === false) {\n          data.msg = 'Null';\n          data.error = 'Query is empty!';\n        } else {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        }\n      } else {\n        data.msg = 'Null';\n        data.error = 'Query is empty!';\n      }\n      resolve(data);\n    }).catch(err => {\n      console.log(err.toString());\n      data.error = 'Query is empty!';\n      resolve(data);\n    });\n  });\n}\nexport function useBtcCrossChain(routerToken, inputToken, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, useToChainId) {\n  const {\n    account,\n    chainId\n  } = useActiveReact();\n  const {\n    btcBalanceList\n  } = useBtcBalance();\n  const {\n    t\n  } = useTranslation();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const addTransaction = useTransactionAdder();\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager();\n  const [p2pAddress, setP2pAddress] = useState('');\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [typedValue, selectCurrency]);\n  const balance = useMemo(() => {\n    const token = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address;\n    if (token) {\n      if (btcBalanceList === null || btcBalanceList === void 0 ? void 0 : btcBalanceList.NATIVE) {\n        return BigAmount.format(8, btcBalanceList === null || btcBalanceList === void 0 ? void 0 : btcBalanceList.NATIVE);\n      }\n      return BigAmount.format(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals, '0');\n    }\n    return undefined;\n  }, [selectCurrency, btcBalanceList]);\n  const onCreateP2pAddress = useCallback(() => {\n    setP2pAddress('');\n    if (receiveAddress && selectCurrency && destConfig && selectChain && (destConfig === null || destConfig === void 0 ? void 0 : destConfig.type) === 'swapin') {\n      getP2PInfo(receiveAddress, selectChain, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address).then(res => {\n        // console.log(res)\n        // console.log(selectCurrency)\n        if (res === null || res === void 0 ? void 0 : res.p2pAddress) {\n          const localAddress = createAddress(receiveAddress, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol, destConfig === null || destConfig === void 0 ? void 0 : destConfig.DepositAddress);\n          if ((res === null || res === void 0 ? void 0 : res.p2pAddress) === localAddress && isAddress(localAddress, chainId)) {\n            // console.log(localAddress)\n            setP2pAddress(localAddress);\n            setLocalConfig(receiveAddress, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address, selectChain, CROSSCHAINBRIDGE, {\n              p2pAddress: localAddress\n            });\n          }\n        }\n      });\n    }\n  }, [receiveAddress, selectCurrency, destConfig, selectChain, chainId]);\n  useEffect(() => {\n    onCreateP2pAddress();\n  }, [receiveAddress, selectCurrency, destConfig, selectChain, chainId]);\n\n  // console.log(balance)\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    // console.log(sufficientBalance)\n    // console.log(balance ? balance?.toExact() : '')\n    // console.log(typedValue)\n    if (!account || !chainId || !selectCurrency || !receiveAddress && (destConfig === null || destConfig === void 0 ? void 0 : destConfig.type) !== 'swapin' || !p2pAddress && (destConfig === null || destConfig === void 0 ? void 0 : destConfig.type) === 'swapin') return {};\n    return {\n      balance: balance,\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount ? async () => {\n        // const transactionParams = [{to: routerToken, value: inputAmount, memo: receiveAddress + ':' + selectChain}]\n        const transactionParams = [routerToken, inputAmount, receiveAddress + ':' + useToChainId];\n        console.log(transactionParams);\n        try {\n          var _ref, _ref$bitcoin;\n          const txResult = await ((_ref = window) === null || _ref === void 0 ? void 0 : (_ref$bitcoin = _ref.bitcoin) === null || _ref$bitcoin === void 0 ? void 0 : _ref$bitcoin.request({\n            // method: 'wallet_sendTransaction',\n            // method: 'wallet_signMessage',\n            method: 'wallet_signPSBT',\n            params: transactionParams\n          }));\n          // .then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          console.log(txResult);\n          const txReceipt = (txResult === null || txResult === void 0 ? void 0 : txResult.txHash) ? {\n            hash: txResult === null || txResult === void 0 ? void 0 : txResult.txHash\n          } : {};\n          // resolve({hash: txResult?.hash})\n          if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n            const data = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              routerToken: routerToken\n            };\n            addTransaction(txReceipt, {\n              summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig === null || destConfig === void 0 ? void 0 : destConfig.type,\n              routerToken: routerToken,\n              token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n              logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n              isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n              },\n              toInfo: {\n                symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n              }\n            });\n            recordsTxns(data);\n            onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n          }\n        } catch (error) {\n          // reject(error)\n          console.error(error);\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, p2pAddress, useToChainId, userInterfaceBalanceValid]);\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","useTranslation","useDispatch","useSelector","nonevmAddress","useActiveReact","useInterfaceBalanceValidManager","BigAmount","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","tryParseAmount3","ChainId","config","getP2PInfo","createAddress","setLocalConfig","CROSSCHAINBRIDGE","isAddress","useLoginBtc","dispatch","loginBtc","chainId","console","log","window","bitcoin","enable","then","res","_res$","account","address","catch","error","getAccount","confirm","open","useBtcBalance","btcBalanceList","state","btc","getBtcBalance","BTC","BTC_TEST","includes","rpc","chainInfo","nodeRpc","url","concat","result","fetch","response","json","err","getBtcHash","hash","data","msg","info","Promise","resolve","status","confirmed","toString","useBtcCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","userInterfaceBalanceValid","p2pAddress","setP2pAddress","inputAmount","decimals","balance","token","NATIVE","format","undefined","onCreateP2pAddress","type","symbol","localAddress","DepositAddress","sufficientBalance","Number","toExact","execute","transactionParams","_ref","_ref$bitcoin","txResult","request","method","params","txReceipt","txHash","value","formatvalue","to","version","pairid","summary","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/btc/index.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\n\nimport {BigAmount} from '../../utils/formatBignumber'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\nimport config from '../../config'\n\nimport {getP2PInfo} from '../../utils/bridge/register'\nimport { createAddress } from '../../utils/isAddress/BTC'\nimport {setLocalConfig} from '../../utils/tools/tools'\nimport {CROSSCHAINBRIDGE} from '../../utils/bridge/type'\n\nimport { isAddress } from \"../../utils/isAddress\"\n\nexport function useLoginBtc() {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginBtc = useCallback(async(chainId) => {\n    // console.log(chainId)\n    console.log(window.bitcoin)\n    if (window.bitcoin) {\n      if (window.bitcoin.enable) {\n        window.bitcoin.enable().then((res:any) => {\n          console.log(res)\n          // window.bitcoin.request({\n          //   method: 'wallet_getAddresses',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.request({\n          //   method: 'wallet_getConnectedNetwork',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.request({\n          //   method: 'wallet_signMessage',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.getAccount().then((res:any) => {\n          //   console.log(res)\n          //   dispatch(nonevmAddress({chainId, account: res.address}))\n          // }).catch((error:any) => {\n          //   console.log(error)\n          //   dispatch(nonevmAddress({chainId, account: ''}))\n          // })\n          // window.providerManager.getProviderFor('BTC').getMethod('wallet.getAddresses')().then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          dispatch(nonevmAddress({chainId, account: res?.[0]?.address}))\n        }).catch((error:any) => {\n          console.log(error)\n          dispatch(nonevmAddress({chainId, account: ''}))\n        })\n      } else if (window.bitcoin.getAccount) {\n        // window.bitcoin.getAccount().then((res:any) => {\n        //   console.log(res)\n        //   dispatch(nonevmAddress({chainId, account: res.address}))\n        // }).catch((error:any) => {\n        //   console.log(error)\n        //   dispatch(nonevmAddress({chainId, account: ''}))\n        // })\n        dispatch(nonevmAddress({chainId, account: ''}))\n      }\n    } else {\n      if (confirm('Please install Bitcoin Wallet.') === true) {\n        window.open('https://mathwallet.org/bitcoin-wallet')\n      }\n    }\n  }, [])\n\n  return {\n    loginBtc\n  }\n}\n\nexport function useBtcBalance () {\n\n  const btcBalanceList:any = useSelector<AppState, AppState['btc']>(state => state.btc.btcBalanceList)\n  const getBtcBalance = useCallback(async function (chainId:any, address: any) {\n    // console.log(chainId, address, token)\n    // console.log(!isAddress(address, chainId),address,chainId)\n    if (!isAddress(address, chainId) || ![ChainId.BTC, ChainId.BTC_TEST].includes(chainId)) { return null }\n    const rpc = config.chainInfo[chainId].nodeRpc\n    // const url = `${rpc}address/${address}/utxo`\n    const url = `${rpc}/address/${address}`\n    // const options = {\n    //   \"method\": \"gethistory\",\n    //   \"params\": [\"BLOCK\", [address]]\n    // }\n    const result = await fetch(url)\n      .then((response) => response.json())\n      .catch(err => console.error(err));\n      // console.log(result)\n    return result;\n  }, [])\n\n  return {\n    getBtcBalance,\n    btcBalanceList\n    // getAptosTokenBalance,\n  }\n}\n\nexport function getBtcHash (hash:any, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const rpc = config.chainInfo[chainId].nodeRpc\n    const url = `${rpc}/tx/${hash}`\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json)\n      if (json) {\n        if (json.status.confirmed === true) {\n          data.msg = 'Success'\n          data.info = json\n        } else if (json.status.confirmed === false) {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        } else {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      console.log(err.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    })\n  })\n}\n\nexport function useBtcCrossChain (\n  routerToken: string | null | undefined,\n  inputToken: string | null | undefined,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: any,\n  typedValue: any,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {btcBalanceList} = useBtcBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n\n  const [p2pAddress, setP2pAddress] = useState<any>('')\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (btcBalanceList?.NATIVE) {\n        return BigAmount.format(8, btcBalanceList?.NATIVE)\n      }\n      return BigAmount.format(selectCurrency?.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, btcBalanceList])\n\n  const onCreateP2pAddress = useCallback(() => {\n    setP2pAddress('')\n    if (receiveAddress && selectCurrency && destConfig && selectChain && destConfig?.type === 'swapin') {\n      getP2PInfo(receiveAddress, selectChain, selectCurrency?.symbol, selectCurrency?.address).then((res:any) => {\n        // console.log(res)\n        // console.log(selectCurrency)\n        if (res?.p2pAddress) {\n          const localAddress = createAddress(receiveAddress, selectCurrency?.symbol, destConfig?.DepositAddress)\n          if (res?.p2pAddress === localAddress && isAddress(localAddress, chainId)) {\n            // console.log(localAddress)\n            setP2pAddress(localAddress)\n            setLocalConfig(receiveAddress, selectCurrency?.address, selectChain, CROSSCHAINBRIDGE, {p2pAddress: localAddress})\n          }\n        }\n      })\n    }\n  }, [receiveAddress, selectCurrency, destConfig, selectChain, chainId])\n\n  useEffect(() => {\n    onCreateP2pAddress()\n  }, [receiveAddress, selectCurrency, destConfig, selectChain, chainId])\n\n  // console.log(balance)\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    // console.log(sufficientBalance)\n    // console.log(balance ? balance?.toExact() : '')\n    // console.log(typedValue)\n    if (\n      !account\n      || !chainId\n      || !selectCurrency\n      || (!receiveAddress && destConfig?.type !== 'swapin')\n      || (!p2pAddress && destConfig?.type === 'swapin')\n    ) return {}\n    return {\n      balance: balance,\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n      ? async () => {\n        // const transactionParams = [{to: routerToken, value: inputAmount, memo: receiveAddress + ':' + selectChain}]\n        const transactionParams = [routerToken, inputAmount, receiveAddress + ':' + useToChainId]\n        console.log(transactionParams)\n        try {\n          const txResult:any = await (window as any)?.bitcoin?.request({\n              // method: 'wallet_sendTransaction',\n              // method: 'wallet_signMessage',\n              method: 'wallet_signPSBT',\n              params: transactionParams\n            })\n            // .then((res:any) => {\n            //   console.log(res)\n            // }).catch((error:any) => {\n            //   console.log(error)\n            // })\n          console.log(txResult)\n          const txReceipt:any = txResult?.txHash ? {hash: txResult?.txHash} : {}\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig?.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (error) {\n          // reject(error)\n          console.error(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, p2pAddress, useToChainId, userInterfaceBalanceValid])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}