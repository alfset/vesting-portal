{"ast":null,"code":"import React from'react';import CardanoUpdater from'./cardano/updater';import TrxUpdater from'./trx/updater';import FlowUpdater from'./flow/updater';import SolUpdater from'./solana/updater';import AptUpdater from'./apt/updater';import BtcUpdater from'./btc/updater';import AtomUpdater from'./atom/updater';import NasUpdater from'./nas/updater';import{useActiveReact}from'../hooks/useActiveReact';import{ChainId}from'../config/chainConfig/chainId';import config from'../config';export default function Updaters(){var _config$chainInfo,_config$chainInfo$cha;const{chainId}=useActiveReact();// console.log(config)\nif([ChainId.ADA,ChainId.ADA_TEST].includes(chainId)){return/*#__PURE__*/React.createElement(CardanoUpdater,null);}else if([ChainId.TRX,ChainId.TRX_TEST].includes(chainId)){return/*#__PURE__*/React.createElement(TrxUpdater,null);}else if([ChainId.FLOW,ChainId.FLOW_TEST].includes(chainId)){return/*#__PURE__*/React.createElement(FlowUpdater,null);}else if([ChainId.SOL,ChainId.SOL_TEST].includes(chainId)){return/*#__PURE__*/React.createElement(SolUpdater,null);}else if([ChainId.APT,ChainId.APT_TEST].includes(chainId)){return/*#__PURE__*/React.createElement(AptUpdater,null);}else if([ChainId.BTC,ChainId.BTC_TEST].includes(chainId)&&(config===null||config===void 0?void 0:(_config$chainInfo=config.chainInfo)===null||_config$chainInfo===void 0?void 0:(_config$chainInfo$cha=_config$chainInfo[chainId])===null||_config$chainInfo$cha===void 0?void 0:_config$chainInfo$cha.chainType)!=='NOWALLET'){// } else if ([ChainId.BTC_TEST].includes(chainId)) {\nreturn/*#__PURE__*/React.createElement(BtcUpdater,null);}else if([ChainId.ATOM_SEI,ChainId.ATOM_SEI_TEST,ChainId.ATOM_DCORE,ChainId.ATOM_DCORE_TEST].includes(chainId)){return/*#__PURE__*/React.createElement(AtomUpdater,null);}else if([ChainId.NAS].includes(chainId)){return/*#__PURE__*/React.createElement(NasUpdater,null);}return/*#__PURE__*/React.createElement(React.Fragment,null);}","map":{"version":3,"names":["React","CardanoUpdater","TrxUpdater","FlowUpdater","SolUpdater","AptUpdater","BtcUpdater","AtomUpdater","NasUpdater","useActiveReact","ChainId","config","Updaters","_config$chainInfo","_config$chainInfo$cha","chainId","ADA","ADA_TEST","includes","createElement","TRX","TRX_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","APT","APT_TEST","BTC","BTC_TEST","chainInfo","chainType","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","NAS","Fragment"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/updater.tsx"],"sourcesContent":["import React from 'react'\n\nimport CardanoUpdater from './cardano/updater'\nimport TrxUpdater from './trx/updater'\nimport FlowUpdater from './flow/updater'\nimport SolUpdater from './solana/updater'\nimport AptUpdater from './apt/updater'\nimport BtcUpdater from './btc/updater'\nimport AtomUpdater from './atom/updater'\nimport NasUpdater from './nas/updater'\n\nimport {useActiveReact} from '../hooks/useActiveReact'\nimport { ChainId } from '../config/chainConfig/chainId'\nimport config from '../config'\n\nexport default function Updaters() {\n  const { chainId } = useActiveReact()\n  // console.log(config)\n  if ([ChainId.ADA, ChainId.ADA_TEST].includes(chainId)) {\n    return <CardanoUpdater />\n  } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) {\n    return <TrxUpdater />\n  } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n    return <FlowUpdater />\n  } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(chainId)) {\n    return <SolUpdater />\n  } else if ([ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n    return <AptUpdater />\n  } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(chainId) && config?.chainInfo?.[chainId]?.chainType !== 'NOWALLET') {\n  // } else if ([ChainId.BTC_TEST].includes(chainId)) {\n    return <BtcUpdater />\n  } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n    return <AtomUpdater />\n  }  else if ([ChainId.NAS].includes(chainId)) {\n    return <NasUpdater />\n  }\n  return <></>\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}