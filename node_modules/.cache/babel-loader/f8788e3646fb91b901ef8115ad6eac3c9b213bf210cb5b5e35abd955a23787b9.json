{"ast":null,"code":"import { useCallback, useMemo } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nonevmAddress } from '../hooks/actions';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport config from '../../config';\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager\n// useUserTransactionTTL,\n// useUserSlippageTolerance\n} from '../../state/user/hooks';\nimport { BigAmount } from '../../utils/formatBignumber';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { ChainId } from \"../../config/chainConfig/chainId\";\n\n// import {AptosClient} from 'aptos'\n// import {connect} from 'Aptos-api-js'\n// console.log(Aptos)\n// const {AptosClient} = require('aptos')\n\n// function getClient (chainId:any) {\n//   const rpc = config.chainInfo[chainId].nodeRpc\n//   // return new AptosClient(rpc)\n//   return rpc\n// }\nconst aptAddressReg = /^0x[0-9A-Za-z]{64}$/;\nexport function isAptosAddress(address) {\n  if (aptAddressReg.test(address)) {\n    return address;\n  }\n  return false;\n}\n\n/**\n * Connect wallet and get account address\n */\nexport function useLoginAptos() {\n  const dispatch = useDispatch();\n  const loginAptos = useCallback(async chainId => {\n    var _window;\n    if ((_window = window) === null || _window === void 0 ? void 0 : _window.aptos) {\n      window.aptos.connect().then(res => {\n        console.log(res);\n        if (res === null || res === void 0 ? void 0 : res.address) {\n          dispatch(nonevmAddress({\n            chainId,\n            account: res.address\n          }));\n        } else {\n          dispatch(nonevmAddress({\n            chainId,\n            account: ''\n          }));\n        }\n      }).catch(error => {\n        console.log(error);\n        dispatch(nonevmAddress({\n          chainId,\n          account: ''\n        }));\n      });\n    } else {\n      if (confirm('Please install Petra Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/petra/ejjladinnckdgjemekebdpeokbikhfci');\n      }\n    }\n  }, []);\n  return {\n    loginAptos\n  };\n}\n\n/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */\nexport function useAptosBalance() {\n  const aptBalanceList = useSelector(state => state.apt.aptBalanceList);\n  // const getAptosResource = useCallback(async ({address, res_type}: {address: string | object, res_type: string | null = null}) => {\n  // const getAptosResource = (async function (address: string | object, res_type: string | null = null) {\n  const getAptosResource = useCallback(async function (chainId, address) {\n    let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    // console.log(chainId, address, token)\n    // console.log(isAptosAddress(address))\n    if (!isAptosAddress(address)) {\n      return null;\n    }\n    const rpc = config.chainInfo[chainId].nodeRpc;\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    let url;\n    if (!token) {\n      url = rpc + \"/v1/accounts/\" + address + \"/resources\";\n    } else {\n      url = rpc + \"/v1/accounts/\" + address + \"/resource/\" + token;\n    }\n    const result = await fetch(url, options).then(response => response.json()).catch(err => console.error(err));\n    // console.log(result)\n    return result;\n  }, []);\n  return {\n    getAptosResource,\n    aptBalanceList\n    // getAptosTokenBalance,\n  };\n}\n\n/**\n * Authorization and obtaining authorization information\n *\n * @param account wallet address\n * @param token token address\n * @param spender spender address\n */\nexport const bytecode = 'a11ceb0b0500000006010004030411041508051d0e072b36086120000000010102000100000301040100000400020100010302030105020501060c010500010900010101090104636f696e067369676e65720a616464726573735f6f661569735f6163636f756e745f7265676973746572656408726567697374657200000000000000000000000000000000000000000000000000000000000000010200000001150a0011000c010a013800200308050a0a0038010b01380220030f05120b00380305140b000102';\nexport function useAptAllowance() {\n  const setAptAllowance = useCallback((token, chainId, account, anytoken) => {\n    return new Promise(async (resolve, reject) => {\n      const curAccount = await window.aptos.account();\n      if ((curAccount === null || curAccount === void 0 ? void 0 : curAccount.address) !== account) {\n        alert('This address is not the current wallet address. Please switch wallets.');\n      } else {\n        if (token && account && chainId && [ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n          const transaction = {\n            arguments: [],\n            function: '0x1::managed_coin::register',\n            type: 'entry_function_payload',\n            'type_arguments': [token]\n          };\n          // const transaction = {\n          //   arguments: [],\n          //   code: {\n          //     bytecode: bytecode\n          //   },\n          //   function: '0x1::coin::transfer',\n          //   type: 'script_payload',\n          //   'type_arguments': [token, anytoken ? anytoken : token],\n          // }\n          console.log(anytoken);\n          console.log(transaction);\n          try {\n            const txResult = await window.aptos.signAndSubmitTransaction(transaction);\n            console.log(txResult);\n            resolve({\n              hash: txResult === null || txResult === void 0 ? void 0 : txResult.hash\n            });\n          } catch (error) {\n            reject(error);\n          }\n        } else {\n          reject('Parameter error.');\n        }\n      }\n    });\n  }, []);\n  return {\n    setAptAllowance\n  };\n}\n\n/**\n * Get transaction info\n *\n * @param txid transaction hash\n */\nexport function getAptTxnsStatus(txid, chainId) {\n  return new Promise(resolve => {\n    const data = {};\n    if (txid) {\n      const rpc = config.chainInfo[chainId].nodeRpc;\n      const url = \"\".concat(rpc, \"/v1/transactions/by_hash/\").concat(txid);\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n      fetch(url).then(res => res.json()).then(json => {\n        console.log(json);\n        if (json) {\n          if (json.success === true) {\n            data.msg = 'Success';\n            data.info = json;\n          } else if (json.success === false) {\n            data.msg = 'Failure';\n            data.error = 'Txns is failure!';\n          } else {\n            data.msg = 'Null';\n            data.error = 'Query is empty!';\n          }\n        } else {\n          data.msg = 'Null';\n          data.error = 'Query is empty!';\n        }\n        resolve(data);\n      }).catch(err => {\n        console.log(err.toString());\n        data.error = 'Query is empty!';\n        resolve(data);\n      });\n    } else {\n      data.msg = 'Null';\n      data.error = 'Query is empty!';\n      resolve(data);\n    }\n  });\n}\n// getAptTxnsStatus('0x013dbfba6bee428b70a66603a306dd95044e7e16a7bcddef094154a11b62f070', 'APT_TEST')\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */\nexport function useAptCrossChain(routerToken, inputToken, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, useToChainId) {\n  const {\n    account,\n    chainId\n  } = useActiveReact();\n  const {\n    aptBalanceList\n  } = useAptosBalance();\n  const {\n    t\n  } = useTranslation();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const addTransaction = useTransactionAdder();\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager();\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [typedValue, selectCurrency]);\n  const balance = useMemo(() => {\n    const token = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address;\n    if (token) {\n      var _aptBalanceList$token, _aptBalanceList$token3, _aptBalanceList$token4;\n      if ((selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'NATIVE' && (aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token = aptBalanceList[token]) === null || _aptBalanceList$token === void 0 ? void 0 : _aptBalanceList$token.balance)) {\n        var _aptBalanceList$token2;\n        return BigAmount.format(8, aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token2 = aptBalanceList[token]) === null || _aptBalanceList$token2 === void 0 ? void 0 : _aptBalanceList$token2.balance);\n      } else if ((aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token3 = aptBalanceList[token]) === null || _aptBalanceList$token3 === void 0 ? void 0 : _aptBalanceList$token3.balance) && (aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token4 = aptBalanceList[token]) === null || _aptBalanceList$token4 === void 0 ? void 0 : _aptBalanceList$token4.balance)) {\n        var _aptBalanceList$token5;\n        return BigAmount.format(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals, aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token5 = aptBalanceList[token]) === null || _aptBalanceList$token5 === void 0 ? void 0 : _aptBalanceList$token5.balance);\n      }\n      return BigAmount.format(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals, '0');\n    }\n    return undefined;\n  }, [selectCurrency, aptBalanceList]);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    // console.log(sufficientBalance)\n    // console.log(balance ? balance?.toExact() : '')\n    // console.log(typedValue)\n    if (!account || !chainId || !selectCurrency || !receiveAddress || !useToChainId) return {};\n    return {\n      balance: balance,\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount ? async () => {\n        const transaction = {\n          arguments: [inputAmount, receiveAddress, useToChainId],\n          function: routerToken + '::Router::swapout',\n          type: 'entry_function_payload',\n          'type_arguments': [selectCurrency.address]\n        };\n        console.log(transaction);\n        try {\n          const txReceipt = await window.aptos.signAndSubmitTransaction(transaction);\n          console.log(txReceipt);\n          // resolve({hash: txResult?.hash})\n          if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n            const data = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              routerToken: routerToken\n            };\n            addTransaction(txReceipt, {\n              summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig === null || destConfig === void 0 ? void 0 : destConfig.type,\n              routerToken: routerToken,\n              token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n              logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n              isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n              },\n              toInfo: {\n                symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n              }\n            });\n            recordsTxns(data);\n            onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n          }\n        } catch (error) {\n          // reject(error)\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, useToChainId, userInterfaceBalanceValid]);\n}\n\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param selectCurrency select current token info\n * @param inputToken any or underlying address\n * @param typedValue typed Value\n * @param swapType deposit or withdraw\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param destConfig to chain info\n */\nexport function useAptSwapPoolCallback(routerToken, selectCurrency, inputToken, typedValue, swapType, selectChain, receiveAddress, destConfig, inputCurrency, useToChainId) {\n  const {\n    account,\n    chainId\n  } = useActiveReact();\n  const {\n    aptBalanceList\n  } = useAptosBalance();\n  const {\n    t\n  } = useTranslation();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const addTransaction = useTransactionAdder();\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [typedValue, selectCurrency]);\n  const balance = useMemo(() => {\n    const token = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address;\n    if (token) {\n      var _aptBalanceList$token6, _aptBalanceList$token8, _aptBalanceList$token9;\n      if ((selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'NATIVE' && (aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token6 = aptBalanceList[token]) === null || _aptBalanceList$token6 === void 0 ? void 0 : _aptBalanceList$token6.balance)) {\n        var _aptBalanceList$token7;\n        return BigAmount.format(8, aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token7 = aptBalanceList[token]) === null || _aptBalanceList$token7 === void 0 ? void 0 : _aptBalanceList$token7.balance);\n      } else if ((aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token8 = aptBalanceList[token]) === null || _aptBalanceList$token8 === void 0 ? void 0 : _aptBalanceList$token8.balance) && (aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token9 = aptBalanceList[token]) === null || _aptBalanceList$token9 === void 0 ? void 0 : _aptBalanceList$token9.balance)) {\n        var _aptBalanceList$token10;\n        return BigAmount.format(selectCurrency.decimals, aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token10 = aptBalanceList[token]) === null || _aptBalanceList$token10 === void 0 ? void 0 : _aptBalanceList$token10.balance);\n      }\n      return BigAmount.format(selectCurrency.decimals, '0');\n    }\n    return undefined;\n  }, [selectCurrency, aptBalanceList]);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    if (!account || !chainId || !selectCurrency || !swapType) return {};\n    return {\n      balance: balance,\n      execute: async () => {\n        let transaction = {};\n        if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n          transaction = {\n            arguments: [inputAmount, receiveAddress, useToChainId],\n            function: routerToken + '::Router::swapout',\n            type: 'entry_function_payload',\n            'type_arguments': [inputToken]\n          };\n        } else {\n          if (swapType === 'deposit') {\n            transaction = {\n              arguments: [inputAmount],\n              function: routerToken + '::Pool::deposit',\n              type: 'entry_function_payload',\n              'type_arguments': [inputCurrency.address, inputToken]\n            };\n          } else {\n            transaction = {\n              arguments: [inputAmount],\n              function: routerToken + '::Pool::withdraw',\n              type: 'entry_function_payload',\n              'type_arguments': [inputToken, inputCurrency.address]\n            };\n          }\n        }\n        console.log(transaction);\n        try {\n          const txReceipt = await window.aptos.signAndSubmitTransaction(transaction);\n          console.log(txReceipt);\n          // resolve({hash: txResult?.hash})\n          if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n            if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n              const data = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                routerToken: routerToken\n              };\n              addTransaction(txReceipt, {\n                summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: (receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.indexOf('0x')) === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                version: destConfig === null || destConfig === void 0 ? void 0 : destConfig.type,\n                routerToken: routerToken,\n                token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n                logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n                isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                  name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                  decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                  address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n                },\n                toInfo: {\n                  symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                  name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                  decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                  address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n                }\n              });\n              recordsTxns(data);\n              onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n            } else {\n              addTransaction(txReceipt, {\n                summary: \"\".concat(swapType === 'deposit' ? 'Deposit' : 'Withdraw', \" \").concat(typedValue, \" \").concat(config.getBaseCoin(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol, chainId))\n              });\n            }\n          }\n        } catch (error) {\n          // reject(error)\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, inputCurrency, useToChainId]);\n}\n\n/**\n * Get pool info\n *\n * @param chainId router token address\n * @param calls [{token: '', anytoken: '', account: ''}]\n * @return {'anytoken': {'balanceOf': '', 'totalSupply': '', 'balance': ''}}\n */\nexport function useAptPoolDatas() {\n  const {\n    getAptosResource\n  } = useAptosBalance();\n  const getAptPoolDatas = useCallback(async (calls, chainId) => {\n    return new Promise(resolve => {\n      const arr = [];\n      const labelArr = [];\n      // console.log(calls)\n      if ([ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n        // console.log(calls)\n        // const useAccount = window.tronWeb.defaultAddress.base58\n        for (const item of calls) {\n          const anytoken = item.anytoken ? item.anytoken.split('::')[0] : '';\n          const anytokenSource = item.anytoken;\n          const underlyingToken = item.token;\n          // console.log('anytoken', anytoken)\n          // console.log('underlyingToken', underlyingToken)\n          if (underlyingToken && anytoken) {\n            // console.log(underlyingToken, anytoken)\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            arr.push(getAptosResource(chainId, anytoken));\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balanceOf',\n              dec: item.dec\n            });\n          }\n          // console.log(item)\n          // console.log(chainId)\n          if (anytoken && isAptosAddress(item.account)) {\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\n            arr.push(getAptosResource(chainId, item.account));\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balance',\n              dec: item.dec\n            });\n          }\n        }\n      }\n      // console.log(arr)\n      const list = {};\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key;\n          const l = labelArr[i].label;\n          const result = res[i];\n          // const dec = labelArr[i].dec\n          if (!list[k]) list[k] = {};\n          // list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\n          // list[k][l] = result\n          if (result) {\n            for (const obj of result) {\n              if (obj && !obj.error_code) {\n                const type = obj.type;\n                const tokenKey = type.replace('0x1::coin::CoinStore<', '').replace('>', '');\n                if (tokenKey === k) {\n                  list[k][l] = obj.data.coin.value;\n                  break;\n                }\n              }\n            }\n          }\n        }\n        // console.log(list)\n        resolve(list);\n      }).catch(error => {\n        console.log(error);\n        resolve(list);\n      });\n    });\n  }, []);\n  return {\n    getAptPoolDatas\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useTranslation","useDispatch","useSelector","nonevmAddress","useActiveReact","config","useInterfaceBalanceValidManager","BigAmount","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","tryParseAmount3","ChainId","aptAddressReg","isAptosAddress","address","test","useLoginAptos","dispatch","loginAptos","chainId","_window","window","aptos","connect","then","res","console","log","account","catch","error","confirm","open","useAptosBalance","aptBalanceList","state","apt","getAptosResource","token","arguments","length","undefined","rpc","chainInfo","nodeRpc","options","method","headers","url","result","fetch","response","json","err","bytecode","useAptAllowance","setAptAllowance","anytoken","Promise","resolve","reject","curAccount","alert","APT","APT_TEST","includes","transaction","function","type","txResult","signAndSubmitTransaction","hash","getAptTxnsStatus","txid","data","concat","success","msg","info","toString","useAptCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","userInterfaceBalanceValid","inputAmount","decimals","balance","_aptBalanceList$token","_aptBalanceList$token3","_aptBalanceList$token4","tokenType","_aptBalanceList$token2","format","_aptBalanceList$token5","sufficientBalance","Number","toExact","execute","txReceipt","value","formatvalue","to","symbol","version","pairid","summary","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError","useAptSwapPoolCallback","swapType","inputCurrency","_aptBalanceList$token6","_aptBalanceList$token8","_aptBalanceList$token9","_aptBalanceList$token7","_aptBalanceList$token10","getBaseCoin","useAptPoolDatas","getAptPoolDatas","calls","arr","labelArr","item","split","anytokenSource","underlyingToken","push","key","label","dec","list","all","i","len","k","l","obj","error_code","tokenKey","replace","coin"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/apt/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport config from '../../config'\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\n\nimport {BigAmount} from '../../utils/formatBignumber'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n\n\n// import {AptosClient} from 'aptos'\n// import {connect} from 'Aptos-api-js'\n// console.log(Aptos)\n// const {AptosClient} = require('aptos')\n\n// function getClient (chainId:any) {\n//   const rpc = config.chainInfo[chainId].nodeRpc\n//   // return new AptosClient(rpc)\n//   return rpc\n// }\nconst aptAddressReg = /^0x[0-9A-Za-z]{64}$/\nexport function isAptosAddress (address: string) {\n  if (aptAddressReg.test(address)) {\n    return address\n  }\n  return false\n}\n\n/**\n * Connect wallet and get account address\n */\n export function useLoginAptos() {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginAptos = useCallback(async(chainId) => {\n    if (window?.aptos) {\n      window.aptos.connect().then((res:any) => {\n        console.log(res)\n        if (res?.address) {\n          dispatch(nonevmAddress({chainId, account: res.address}))\n        } else {\n          dispatch(nonevmAddress({chainId, account: ''}))\n        }\n      }).catch((error:any) => {\n        console.log(error)\n        dispatch(nonevmAddress({chainId, account: ''}))\n      })\n    } else {\n      if (confirm('Please install Petra Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/petra/ejjladinnckdgjemekebdpeokbikhfci')\n      }\n    }\n  }, [])\n\n  return {\n    loginAptos\n  }\n}\n\n/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */\n export function useAptosBalance () {\n\n  const aptBalanceList:any = useSelector<AppState, AppState['apt']>(state => state.apt.aptBalanceList)\n  // const getAptosResource = useCallback(async ({address, res_type}: {address: string | object, res_type: string | null = null}) => {\n  // const getAptosResource = (async function (address: string | object, res_type: string | null = null) {\n  const getAptosResource = useCallback(async function (chainId:any, address: any, token: string | null = null) {\n    // console.log(chainId, address, token)\n    // console.log(isAptosAddress(address))\n    if (!isAptosAddress(address)) { return null }\n    const rpc = config.chainInfo[chainId].nodeRpc\n    const options = {method: 'GET', headers: {'Content-Type': 'application/json'}};\n    let url \n    if (!token) {\n      url = rpc + \"/v1/accounts/\" + address +\"/resources\";\n    } else {\n      url = rpc + \"/v1/accounts/\" + address +\"/resource/\" + token;\n    }\n    const result = await fetch(url, options)\n      .then((response) => response.json())\n      .catch(err => console.error(err));\n      // console.log(result)\n    return result;\n  }, [])\n\n  return {\n    getAptosResource,\n    aptBalanceList\n    // getAptosTokenBalance,\n  }\n}\n\n/**\n * Authorization and obtaining authorization information\n *\n * @param account wallet address\n * @param token token address\n * @param spender spender address\n */\nexport const bytecode = 'a11ceb0b0500000006010004030411041508051d0e072b36086120000000010102000100000301040100000400020100010302030105020501060c010500010900010101090104636f696e067369676e65720a616464726573735f6f661569735f6163636f756e745f7265676973746572656408726567697374657200000000000000000000000000000000000000000000000000000000000000010200000001150a0011000c010a013800200308050a0a0038010b01380220030f05120b00380305140b000102'\nexport function useAptAllowance() {\n  const setAptAllowance = useCallback((\n    token: string | null | undefined,\n    chainId: any,\n    account: string | null | undefined,\n    anytoken?: any\n  ): Promise<any> => {\n    return new Promise(async(resolve, reject) => {\n      const curAccount = await window.aptos.account()\n      if (curAccount?.address !== account) {\n        alert('This address is not the current wallet address. Please switch wallets.')\n      } else {\n        if (token && account && chainId && [ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n          const transaction = {\n            arguments: [],\n            function: '0x1::managed_coin::register',\n            type: 'entry_function_payload',\n            'type_arguments': [token],\n          }\n          // const transaction = {\n          //   arguments: [],\n          //   code: {\n          //     bytecode: bytecode\n          //   },\n          //   function: '0x1::coin::transfer',\n          //   type: 'script_payload',\n          //   'type_arguments': [token, anytoken ? anytoken : token],\n          // }\n          console.log(anytoken)\n          console.log(transaction)\n          try {\n            const txResult:any = await (window as any).aptos.signAndSubmitTransaction(transaction);\n            console.log(txResult)\n            resolve({hash: txResult?.hash})\n          } catch (error) {\n            reject(error)\n          }\n        } else {\n          reject('Parameter error.')\n        }\n      }\n    })\n  }, [])\n\n  return {\n    setAptAllowance,\n  }\n}\n\n/**\n * Get transaction info\n *\n * @param txid transaction hash\n */\nexport function getAptTxnsStatus (txid:string, chainId:any) {\n  return new Promise(resolve => {\n    const data:any = {}\n    if (txid) {\n      const rpc = config.chainInfo[chainId].nodeRpc\n      const url = `${rpc}/v1/transactions/by_hash/${txid}`\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n      fetch(url).then(res => res.json()).then(json => {\n        console.log(json)\n        if (json) {\n          if (json.success === true) {\n            data.msg = 'Success'\n            data.info = json\n          } else if (json.success === false) {\n            data.msg = 'Failure'\n            data.error = 'Txns is failure!'\n          } else {\n            data.msg = 'Null'\n            data.error = 'Query is empty!'\n          }\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      }).catch(err => {\n        console.log(err.toString())\n        data.error = 'Query is empty!'\n        resolve(data)\n      })\n    } else {\n      data.msg = 'Null'\n      data.error = 'Query is empty!'\n      resolve(data)\n    }\n  })\n}\n// getAptTxnsStatus('0x013dbfba6bee428b70a66603a306dd95044e7e16a7bcddef094154a11b62f070', 'APT_TEST')\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */\nexport function useAptCrossChain (\n  routerToken: string | null | undefined,\n  inputToken: string | null | undefined,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: any,\n  typedValue: any,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {aptBalanceList} = useAptosBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (selectCurrency?.tokenType === 'NATIVE' && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(8, aptBalanceList?.[token]?.balance)\n      } else if (aptBalanceList?.[token]?.balance && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(selectCurrency?.decimals, aptBalanceList?.[token]?.balance)\n      }\n      return BigAmount.format(selectCurrency?.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, aptBalanceList])\n\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    // console.log(sufficientBalance)\n    // console.log(balance ? balance?.toExact() : '')\n    // console.log(typedValue)\n    if (!account || !chainId || !selectCurrency || !receiveAddress || !useToChainId) return {}\n    return {\n      balance: balance,\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n      ? async () => {\n\n        const transaction = {\n          arguments: [inputAmount, receiveAddress, useToChainId],\n          function: routerToken + '::Router::swapout',\n          type: 'entry_function_payload',\n          'type_arguments': [selectCurrency.address],\n        }\n        console.log(transaction)\n        try {\n          const txReceipt:any = await (window as any).aptos.signAndSubmitTransaction(transaction);\n          console.log(txReceipt)\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig?.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (error) {\n          // reject(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, useToChainId, userInterfaceBalanceValid])\n}\n\n\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param selectCurrency select current token info\n * @param inputToken any or underlying address\n * @param typedValue typed Value\n * @param swapType deposit or withdraw\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param destConfig to chain info\n */\nexport function useAptSwapPoolCallback(\n  routerToken: string | null | undefined,\n  selectCurrency: any,\n  inputToken: string | null | undefined,\n  typedValue: any,\n  swapType: any,\n  selectChain: any,\n  receiveAddress: string | null | undefined,\n  destConfig: any,\n  inputCurrency: any,\n  useToChainId: any,\n): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { account, chainId } = useActiveReact()\n  const {aptBalanceList} = useAptosBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (selectCurrency?.tokenType === 'NATIVE' && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(8, aptBalanceList?.[token]?.balance)\n      } else if (aptBalanceList?.[token]?.balance && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(selectCurrency.decimals, aptBalanceList?.[token]?.balance)\n      }\n      return BigAmount.format(selectCurrency.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, aptBalanceList])\n\n  let sufficientBalance = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    if (!account || !chainId || !selectCurrency || !swapType) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n\n        let transaction = {}\n        if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n          transaction = {\n            arguments: [inputAmount, receiveAddress, useToChainId],\n            function: routerToken + '::Router::swapout',\n            type: 'entry_function_payload',\n            'type_arguments': [inputToken],\n          }\n        } else {\n          if (swapType === 'deposit') {\n            transaction = {\n              arguments: [inputAmount],\n              function: routerToken + '::Pool::deposit',\n              type: 'entry_function_payload',\n              'type_arguments': [inputCurrency.address,inputToken],\n            }\n          } else {\n            transaction = {\n              arguments: [inputAmount],\n              function: routerToken + '::Pool::withdraw',\n              type: 'entry_function_payload',\n              'type_arguments': [inputToken, inputCurrency.address],\n            }\n          }\n        }\n        console.log(transaction)\n        try {\n          const txReceipt:any = await (window as any).aptos.signAndSubmitTransaction(transaction);\n          console.log(txReceipt)\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n\n              const data:any = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency?.symbol,\n                routerToken: routerToken\n              }\n              addTransaction(txReceipt, {\n                summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress?.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig?.type,\n                routerToken: routerToken,\n                token: selectCurrency?.address,\n                logoUrl: selectCurrency?.logoUrl,\n                isLiquidity: destConfig?.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency?.symbol,\n                  name: selectCurrency?.name,\n                  decimals: selectCurrency?.decimals,\n                  address: selectCurrency?.address,\n                },\n                toInfo: {\n                  symbol: destConfig?.symbol,\n                  name: destConfig?.name,\n                  decimals: destConfig?.decimals,\n                  address: destConfig?.address,\n                },\n              })\n              recordsTxns(data)\n              onChangeViewDtil(txReceipt?.hash, true)\n            } else {\n              addTransaction(txReceipt, { summary: `${swapType === 'deposit' ? 'Deposit' : 'Withdraw'} ${typedValue} ${config.getBaseCoin(selectCurrency?.symbol, chainId)}` })\n            }\n          }\n        } catch (error) {\n          // reject(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, inputCurrency, useToChainId])\n}\n\n\n/**\n * Get pool info\n *\n * @param chainId router token address\n * @param calls [{token: '', anytoken: '', account: ''}]\n * @return {'anytoken': {'balanceOf': '', 'totalSupply': '', 'balance': ''}}\n */\nexport function useAptPoolDatas () {\n  const {getAptosResource} = useAptosBalance()\n  const getAptPoolDatas = useCallback(async(calls: any, chainId: any): Promise<void> => {\n    return new Promise(resolve => {\n      const arr = []\n      const labelArr:any = []\n      // console.log(calls)\n      if ([ChainId.APT, ChainId.APT_TEST].includes(chainId) ) {\n        // console.log(calls)\n        // const useAccount = window.tronWeb.defaultAddress.base58\n        for (const item of calls) {\n          const anytoken = item.anytoken ? item.anytoken.split('::')[0] : ''\n          const anytokenSource = item.anytoken\n          const underlyingToken = item.token\n          // console.log('anytoken', anytoken)\n          // console.log('underlyingToken', underlyingToken)\n          if (underlyingToken && anytoken) {\n            // console.log(underlyingToken, anytoken)\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            arr.push(getAptosResource(chainId, anytoken))\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balanceOf',\n              dec: item.dec\n            })\n          }\n          // console.log(item)\n          // console.log(chainId)\n          if (anytoken && isAptosAddress(item.account)) {\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\n            arr.push(getAptosResource(chainId, item.account))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balance',\n              dec: item.dec\n            })\n          }\n        }\n      }\n      // console.log(arr)\n      const list:any = {}\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key\n          const l = labelArr[i].label\n          const result = res[i]\n          // const dec = labelArr[i].dec\n          if (!list[k]) list[k] = {}\n          // list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\n          // list[k][l] = result\n          if (result) {\n            for (const obj of result) {\n              if (obj && !obj.error_code) {\n                const type = obj.type\n                const tokenKey = type.replace('0x1::coin::CoinStore<', '').replace('>', '')\n                if (tokenKey === k) {\n                  list[k][l] = obj.data.coin.value\n                  break\n                }\n              }\n            }\n          }\n        }\n        // console.log(list)\n        resolve(list)\n      }).catch((error:any) => {\n        console.log(error)\n        resolve(list)\n      })\n    })\n  }, [])\n  return {\n    getAptPoolDatas\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}