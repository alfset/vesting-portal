{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClaimableBalance = createClaimableBalance;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _asset = require('../asset');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Create a new claimable balance operation.\n *\n * @function\n * @alias Operation.createClaimableBalance\n *\n * @param {object} opts Options object\n * @param {Asset} opts.asset - The asset for the claimable balance.\n * @param {string} opts.amount - Amount.\n * @param {Claimant[]} opts.claimants - An array of Claimants\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} Create claimable balance operation\n *\n * @example\n * const asset = new Asset(\n *   'USD',\n *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * );\n * const amount = '100.0000000';\n * const claimants = [\n *   new Claimant(\n *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',\n *      Claimant.predicateBeforeAbsoluteTime(\"4102444800000\")\n *   )\n * ];\n *\n * const op = Operation.createClaimableBalance({\n *   asset,\n *   amount,\n *   claimants\n * });\n *\n */\nfunction createClaimableBalance(opts) {\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('must provide an asset for create claimable balance operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) {\n    throw new Error('must provide at least one claimant');\n  }\n  var attributes = {};\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.claimants = opts.claimants.map(function (c) {\n    return c.toXDRObject();\n  });\n  var createClaimableBalanceOp = new _xdr2.default.CreateClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.createClaimableBalance(createClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createClaimableBalance","_xdr","require","_xdr2","_interopRequireDefault","_asset","obj","__esModule","default","opts","asset","Asset","Error","isValidAmount","amount","TypeError","constructAmountRequirementsError","Array","isArray","claimants","length","attributes","toXDRObject","_toXDRAmount","map","c","createClaimableBalanceOp","CreateClaimableBalanceOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/create_claimable_balance.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClaimableBalance = createClaimableBalance;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _asset = require('../asset');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a new claimable balance operation.\n *\n * @function\n * @alias Operation.createClaimableBalance\n *\n * @param {object} opts Options object\n * @param {Asset} opts.asset - The asset for the claimable balance.\n * @param {string} opts.amount - Amount.\n * @param {Claimant[]} opts.claimants - An array of Claimants\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} Create claimable balance operation\n *\n * @example\n * const asset = new Asset(\n *   'USD',\n *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * );\n * const amount = '100.0000000';\n * const claimants = [\n *   new Claimant(\n *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',\n *      Claimant.predicateBeforeAbsoluteTime(\"4102444800000\")\n *   )\n * ];\n *\n * const op = Operation.createClaimableBalance({\n *   asset,\n *   amount,\n *   claimants\n * });\n *\n */\nfunction createClaimableBalance(opts) {\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('must provide an asset for create claimable balance operation');\n  }\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) {\n    throw new Error('must provide at least one claimant');\n  }\n\n  var attributes = {};\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.claimants = opts.claimants.map(function (c) {\n    return c.toXDRObject();\n  });\n\n  var createClaimableBalanceOp = new _xdr2.default.CreateClaimableBalanceOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.createClaimableBalance(createClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB;AAEvD,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,IAAII,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAEhC,SAASE,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,sBAAsBA,CAACS,IAAI,EAAE;EACpC,IAAI,EAAEA,IAAI,CAACC,KAAK,YAAYL,MAAM,CAACM,KAAK,CAAC,EAAE;IACzC,MAAM,IAAIC,KAAK,CAAC,8DAA8D,CAAC;EACjF;EAEA,IAAI,CAAC,IAAI,CAACC,aAAa,CAACJ,IAAI,CAACK,MAAM,CAAC,EAAE;IACpC,MAAM,IAAIC,SAAS,CAAC,IAAI,CAACC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;EACtE;EAEA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACT,IAAI,CAACU,SAAS,CAAC,IAAIV,IAAI,CAACU,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IACjE,MAAM,IAAIR,KAAK,CAAC,oCAAoC,CAAC;EACvD;EAEA,IAAIS,UAAU,GAAG,CAAC,CAAC;EACnBA,UAAU,CAACX,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACY,WAAW,CAAC,CAAC;EAC3CD,UAAU,CAACP,MAAM,GAAG,IAAI,CAACS,YAAY,CAACd,IAAI,CAACK,MAAM,CAAC;EAClDO,UAAU,CAACF,SAAS,GAAGV,IAAI,CAACU,SAAS,CAACK,GAAG,CAAC,UAAUC,CAAC,EAAE;IACrD,OAAOA,CAAC,CAACH,WAAW,CAAC,CAAC;EACxB,CAAC,CAAC;EAEF,IAAII,wBAAwB,GAAG,IAAIvB,KAAK,CAACK,OAAO,CAACmB,wBAAwB,CAACN,UAAU,CAAC;EAErF,IAAIO,YAAY,GAAG,CAAC,CAAC;EACrBA,YAAY,CAACC,IAAI,GAAG1B,KAAK,CAACK,OAAO,CAACsB,aAAa,CAAC9B,sBAAsB,CAAC0B,wBAAwB,CAAC;EAChG,IAAI,CAACK,gBAAgB,CAACH,YAAY,EAAEnB,IAAI,CAAC;EAEzC,OAAO,IAAIN,KAAK,CAACK,OAAO,CAACwB,SAAS,CAACJ,YAAY,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}