{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setOptions = setOptions;\nvar _isUndefined = require('lodash/isUndefined');\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\nvar _isString = require('lodash/isString');\nvar _isString2 = _interopRequireDefault(_isString);\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _keypair = require('../keypair');\nvar _strkey = require('../strkey');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction weightCheckFunction(value, name) {\n  if (value >= 0 && value <= 255) {\n    return true;\n  }\n  throw new Error(name + ' value must be between 0 and 255');\n}\n\n/**\n * Returns an XDR SetOptionsOp. A \"set options\" operations set or clear account flags,\n * set the account's inflation destination, and/or add new signers to the account.\n * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:\n *   - `{@link AuthRequiredFlag}`\n *   - `{@link AuthRevocableFlag}`\n *   - `{@link AuthImmutableFlag}`\n *   - `{@link AuthClawbackEnabledFlag}`\n *\n * It's possible to set/clear multiple flags at once using logical or.\n *\n * @function\n * @alias Operation.setOptions\n *\n * @param {object} opts Options object\n * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.\n * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.\n * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.\n * @param {number|string} [opts.masterWeight] - The master key weight.\n * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.\n * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.\n * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.\n * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is\n *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.\n * @param {string} [opts.signer.ed25519SignedPayload] - Signed payload signer (ed25519 public key + raw payload) for atomic transaction signature disclosure.\n * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)\n * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.SetOptionsOp}  XDR operation\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n/* eslint-disable no-param-reassign */\n\nfunction setOptions(opts) {\n  var attributes = {};\n  if (opts.inflationDest) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {\n      throw new Error('inflationDest is invalid');\n    }\n    attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();\n  }\n  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);\n  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);\n  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);\n  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);\n  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);\n  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);\n  if (!(0, _isUndefined2.default)(opts.homeDomain) && !(0, _isString2.default)(opts.homeDomain)) {\n    throw new TypeError('homeDomain argument must be of type String');\n  }\n  attributes.homeDomain = opts.homeDomain;\n  if (opts.signer) {\n    var weight = this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction);\n    var key = void 0;\n    var setValues = 0;\n    if (opts.signer.ed25519PublicKey) {\n      if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n        throw new Error('signer.ed25519PublicKey is invalid.');\n      }\n      var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n      setValues += 1;\n    }\n    if (opts.signer.preAuthTx) {\n      if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n        opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) {\n        throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr2.default.SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);\n      setValues += 1;\n    }\n    if (opts.signer.sha256Hash) {\n      if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n        opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) {\n        throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr2.default.SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);\n      setValues += 1;\n    }\n    if (opts.signer.ed25519SignedPayload) {\n      if (!_strkey.StrKey.isValidSignedPayload(opts.signer.ed25519SignedPayload)) {\n        throw new Error('signer.ed25519SignedPayload is invalid.');\n      }\n      var _rawKey = _strkey.StrKey.decodeSignedPayload(opts.signer.ed25519SignedPayload);\n      var signedPayloadXdr = _xdr2.default.SignerKeyEd25519SignedPayload.fromXDR(_rawKey);\n\n      // eslint-disable-next-line new-cap\n      key = _xdr2.default.SignerKey.signerKeyTypeEd25519SignedPayload(signedPayloadXdr);\n      setValues += 1;\n    }\n    if (setValues !== 1) {\n      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');\n    }\n    attributes.signer = new _xdr2.default.Signer({\n      key: key,\n      weight: weight\n    });\n  }\n  var setOptionsOp = new _xdr2.default.SetOptionsOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.setOptions(setOptionsOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","setOptions","_isUndefined","require","_isUndefined2","_interopRequireDefault","_isString","_isString2","_xdr","_xdr2","_keypair","_strkey","obj","__esModule","default","weightCheckFunction","name","Error","opts","attributes","inflationDest","StrKey","isValidEd25519PublicKey","Keypair","fromPublicKey","xdrAccountId","clearFlags","_checkUnsignedIntValue","setFlags","masterWeight","lowThreshold","medThreshold","highThreshold","homeDomain","TypeError","signer","weight","key","setValues","ed25519PublicKey","rawKey","decodeEd25519PublicKey","SignerKey","signerKeyTypeEd25519","preAuthTx","Buffer","from","isBuffer","length","signerKeyTypePreAuthTx","sha256Hash","signerKeyTypeHashX","ed25519SignedPayload","isValidSignedPayload","_rawKey","decodeSignedPayload","signedPayloadXdr","SignerKeyEd25519SignedPayload","fromXDR","signerKeyTypeEd25519SignedPayload","Signer","setOptionsOp","SetOptionsOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/set_options.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setOptions = setOptions;\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction weightCheckFunction(value, name) {\n  if (value >= 0 && value <= 255) {\n    return true;\n  }\n  throw new Error(name + ' value must be between 0 and 255');\n}\n\n/**\n * Returns an XDR SetOptionsOp. A \"set options\" operations set or clear account flags,\n * set the account's inflation destination, and/or add new signers to the account.\n * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:\n *   - `{@link AuthRequiredFlag}`\n *   - `{@link AuthRevocableFlag}`\n *   - `{@link AuthImmutableFlag}`\n *   - `{@link AuthClawbackEnabledFlag}`\n *\n * It's possible to set/clear multiple flags at once using logical or.\n *\n * @function\n * @alias Operation.setOptions\n *\n * @param {object} opts Options object\n * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.\n * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.\n * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.\n * @param {number|string} [opts.masterWeight] - The master key weight.\n * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.\n * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.\n * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.\n * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is\n *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.\n * @param {string} [opts.signer.ed25519SignedPayload] - Signed payload signer (ed25519 public key + raw payload) for atomic transaction signature disclosure.\n * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)\n * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.SetOptionsOp}  XDR operation\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n/* eslint-disable no-param-reassign */\n\nfunction setOptions(opts) {\n  var attributes = {};\n\n  if (opts.inflationDest) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {\n      throw new Error('inflationDest is invalid');\n    }\n    attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();\n  }\n\n  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);\n  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);\n  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);\n  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);\n  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);\n  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);\n\n  if (!(0, _isUndefined2.default)(opts.homeDomain) && !(0, _isString2.default)(opts.homeDomain)) {\n    throw new TypeError('homeDomain argument must be of type String');\n  }\n  attributes.homeDomain = opts.homeDomain;\n\n  if (opts.signer) {\n    var weight = this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction);\n    var key = void 0;\n\n    var setValues = 0;\n\n    if (opts.signer.ed25519PublicKey) {\n      if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n        throw new Error('signer.ed25519PublicKey is invalid.');\n      }\n      var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n      setValues += 1;\n    }\n\n    if (opts.signer.preAuthTx) {\n      if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n        opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, 'hex');\n      }\n\n      if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) {\n        throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr2.default.SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);\n      setValues += 1;\n    }\n\n    if (opts.signer.sha256Hash) {\n      if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n        opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, 'hex');\n      }\n\n      if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) {\n        throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr2.default.SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);\n      setValues += 1;\n    }\n\n    if (opts.signer.ed25519SignedPayload) {\n      if (!_strkey.StrKey.isValidSignedPayload(opts.signer.ed25519SignedPayload)) {\n        throw new Error('signer.ed25519SignedPayload is invalid.');\n      }\n      var _rawKey = _strkey.StrKey.decodeSignedPayload(opts.signer.ed25519SignedPayload);\n      var signedPayloadXdr = _xdr2.default.SignerKeyEd25519SignedPayload.fromXDR(_rawKey);\n\n      // eslint-disable-next-line new-cap\n      key = _xdr2.default.SignerKey.signerKeyTypeEd25519SignedPayload(signedPayloadXdr);\n      setValues += 1;\n    }\n\n    if (setValues !== 1) {\n      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');\n    }\n\n    attributes.signer = new _xdr2.default.Signer({ key: key, weight: weight });\n  }\n\n  var setOptionsOp = new _xdr2.default.SetOptionsOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.setOptions(setOptionsOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}