{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';const initialState={independentField:Field.INPUT,typedValue:'',[Field.INPUT]:{currencyId:'',decimals:undefined,symbol:'',name:'',chainId:undefined},[Field.OUTPUT]:{currencyId:'',decimals:undefined,symbol:'',name:'',chainId:undefined},recipient:null};export default createReducer(initialState,builder=>builder.addCase(replaceSwapState,(state,_ref)=>{let{payload:{typedValue,recipient,field,inputCurrencyId,outputCurrencyId,decimals,symbol,name,chainId}}=_ref;return{[Field.INPUT]:{currencyId:inputCurrencyId,decimals:decimals,symbol:symbol,name:name,chainId:chainId},[Field.OUTPUT]:{currencyId:outputCurrencyId,decimals:decimals,symbol:symbol,name:name,chainId:chainId},independentField:field,typedValue:typedValue,recipient};}).addCase(selectCurrency,(state,_ref2)=>{let{payload:{currencyId,field,decimals,symbol,name,chainId}}=_ref2;const otherField=field===Field.INPUT?Field.OUTPUT:Field.INPUT;if(currencyId===state[otherField].currencyId){// 我们需要交换顺序的情况\nreturn{...state,independentField:state.independentField===Field.INPUT?Field.OUTPUT:Field.INPUT,[field]:{currencyId:currencyId,decimals:decimals,symbol:symbol,name:name,chainId:chainId},[otherField]:{currencyId:state[field].currencyId}};}else{// 正常的情况下\nreturn{...state,[field]:{currencyId:currencyId,decimals:decimals,symbol:symbol,name:name,chainId:chainId}};}}).addCase(switchCurrencies,state=>{return{...state,independentField:state.independentField===Field.INPUT?Field.OUTPUT:Field.INPUT,[Field.INPUT]:{currencyId:state[Field.OUTPUT].currencyId,decimals:state[Field.OUTPUT].decimals,symbol:state[Field.OUTPUT].symbol,name:state[Field.OUTPUT].name,chainId:state[Field.OUTPUT].chainId},[Field.OUTPUT]:{currencyId:state[Field.INPUT].currencyId,decimals:state[Field.INPUT].decimals,symbol:state[Field.INPUT].symbol,name:state[Field.INPUT].name,chainId:state[Field.INPUT].chainId}};}).addCase(typeInput,(state,_ref3)=>{let{payload:{field,typedValue}}=_ref3;// console.log(typedValue)\nreturn{...state,independentField:field,typedValue};}).addCase(setRecipient,(state,_ref4)=>{let{payload:{recipient}}=_ref4;state.recipient=recipient;}));","map":{"version":3,"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","decimals","undefined","symbol","name","chainId","OUTPUT","recipient","builder","addCase","state","_ref","payload","field","inputCurrencyId","outputCurrencyId","_ref2","otherField","_ref3","_ref4"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/swap/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined\n    readonly decimals?: number | undefined\n    readonly symbol?: string | undefined\n    readonly name?: string | undefined\n    readonly chainId?:any\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined\n    readonly decimals?: number | undefined\n    readonly symbol?: string | undefined\n    readonly name?: string | undefined\n    readonly chainId?: any\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: '',\n    decimals: undefined,\n    symbol: '',\n    name: '',\n    chainId: undefined,\n  },\n  [Field.OUTPUT]: {\n    currencyId: '',\n    decimals: undefined,\n    symbol: '',\n    name: '',\n    chainId: undefined,\n  },\n  recipient: null\n}\n\nexport default createReducer<SwapState>(initialState, builder =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId, decimals, symbol, name, chainId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId,\n          },\n          independentField: field,\n          typedValue: typedValue,\n          recipient\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field, decimals, symbol, name, chainId } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // 我们需要交换顺序的情况\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: {\n            currencyId: currencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId\n          },\n          [otherField]: { currencyId: state[field].currencyId }\n        }\n      } else {\n        // 正常的情况下\n        return {\n          ...state,\n          [field]: {\n            currencyId: currencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId\n          }\n        }\n      }\n    })\n    .addCase(switchCurrencies, state => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: {\n          currencyId: state[Field.OUTPUT].currencyId,\n          decimals: state[Field.OUTPUT].decimals,\n          symbol: state[Field.OUTPUT].symbol,\n          name: state[Field.OUTPUT].name,\n          chainId: state[Field.OUTPUT].chainId\n        },\n        [Field.OUTPUT]: {\n          currencyId: state[Field.INPUT].currencyId,\n          decimals: state[Field.INPUT].decimals,\n          symbol: state[Field.INPUT].symbol,\n          name: state[Field.INPUT].name,\n          chainId: state[Field.INPUT].chainId\n        }\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      // console.log(typedValue)\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}