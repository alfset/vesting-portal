{"ast":null,"code":"var _jsxFileName = \"/workspace/Planq-Dapps/vesting-portal/src/nonevm/updater.tsx\";\nimport React from 'react';\nimport CardanoUpdater from './cardano/updater';\nimport TrxUpdater from './trx/updater';\nimport FlowUpdater from './flow/updater';\nimport SolUpdater from './solana/updater';\nimport AptUpdater from './apt/updater';\nimport BtcUpdater from './btc/updater';\nimport AtomUpdater from './atom/updater';\nimport NasUpdater from './nas/updater';\nimport { useActiveReact } from '../hooks/useActiveReact';\nimport { ChainId } from '../config/chainConfig/chainId';\nimport config from '../config';\nexport default function Updaters() {\n  var _config$chainInfo, _config$chainInfo$cha;\n  const {\n    chainId\n  } = useActiveReact();\n  // console.log(config)\n  if ([ChainId.ADA, ChainId.ADA_TEST].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(CardanoUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    });\n  } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(TrxUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    });\n  } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(FlowUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    });\n  } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(SolUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 12\n      }\n    });\n  } else if ([ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(AptUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }\n    });\n  } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(chainId) && (config === null || config === void 0 ? void 0 : (_config$chainInfo = config.chainInfo) === null || _config$chainInfo === void 0 ? void 0 : (_config$chainInfo$cha = _config$chainInfo[chainId]) === null || _config$chainInfo$cha === void 0 ? void 0 : _config$chainInfo$cha.chainType) !== 'NOWALLET') {\n    // } else if ([ChainId.BTC_TEST].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(BtcUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    });\n  } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(AtomUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 12\n      }\n    });\n  } else if ([ChainId.NAS].includes(chainId)) {\n    return /*#__PURE__*/React.createElement(NasUpdater, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    });\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}","map":{"version":3,"names":["React","CardanoUpdater","TrxUpdater","FlowUpdater","SolUpdater","AptUpdater","BtcUpdater","AtomUpdater","NasUpdater","useActiveReact","ChainId","config","Updaters","_config$chainInfo","_config$chainInfo$cha","chainId","ADA","ADA_TEST","includes","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","TRX","TRX_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","APT","APT_TEST","BTC","BTC_TEST","chainInfo","chainType","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","NAS","Fragment"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/updater.tsx"],"sourcesContent":["import React from 'react'\n\nimport CardanoUpdater from './cardano/updater'\nimport TrxUpdater from './trx/updater'\nimport FlowUpdater from './flow/updater'\nimport SolUpdater from './solana/updater'\nimport AptUpdater from './apt/updater'\nimport BtcUpdater from './btc/updater'\nimport AtomUpdater from './atom/updater'\nimport NasUpdater from './nas/updater'\n\nimport {useActiveReact} from '../hooks/useActiveReact'\nimport { ChainId } from '../config/chainConfig/chainId'\nimport config from '../config'\n\nexport default function Updaters() {\n  const { chainId } = useActiveReact()\n  // console.log(config)\n  if ([ChainId.ADA, ChainId.ADA_TEST].includes(chainId)) {\n    return <CardanoUpdater />\n  } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) {\n    return <TrxUpdater />\n  } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n    return <FlowUpdater />\n  } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(chainId)) {\n    return <SolUpdater />\n  } else if ([ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n    return <AptUpdater />\n  } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(chainId) && config?.chainInfo?.[chainId]?.chainType !== 'NOWALLET') {\n  // } else if ([ChainId.BTC_TEST].includes(chainId)) {\n    return <BtcUpdater />\n  } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n    return <AtomUpdater />\n  }  else if ([ChainId.NAS].includes(chainId)) {\n    return <NasUpdater />\n  }\n  return <></>\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}