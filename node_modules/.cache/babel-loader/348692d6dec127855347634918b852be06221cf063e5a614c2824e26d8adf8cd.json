{"ast":null,"code":"import { parseUnits } from '@ethersproject/units';\n// import JSBI from 'jsbi'\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport { BigAmount } from '../../utils/formatBignumber';\nimport config from '../../config';\nexport function useSwapState() {\n  return useSelector(state => state.swap);\n}\nexport function useSwapActionHandlers() {\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency, chainId, decimals, symbol, name) => {\n    // console.log(field)\n    // console.log(currency)\n    dispatch(selectCurrency({\n      field,\n      // currencyId: currency instanceof Token ? currency.address : currency === ETHER ? config.symbol : ''\n      currencyId: currency,\n      chainId: chainId,\n      decimals: decimals,\n      symbol: symbol,\n      name: name\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    // console.log(field)\n    // console.log(typedValue)\n    // console.log(typeInput({ field, typedValue }))\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmountToken(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return {\n        amount: BigAmount.format(currency.decimals, typedValueParsed),\n        token: currency\n      };\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(currency.decimals, typedValueParsed);\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount1(value, decimals) {\n  if (!value || !decimals) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString();\n    // console.log(typedValueParsed)\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(decimals, typedValueParsed);\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount2(value, decimals) {\n  if (!value) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString();\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(decimals, typedValueParsed);\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\nexport function tryParseAmount3(value, decimals) {\n  if (!value || !decimals) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString();\n    if (typedValueParsed !== '0') {\n      return typedValueParsed;\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\nexport function tryParseAmount4(value, decimals) {\n  if (!value || !decimals) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString();\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(decimals, typedValueParsed);\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\nexport function tryParseAmount5(value, decimals) {\n  if (!value || !decimals) {\n    return undefined;\n  }\n  try {\n    // const typedValueParsed = parseUnits(value, decimals).toString()\n    if (value !== '0') {\n      return BigAmount.format(decimals, value);\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\nexport function tryParseAmount6(value) {\n  if (!value) {\n    return undefined;\n  }\n  try {\n    if (value !== '0') {\n      return BigAmount.format(18, value);\n    } else if (value === '0') {\n      return BigAmount.format(18, '0');\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _config$symbol;\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === config.symbol) return config.symbol;\n    if (valid === false) return config.symbol;\n  }\n  return (_config$symbol = config.symbol) !== null && _config$symbol !== void 0 ? _config$symbol : '';\n}\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\nexport function queryParametersToSwapState(parsedQs) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    });\n  }, [dispatch, chainId]);\n  return result;\n}","map":{"version":3,"names":["parseUnits","useCallback","useEffect","useState","useDispatch","useSelector","useActiveWeb3React","useParsedQueryString","isAddress","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","BigAmount","config","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","chainId","decimals","symbol","name","currencyId","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmountToken","value","undefined","typedValueParsed","toString","amount","format","token","error","console","debug","concat","tryParseAmount","tryParseAmount1","tryParseAmount2","tryParseAmount3","tryParseAmount4","tryParseAmount5","tryParseAmount6","parseCurrencyFromURLParameter","urlParam","_config$symbol","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","OUTPUT","INPUT","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","address","test","queryParametersToSwapState","parsedQs","inputCurrency","outputCurrency","exactAmount","independentField","exactField","useDefaultsFromURLSearch","result","setResult","parsed","inputCurrencyId","outputCurrencyId"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/swap/hooks.ts"],"sourcesContent":["\nimport { parseUnits } from '@ethersproject/units'\nimport { ParsedQs } from 'qs'\n// import JSBI from 'jsbi'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { AppDispatch, AppState } from '../index'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport {BigAmount} from '../../utils/formatBignumber'\n\nimport config from '../../config'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>(state => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: string, chainId: number | string, decimals: number, symbol: string, name:string) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: string, chainId: number | string, decimals: number, symbol: string, name:string) => {\n      // console.log(field)\n      // console.log(currency)\n      dispatch(\n        selectCurrency({\n          field,\n          // currencyId: currency instanceof Token ? currency.address : currency === ETHER ? config.symbol : ''\n          currencyId: currency,\n          chainId: chainId,\n          decimals: decimals,\n          symbol: symbol,\n          name: name\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      // console.log(field)\n      // console.log(typedValue)\n      // console.log(typeInput({ field, typedValue }))\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmountToken(value?: string, currency?: any): any | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return {amount: BigAmount.format(currency.decimals, typedValueParsed), token: currency}\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: any): any | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(currency.decimals, typedValueParsed)\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount1(value?: string, decimals?: number): any {\n  if (!value || !decimals) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString()\n    // console.log(typedValueParsed)\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(decimals, typedValueParsed)\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount2(value?: string, decimals?: any): any {\n  if (!value) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString()\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(decimals, typedValueParsed)\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nexport function tryParseAmount3(value?: string, decimals?: number): any | undefined {\n  if (!value || !decimals) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString()\n    if (typedValueParsed !== '0') {\n      return typedValueParsed\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nexport function tryParseAmount4(value?: string, decimals?: number): any {\n  if (!value || !decimals) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, decimals).toString()\n    if (typedValueParsed !== '0') {\n      return BigAmount.format(decimals, typedValueParsed)\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\nexport function tryParseAmount5(value?: string, decimals?: number): any | undefined {\n  if (!value || !decimals) {\n    return undefined\n  }\n  try {\n    // const typedValueParsed = parseUnits(value, decimals).toString()\n    if (value !== '0') {\n      return BigAmount.format(decimals, value)\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nexport function tryParseAmount6(value?: string): any {\n  if (!value) {\n    return undefined\n  }\n  try {\n    if (value !== '0') {\n      return BigAmount.format(18, value)\n    } else if (value === '0') {\n      return BigAmount.format(18, '0')\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === config.symbol) return config.symbol\n    if (valid === false) return config.symbol\n  }\n  return config.symbol ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient\n      })\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    \n  }, [dispatch, chainId])\n\n  return result\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}