{"ast":null,"code":"import { connect,\n// Contract,\nkeyStores, providers } from 'near-api-js';\nimport { useTranslation } from 'react-i18next';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n// import {getConfig} from './config'\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { BigAmount } from '../../utils/formatBignumber';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport useInterval from '../../hooks/useInterval';\nimport { isAddress } from '../../utils/isAddress';\nimport { ChainId } from '../../config/chainConfig/chainId';\n// import { VALID_BALANCE } from '../../config/constant'\nimport {\n// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager\n// useUserTransactionTTL,\n// useUserSlippageTolerance\n} from '../../state/user/hooks';\nimport config from '../../config';\n// export enum WrapType {\n//   NOT_APPLICABLE,\n//   WRAP,\n//   UNWRAP,\n//   NOCONNECT\n// }\n\n// import { setupWalletSelector } from \"@near-wallet-selector/core\";\n// import { setupModal } from \"@near-wallet-selector/modal-ui\";\n// import { setupSender } from \"@near-wallet-selector/sender\";\nimport { useWalletSelector } from \"./WalletSelectorContext\";\n// import type { Transaction } from \"@near-wallet-selector/core\";\n// import { BigNumber } from '@ethersproject/bignumber'\n\nconst NOT_APPLICABLE = {};\n\n// const nearConfig:any = getConfig(process.env.NODE_ENV || 'development')\n// const contractId = 'bridge-1.crossdemo.testnet'\n\nexport async function initConnect(chainId, token) {\n  let account;\n  try {\n    let connectConfig = {};\n    if (chainId === ChainId.NEAR_TEST) {\n      connectConfig = {\n        networkId: \"testnet\",\n        keyStore: new keyStores.InMemoryKeyStore(),\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        walletUrl: \"https://wallet.testnet.near.org\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        explorerUrl: \"https://explorer.testnet.near.org\"\n      };\n    } else if (chainId === ChainId.NEAR) {\n      connectConfig = {\n        networkId: 'mainnet',\n        keyStore: new keyStores.InMemoryKeyStore(),\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org',\n        explorerUrl: 'https://explorer.mainnet.near.org'\n      };\n    }\n    const near = await connect(connectConfig);\n    // console.log(near)\n    account = await near.account(token);\n  } catch (error) {\n    console.log('initConnect');\n    console.log(error);\n  }\n  return account;\n}\nexport function useNearAddress() {\n  var _window;\n  let accountId = \"\";\n  if ((_window = window) === null || _window === void 0 ? void 0 : _window.selector) {\n    if (window.selector.store.getState().accounts.length > 0) {\n      accountId = window.selector.store.getState().accounts[0].accountId;\n    }\n  }\n  return accountId;\n}\nexport function useLogin() {\n  // const login = useCallback(async() => {\n  //   if (window?.near) {\n  //     try {\n  //       const res = await window.near.requestSignIn({ contractId, methodNames: [] })\n  //       if (!res.error) {\n  //         if (res && res.accessKey) {\n  //           setAccess(res.accessKey)\n  //         } else {\n  //           console.log('res: ', res)\n  //         }\n  //       }\n  //     } catch (error) {\n  //       console.log('error: ', error)\n  //     }\n  //   } else {\n  //     if (confirm('Please install Sender Wallet.') === true) {\n  //       window.open('https://chrome.google.com/webstore/detail/sender-wallet/epapihdplajcdnnkdeiahlgigofloibg')\n  //     }\n  //   }\n  // }, [])\n\n  // 更换到selector登录\n  const {\n    modal\n  } = useWalletSelector();\n  const login = useCallback(async () => {\n    var _window2;\n    if ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.selector) {\n      try {\n        modal.show();\n        // if (!res.error) {\n        //   if (res && res.accessKey) {\n        //     setAccess(res.accessKey)\n        //   } else {\n        //     console.log('res: ', res)\n        //   }\n        // }\n      } catch (error) {\n        console.log('error: ', error);\n      }\n    } else {}\n  }, []);\n  const logoutNear = useCallback(async () => {\n    var _window3;\n    if ((_window3 = window) === null || _window3 === void 0 ? void 0 : _window3.selector) {\n      const wallet = await window.selector.wallet();\n      wallet.signOut().catch(err => {\n        console.log(\"Failed to sign out\");\n        console.error(err);\n      });\n    }\n    return {};\n  }, []);\n  return {\n    login,\n    logoutNear\n  };\n}\nexport function useNearBalance() {\n  const {\n    selector\n  } = useWalletSelector();\n  const {\n    network\n  } = selector.options;\n  // console.log(selector)\n  // console.log(network)\n  const provider = new providers.JsonRpcProvider({\n    url: network.nodeUrl\n  });\n  const getNearBalance = useCallback(async () => {\n    // let bl:any = ''\n    // try {\n    //   bl = await window.nightly.near?.account().getAccountBalance()\n    // } catch (error) {\n\n    // }\n    // console.log(bl)\n    // return bl\n    const accountId = useNearAddress();\n    try {\n      const {\n        amount\n      } = await provider.query({\n        \"request_type\": \"view_account\",\n        finality: \"final\",\n        \"account_id\": accountId\n      });\n      // const bn = BigNumber.from(amount);\n      return {\n        total: amount,\n        available: amount\n      };\n    } catch (error) {}\n    return {};\n  }, []);\n  const getNearTokenBalance = useCallback(async _ref => {\n    let {\n      token\n    } = _ref;\n    let bl = BigInt(0);\n    const accountId = useNearAddress();\n    // const useAccount = account ? account : window.near?.accountId\n    // try {\n\n    //   bl = await window.near?.account().viewFunction(\n    //     token,\n    //     'ft_balance_of',\n    //     { \"account_id\": useAccount },\n    //   )\n    // } catch (error) {\n\n    // }\n    // console.log(bl)\n    // return bl\n    if (token && token !== 'mpc.testnet') {\n      try {\n        bl = await provider.query({\n          \"request_type\": \"call_function\",\n          \"account_id\": token,\n          \"method_name\": \"ft_balance_of\",\n          \"args_base64\": Buffer.from(JSON.stringify({\n            \"account_id\": accountId\n          })).toString('base64'),\n          finality: \"optimistic\"\n        });\n        bl = JSON.parse(Buffer.from(bl.result).toString());\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    return bl;\n  }, []);\n  const getNearStorageBalance = useCallback(async _ref2 => {\n    var _window4, _window4$near;\n    let {\n      token,\n      account,\n      chainId\n    } = _ref2;\n    let bl;\n    const useAccount = account ? account : (_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$near = _window4.near) === null || _window4$near === void 0 ? void 0 : _window4$near.accountId;\n    const accountFn = await initConnect(chainId, token);\n    // console.log(accountFn)\n    try {\n      if (accountFn && useAccount && isAddress(useAccount, chainId)) {\n        bl = await accountFn.viewFunction(token, 'storage_balance_of', {\n          \"account_id\": useAccount\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return bl;\n  }, []);\n  const getNearStorageBalanceBounds = useCallback(async _ref3 => {\n    let {\n      token,\n      chainId\n    } = _ref3;\n    let bl;\n    const accountFn = await initConnect(chainId, token);\n    try {\n      if (accountFn && isAddress(token, chainId)) {\n        bl = await accountFn.viewFunction(token, 'storage_balance_bounds');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return bl;\n  }, []);\n  return {\n    getNearBalance,\n    getNearTokenBalance,\n    getNearStorageBalance,\n    getNearStorageBalanceBounds\n  };\n}\nexport function useNearPoolDatas() {\n  const getNearPoolDatas = useCallback(async (calls, chainId) => {\n    return new Promise(resolve => {\n      var _window5, _window6, _window6$near;\n      const arr = [];\n      const labelArr = [];\n      // console.log(chainId)\n      if (((_window5 = window) === null || _window5 === void 0 ? void 0 : _window5.selector) && ((_window6 = window) === null || _window6 === void 0 ? void 0 : (_window6$near = _window6.near) === null || _window6$near === void 0 ? void 0 : _window6$near.account) && [ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) {\n        for (const item of calls) {\n          if (item.token === 'near' || item.anytoken === 'near') continue;\n          if (item.token) {\n            var _window7, _window7$near, _window8, _window8$near;\n            arr.push((_window7 = window) === null || _window7 === void 0 ? void 0 : (_window7$near = _window7.near) === null || _window7$near === void 0 ? void 0 : _window7$near.account().viewFunction(item.token, 'ft_balance_of', {\n              \"account_id\": item.anytoken\n            }));\n            labelArr.push({\n              key: item.anytoken,\n              label: 'balanceOf'\n            });\n            arr.push((_window8 = window) === null || _window8 === void 0 ? void 0 : (_window8$near = _window8.near) === null || _window8$near === void 0 ? void 0 : _window8$near.account().viewFunction(item.token, 'ft_total_supply', {}));\n            labelArr.push({\n              key: item.anytoken,\n              label: 'totalSupply'\n            });\n          }\n          if (isAddress(item.account, chainId)) {\n            var _window9, _window9$near;\n            arr.push((_window9 = window) === null || _window9 === void 0 ? void 0 : (_window9$near = _window9.near) === null || _window9$near === void 0 ? void 0 : _window9$near.account().viewFunction(item.anytoken, 'ft_balance_of', {\n              \"account_id\": item.account\n            }));\n            labelArr.push({\n              key: item.anytoken,\n              label: 'balance'\n            });\n          }\n        }\n      }\n      // console.log(calls)\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        const list = {};\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key;\n          const l = labelArr[i].label;\n          if (!list[k]) list[k] = {};\n          list[k][l] = res[i];\n        }\n        // console.log(list)\n        resolve(list);\n      });\n    });\n  }, []);\n  return {\n    getNearPoolDatas\n  };\n}\nexport function useSendNear() {\n  const {\n    selector,\n    accountId\n  } = useWalletSelector();\n  const sendTransaction = useCallback(async actions => {\n    const wallet = await selector.wallet();\n    const transactions = [];\n    transactions.push({\n      signerId: accountId || \"\",\n      receiverId: actions.receiverId,\n      actions: [{\n        type: \"FunctionCall\",\n        params: actions.actions[0]\n      }]\n    });\n    return wallet.signAndSendTransactions({\n      transactions\n    });\n  }, [selector, accountId]);\n  const sendNear = useCallback(async (routerContractId, amount, bindaddr, selectchain, tokenType, anyContractId) => {\n    return new Promise((resolve, reject) => {\n      // console.log('sendNear')\n      const actions = {\n        receiverId: tokenType === 'ANYTOKEN' ? anyContractId : routerContractId,\n        actions: []\n      };\n      if (tokenType === 'ANYTOKEN') {\n        actions.actions.push({\n          methodName: 'swap_out',\n          args: {\n            \"receiver_id\": \"\".concat(bindaddr),\n            \"to_chain_id\": \"\".concat(selectchain),\n            \"amount\": \"\".concat(amount)\n          },\n          gas: '300000000000000',\n          deposit: '0'\n        });\n      } else {\n        actions.actions.push({\n          methodName: 'swap_out',\n          args: {\n            \"receiver_id\": \"\".concat(bindaddr),\n            \"to_chain_id\": \"\".concat(selectchain)\n          },\n          gas: '300000000000000',\n          deposit: amount\n        });\n      }\n      let tx = {};\n      // window.near.signAndSendTransaction(actions)\n      sendTransaction(actions)\n      // window.nightly.near.signAllTransactions(actions)\n      .then(res => {\n        console.log(res);\n        if (res && res.length > 0) {\n          tx = res[0].transaction;\n          resolve(tx);\n        } else {\n          reject(\"sendTransaction ERROR\");\n        }\n\n        // if (res?.response && !res?.response.error && res?.response.length > 0) {\n        //   tx = res?.response[0]?.transaction\n        //   resolve(tx)\n        // } else {\n        //   reject(res?.response?.error)\n        // }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }, []);\n  const sendNearToken = useCallback(async (contractId, anyContractId, routerContractId, amount, bindaddr, selectchain) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken');\n      const actions = {\n        receiverId: contractId,\n        actions: [{\n          methodName: 'ft_transfer',\n          args: {\n            'receiver_id': routerContractId,\n            amount: amount,\n            // wNear decimals is 24\n            memo: \"\".concat(bindaddr, \" \").concat(selectchain)\n          },\n          gas: '300000000000000',\n          deposit: '1'\n        }]\n      };\n      console.log(actions);\n      let tx = {};\n      sendTransaction(actions)\n      // window.nightly.near.signAllTransactions(actions)\n      .then(res => {\n        console.log(res);\n        if (res && res.length > 0) {\n          tx = res[0].transaction;\n          resolve(tx);\n        } else {\n          reject(\"sendTransaction ERROR\");\n        }\n\n        // if (res?.response && !res?.response.error && res?.response.length > 0) {\n        //   tx = res?.response[0]?.transaction\n        //   resolve(tx)\n        // } else {\n        //   reject(res?.response?.error)\n        // }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }, []);\n  const depositStorageNear = useCallback((contractid, accountId, nearStorageBalanceBounds) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken');\n      const actions = {\n        receiverId: contractid,\n        actions: [{\n          methodName: 'storage_deposit',\n          args: {\n            \"account_id\": accountId\n            // \"registration_only\": true, \n          },\n\n          gas: '300000000000000',\n          // deposit: 1e24\n          deposit: nearStorageBalanceBounds ? nearStorageBalanceBounds : '1250000000000000000000'\n          // deposit: amount\n        }]\n        // amount: amount\n      };\n\n      console.log(actions);\n      let tx = {};\n      sendTransaction(actions)\n      // window.nightly.near.signAllTransactions(actions)\n      .then(res => {\n        console.log(res);\n        if (res && res.length > 0) {\n          tx = res[0].transaction;\n          resolve(tx);\n        } else {\n          reject(\"sendTransaction ERROR\");\n        }\n\n        // if (res?.response && !res?.response.error && res?.response.length > 0) {\n        //   tx = res?.response[0]?.transaction\n        //   resolve(tx)\n        // } else {\n        //   reject(res?.response?.error)\n        // }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }, []);\n  const depositNearToken = useCallback(async (contractId, anyContractId, routerContractId, amount, bindaddr, selectchain) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken');\n      const actions = {\n        receiverId: contractId,\n        actions: [{\n          methodName: 'ft_transfer_call',\n          args: {\n            'receiver_id': routerContractId,\n            amount: amount,\n            // wNear decimals is 24\n            msg: \"any_swap_out \".concat(anyContractId, \" \").concat(bindaddr, \" \").concat(selectchain)\n          },\n          gas: '300000000000000',\n          deposit: '1'\n        }]\n      };\n      console.log(actions);\n      let tx = {};\n      sendTransaction(actions)\n      // window.nightly.near.signAllTransactions(actions)\n      .then(res => {\n        console.log(res);\n        if (res && res.length > 0) {\n          tx = res[0].transaction;\n          resolve(tx);\n        } else {\n          reject(\"sendTransaction ERROR\");\n        }\n\n        // if (res?.response && !res?.response.error && res?.response.length > 0) {\n        //   tx = res?.response[0]?.transaction\n        //   resolve(tx)\n        // } else {\n        //   reject(res?.response?.error)\n        // }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }, []);\n  const withdrawNearToken = useCallback(async (contractId, anyContractId, routerContractId, amount, bindaddr, selectchain) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken');\n      const actions = {\n        receiverId: contractId,\n        actions: [{\n          methodName: 'ft_transfer_call',\n          args: {\n            'receiver_id': routerContractId,\n            amount: amount,\n            // wNear decimals is 24\n            msg: \"any_swap_out \".concat(anyContractId, \" \").concat(bindaddr, \" \").concat(selectchain)\n          },\n          gas: '300000000000000',\n          deposit: '1'\n        }]\n      };\n      console.log(actions);\n      let tx = {};\n      sendTransaction(actions)\n      // window.nightly.near.signAllTransactions(actions)\n      .then(res => {\n        console.log(res);\n        if (res && res.length > 0) {\n          tx = res[0].transaction;\n          resolve(tx);\n        } else {\n          reject(\"sendTransaction ERROR\");\n        }\n\n        // if (res?.response && !res?.response.error && res?.response.length > 0) {\n        //   tx = res?.response[0]?.transaction\n        //   resolve(tx)\n        // } else {\n        //   reject(res?.response?.error)\n        // }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }, []);\n  return {\n    sendNear,\n    sendNearToken,\n    depositStorageNear,\n    depositNearToken,\n    withdrawNearToken\n  };\n}\n\n// contractId, anyContractId, routerContractId, amount, bindaddr, selectchain\nexport function useNearSendTxns(routerToken, inputCurrency, anyContractId, contractId, typedValue, receiverId, chainId, selectChain, destConfig, useToChainId) {\n  const {\n    sendNear,\n    sendNearToken\n  } = useSendNear();\n  const {\n    t\n  } = useTranslation();\n  const address = useNearAddress();\n  const addTransaction = useTransactionAdder();\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const [balance, setBalance] = useState();\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals), [typedValue, inputCurrency]);\n  const underlyingToken = contractId ? contractId : anyContractId;\n  const {\n    getNearBalance,\n    getNearTokenBalance\n  } = useNearBalance();\n  const getBalance = useCallback(() => {\n    if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) {\n      if ((inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.tokenType) === 'NATIVE' || (inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address) === 'near') {\n        getNearBalance().then(res => {\n          if (res === null || res === void 0 ? void 0 : res.available) {\n            // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n            setBalance(BigAmount.format(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals, res === null || res === void 0 ? void 0 : res.total));\n          } else {\n            setBalance('');\n          }\n        });\n      } else {\n        getNearTokenBalance({\n          token: contractId\n        }).then(res => {\n          // console.log(contractId)\n          // console.log(res)\n          if (res) {\n            // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n            setBalance(BigAmount.format(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals, res));\n          } else {\n            setBalance('');\n          }\n        });\n      }\n    }\n  }, [inputCurrency, contractId, chainId]);\n  useEffect(() => {\n    getBalance();\n  }, [inputCurrency, contractId]);\n  useInterval(getBalance, 1000 * 10);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = inputCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    // console.log(inputAmount)\n    // console.log(receiverId)\n    // console.log(selectChain)\n    // console.log(routerToken)\n    // console.log(underlyingToken)\n    // console.log(chainId)\n    if (!useToChainId || !routerToken || !underlyingToken || !chainId) return NOT_APPLICABLE;\n    // console.log(balance)\n    return {\n      // wrapType: WrapType.WRAP,\n      balance,\n      execute: receiverId && (sufficientBalance || !userInterfaceBalanceValid) && inputAmount ? async () => {\n        try {\n          const txReceipt = [\"NATIVE\", \"ANYTOKEN\"].includes(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.tokenType) || (inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address) === 'near' ? await sendNear(routerToken, inputAmount, receiverId, useToChainId, inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.tokenType, anyContractId) : await sendNearToken(contractId, anyContractId, routerToken, inputAmount, receiverId, useToChainId);\n          console.log(txReceipt);\n          if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n            const data = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: address,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiverId,\n              symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n              version: destConfig.type,\n              pairid: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n              routerToken: routerToken\n            };\n            addTransaction(txReceipt, {\n              summary: \"Cross bridge \".concat(typedValue, \" \").concat(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol),\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiverId.indexOf('0x') === 0 ? receiverId === null || receiverId === void 0 ? void 0 : receiverId.toLowerCase() : receiverId,\n              symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n              version: 'swapin',\n              routerToken: routerToken,\n              token: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address,\n              logoUrl: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.logoUrl,\n              isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n              fromInfo: {\n                symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                name: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.name,\n                decimals: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals,\n                address: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address\n              },\n              toInfo: {\n                symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n              }\n            });\n            recordsTxns(data);\n            onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n          }\n        } catch (error) {\n          console.log('Could not swapout', error);\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol\n      })\n    };\n  }, [inputAmount, receiverId, selectChain, routerToken, anyContractId, contractId, chainId, inputCurrency, balance, underlyingToken, destConfig, useToChainId, userInterfaceBalanceValid]);\n}\n\n/**\n * any token 充值与提现underlying\n * 给定选定的输入和输出货币，返回一个wrap回调\n * @param inputCurrency 选定的输入货币\n * @param typedValue 用户输入值\n */\n//  export function useNearSwapPoolUnderlyingCallback(\n//   inputCurrency: any,\n//   inputToken: string | undefined,\n//   // anyContractId:any,\n//   contractId:any,\n//   typedValue: string | undefined,\n//   swapType: string | undefined,\n//   // selectCurrency: any,\n//   chainId: any\n// // ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n//   // const { chainId } = useActiveReact()\n//   // const bridgeContract = useSwapUnderlyingContract(isAddress(inputToken, evmChainId))\n//   const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n//   const { t } = useTranslation()\n//   const {depositNearToken, withdrawNearToken} = useSendNear()\n\n//   const [balance, setBalance] = useState<any>()\n//   // const useAccount:any = isAddress(account, evmChainId)\n//   // const ethbalance = useETHBalances(useAccount ? [useAccount] : [])?.[account ?? '']\n//   // const anybalance = useCurrencyBalance(useAccount ?? undefined, inputCurrency)\n//   // const balance = selectCurrency?.tokenType === \"NATIVE\" ? ethbalance : anybalance\n//   // const underlyingToken = contractId ? contractId : anyContractId\n//   const {\n//     getNearBalance,\n//     getNearTokenBalance\n//   } = useNearBalance()\n\n//   const getBalance = useCallback(() => {\n//     if (inputCurrency?.tokenType === 'NATIVE') {\n//       getNearBalance().then(res => {\n//         if (res?.available) {\n//           // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n//           setBalance(BigAmount.format(inputCurrency?.decimals,res?.total))\n//         } else {\n//           setBalance('')\n//         }\n//       })\n//     } else {\n//       getNearTokenBalance({token: contractId}).then(res => {\n//         // console.log(contractId)\n//         // console.log(res)\n//         if (res) {\n//           // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n//           setBalance(BigAmount.format(inputCurrency?.decimals,res))\n//         } else {\n//           setBalance('')\n//         }\n//       })\n//     }\n//   }, [inputCurrency, contractId])\n\n//   useEffect(() => {\n//     getBalance()\n//   }, [inputCurrency, contractId])\n\n//   useInterval(getBalance, 1000 * 10)\n//   // console.log(balance?.raw.toString())\n//   // console.log(inputCurrency)\n//   // 我们总是可以解析输入货币的金额，因为包装是1:1\n//   const inputAmount = useMemo(() => tryParseAmount3(typedValue, inputCurrency?.decimals), [typedValue, inputCurrency])\n//   const addTransaction = useTransactionAdder()\n//   return useMemo(() => {\n//     // console.log(inputCurrency)\n//     if (!chainId || !inputCurrency || !swapType || [ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) return NOT_APPLICABLE\n//     // console.log(inputAmount?.raw.toString())\n\n//     const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n//     // console.log(sufficientBalance)\n//     return {\n//       execute:\n//       (sufficientBalance || !VALID_BALANCE) && inputAmount\n//           ? async () => {\n//               try {\n//                 // console.log(inputAmount.raw.toString(16))\n//                 const txReceipt:any = swapType === 'deposit' ? await depositNearToken : await withdrawNearToken\n//                 addTransaction(txReceipt, { summary: `${swapType === 'deposit' ? 'Deposit' : 'Withdraw'} ${inputAmount.toSignificant(6)} ${inputCurrency?.symbol}` })\n//               } catch (error) {\n//                 console.log('Could not swapout', error)\n//                 onChangeViewErrorTip(error, true)\n//               }\n//             }\n//           : undefined,\n//       inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: inputCurrency?.symbol})\n//     }\n//   }, [chainId, inputCurrency, inputAmount, balance, addTransaction, t, swapType, inputToken])\n// }\n\nexport function updateNearHash(hash, chainId) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const url = config.chainInfo[chainId].nodeRpc;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json'\n      },\n      body: JSON.stringify({\n        \"jsonrpc\": \"2.0\",\n        \"id\": \"dontcare\",\n        \"method\": \"EXPERIMENTAL_tx_status\",\n        \"params\": [hash, \"bowen\"]\n      })\n    }).then(res => res.json()).then(json => {\n      var _json$result, _json$result$transact;\n      console.log(json);\n      const result = json === null || json === void 0 ? void 0 : (_json$result = json.result) === null || _json$result === void 0 ? void 0 : (_json$result$transact = _json$result.transaction_outcome) === null || _json$result$transact === void 0 ? void 0 : _json$result$transact.outcome;\n      if (result) {\n        var _result$status, _result$status2, _result$status3;\n        if ((result === null || result === void 0 ? void 0 : (_result$status = result.status) === null || _result$status === void 0 ? void 0 : _result$status.SuccessReceiptId) || (result === null || result === void 0 ? void 0 : (_result$status2 = result.status) === null || _result$status2 === void 0 ? void 0 : _result$status2.SuccessValue)) {\n          data.msg = 'Success';\n          data.info = json;\n        } else if (result === null || result === void 0 ? void 0 : (_result$status3 = result.status) === null || _result$status3 === void 0 ? void 0 : _result$status3.Failure) {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        } else {\n          data.msg = 'Null';\n          data.error = 'Query is empty!';\n        }\n      } else {\n        data.msg = 'Null';\n        data.error = 'Query is empty!';\n      }\n      resolve(data);\n    }).catch(err => {\n      console.log(err.toString());\n      data.error = 'Query is empty!';\n      resolve(data);\n    });\n  });\n}\n// updateNearHash('4KVYoGtn2FFceXdtrttGPkqWnKAGJZ9yVArFMF2z7RxH', 'NEAR_TEST').then(res => {\n//   console.log(res)\n// })","map":{"version":3,"names":["connect","keyStores","providers","useTranslation","useCallback","useEffect","useMemo","useState","tryParseAmount3","BigAmount","useTransactionAdder","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useInterval","isAddress","ChainId","useInterfaceBalanceValidManager","config","useWalletSelector","NOT_APPLICABLE","initConnect","chainId","token","account","connectConfig","NEAR_TEST","networkId","keyStore","InMemoryKeyStore","nodeUrl","walletUrl","helperUrl","explorerUrl","NEAR","near","error","console","log","useNearAddress","_window","accountId","window","selector","store","getState","accounts","length","useLogin","modal","login","_window2","show","logoutNear","_window3","wallet","signOut","catch","err","useNearBalance","network","options","provider","JsonRpcProvider","url","getNearBalance","amount","query","finality","total","available","getNearTokenBalance","_ref","bl","BigInt","Buffer","from","JSON","stringify","toString","parse","result","getNearStorageBalance","_ref2","_window4","_window4$near","useAccount","accountFn","viewFunction","getNearStorageBalanceBounds","_ref3","useNearPoolDatas","getNearPoolDatas","calls","Promise","resolve","_window5","_window6","_window6$near","arr","labelArr","includes","item","anytoken","_window7","_window7$near","_window8","_window8$near","push","key","label","_window9","_window9$near","all","then","res","list","i","len","k","l","useSendNear","sendTransaction","actions","transactions","signerId","receiverId","type","params","signAndSendTransactions","sendNear","routerContractId","bindaddr","selectchain","tokenType","anyContractId","reject","methodName","args","concat","gas","deposit","tx","transaction","sendNearToken","contractId","memo","depositStorageNear","contractid","nearStorageBalanceBounds","depositNearToken","msg","withdrawNearToken","useNearSendTxns","routerToken","inputCurrency","typedValue","selectChain","destConfig","useToChainId","t","address","addTransaction","userInterfaceBalanceValid","onChangeViewDtil","onChangeViewErrorTip","balance","setBalance","inputAmount","decimals","underlyingToken","getBalance","format","sufficientBalance","Number","toExact","execute","txReceipt","hash","data","value","formatvalue","to","symbol","version","pairid","summary","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","undefined","inputError","updateNearHash","info","chainInfo","nodeRpc","fetch","method","headers","accept","body","json","_json$result","_json$result$transact","transaction_outcome","outcome","_result$status","_result$status2","_result$status3","status","SuccessReceiptId","SuccessValue","Failure"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/near/index.ts"],"sourcesContent":["import {\n  connect,\n  // Contract,\n  keyStores,\n  providers\n} from 'near-api-js'\nimport type { AccountView, CodeResult } from \"near-api-js/lib/providers/provider\";\nimport type { Transaction } from \"@near-wallet-selector/core\";\nimport { useTranslation } from 'react-i18next'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n// import {getConfig} from './config'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { BigAmount } from '../../utils/formatBignumber'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { recordsTxns } from '../../utils/bridge/register'\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks'\nimport useInterval from '../../hooks/useInterval'\nimport { isAddress } from '../../utils/isAddress'\nimport { ChainId } from '../../config/chainConfig/chainId'\n// import { VALID_BALANCE } from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\nimport config from '../../config'\n// export enum WrapType {\n//   NOT_APPLICABLE,\n//   WRAP,\n//   UNWRAP,\n//   NOCONNECT\n// }\n\n\n// import { setupWalletSelector } from \"@near-wallet-selector/core\";\n// import { setupModal } from \"@near-wallet-selector/modal-ui\";\n// import { setupSender } from \"@near-wallet-selector/sender\";\nimport { useWalletSelector } from \"./WalletSelectorContext\";\n// import type { Transaction } from \"@near-wallet-selector/core\";\n// import { BigNumber } from '@ethersproject/bignumber'\n\nconst NOT_APPLICABLE = {}\n\n// const nearConfig:any = getConfig(process.env.NODE_ENV || 'development')\n// const contractId = 'bridge-1.crossdemo.testnet'\n\nexport async function initConnect(chainId: any, token: any) {\n  let account\n  try {\n    let connectConfig: any = {}\n    if (chainId === ChainId.NEAR_TEST) {\n      connectConfig = {\n        networkId: \"testnet\",\n        keyStore: new keyStores.InMemoryKeyStore(),\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        walletUrl: \"https://wallet.testnet.near.org\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        explorerUrl: \"https://explorer.testnet.near.org\",\n      }\n    } else if (chainId === ChainId.NEAR) {\n      connectConfig = {\n        networkId: 'mainnet',\n        keyStore: new keyStores.InMemoryKeyStore(),\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org',\n        explorerUrl: 'https://explorer.mainnet.near.org',\n      }\n    }\n    const near = await connect(connectConfig);\n    // console.log(near)\n    account = await near.account(token);\n  } catch (error) {\n    console.log('initConnect')\n    console.log(error)\n  }\n  return account;\n}\n\nexport function useNearAddress() {\n  let accountId = \"\"\n  if (window?.selector) {\n    if (window.selector.store.getState().accounts.length > 0) {\n      accountId = window.selector.store.getState().accounts[0].accountId;\n    }\n  }\n  return accountId;\n}\n\nexport function useLogin() {\n\n  // const login = useCallback(async() => {\n  //   if (window?.near) {\n  //     try {\n  //       const res = await window.near.requestSignIn({ contractId, methodNames: [] })\n  //       if (!res.error) {\n  //         if (res && res.accessKey) {\n  //           setAccess(res.accessKey)\n  //         } else {\n  //           console.log('res: ', res)\n  //         }\n  //       }\n  //     } catch (error) {\n  //       console.log('error: ', error)\n  //     }\n  //   } else {\n  //     if (confirm('Please install Sender Wallet.') === true) {\n  //       window.open('https://chrome.google.com/webstore/detail/sender-wallet/epapihdplajcdnnkdeiahlgigofloibg')\n  //     }\n  //   }\n  // }, [])\n\n\n  // 更换到selector登录\n  const { modal } = useWalletSelector();\n\n  const login = useCallback(async () => {\n    if (window?.selector) {\n      try {\n\n        modal.show()\n        // if (!res.error) {\n        //   if (res && res.accessKey) {\n        //     setAccess(res.accessKey)\n        //   } else {\n        //     console.log('res: ', res)\n        //   }\n        // }\n      } catch (error) {\n        console.log('error: ', error)\n      }\n    } else {\n\n    }\n  }, []);\n\n  const logoutNear = useCallback(async() => {\n    if (window?.selector) {\n      const wallet = await window.selector.wallet();\n      wallet.signOut().catch((err) => {\n        console.log(\"Failed to sign out\");\n        console.error(err);\n      });\n    }\n    return {}\n  }, [])\n\n  return {\n    login,\n    logoutNear\n  }\n}\n\nexport function useNearBalance() {\n  const { selector  } = useWalletSelector();\n  const { network } = selector.options;\n  // console.log(selector)\n  // console.log(network)\n  const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });\n  const getNearBalance = useCallback(async () => {\n    // let bl:any = ''\n    // try {\n    //   bl = await window.nightly.near?.account().getAccountBalance()\n    // } catch (error) {\n\n    // }\n    // console.log(bl)\n    // return bl\n    const accountId = useNearAddress()\n    try {\n      const { amount } = await provider.query<AccountView>({\n        \"request_type\": \"view_account\",\n        finality: \"final\",\n        \"account_id\": accountId,\n      });\n      // const bn = BigNumber.from(amount);\n      return { total: amount, available: amount }\n    } catch (error) {\n\n    }\n    return {}\n  }, [])\n\n  const getNearTokenBalance = useCallback(async ({ token }) => {\n    let bl: any = BigInt(0);\n    const accountId = useNearAddress()\n    // const useAccount = account ? account : window.near?.accountId\n    // try {\n\n    //   bl = await window.near?.account().viewFunction(\n    //     token,\n    //     'ft_balance_of',\n    //     { \"account_id\": useAccount },\n    //   )\n    // } catch (error) {\n\n    // }\n    // console.log(bl)\n    // return bl\n    if (token && token !== 'mpc.testnet') {\n      try {\n        bl = await provider.query<CodeResult>({\n          \"request_type\": \"call_function\",\n          \"account_id\": token,\n          \"method_name\": \"ft_balance_of\",\n          \"args_base64\": Buffer.from(JSON.stringify({\n            \"account_id\": accountId\n          })).toString('base64'),\n          finality: \"optimistic\",\n        });\n        bl = JSON.parse(Buffer.from(bl.result).toString())\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n\n    return bl\n  }, [])\n\n  const getNearStorageBalance = useCallback(async ({ token, account, chainId }) => {\n    let bl: any\n    const useAccount = account ? account : window?.near?.accountId\n    const accountFn = await initConnect(chainId, token);\n    // console.log(accountFn)\n    try {\n      if (accountFn && useAccount && isAddress(useAccount, chainId)) {\n        bl = await accountFn.viewFunction(\n          token,\n          'storage_balance_of',\n          { \"account_id\": useAccount },\n        )\n      }\n    } catch (error) {\n      console.log(error)\n    }\n    return bl\n  }, [])\n\n  const getNearStorageBalanceBounds = useCallback(async ({ token, chainId }) => {\n    let bl: any\n    const accountFn = await initConnect(chainId, token);\n    try {\n      if (accountFn && isAddress(token, chainId)) {\n        bl = await accountFn.viewFunction(\n          token,\n          'storage_balance_bounds',\n        )\n      }\n    } catch (error) {\n      console.log(error)\n    }\n    return bl\n  }, [])\n\n  return {\n    getNearBalance,\n    getNearTokenBalance,\n    getNearStorageBalance,\n    getNearStorageBalanceBounds\n  }\n}\n\nexport function useNearPoolDatas() {\n  const getNearPoolDatas = useCallback(async (calls, chainId) => {\n    return new Promise(resolve => {\n      const arr = []\n      const labelArr: any = []\n      // console.log(chainId)\n      if (window?.selector && window?.near?.account && [ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) {\n\n        for (const item of calls) {\n          if (item.token === 'near' || item.anytoken === 'near') continue\n          if (item.token) {\n            arr.push(window?.near?.account().viewFunction(\n              item.token,\n              'ft_balance_of',\n              { \"account_id\": item.anytoken },\n            ))\n            labelArr.push({\n              key: item.anytoken,\n              label: 'balanceOf'\n            })\n            arr.push(window?.near?.account().viewFunction(\n              item.token,\n              'ft_total_supply',\n              {},\n            ))\n            labelArr.push({\n              key: item.anytoken,\n              label: 'totalSupply'\n            })\n          }\n\n          if (isAddress(item.account, chainId)) {\n\n            arr.push(window?.near?.account().viewFunction(\n              item.anytoken,\n              'ft_balance_of',\n              { \"account_id\": item.account },\n            ))\n            labelArr.push({\n              key: item.anytoken,\n              label: 'balance'\n            })\n          }\n        }\n      }\n      // console.log(calls)\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        const list: any = {}\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key\n          const l = labelArr[i].label\n          if (!list[k]) list[k] = {}\n          list[k][l] = res[i]\n        }\n        // console.log(list)\n        resolve(list)\n      })\n    })\n  }, [])\n\n  return {\n    getNearPoolDatas,\n  }\n}\n\n\nexport function useSendNear() {\n  const { selector, accountId } = useWalletSelector();\n\n  const sendTransaction = useCallback(\n    async (actions: any) => {\n      const wallet = await selector.wallet();\n      const transactions: Array<Transaction> = [];\n      transactions.push({\n        signerId: accountId || \"\",\n        receiverId: actions.receiverId,\n        actions: [\n          {\n            type: \"FunctionCall\",\n            params: actions.actions[0]\n          },\n        ]\n      });\n      return wallet\n        .signAndSendTransactions({ transactions })\n\n    },\n    [selector, accountId]\n  );\n\n  const sendNear = useCallback(async (routerContractId, amount, bindaddr, selectchain, tokenType, anyContractId) => {\n    return new Promise((resolve, reject) => {\n      // console.log('sendNear')\n      const actions: any = {\n        receiverId: tokenType === 'ANYTOKEN' ? anyContractId : routerContractId,\n        actions: [],\n      }\n      if (tokenType === 'ANYTOKEN') {\n        actions.actions.push({\n          methodName: 'swap_out',\n          args: {\n            \"receiver_id\": `${bindaddr}`,\n            \"to_chain_id\": `${selectchain}`,\n            \"amount\": `${amount}`,\n          },\n          gas: '300000000000000',\n          deposit: '0'\n        })\n      } else {\n        actions.actions.push({\n          methodName: 'swap_out',\n          args: {\n            \"receiver_id\": `${bindaddr}`,\n            \"to_chain_id\": `${selectchain}`,\n          },\n          gas: '300000000000000',\n          deposit: amount\n        })\n      }\n\n      let tx: any = {}\n      // window.near.signAndSendTransaction(actions)\n      sendTransaction(actions)\n        // window.nightly.near.signAllTransactions(actions)\n        .then((res: any) => {\n          console.log(res)\n          if (res && res.length > 0) {\n            tx = res[0].transaction;\n            resolve(tx)\n          } else {\n            reject(\"sendTransaction ERROR\")\n          }\n\n          // if (res?.response && !res?.response.error && res?.response.length > 0) {\n          //   tx = res?.response[0]?.transaction\n          //   resolve(tx)\n          // } else {\n          //   reject(res?.response?.error)\n          // }\n        }).catch((error: any) => {\n          reject(error)\n        })\n    })\n  }, [])\n\n  const sendNearToken = useCallback(async (contractId, anyContractId, routerContractId, amount, bindaddr, selectchain) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken')\n      const actions = {\n        receiverId: contractId,\n        actions: [\n          {\n            methodName: 'ft_transfer',\n            args: {\n              'receiver_id': routerContractId,\n              amount: amount,  // wNear decimals is 24\n              memo: `${bindaddr} ${selectchain}`\n            },\n            gas: '300000000000000',\n            deposit: '1'\n          }\n        ]\n      }\n      console.log(actions)\n      let tx: any = {}\n      sendTransaction(actions)\n        // window.nightly.near.signAllTransactions(actions)\n        .then((res: any) => {\n          console.log(res)\n          if (res && res.length > 0) {\n            tx = res[0].transaction;\n            resolve(tx)\n          } else {\n            reject(\"sendTransaction ERROR\")\n          }\n\n          // if (res?.response && !res?.response.error && res?.response.length > 0) {\n          //   tx = res?.response[0]?.transaction\n          //   resolve(tx)\n          // } else {\n          //   reject(res?.response?.error)\n          // }\n        }).catch((error: any) => {\n          reject(error)\n        })\n    })\n  }, [])\n\n  const depositStorageNear = useCallback((contractid, accountId, nearStorageBalanceBounds) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken')\n      const actions = {\n        receiverId: contractid,\n        actions: [\n          {\n            methodName: 'storage_deposit',\n            args: {\n              \"account_id\": accountId,\n              // \"registration_only\": true, \n            },\n            gas: '300000000000000',\n            // deposit: 1e24\n            deposit: nearStorageBalanceBounds ? nearStorageBalanceBounds : '1250000000000000000000'\n            // deposit: amount\n          }\n        ],\n        // amount: amount\n      }\n      console.log(actions)\n      let tx: any = {}\n      sendTransaction(actions)\n        // window.nightly.near.signAllTransactions(actions)\n        .then((res: any) => {\n          console.log(res)\n          if (res && res.length > 0) {\n            tx = res[0].transaction;\n            resolve(tx)\n          } else {\n            reject(\"sendTransaction ERROR\")\n          }\n\n          // if (res?.response && !res?.response.error && res?.response.length > 0) {\n          //   tx = res?.response[0]?.transaction\n          //   resolve(tx)\n          // } else {\n          //   reject(res?.response?.error)\n          // }\n        }).catch((error: any) => {\n          reject(error)\n        })\n    })\n  }, [])\n\n  const depositNearToken = useCallback(async (contractId, anyContractId, routerContractId, amount, bindaddr, selectchain) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken')\n      const actions = {\n        receiverId: contractId,\n        actions: [\n          {\n            methodName: 'ft_transfer_call',\n            args: {\n              'receiver_id': routerContractId,\n              amount: amount,  // wNear decimals is 24\n              msg: `any_swap_out ${anyContractId} ${bindaddr} ${selectchain}`\n            },\n            gas: '300000000000000',\n            deposit: '1'\n          }\n        ]\n      }\n      console.log(actions)\n      let tx: any = {}\n      sendTransaction(actions)\n        // window.nightly.near.signAllTransactions(actions)\n        .then((res: any) => {\n          console.log(res)\n          if (res && res.length > 0) {\n            tx = res[0].transaction;\n            resolve(tx)\n          } else {\n            reject(\"sendTransaction ERROR\")\n          }\n\n          // if (res?.response && !res?.response.error && res?.response.length > 0) {\n          //   tx = res?.response[0]?.transaction\n          //   resolve(tx)\n          // } else {\n          //   reject(res?.response?.error)\n          // }\n        }).catch((error: any) => {\n          reject(error)\n        })\n    })\n  }, [])\n\n  const withdrawNearToken = useCallback(async (contractId, anyContractId, routerContractId, amount, bindaddr, selectchain) => {\n    return new Promise((resolve, reject) => {\n      console.log('sendNearToken')\n      const actions = {\n        receiverId: contractId,\n        actions: [\n          {\n            methodName: 'ft_transfer_call',\n            args: {\n              'receiver_id': routerContractId,\n              amount: amount,  // wNear decimals is 24\n              msg: `any_swap_out ${anyContractId} ${bindaddr} ${selectchain}`\n            },\n            gas: '300000000000000',\n            deposit: '1'\n          }\n        ]\n      }\n      console.log(actions)\n      let tx: any = {}\n      sendTransaction(actions)\n        // window.nightly.near.signAllTransactions(actions)\n        .then((res: any) => {\n          console.log(res)\n          if (res && res.length > 0) {\n            tx = res[0].transaction;\n            resolve(tx)\n          } else {\n            reject(\"sendTransaction ERROR\")\n          }\n\n          // if (res?.response && !res?.response.error && res?.response.length > 0) {\n          //   tx = res?.response[0]?.transaction\n          //   resolve(tx)\n          // } else {\n          //   reject(res?.response?.error)\n          // }\n        }).catch((error: any) => {\n          reject(error)\n        })\n    })\n  }, [])\n\n\n  return {\n    sendNear,\n    sendNearToken,\n    depositStorageNear,\n    depositNearToken,\n    withdrawNearToken,\n  }\n}\n\n// contractId, anyContractId, routerContractId, amount, bindaddr, selectchain\nexport function useNearSendTxns(\n  routerToken: any,\n  inputCurrency: any,\n  anyContractId: any,\n  contractId: any,\n  typedValue: any,\n  receiverId: any,\n  chainId: any,\n  selectChain: any,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { sendNear, sendNearToken } = useSendNear()\n  const { t } = useTranslation()\n  const address = useNearAddress()\n  const addTransaction = useTransactionAdder()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n  const { onChangeViewDtil } = useTxnsDtilOpen()\n  const { onChangeViewErrorTip } = useTxnsErrorTipOpen()\n  const [balance, setBalance] = useState<any>()\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, inputCurrency?.decimals), [typedValue, inputCurrency])\n  const underlyingToken = contractId ? contractId : anyContractId\n  const {\n    getNearBalance,\n    getNearTokenBalance\n  } = useNearBalance()\n\n  const getBalance = useCallback(() => {\n    if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) {\n      if (inputCurrency?.tokenType === 'NATIVE' || inputCurrency?.address === 'near') {\n        getNearBalance().then(res => {\n          if (res?.available) {\n            // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n            setBalance(BigAmount.format(inputCurrency?.decimals, res?.total))\n          } else {\n            setBalance('')\n          }\n        })\n      } else {\n        getNearTokenBalance({ token: contractId }).then((res: any) => {\n          // console.log(contractId)\n          // console.log(res)\n          if (res) {\n            // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n            setBalance(BigAmount.format(inputCurrency?.decimals, res))\n          } else {\n            setBalance('')\n          }\n        })\n      }\n    }\n  }, [inputCurrency, contractId, chainId])\n\n  useEffect(() => {\n    getBalance()\n  }, [inputCurrency, contractId])\n\n  useInterval(getBalance, 1000 * 10)\n\n  let sufficientBalance = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = inputCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    // console.log(inputAmount)\n    // console.log(receiverId)\n    // console.log(selectChain)\n    // console.log(routerToken)\n    // console.log(underlyingToken)\n    // console.log(chainId)\n    if (!useToChainId || !routerToken || !underlyingToken || !chainId) return NOT_APPLICABLE\n    // console.log(balance)\n    return {\n      // wrapType: WrapType.WRAP,\n      balance,\n      execute: receiverId && (sufficientBalance || !userInterfaceBalanceValid) && inputAmount ? async () => {\n        try {\n          const txReceipt: any = [\"NATIVE\", \"ANYTOKEN\"].includes(inputCurrency?.tokenType) || inputCurrency?.address === 'near' ? await sendNear(routerToken, inputAmount, receiverId, useToChainId, inputCurrency?.tokenType, anyContractId) : await sendNearToken(contractId, anyContractId, routerToken, inputAmount, receiverId, useToChainId)\n          console.log(txReceipt)\n          if (txReceipt?.hash) {\n            const data: any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: address,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiverId,\n              symbol: inputCurrency?.symbol,\n              version: destConfig.type,\n              pairid: inputCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${inputCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiverId.indexOf('0x') === 0 ? receiverId?.toLowerCase() : receiverId,\n              symbol: inputCurrency?.symbol,\n              version: 'swapin',\n              routerToken: routerToken,\n              token: inputCurrency?.address,\n              logoUrl: inputCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: inputCurrency?.symbol,\n                name: inputCurrency?.name,\n                decimals: inputCurrency?.decimals,\n                address: inputCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (error) {\n          console.log('Could not swapout', error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', { symbol: inputCurrency?.symbol })\n    }\n  }, [inputAmount, receiverId, selectChain, routerToken, anyContractId, contractId, chainId, inputCurrency, balance, underlyingToken, destConfig, useToChainId, userInterfaceBalanceValid])\n}\n\n/**\n * any token 充值与提现underlying\n * 给定选定的输入和输出货币，返回一个wrap回调\n * @param inputCurrency 选定的输入货币\n * @param typedValue 用户输入值\n */\n//  export function useNearSwapPoolUnderlyingCallback(\n//   inputCurrency: any,\n//   inputToken: string | undefined,\n//   // anyContractId:any,\n//   contractId:any,\n//   typedValue: string | undefined,\n//   swapType: string | undefined,\n//   // selectCurrency: any,\n//   chainId: any\n// // ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n//   // const { chainId } = useActiveReact()\n//   // const bridgeContract = useSwapUnderlyingContract(isAddress(inputToken, evmChainId))\n//   const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n//   const { t } = useTranslation()\n//   const {depositNearToken, withdrawNearToken} = useSendNear()\n\n//   const [balance, setBalance] = useState<any>()\n//   // const useAccount:any = isAddress(account, evmChainId)\n//   // const ethbalance = useETHBalances(useAccount ? [useAccount] : [])?.[account ?? '']\n//   // const anybalance = useCurrencyBalance(useAccount ?? undefined, inputCurrency)\n//   // const balance = selectCurrency?.tokenType === \"NATIVE\" ? ethbalance : anybalance\n//   // const underlyingToken = contractId ? contractId : anyContractId\n//   const {\n//     getNearBalance,\n//     getNearTokenBalance\n//   } = useNearBalance()\n\n//   const getBalance = useCallback(() => {\n//     if (inputCurrency?.tokenType === 'NATIVE') {\n//       getNearBalance().then(res => {\n//         if (res?.available) {\n//           // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n//           setBalance(BigAmount.format(inputCurrency?.decimals,res?.total))\n//         } else {\n//           setBalance('')\n//         }\n//       })\n//     } else {\n//       getNearTokenBalance({token: contractId}).then(res => {\n//         // console.log(contractId)\n//         // console.log(res)\n//         if (res) {\n//           // setBalance(BigAmount.format(inputCurrency?.decimals,res?.available))\n//           setBalance(BigAmount.format(inputCurrency?.decimals,res))\n//         } else {\n//           setBalance('')\n//         }\n//       })\n//     }\n//   }, [inputCurrency, contractId])\n\n//   useEffect(() => {\n//     getBalance()\n//   }, [inputCurrency, contractId])\n\n//   useInterval(getBalance, 1000 * 10)\n//   // console.log(balance?.raw.toString())\n//   // console.log(inputCurrency)\n//   // 我们总是可以解析输入货币的金额，因为包装是1:1\n//   const inputAmount = useMemo(() => tryParseAmount3(typedValue, inputCurrency?.decimals), [typedValue, inputCurrency])\n//   const addTransaction = useTransactionAdder()\n//   return useMemo(() => {\n//     // console.log(inputCurrency)\n//     if (!chainId || !inputCurrency || !swapType || [ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) return NOT_APPLICABLE\n//     // console.log(inputAmount?.raw.toString())\n\n//     const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n//     // console.log(sufficientBalance)\n//     return {\n//       execute:\n//       (sufficientBalance || !VALID_BALANCE) && inputAmount\n//           ? async () => {\n//               try {\n//                 // console.log(inputAmount.raw.toString(16))\n//                 const txReceipt:any = swapType === 'deposit' ? await depositNearToken : await withdrawNearToken\n//                 addTransaction(txReceipt, { summary: `${swapType === 'deposit' ? 'Deposit' : 'Withdraw'} ${inputAmount.toSignificant(6)} ${inputCurrency?.symbol}` })\n//               } catch (error) {\n//                 console.log('Could not swapout', error)\n//                 onChangeViewErrorTip(error, true)\n//               }\n//             }\n//           : undefined,\n//       inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: inputCurrency?.symbol})\n//     }\n//   }, [chainId, inputCurrency, inputAmount, balance, addTransaction, t, swapType, inputToken])\n// }\n\nexport function updateNearHash(hash: any, chainId: any) {\n  const data: any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const url = config.chainInfo[chainId].nodeRpc\n    fetch(url, {\n      method: 'POST',\n      headers: { 'content-type': 'application/json', accept: 'application/json' },\n      body: JSON.stringify({\n        \"jsonrpc\": \"2.0\",\n        \"id\": \"dontcare\",\n        \"method\": \"EXPERIMENTAL_tx_status\",\n        \"params\": [hash, \"bowen\"]\n      })\n    }).then(res => res.json()).then(json => {\n      console.log(json)\n      const result = json?.result?.transaction_outcome?.outcome\n      if (result) {\n        if (\n          result?.status?.SuccessReceiptId\n          || result?.status?.SuccessValue\n        ) {\n          data.msg = 'Success'\n          data.info = json\n        } else if (result?.status?.Failure) {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      console.log(err.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    })\n  })\n}\n// updateNearHash('4KVYoGtn2FFceXdtrttGPkqWnKAGJZ9yVArFMF2z7RxH', 'NEAR_TEST').then(res => {\n//   console.log(res)\n// })"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}