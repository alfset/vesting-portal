{"ast":null,"code":"\"use strict\";\n\nvar protobuf = require('protobufjs');\nvar utils = require('./utils/utils.js');\nvar cryptoUtils = require('./utils/crypto-utils.js');\nvar account = require(\"./account.js\");\nvar htmlescape = require('htmlescape');\nvar BigNumber = require('bignumber.js');\nvar SECP256K1 = 1;\nvar root = protobuf.Root.fromJSON(require(\"./transaction.json\"));\nvar TxPayloadBinaryType = \"binary\";\nvar TxPayloadDeployType = \"deploy\";\nvar TxPayloadCallType = \"call\";\nvar TxPayloadProtocolType = \"protocol\";\n\n/**\n * @typedef TransactionInit\n * @example\n * var acc = Account.NewAccount();\n *\n * var tx = new Transaction({\n *    chainID: 1,\n *    from: acc,\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000\n * });\n */\n\n/**\n * Represent of smart contract payload data.\n *\n * @typedef {Object} Contract\n * @property {String} source - Contract source code for deploy contract.\n * @property {String} sourceType - Contract source type for deploy contract. Currently support js and ts.\n * @property {String} args - The params of contract. The args content is JSON string of parameters array.\n * @property {String} function - The contract call function.\n * @property {Buffer} binary - Binary contract representation.\n *\n * @see [Create own smart contract in Nebulas.]{@link https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2003%20Smart%20Contracts%20JavaScript.md}\n * @see [More about transaction parameters.]{@link https://github.com/nebulasio/wiki/blob/c3f5ce8908c80e9104e3b512a7fdfd75f16ac38c/rpc.md#sendtransaction}\n *\n * @example\n * // It's example of possible fields values.\n * // For deploy, and execute smart contracts follow this link - https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2003%20Smart%20Contracts%20JavaScript.md\n * {\n *     'source': '\"use strict\";var DepositeContent=function(t){if(t){let n=JSON.parse(t);' +\n *               'this.balance=new BigNumber(n.balance),this.expiryHeight=new BigNumber(n.expiryHeight)' +\n *               '}else this.balance=new BigNumber(0),this.expiryHeight=new BigNumber(0)};' +\n *               'DepositeContent.prototype={toString:function(){return JSON.stringify(this)}};' +\n *               'var BankVaultContract=function(){LocalContractStorage.defineMapProperty(this,\"bankVault\",' +\n *               '{parse:function(t){return new DepositeContent(t)},stringify:function(t){return t.toString()}})};' +\n *               'BankVaultContract.prototype={init:function(){},save:function(t){var n=Blockchain.transaction.from,' +\n *               'e=Blockchain.transaction.value,a=new BigNumber(Blockchain.block.height),r=this.bankVault.get(n);' +\n *               'r&&(e=e.plus(r.balance));var i=new DepositeContent;i.balance=e,i.expiryHeight=a.plus(t),' +\n *               'this.bankVault.put(n,i)},takeout:function(t){var n=Blockchain.transaction.from,' +\n *               'e=new BigNumber(Blockchain.block.height),a=new BigNumber(t),r=this.bankVault.get(n);' +\n *               'if(!r)throw new Error(\"No deposit before.\");if(e.lt(r.expiryHeight))throw new Error(\"Can't takeout before expiryHeight.\");' +\n *               'if(a.gt(r.balance))throw new Error(\"Insufficient balance.\");if(0!=Blockchain.transfer(n,a))throw new Error(\"transfer failed.\");' +\n *               'Event.Trigger(\"BankVault\",{Transfer:{from:Blockchain.transaction.to,to:n,value:a.toString()}}),' +\n *               'r.balance=r.balance.sub(a),this.bankVault.put(n,r)},balanceOf:function(){var t=Blockchain.transaction.from;' +\n *               'return this.bankVault.get(t)}},module.exports=BankVaultContract;',\n *     'sourceType': 'js',\n *     'args': '[0]',\n *     'function': 'save'\n * }\n */\n\n/**\n * Represent Transaction parameters\n *\n * @typedef {Object} TransactionOptions\n * @property {Number} options.chainID - Transaction chain id.\n * @property {HexString} options.from - Hex string of the sender account addresss..\n * @property {HexString} options.to - Hex string of the receiver account addresss..\n * @property {Number} options.value - Value of transaction.\n * @property {Number} options.nonce - Transaction nonce.\n * @property {Number} options.gasPrice - Gas price. The unit is 10^-18 NAS.\n * @property {Number} options.gasLimit - Transaction gas limit.\n * @property {Contract} [options.contract]\n *\n * @example\n * {\n*    chainID: 1,\n*    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n*    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n*    value: 10,\n*    nonce: 12,\n*    gasPrice: 1000000,\n*    gasLimit: 2000000\n* }\n */\n\n/**\n * Transaction constructor.\n * Class encapsulate main operation with transactions.\n * @see [For more information about parameters, follow this link]{@link https://github.com/nebulasio/wiki/blob/master/rpc.md#sendrawtransaction}\n * @constructor\n *\n * @param {TransactionOptions} options - Transaction options.\n *\n * @see [Transaction tutorial.]{@link https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2002%20Transaction.md}\n * @see [Create own smart contract in Nebulas.]{@link https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2003%20Smart%20Contracts%20JavaScript.md}\n * @see [More about transaction parameters.]{@link https://github.com/nebulasio/wiki/blob/c3f5ce8908c80e9104e3b512a7fdfd75f16ac38c/rpc.md#sendtransaction}\n *\n * @example\n * var acc = Account.NewAccount();\n *\n * var tx = new Transaction({\n *    chainID: 1,\n *    from: acc,\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000,\n *    contract: {\n *        function: \"save\",\n *        args: \"[0]\"\n *    }\n * });\n *\n */\nvar Transaction = function (options) {\n  if (arguments.length > 0) {\n    options = utils.argumentsToObject(['chainID', 'from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract'], arguments);\n    this.chainID = options.chainID;\n    this.from = account.fromAddress(options.from);\n    this.to = account.fromAddress(options.to);\n    this.value = utils.toBigNumber(options.value);\n    if (!this.value.isInteger()) throw new Error(\"Invalid value! The minimum unit is wei (1^-18nas)\");\n    this.nonce = parseInt(options.nonce); // An error will be thrown is nonce is string. Error: \"nonce: integer|Long expected\"\n    this.timestamp = Math.floor(new Date().getTime() / 1000);\n    this.contract = options.contract;\n    this.gasPrice = utils.toBigNumber(options.gasPrice);\n    this.gasLimit = utils.toBigNumber(options.gasLimit);\n    this.data = parseContract(this.contract);\n    if (this.gasPrice.lessThanOrEqualTo(0)) {\n      this.gasPrice = new BigNumber(20000000000);\n    }\n    if (this.gasLimit.lessThanOrEqualTo(0)) {\n      this.gasLimit = new BigNumber(20000);\n    }\n  }\n  this.signErrorMessage = \"You should sign transaction before this operation.\";\n};\nvar parseContract = function (obj) {\n  /*jshint maxcomplexity:7 */\n\n  var payloadType, payload;\n  if (obj && utils.isString(obj.source) && obj.source.length > 0) {\n    payloadType = TxPayloadDeployType;\n    payload = {\n      SourceType: obj.sourceType,\n      Source: obj.source,\n      Args: obj.args\n    };\n  } else if (obj && utils.isString(obj.function) && obj.function.length > 0) {\n    payloadType = TxPayloadCallType;\n    payload = {\n      Function: obj.function,\n      Args: obj.args\n    };\n  } else if (obj && utils.isString(obj.protocol) && obj.protocol.length > 0) {\n    payloadType = TxPayloadProtocolType;\n    payload = {\n      Data: obj.protocol\n    };\n  } else {\n    payloadType = TxPayloadBinaryType;\n    if (obj) {\n      payload = {\n        Data: cryptoUtils.toBuffer(obj.binary)\n      };\n    }\n  }\n  var payloadData = utils.isNull(payload) ? null : cryptoUtils.toBuffer(htmlescape(payload));\n  return {\n    type: payloadType,\n    payload: payloadData\n  };\n};\n\n/**\n * Transaction recover method.\n *\n * @static\n * @param {String/Hash} message - Transaction hash.\n * @param {String/Hash} signature - Transaction sign\n *\n * @return {Hash} Transaction from address public key.\n *\n * @example\n * var pubKey = Transaction.recover(\"82bc718bfd24392b3872eb5a874927a327ab19b156c5584bd5f93b08fab5b1a2\", \"003d4064f16cbc72367b0fa3870bdcd1044bdb166019d87cdaac6dcfb8c09ac9471570e5b2e1dc249a8642ba67e585e3f43e6383c3b87532f5eb1fe2e718a5ab00\");\n */\nTransaction.recover = function (message, signature) {\n  message = cryptoUtils.toBuffer(message);\n  var signBuf = cryptoUtils.toBuffer(signature);\n  var sign = signBuf.slice(0, 64);\n  var recovery = signBuf.readUIntBE(64, 1);\n  if (recovery > 27) {\n    recovery = recovery - 27;\n  }\n  var compressed = false;\n  var pub = cryptoUtils.recover(message, sign, recovery, compressed);\n  return pub;\n};\n\n/**\n * Transaction fromProto method, parse rawData to transaction object.\n *\n * @static\n * @param {String/Hash} data - Transaction raw data.\n *\n * @return {Object} Transaction object.\n *\n * @example\n * var tx = Transaction.fromProto(\"EhjZTY/gKLhWVVMZ+xoY9GiHOHJcxhc4uxkaGNlNj+AouFZVUxn7Ghj0aIc4clzGFzi7GSIQAAAAAAAAAAAN4Lazp2QAACgBMPCz6tUFOggKBmJpbmFyeUDpB0oQAAAAAAAAAAAAAAAAAA9CQFIQAAAAAAAAAAAAAAAAAABOIA==\");\n */\nTransaction.fromProto = function (data) {\n  var tx = new Transaction();\n  tx.fromProto(data);\n  return tx;\n};\nTransaction.prototype = {\n  /**\n   * Convert transaction to hash by SHA3-256 algorithm.\n   *\n   * @return {Hash} hash of Transaction.\n   *\n   * @example\n   * var acc = Account.NewAccount();\n   *\n   * var tx = new Transaction({\n   *    chainID: 1,\n   *    from: acc,\n   *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n   *    value: 10,\n   *    nonce: 12,\n   *    gasPrice: 1000000,\n   *    gasLimit: 2000000\n   * });\n   * var txHash = tx.hashTransaction();\n   * //Uint8Array(32) [211, 213, 102, 103, 23, 231, 246, 141, 20, 202, 210, 25, 92, 142, 162, 242, 232, 95, 44, 239, 45, 57, 241, 61, 34, 2, 213, 160, 17, 207, 75, 40]\n   */\n  hashTransaction: function () {\n    var Data = root.lookup(\"corepb.Data\");\n    var err = Data.verify(this.data);\n    if (err) {\n      throw new Error(err);\n    }\n    var data = Data.create(this.data);\n    var dataBuffer = Data.encode(data).finish();\n    var hash = cryptoUtils.sha3(this.from.getAddress(), this.to.getAddress(), cryptoUtils.padToBigEndian(this.value, 128), cryptoUtils.padToBigEndian(this.nonce, 64), cryptoUtils.padToBigEndian(this.timestamp, 64), dataBuffer, cryptoUtils.padToBigEndian(this.chainID, 32), cryptoUtils.padToBigEndian(this.gasPrice, 128), cryptoUtils.padToBigEndian(this.gasLimit, 128));\n    return hash;\n  },\n  /**\n   * Sign transaction with the specified algorithm.\n   *\n   * @example\n   * var acc = Account.NewAccount();\n   *\n   * var tx = new Transaction({\n   *    chainID: 1,\n   *    from: acc,\n   *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n   *    value: 10,\n   *    nonce: 12,\n   *    gasPrice: 1000000,\n   *    gasLimit: 2000000\n   * });\n   * tx.signTransaction();\n   */\n  signTransaction: function () {\n    if (this.from.getPrivateKey() !== null) {\n      this.hash = this.hashTransaction();\n      this.alg = SECP256K1;\n      this.sign = cryptoUtils.sign(this.hash, this.from.getPrivateKey());\n    } else {\n      throw new Error(\"transaction from address's private key is invalid\");\n    }\n  },\n  /**\n   * Conver transaction data to plain JavaScript object.\n   *\n   * @return {Object} Plain JavaScript object with Transaction fields.\n   * @example\n   * var acc = Account.NewAccount();\n   * var tx = new Transaction({\n   *    chainID: 1,\n   *    from: acc,\n   *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n   *    value: 10,\n   *    nonce: 12,\n   *    gasPrice: 1000000,\n   *    gasLimit: 2000000\n   * });\n   * txData = tx.toPlainObject();\n   * // {chainID: 1001, from: \"n1USdDKeZXQYubA44W2ZVUdW1cjiJuqswxp\", to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\", value: 1000000000000000000, nonce: 1, …}\n   */\n  toPlainObject: function () {\n    return {\n      chainID: this.chainID,\n      from: this.from.getAddressString(),\n      to: this.to.getAddressString(),\n      value: utils.isBigNumber(this.value) ? this.value.toNumber() : this.value,\n      nonce: this.nonce,\n      gasPrice: utils.isBigNumber(this.gasPrice) ? this.gasPrice.toNumber() : this.gasPrice,\n      gasLimit: utils.isBigNumber(this.gasLimit) ? this.gasLimit.toNumber() : this.gasLimit,\n      contract: this.contract\n    };\n  },\n  /**\n   * Convert transaction to JSON string.\n   * </br><b>Note:</b> Transaction should be [sign]{@link Transaction#signTransaction} before converting.\n   *\n   * @return {String} JSON stringify of transaction data.\n   * @example\n   * var acc = Account.NewAccount();\n   *\n   * var tx = new Transaction({\n   *    chainID: 1,\n   *    from: acc,\n   *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n   *    value: 10,\n   *    nonce: 12,\n   *    gasPrice: 1000000,\n   *    gasLimit: 2000000\n   * });\n   * tx.signTransaction();\n   * var txHash = tx.toString();\n   * // \"{\"chainID\":1001,\"from\":\"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\"to\":\"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\"value\":\"1000000000000000000\",\"nonce\":1,\"timestamp\":1521905294,\"data\":{\"payloadType\":\"binary\",\"payload\":null},\"gasPrice\":\"1000000\",\"gasLimit\":\"20000\",\"hash\":\"f52668b853dd476fd309f21b22ade6bb468262f55402965c3460175b10cb2f20\",\"alg\":1,\"sign\":\"cf30d5f61e67bbeb73bb9724ba5ba3744dcbc995521c62f9b5f43efabd9b82f10aaadf19a9cdb05f039d8bf074849ef4b508905bcdea76ae57e464e79c958fa900\"}\"\n   */\n  toString: function () {\n    if (!this.sign) {\n      throw new Error(this.signErrorMessage);\n    }\n    var payload = utils.isNull(this.data.payload) ? null : JSON.parse(this.data.payload.toString());\n    var tx = {\n      chainID: this.chainID,\n      from: this.from.getAddressString(),\n      to: this.to.getAddressString(),\n      value: this.value.toString(10),\n      nonce: this.nonce,\n      timestamp: this.timestamp,\n      data: {\n        payloadType: this.data.type,\n        payload: payload\n      },\n      gasPrice: this.gasPrice.toString(10),\n      gasLimit: this.gasLimit.toString(10),\n      hash: this.hash.toString(\"hex\"),\n      alg: this.alg,\n      sign: this.sign.toString(\"hex\")\n    };\n    return JSON.stringify(tx);\n  },\n  /**\n   * Convert transaction to Protobuf format.\n   * </br><b>Note:</b> Transaction should be [sign]{@link Transaction#signTransaction} before converting.\n   *\n   * @return {Buffer} Transaction data in Protobuf format\n   *\n   * @example\n   * var acc = Account.NewAccount();\n   *\n   * var tx = new Transaction({\n   *    chainID: 1,\n   *    from: acc,\n   *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n   *    value: 10,\n   *    nonce: 12,\n   *    gasPrice: 1000000,\n   *    gasLimit: 2000000\n   * });\n   * tx.signTransaction();\n   * var txHash = tx.toProto();\n   * // Uint8Array(127)\n   */\n  toProto: function () {\n    if (!this.sign) {\n      throw new Error(this.signErrorMessage);\n    }\n    var Data = root.lookup(\"corepb.Data\");\n    var err = Data.verify(this.data);\n    if (err) {\n      throw err;\n    }\n    var data = Data.create(this.data);\n    var TransactionProto = root.lookup(\"corepb.Transaction\");\n    var txData = {\n      hash: this.hash,\n      from: this.from.getAddress(),\n      to: this.to.getAddress(),\n      value: cryptoUtils.padToBigEndian(this.value, 128),\n      nonce: this.nonce,\n      timestamp: this.timestamp,\n      data: data,\n      chainId: this.chainID,\n      gasPrice: cryptoUtils.padToBigEndian(this.gasPrice, 128),\n      gasLimit: cryptoUtils.padToBigEndian(this.gasLimit, 128),\n      alg: this.alg,\n      sign: this.sign\n    };\n    err = TransactionProto.verify(txData);\n    if (err) {\n      throw err;\n    }\n    var tx = TransactionProto.create(txData);\n    var txBuffer = TransactionProto.encode(tx).finish();\n    return txBuffer;\n  },\n  /**\n   * Convert transaction to Protobuf hash string.\n   * </br><b>Note:</b> Transaction should be [sign]{@link Transaction#signTransaction} before converting.\n   *\n   * @return {Base64} Transaction string.\n   *\n   * @example\n   * var acc = Account.NewAccount();\n   *\n   * var tx = new Transaction({\n   *    chainID: 1,\n   *    from: acc,\n   *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n   *    value: 10,\n   *    nonce: 12,\n   *    gasPrice: 1000000,\n   *    gasLimit: 2000000\n   * });\n   * tx.signTransaction();\n   * var txHash = tx.toProtoString();\n   * // \"EhjZTY/gKLhWVVMZ+xoY9GiHOHJcxhc4uxkaGNlNj+AouFZVUxn7Ghj0aIc4clzGFzi7GSIQAAAAAAAAAAAN4Lazp2QAACgBMPCz6tUFOggKBmJpbmFyeUDpB0oQAAAAAAAAAAAAAAAAAA9CQFIQAAAAAAAAAAAAAAAAAABOIA==\"\n   */\n  toProtoString: function () {\n    var txBuffer = this.toProto();\n    return protobuf.util.base64.encode(txBuffer, 0, txBuffer.length);\n  },\n  /**\n   * Restore Transaction from Protobuf format.\n   * @property {Buffer|String} data - Buffer or stringify Buffer.\n   *\n   * @return {Transaction} Restored transaction.\n   *\n   * @example\n   * var acc = Account.NewAccount();\n   *\n   * var tx = new Transaction({\n   *    chainID: 1,\n   *    from: acc,\n   *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n   *    value: 10,\n   *    nonce: 12,\n   *    gasPrice: 1000000,\n   *    gasLimit: 2000000\n   * });\n   * var tx = tx.fromProto(\"EhjZTY/gKLhWVVMZ+xoY9GiHOHJcxhc4uxkaGNlNj+AouFZVUxn7Ghj0aIc4clzGFzi7GSIQAAAAAAAAAAAN4Lazp2QAACgBMPCz6tUFOggKBmJpbmFyeUDpB0oQAAAAAAAAAAAAAAAAAA9CQFIQAAAAAAAAAAAAAAAAAABOIA==\");\n   */\n  fromProto: function (data) {\n    var txBuffer;\n    if (utils.isString(data)) {\n      txBuffer = new Array(protobuf.util.base64.length(data));\n      protobuf.util.base64.decode(data, txBuffer, 0);\n    } else {\n      txBuffer = data;\n    }\n    var TransactionProto = root.lookup(\"corepb.Transaction\");\n    var txProto = TransactionProto.decode(txBuffer);\n    this.hash = cryptoUtils.toBuffer(txProto.hash);\n    this.from = account.fromAddress(txProto.from);\n    this.to = account.fromAddress(txProto.to);\n    this.value = utils.toBigNumber(\"0x\" + cryptoUtils.toBuffer(txProto.value).toString(\"hex\"));\n    // long number is object, should convert to int\n    this.nonce = parseInt(txProto.nonce.toString());\n    this.timestamp = parseInt(txProto.timestamp.toString());\n    this.data = txProto.data;\n    if (this.data.payload.length === 0) {\n      this.data.payload = null;\n    }\n    this.chainID = txProto.chainId;\n    this.gasPrice = utils.toBigNumber(\"0x\" + cryptoUtils.toBuffer(txProto.gasPrice).toString(\"hex\"));\n    this.gasLimit = utils.toBigNumber(\"0x\" + cryptoUtils.toBuffer(txProto.gasLimit).toString(\"hex\"));\n    this.alg = txProto.alg;\n    this.sign = cryptoUtils.toBuffer(txProto.sign);\n    return this;\n  }\n};\nmodule.exports = Transaction;","map":{"version":3,"names":["protobuf","require","utils","cryptoUtils","account","htmlescape","BigNumber","SECP256K1","root","Root","fromJSON","TxPayloadBinaryType","TxPayloadDeployType","TxPayloadCallType","TxPayloadProtocolType","Transaction","options","arguments","length","argumentsToObject","chainID","from","fromAddress","to","value","toBigNumber","isInteger","Error","nonce","parseInt","timestamp","Math","floor","Date","getTime","contract","gasPrice","gasLimit","data","parseContract","lessThanOrEqualTo","signErrorMessage","obj","payloadType","payload","isString","source","SourceType","sourceType","Source","Args","args","function","Function","protocol","Data","toBuffer","binary","payloadData","isNull","type","recover","message","signature","signBuf","sign","slice","recovery","readUIntBE","compressed","pub","fromProto","tx","prototype","hashTransaction","lookup","err","verify","create","dataBuffer","encode","finish","hash","sha3","getAddress","padToBigEndian","signTransaction","getPrivateKey","alg","toPlainObject","getAddressString","isBigNumber","toNumber","toString","JSON","parse","stringify","toProto","TransactionProto","txData","chainId","txBuffer","toProtoString","util","base64","Array","decode","txProto","module","exports"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/nebulas/lib/transaction.js"],"sourcesContent":["\"use strict\";\n\nvar protobuf = require('protobufjs');\nvar utils = require('./utils/utils.js');\nvar cryptoUtils = require('./utils/crypto-utils.js');\nvar account = require(\"./account.js\");\nvar htmlescape = require('htmlescape');\nvar BigNumber = require('bignumber.js');\n\nvar SECP256K1 = 1;\nvar root = protobuf.Root.fromJSON(require(\"./transaction.json\"));\n\nvar TxPayloadBinaryType    = \"binary\";\nvar TxPayloadDeployType    = \"deploy\";\nvar TxPayloadCallType      = \"call\";\nvar TxPayloadProtocolType  = \"protocol\";\n\n/**\n * @typedef TransactionInit\n * @example\n * var acc = Account.NewAccount();\n *\n * var tx = new Transaction({\n *    chainID: 1,\n *    from: acc,\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000\n * });\n */\n\n/**\n * Represent of smart contract payload data.\n *\n * @typedef {Object} Contract\n * @property {String} source - Contract source code for deploy contract.\n * @property {String} sourceType - Contract source type for deploy contract. Currently support js and ts.\n * @property {String} args - The params of contract. The args content is JSON string of parameters array.\n * @property {String} function - The contract call function.\n * @property {Buffer} binary - Binary contract representation.\n *\n * @see [Create own smart contract in Nebulas.]{@link https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2003%20Smart%20Contracts%20JavaScript.md}\n * @see [More about transaction parameters.]{@link https://github.com/nebulasio/wiki/blob/c3f5ce8908c80e9104e3b512a7fdfd75f16ac38c/rpc.md#sendtransaction}\n *\n * @example\n * // It's example of possible fields values.\n * // For deploy, and execute smart contracts follow this link - https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2003%20Smart%20Contracts%20JavaScript.md\n * {\n *     'source': '\"use strict\";var DepositeContent=function(t){if(t){let n=JSON.parse(t);' +\n *               'this.balance=new BigNumber(n.balance),this.expiryHeight=new BigNumber(n.expiryHeight)' +\n *               '}else this.balance=new BigNumber(0),this.expiryHeight=new BigNumber(0)};' +\n *               'DepositeContent.prototype={toString:function(){return JSON.stringify(this)}};' +\n *               'var BankVaultContract=function(){LocalContractStorage.defineMapProperty(this,\"bankVault\",' +\n *               '{parse:function(t){return new DepositeContent(t)},stringify:function(t){return t.toString()}})};' +\n *               'BankVaultContract.prototype={init:function(){},save:function(t){var n=Blockchain.transaction.from,' +\n *               'e=Blockchain.transaction.value,a=new BigNumber(Blockchain.block.height),r=this.bankVault.get(n);' +\n *               'r&&(e=e.plus(r.balance));var i=new DepositeContent;i.balance=e,i.expiryHeight=a.plus(t),' +\n *               'this.bankVault.put(n,i)},takeout:function(t){var n=Blockchain.transaction.from,' +\n *               'e=new BigNumber(Blockchain.block.height),a=new BigNumber(t),r=this.bankVault.get(n);' +\n *               'if(!r)throw new Error(\"No deposit before.\");if(e.lt(r.expiryHeight))throw new Error(\"Can't takeout before expiryHeight.\");' +\n *               'if(a.gt(r.balance))throw new Error(\"Insufficient balance.\");if(0!=Blockchain.transfer(n,a))throw new Error(\"transfer failed.\");' +\n *               'Event.Trigger(\"BankVault\",{Transfer:{from:Blockchain.transaction.to,to:n,value:a.toString()}}),' +\n *               'r.balance=r.balance.sub(a),this.bankVault.put(n,r)},balanceOf:function(){var t=Blockchain.transaction.from;' +\n *               'return this.bankVault.get(t)}},module.exports=BankVaultContract;',\n *     'sourceType': 'js',\n *     'args': '[0]',\n *     'function': 'save'\n * }\n */\n\n /**\n  * Represent Transaction parameters\n  *\n  * @typedef {Object} TransactionOptions\n  * @property {Number} options.chainID - Transaction chain id.\n  * @property {HexString} options.from - Hex string of the sender account addresss..\n  * @property {HexString} options.to - Hex string of the receiver account addresss..\n  * @property {Number} options.value - Value of transaction.\n  * @property {Number} options.nonce - Transaction nonce.\n  * @property {Number} options.gasPrice - Gas price. The unit is 10^-18 NAS.\n  * @property {Number} options.gasLimit - Transaction gas limit.\n  * @property {Contract} [options.contract]\n  *\n  * @example\n  * {\n *    chainID: 1,\n *    from: \"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000\n * }\n  */\n\n/**\n * Transaction constructor.\n * Class encapsulate main operation with transactions.\n * @see [For more information about parameters, follow this link]{@link https://github.com/nebulasio/wiki/blob/master/rpc.md#sendrawtransaction}\n * @constructor\n *\n * @param {TransactionOptions} options - Transaction options.\n *\n * @see [Transaction tutorial.]{@link https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2002%20Transaction.md}\n * @see [Create own smart contract in Nebulas.]{@link https://github.com/nebulasio/wiki/blob/master/tutorials/%5BEnglish%5D%20Nebulas%20101%20-%2003%20Smart%20Contracts%20JavaScript.md}\n * @see [More about transaction parameters.]{@link https://github.com/nebulasio/wiki/blob/c3f5ce8908c80e9104e3b512a7fdfd75f16ac38c/rpc.md#sendtransaction}\n *\n * @example\n * var acc = Account.NewAccount();\n *\n * var tx = new Transaction({\n *    chainID: 1,\n *    from: acc,\n *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n *    value: 10,\n *    nonce: 12,\n *    gasPrice: 1000000,\n *    gasLimit: 2000000,\n *    contract: {\n *        function: \"save\",\n *        args: \"[0]\"\n *    }\n * });\n *\n */\nvar Transaction = function (options) {\n    if (arguments.length > 0) {\n        options = utils.argumentsToObject(['chainID', 'from', 'to', 'value', 'nonce', 'gasPrice', 'gasLimit', 'contract'], arguments);\n\n        this.chainID = options.chainID;\n        this.from = account.fromAddress(options.from);\n        this.to = account.fromAddress(options.to);\n        this.value = utils.toBigNumber(options.value);\n        if(!this.value.isInteger())\n            throw new Error(\"Invalid value! The minimum unit is wei (1^-18nas)\");\n        this.nonce = parseInt(options.nonce); // An error will be thrown is nonce is string. Error: \"nonce: integer|Long expected\"\n        this.timestamp = Math.floor(new Date().getTime()/1000);\n        this.contract = options.contract;\n        this.gasPrice = utils.toBigNumber(options.gasPrice);\n        this.gasLimit = utils.toBigNumber(options.gasLimit);\n\n        this.data = parseContract(this.contract);\n        if (this.gasPrice.lessThanOrEqualTo(0)) {\n            this.gasPrice = new BigNumber(20000000000);\n        }\n\n        if (this.gasLimit.lessThanOrEqualTo(0)) {\n            this.gasLimit = new BigNumber(20000);\n        }\n    }\n    this.signErrorMessage = \"You should sign transaction before this operation.\";\n};\n\nvar parseContract = function (obj) {\n    /*jshint maxcomplexity:7 */\n\n    var payloadType, payload;\n    if (obj && utils.isString(obj.source) && obj.source.length > 0) {\n        payloadType = TxPayloadDeployType;\n        payload = {\n            SourceType: obj.sourceType,\n            Source: obj.source,\n            Args: obj.args\n        };\n    } else if (obj && utils.isString(obj.function) && obj.function.length > 0) {\n        payloadType = TxPayloadCallType;\n        payload = {\n            Function: obj.function,\n            Args: obj.args\n        };\n    } else if (obj && utils.isString(obj.protocol) && obj.protocol.length > 0) {\n        payloadType = TxPayloadProtocolType;\n        payload = {\n            Data: obj.protocol\n        };\n    } else {\n        payloadType = TxPayloadBinaryType;\n        if (obj) {\n            payload = {\n                Data: cryptoUtils.toBuffer(obj.binary)\n            };\n        }\n    }\n    var payloadData = utils.isNull(payload) ? null : cryptoUtils.toBuffer(htmlescape(payload));\n\n    return {type: payloadType, payload: payloadData};\n};\n\n/**\n * Transaction recover method.\n *\n * @static\n * @param {String/Hash} message - Transaction hash.\n * @param {String/Hash} signature - Transaction sign\n *\n * @return {Hash} Transaction from address public key.\n *\n * @example\n * var pubKey = Transaction.recover(\"82bc718bfd24392b3872eb5a874927a327ab19b156c5584bd5f93b08fab5b1a2\", \"003d4064f16cbc72367b0fa3870bdcd1044bdb166019d87cdaac6dcfb8c09ac9471570e5b2e1dc249a8642ba67e585e3f43e6383c3b87532f5eb1fe2e718a5ab00\");\n */\nTransaction.recover = function(message, signature) {\n    message = cryptoUtils.toBuffer(message);\n    var signBuf = cryptoUtils.toBuffer(signature);\n    var sign = signBuf.slice(0, 64);\n    var recovery = signBuf.readUIntBE(64, 1);\n    if(recovery > 27) {\n        recovery = recovery - 27;\n    }\n    var compressed = false;\n    var pub = cryptoUtils.recover(message, sign, recovery, compressed);\n    return pub;\n};\n\n/**\n * Transaction fromProto method, parse rawData to transaction object.\n *\n * @static\n * @param {String/Hash} data - Transaction raw data.\n *\n * @return {Object} Transaction object.\n *\n * @example\n * var tx = Transaction.fromProto(\"EhjZTY/gKLhWVVMZ+xoY9GiHOHJcxhc4uxkaGNlNj+AouFZVUxn7Ghj0aIc4clzGFzi7GSIQAAAAAAAAAAAN4Lazp2QAACgBMPCz6tUFOggKBmJpbmFyeUDpB0oQAAAAAAAAAAAAAAAAAA9CQFIQAAAAAAAAAAAAAAAAAABOIA==\");\n */\nTransaction.fromProto = function(data) {\n    var tx = new Transaction();\n    tx.fromProto(data);\n    return tx;\n};\n\nTransaction.prototype = {\n    /**\n     * Convert transaction to hash by SHA3-256 algorithm.\n     *\n     * @return {Hash} hash of Transaction.\n     *\n     * @example\n     * var acc = Account.NewAccount();\n     *\n     * var tx = new Transaction({\n     *    chainID: 1,\n     *    from: acc,\n     *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n     *    value: 10,\n     *    nonce: 12,\n     *    gasPrice: 1000000,\n     *    gasLimit: 2000000\n     * });\n     * var txHash = tx.hashTransaction();\n     * //Uint8Array(32) [211, 213, 102, 103, 23, 231, 246, 141, 20, 202, 210, 25, 92, 142, 162, 242, 232, 95, 44, 239, 45, 57, 241, 61, 34, 2, 213, 160, 17, 207, 75, 40]\n     */\n    hashTransaction: function () {\n        var Data = root.lookup(\"corepb.Data\");\n        var err = Data.verify(this.data);\n        if (err) {\n            throw new Error(err);\n        }\n        var data = Data.create(this.data);\n        var dataBuffer = Data.encode(data).finish();\n        var hash = cryptoUtils.sha3(\n            this.from.getAddress(),\n            this.to.getAddress(),\n            cryptoUtils.padToBigEndian(this.value, 128),\n            cryptoUtils.padToBigEndian(this.nonce, 64),\n            cryptoUtils.padToBigEndian(this.timestamp, 64),\n            dataBuffer,\n            cryptoUtils.padToBigEndian(this.chainID, 32),\n            cryptoUtils.padToBigEndian(this.gasPrice, 128),\n            cryptoUtils.padToBigEndian(this.gasLimit, 128)\n            );\n        return hash;\n    },\n    /**\n     * Sign transaction with the specified algorithm.\n     *\n     * @example\n     * var acc = Account.NewAccount();\n     *\n     * var tx = new Transaction({\n     *    chainID: 1,\n     *    from: acc,\n     *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n     *    value: 10,\n     *    nonce: 12,\n     *    gasPrice: 1000000,\n     *    gasLimit: 2000000\n     * });\n     * tx.signTransaction();\n     */\n    signTransaction: function () {\n        if (this.from.getPrivateKey() !== null) {\n            this.hash = this.hashTransaction();\n            this.alg = SECP256K1;\n            this.sign = cryptoUtils.sign(this.hash, this.from.getPrivateKey());\n        } else {\n            throw new Error(\"transaction from address's private key is invalid\");\n        }\n    },\n    /**\n     * Conver transaction data to plain JavaScript object.\n     *\n     * @return {Object} Plain JavaScript object with Transaction fields.\n     * @example\n     * var acc = Account.NewAccount();\n     * var tx = new Transaction({\n     *    chainID: 1,\n     *    from: acc,\n     *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n     *    value: 10,\n     *    nonce: 12,\n     *    gasPrice: 1000000,\n     *    gasLimit: 2000000\n     * });\n     * txData = tx.toPlainObject();\n     * // {chainID: 1001, from: \"n1USdDKeZXQYubA44W2ZVUdW1cjiJuqswxp\", to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\", value: 1000000000000000000, nonce: 1, …}\n     */\n    toPlainObject: function() {\n        return {\n            chainID: this.chainID,\n            from: this.from.getAddressString(),\n            to: this.to.getAddressString(),\n            value: utils.isBigNumber(this.value) ? this.value.toNumber() : this.value,\n            nonce: this.nonce,\n            gasPrice: utils.isBigNumber(this.gasPrice) ? this.gasPrice.toNumber() : this.gasPrice,\n            gasLimit: utils.isBigNumber(this.gasLimit) ? this.gasLimit.toNumber() : this.gasLimit,\n            contract: this.contract\n        };\n    },\n    /**\n     * Convert transaction to JSON string.\n     * </br><b>Note:</b> Transaction should be [sign]{@link Transaction#signTransaction} before converting.\n     *\n     * @return {String} JSON stringify of transaction data.\n     * @example\n     * var acc = Account.NewAccount();\n     *\n     * var tx = new Transaction({\n     *    chainID: 1,\n     *    from: acc,\n     *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n     *    value: 10,\n     *    nonce: 12,\n     *    gasPrice: 1000000,\n     *    gasLimit: 2000000\n     * });\n     * tx.signTransaction();\n     * var txHash = tx.toString();\n     * // \"{\"chainID\":1001,\"from\":\"n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5\",\"to\":\"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\"value\":\"1000000000000000000\",\"nonce\":1,\"timestamp\":1521905294,\"data\":{\"payloadType\":\"binary\",\"payload\":null},\"gasPrice\":\"1000000\",\"gasLimit\":\"20000\",\"hash\":\"f52668b853dd476fd309f21b22ade6bb468262f55402965c3460175b10cb2f20\",\"alg\":1,\"sign\":\"cf30d5f61e67bbeb73bb9724ba5ba3744dcbc995521c62f9b5f43efabd9b82f10aaadf19a9cdb05f039d8bf074849ef4b508905bcdea76ae57e464e79c958fa900\"}\"\n     */\n    toString: function () {\n        if(!this.sign) {\n            throw new Error(this.signErrorMessage);\n        }\n        var payload = utils.isNull(this.data.payload) ? null : JSON.parse(this.data.payload.toString());\n        var tx = {\n            chainID: this.chainID,\n            from: this.from.getAddressString(),\n            to: this.to.getAddressString(),\n            value: this.value.toString(10),\n            nonce: this.nonce,\n            timestamp: this.timestamp,\n            data: {payloadType: this.data.type, payload:payload},\n            gasPrice: this.gasPrice.toString(10),\n            gasLimit: this.gasLimit.toString(10),\n            hash: this.hash.toString(\"hex\"),\n            alg: this.alg,\n            sign: this.sign.toString(\"hex\")\n\n        };\n        return JSON.stringify(tx);\n    },\n    /**\n     * Convert transaction to Protobuf format.\n     * </br><b>Note:</b> Transaction should be [sign]{@link Transaction#signTransaction} before converting.\n     *\n     * @return {Buffer} Transaction data in Protobuf format\n     *\n     * @example\n     * var acc = Account.NewAccount();\n     *\n     * var tx = new Transaction({\n     *    chainID: 1,\n     *    from: acc,\n     *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n     *    value: 10,\n     *    nonce: 12,\n     *    gasPrice: 1000000,\n     *    gasLimit: 2000000\n     * });\n     * tx.signTransaction();\n     * var txHash = tx.toProto();\n     * // Uint8Array(127)\n     */\n    toProto: function () {\n        if(!this.sign) {\n            throw new Error(this.signErrorMessage);\n        }\n        var Data = root.lookup(\"corepb.Data\");\n        var err = Data.verify(this.data);\n        if (err) {\n            throw err;\n        }\n        var data = Data.create(this.data);\n\n        var TransactionProto = root.lookup(\"corepb.Transaction\");\n\n        var txData = {\n            hash: this.hash,\n            from: this.from.getAddress(),\n            to: this.to.getAddress(),\n            value: cryptoUtils.padToBigEndian(this.value, 128),\n            nonce: this.nonce,\n            timestamp: this.timestamp,\n            data: data,\n            chainId: this.chainID,\n            gasPrice: cryptoUtils.padToBigEndian(this.gasPrice, 128),\n            gasLimit: cryptoUtils.padToBigEndian(this.gasLimit, 128),\n            alg: this.alg,\n            sign: this.sign\n        };\n\n        err = TransactionProto.verify(txData);\n        if (err) {\n            throw err;\n        }\n        var tx = TransactionProto.create(txData);\n\n        var txBuffer = TransactionProto.encode(tx).finish();\n        return txBuffer;\n    },\n    /**\n     * Convert transaction to Protobuf hash string.\n     * </br><b>Note:</b> Transaction should be [sign]{@link Transaction#signTransaction} before converting.\n     *\n     * @return {Base64} Transaction string.\n     *\n     * @example\n     * var acc = Account.NewAccount();\n     *\n     * var tx = new Transaction({\n     *    chainID: 1,\n     *    from: acc,\n     *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n     *    value: 10,\n     *    nonce: 12,\n     *    gasPrice: 1000000,\n     *    gasLimit: 2000000\n     * });\n     * tx.signTransaction();\n     * var txHash = tx.toProtoString();\n     * // \"EhjZTY/gKLhWVVMZ+xoY9GiHOHJcxhc4uxkaGNlNj+AouFZVUxn7Ghj0aIc4clzGFzi7GSIQAAAAAAAAAAAN4Lazp2QAACgBMPCz6tUFOggKBmJpbmFyeUDpB0oQAAAAAAAAAAAAAAAAAA9CQFIQAAAAAAAAAAAAAAAAAABOIA==\"\n     */\n    toProtoString: function () {\n        var txBuffer = this.toProto();\n        return protobuf.util.base64.encode(txBuffer, 0, txBuffer.length);\n    },\n    /**\n     * Restore Transaction from Protobuf format.\n     * @property {Buffer|String} data - Buffer or stringify Buffer.\n     *\n     * @return {Transaction} Restored transaction.\n     *\n     * @example\n     * var acc = Account.NewAccount();\n     *\n     * var tx = new Transaction({\n     *    chainID: 1,\n     *    from: acc,\n     *    to: \"n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17\",\n     *    value: 10,\n     *    nonce: 12,\n     *    gasPrice: 1000000,\n     *    gasLimit: 2000000\n     * });\n     * var tx = tx.fromProto(\"EhjZTY/gKLhWVVMZ+xoY9GiHOHJcxhc4uxkaGNlNj+AouFZVUxn7Ghj0aIc4clzGFzi7GSIQAAAAAAAAAAAN4Lazp2QAACgBMPCz6tUFOggKBmJpbmFyeUDpB0oQAAAAAAAAAAAAAAAAAA9CQFIQAAAAAAAAAAAAAAAAAABOIA==\");\n     */\n    fromProto: function (data) {\n\n        var txBuffer;\n        if (utils.isString(data)) {\n            txBuffer = new Array(protobuf.util.base64.length(data));\n            protobuf.util.base64.decode(data, txBuffer, 0);\n        } else {\n            txBuffer = data;\n        }\n\n        var TransactionProto = root.lookup(\"corepb.Transaction\");\n        var txProto = TransactionProto.decode(txBuffer);\n\n        this.hash = cryptoUtils.toBuffer(txProto.hash);\n        this.from = account.fromAddress(txProto.from);\n        this.to = account.fromAddress(txProto.to);\n        this.value = utils.toBigNumber(\"0x\" + cryptoUtils.toBuffer(txProto.value).toString(\"hex\"));\n        // long number is object, should convert to int\n        this.nonce = parseInt(txProto.nonce.toString());\n        this.timestamp = parseInt(txProto.timestamp.toString());\n        this.data = txProto.data;\n        if (this.data.payload.length === 0) {\n            this.data.payload = null;\n        }\n        this.chainID = txProto.chainId;\n        this.gasPrice = utils.toBigNumber(\"0x\" + cryptoUtils.toBuffer(txProto.gasPrice).toString(\"hex\"));\n        this.gasLimit = utils.toBigNumber(\"0x\" + cryptoUtils.toBuffer(txProto.gasLimit).toString(\"hex\"));\n        this.alg = txProto.alg;\n        this.sign = cryptoUtils.toBuffer(txProto.sign);\n\n        return this;\n    }\n};\n\nmodule.exports = Transaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}