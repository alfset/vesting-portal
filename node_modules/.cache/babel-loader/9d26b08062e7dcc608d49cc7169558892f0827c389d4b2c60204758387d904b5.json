{"ast":null,"code":"\"use strict\";\n\n// See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pubkeyToAddress = exports.pubkeyToRawAddress = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst encoding_2 = require(\"./encoding\");\nconst pubkeys_1 = require(\"./pubkeys\");\nfunction rawEd25519PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 32) {\n    throw new Error(\"Invalid Ed25519 pubkey length: \".concat(pubkeyData.length));\n  }\n  return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n}\nexports.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;\nfunction rawSecp256k1PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 33) {\n    throw new Error(\"Invalid Secp256k1 pubkey length (compressed): \".concat(pubkeyData.length));\n  }\n  return (0, crypto_1.ripemd160)((0, crypto_1.sha256)(pubkeyData));\n}\nexports.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress;\n// For secp256k1 this assumes we already have a compressed pubkey.\nfunction pubkeyToRawAddress(pubkey) {\n  if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n    const pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n    return rawSecp256k1PubkeyToRawAddress(pubkeyData);\n  } else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n    const pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n    return rawEd25519PubkeyToRawAddress(pubkeyData);\n  } else if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n    // https://github.com/tendermint/tendermint/blob/38b401657e4ad7a7eeb3c30a3cbf512037df3740/crypto/multisig/threshold_pubkey.go#L71-L74\n    const pubkeyData = (0, encoding_2.encodeAminoPubkey)(pubkey);\n    return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n  } else {\n    throw new Error(\"Unsupported public key type\");\n  }\n}\nexports.pubkeyToRawAddress = pubkeyToRawAddress;\nfunction pubkeyToAddress(pubkey, prefix) {\n  return (0, encoding_1.toBech32)(prefix, pubkeyToRawAddress(pubkey));\n}\nexports.pubkeyToAddress = pubkeyToAddress;","map":{"version":3,"names":["crypto_1","require","encoding_1","encoding_2","pubkeys_1","rawEd25519PubkeyToRawAddress","pubkeyData","length","Error","concat","sha256","slice","exports","rawSecp256k1PubkeyToRawAddress","ripemd160","pubkeyToRawAddress","pubkey","isSecp256k1Pubkey","fromBase64","value","isEd25519Pubkey","isMultisigThresholdPubkey","encodeAminoPubkey","pubkeyToAddress","prefix","toBech32"],"sources":["../src/addresses.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAEA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AAEA,SAAgBI,4BAA4BA,CAACC,UAAsB;EACjE,IAAIA,UAAU,CAACC,MAAM,KAAK,EAAE,EAAE;IAC5B,MAAM,IAAIC,KAAK,mCAAAC,MAAA,CAAmCH,UAAU,CAACC,MAAM,CAAE,CAAC;;EAExE,OAAO,IAAAP,QAAA,CAAAU,MAAM,EAACJ,UAAU,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AACxC;AALAC,OAAA,CAAAP,4BAAA,GAAAA,4BAAA;AAOA,SAAgBQ,8BAA8BA,CAACP,UAAsB;EACnE,IAAIA,UAAU,CAACC,MAAM,KAAK,EAAE,EAAE;IAC5B,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CAAkDH,UAAU,CAACC,MAAM,CAAE,CAAC;;EAEvF,OAAO,IAAAP,QAAA,CAAAc,SAAS,EAAC,IAAAd,QAAA,CAAAU,MAAM,EAACJ,UAAU,CAAC,CAAC;AACtC;AALAM,OAAA,CAAAC,8BAAA,GAAAA,8BAAA;AAOA;AACA,SAAgBE,kBAAkBA,CAACC,MAAc;EAC/C,IAAI,IAAAZ,SAAA,CAAAa,iBAAiB,EAACD,MAAM,CAAC,EAAE;IAC7B,MAAMV,UAAU,GAAG,IAAAJ,UAAA,CAAAgB,UAAU,EAACF,MAAM,CAACG,KAAK,CAAC;IAC3C,OAAON,8BAA8B,CAACP,UAAU,CAAC;GAClD,MAAM,IAAI,IAAAF,SAAA,CAAAgB,eAAe,EAACJ,MAAM,CAAC,EAAE;IAClC,MAAMV,UAAU,GAAG,IAAAJ,UAAA,CAAAgB,UAAU,EAACF,MAAM,CAACG,KAAK,CAAC;IAC3C,OAAOd,4BAA4B,CAACC,UAAU,CAAC;GAChD,MAAM,IAAI,IAAAF,SAAA,CAAAiB,yBAAyB,EAACL,MAAM,CAAC,EAAE;IAC5C;IACA,MAAMV,UAAU,GAAG,IAAAH,UAAA,CAAAmB,iBAAiB,EAACN,MAAM,CAAC;IAC5C,OAAO,IAAAhB,QAAA,CAAAU,MAAM,EAACJ,UAAU,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;GACvC,MAAM;IACL,MAAM,IAAIH,KAAK,CAAC,6BAA6B,CAAC;;AAElD;AAdAI,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AAgBA,SAAgBQ,eAAeA,CAACP,MAAc,EAAEQ,MAAc;EAC5D,OAAO,IAAAtB,UAAA,CAAAuB,QAAQ,EAACD,MAAM,EAAET,kBAAkB,CAACC,MAAM,CAAC,CAAC;AACrD;AAFAJ,OAAA,CAAAW,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}