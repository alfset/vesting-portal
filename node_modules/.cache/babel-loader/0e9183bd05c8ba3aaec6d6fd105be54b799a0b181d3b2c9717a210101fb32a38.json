{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = createAccount;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _keypair = require('../keypair');\nvar _strkey = require('../strkey');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!this.isValidAmount(opts.startingBalance, true)) {\n    throw new TypeError('startingBalance must be of type String, represent a non-negative number and have at most 7 digits after the decimal');\n  }\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _xdr2.default.CreateAccountOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createAccount","_xdr","require","_xdr2","_interopRequireDefault","_keypair","_strkey","obj","__esModule","default","opts","StrKey","isValidEd25519PublicKey","destination","Error","isValidAmount","startingBalance","TypeError","attributes","Keypair","fromPublicKey","xdrAccountId","_toXDRAmount","createAccountOp","CreateAccountOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/create_account.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = createAccount;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!this.isValidAmount(opts.startingBalance, true)) {\n    throw new TypeError('startingBalance must be of type String, represent a non-negative number and have at most 7 digits after the decimal');\n  }\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _xdr2.default.CreateAccountOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAGA,aAAa;AAErC,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,IAAII,QAAQ,GAAGH,OAAO,CAAC,YAAY,CAAC;AAEpC,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAElC,SAASE,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,aAAaA,CAACU,IAAI,EAAE;EAC3B,IAAI,CAACJ,OAAO,CAACK,MAAM,CAACC,uBAAuB,CAACF,IAAI,CAACG,WAAW,CAAC,EAAE;IAC7D,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,IAAI,CAAC,IAAI,CAACC,aAAa,CAACL,IAAI,CAACM,eAAe,EAAE,IAAI,CAAC,EAAE;IACnD,MAAM,IAAIC,SAAS,CAAC,qHAAqH,CAAC;EAC5I;EACA,IAAIC,UAAU,GAAG,CAAC,CAAC;EACnBA,UAAU,CAACL,WAAW,GAAGR,QAAQ,CAACc,OAAO,CAACC,aAAa,CAACV,IAAI,CAACG,WAAW,CAAC,CAACQ,YAAY,CAAC,CAAC;EACxFH,UAAU,CAACF,eAAe,GAAG,IAAI,CAACM,YAAY,CAACZ,IAAI,CAACM,eAAe,CAAC;EACpE,IAAIO,eAAe,GAAG,IAAIpB,KAAK,CAACM,OAAO,CAACe,eAAe,CAACN,UAAU,CAAC;EAEnE,IAAIO,YAAY,GAAG,CAAC,CAAC;EACrBA,YAAY,CAACC,IAAI,GAAGvB,KAAK,CAACM,OAAO,CAACkB,aAAa,CAAC3B,aAAa,CAACuB,eAAe,CAAC;EAC9E,IAAI,CAACK,gBAAgB,CAACH,YAAY,EAAEf,IAAI,CAAC;EAEzC,OAAO,IAAIP,KAAK,CAACM,OAAO,CAACoB,SAAS,CAACJ,YAAY,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}