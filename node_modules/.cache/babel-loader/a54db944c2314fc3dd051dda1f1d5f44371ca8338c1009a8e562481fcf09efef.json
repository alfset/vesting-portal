{"ast":null,"code":"import{useEffect,useMemo,useCallback}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useBlockNumber}from'../application/hooks';import{addMulticallListeners,addUseChainId,removeMulticallListeners,parseCallKey,toCallKey}from'./actions';function isMethodArg(x){return['string','number'].indexOf(typeof x)!==-1;}function isValidMethodArgs(x){return x===undefined||Array.isArray(x)&&x.every(xi=>isMethodArg(xi)||Array.isArray(xi)&&xi.every(isMethodArg));}const INVALID_RESULT={valid:false,blockNumber:undefined,data:undefined};// use this options object\nexport const NEVER_RELOAD={blocksPerFetch:Infinity};export function useAddDestChainId(){const dispatch=useDispatch();const onSelectChainId=useCallback(chainId=>{// console.log(field)\n// console.log(typedValue)\n// console.log(typeInput({ field, typedValue }))\ndispatch(addUseChainId({chainId}));},[dispatch]);return{onSelectChainId};}// the lowest level call for subscribing to contract data\nfunction useCallsData(calls,options,initChainId){const{chainId}=useActiveWeb3React();const{onSelectChainId}=useAddDestChainId();const useChainId=initChainId?initChainId:chainId;const callResults=useSelector(state=>state.multicall.callResults);const dispatch=useDispatch();const serializedCallKeys=useMemo(()=>{var _calls$filter$map$sor,_calls$filter,_calls$filter$map;return JSON.stringify((_calls$filter$map$sor=calls===null||calls===void 0?void 0:(_calls$filter=calls.filter(c=>Boolean(c)))===null||_calls$filter===void 0?void 0:(_calls$filter$map=_calls$filter.map(toCallKey))===null||_calls$filter$map===void 0?void 0:_calls$filter$map.sort())!==null&&_calls$filter$map$sor!==void 0?_calls$filter$map$sor:[]);},[calls]);useEffect(()=>{onSelectChainId(useChainId);},[useChainId]);// 当实际更改持续至少100毫秒时更新侦听器\nuseEffect(()=>{// console.log(chainId)\nconst callKeys=JSON.parse(serializedCallKeys);if(!useChainId||callKeys.length===0)return undefined;const calls=callKeys.map(key=>parseCallKey(key));// console.log(calls)\n// console.log(callKeys)\n// console.log(serializedCallKeys)\ndispatch(addMulticallListeners({chainId:useChainId,calls,options}));return()=>{dispatch(removeMulticallListeners({chainId:useChainId,calls,options}));};},[chainId,dispatch,options,serializedCallKeys]);return useMemo(()=>calls.map(call=>{var _callResults$useChain;if(!useChainId||!call)return INVALID_RESULT;const result=(_callResults$useChain=callResults[useChainId])===null||_callResults$useChain===void 0?void 0:_callResults$useChain[toCallKey(call)];let data;if((result===null||result===void 0?void 0:result.data)&&(result===null||result===void 0?void 0:result.data)!=='0x'){data=result.data;}return{valid:true,data,blockNumber:result===null||result===void 0?void 0:result.blockNumber};}),[callResults,calls,useChainId]);}const INVALID_CALL_STATE={valid:false,result:undefined,loading:false,syncing:false,error:false};const LOADING_CALL_STATE={valid:true,result:undefined,loading:true,syncing:true,error:false};function toCallState(callResult,contractInterface,fragment,latestBlockNumber){if(!callResult)return INVALID_CALL_STATE;const{valid,data,blockNumber}=callResult;if(!valid)return INVALID_CALL_STATE;if(valid&&!blockNumber)return LOADING_CALL_STATE;if(!contractInterface||!fragment||!latestBlockNumber)return LOADING_CALL_STATE;const success=data&&data.length>2;const syncing=(blockNumber!==null&&blockNumber!==void 0?blockNumber:0)<latestBlockNumber;let result=undefined;if(success&&data){try{result=contractInterface.decodeFunctionResult(fragment,data);}catch(error){console.debug('Result data parsing failed',fragment,data);return{valid:true,loading:false,error:true,syncing,result};}}return{valid:true,loading:false,syncing,result:result,error:!success};}export function useSingleContractMultipleData(contract,methodName,callInputs,options,chainId){const fragment=useMemo(()=>{var _contract$interface;return contract===null||contract===void 0?void 0:(_contract$interface=contract.interface)===null||_contract$interface===void 0?void 0:_contract$interface.getFunction(methodName);},[contract,methodName]);const calls=useMemo(()=>contract&&fragment&&callInputs&&callInputs.length>0?callInputs.map(inputs=>{return{address:contract.address,callData:contract.interface.encodeFunctionData(fragment,inputs)};}):[],[callInputs,contract,fragment]);const results=useCallsData(calls,options,chainId);// console.log(results)\nconst latestBlockNumber=useBlockNumber();return useMemo(()=>{return results.map(result=>toCallState(result,contract===null||contract===void 0?void 0:contract.interface,fragment,latestBlockNumber));},[fragment,contract,results,latestBlockNumber]);}export function useMultipleContractSingleData(addresses,contractInterface,methodName,callInputs,options,chainId){const fragment=useMemo(()=>contractInterface.getFunction(methodName),[contractInterface,methodName]);// console.log(callInputs)\nconst callData=useMemo(()=>fragment&&isValidMethodArgs(callInputs)?contractInterface.encodeFunctionData(fragment,callInputs):undefined,[callInputs,contractInterface,fragment]);// console.log(fragment)\n// console.log(callInputs)\n// console.log(contractInterface)\n// console.log(callData)\n// console.log(contractInterface.encodeFunctionData(fragment, callInputs))\nconst calls=useMemo(()=>fragment&&addresses&&addresses.length>0&&callData?addresses.map(address=>{return address&&callData?{address,callData}:undefined;}):[],[addresses,callData,fragment]);// console.log(calls)\nconst results=useCallsData(calls,options,chainId);// if (methodName === 'balanceOf') {\n// if (methodName === 'getReserves') {\n//   console.log(methodName)\n//   console.log(addresses)\n// }\nconst latestBlockNumber=useBlockNumber();return useMemo(()=>{return results.map(result=>toCallState(result,contractInterface,fragment,latestBlockNumber));},[fragment,results,contractInterface,latestBlockNumber]);}export function useSingleCallResult(contract,methodName,inputs,options,chainId){const fragment=useMemo(()=>{var _contract$interface2;return contract===null||contract===void 0?void 0:(_contract$interface2=contract.interface)===null||_contract$interface2===void 0?void 0:_contract$interface2.getFunction(methodName);},[contract,methodName]);const calls=useMemo(()=>{return contract&&fragment&&isValidMethodArgs(inputs)?[{address:contract.address,callData:contract.interface.encodeFunctionData(fragment,inputs)}]:[];},[contract,fragment,inputs]);const result=useCallsData(calls,options,chainId)[0];const latestBlockNumber=useBlockNumber();return useMemo(()=>{return toCallState(result,contract===null||contract===void 0?void 0:contract.interface,fragment,latestBlockNumber);},[result,contract,fragment,latestBlockNumber]);}","map":{"version":3,"names":["useEffect","useMemo","useCallback","useDispatch","useSelector","useActiveWeb3React","useBlockNumber","addMulticallListeners","addUseChainId","removeMulticallListeners","parseCallKey","toCallKey","isMethodArg","x","indexOf","isValidMethodArgs","undefined","Array","isArray","every","xi","INVALID_RESULT","valid","blockNumber","data","NEVER_RELOAD","blocksPerFetch","Infinity","useAddDestChainId","dispatch","onSelectChainId","chainId","useCallsData","calls","options","initChainId","useChainId","callResults","state","multicall","serializedCallKeys","_calls$filter$map$sor","_calls$filter","_calls$filter$map","JSON","stringify","filter","c","Boolean","map","sort","callKeys","parse","length","key","call","_callResults$useChain","result","INVALID_CALL_STATE","loading","syncing","error","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","debug","useSingleContractMultipleData","contract","methodName","callInputs","_contract$interface","interface","getFunction","inputs","address","callData","encodeFunctionData","results","useMultipleContractSingleData","addresses","useSingleCallResult","_contract$interface2"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/multicall/hooks.ts"],"sourcesContent":["import { Interface, FunctionFragment } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  addMulticallListeners,\n  addUseChainId,\n  Call,\n  removeMulticallListeners,\n  parseCallKey,\n  toCallKey,\n  ListenerOptions\n} from './actions'\n\nexport interface Result extends ReadonlyArray<any> {\n  readonly [key: string]: any\n}\n\ntype MethodArg = string | number | BigNumber\ntype MethodArgs = Array<MethodArg | MethodArg[]>\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\nfunction isMethodArg(x: unknown): x is MethodArg {\n  return ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every(xi => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n\ninterface CallResult {\n  readonly valid: boolean\n  readonly data: string | undefined\n  readonly blockNumber: number | undefined\n}\n\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\n\n// use this options object\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity\n}\n\nexport function useAddDestChainId (): {\n  onSelectChainId: (chainId:any) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onSelectChainId = useCallback(\n    (chainId:any) => {\n      // console.log(field)\n      // console.log(typedValue)\n      // console.log(typeInput({ field, typedValue }))\n      dispatch(addUseChainId({ chainId }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSelectChainId\n  }\n}\n\n// the lowest level call for subscribing to contract data\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions, initChainId?:any): CallResult[] {\n  const { chainId } = useActiveWeb3React()\n  const {onSelectChainId} = useAddDestChainId()\n  const useChainId = initChainId ? initChainId : chainId\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(state => state.multicall.callResults)\n  const dispatch = useDispatch<AppDispatch>()\n\n  const serializedCallKeys: string = useMemo(\n    () =>\n      JSON.stringify(\n        calls\n          ?.filter((c): c is Call => Boolean(c))\n          ?.map(toCallKey)\n          ?.sort() ?? []\n      ),\n    [calls]\n  )\n\n  useEffect(() => {\n    onSelectChainId(useChainId)\n  }, [useChainId])\n  // 当实际更改持续至少100毫秒时更新侦听器\n  useEffect(() => {\n    // console.log(chainId)\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    if (!useChainId || callKeys.length === 0) return undefined\n    const calls = callKeys.map(key => parseCallKey(key))\n    // console.log(calls)\n    // console.log(callKeys)\n    // console.log(serializedCallKeys)\n    dispatch(\n      addMulticallListeners({\n        chainId: useChainId,\n        calls,\n        options\n      })\n    )\n\n    return () => {\n      dispatch(\n        removeMulticallListeners({\n          chainId: useChainId,\n          calls,\n          options\n        })\n      )\n    }\n  }, [chainId, dispatch, options, serializedCallKeys])\n\n  return useMemo(\n    () =>\n      calls.map<CallResult>(call => {\n        if (!useChainId || !call) return INVALID_RESULT\n\n        const result = callResults[useChainId]?.[toCallKey(call)]\n        let data\n        if (result?.data && result?.data !== '0x') {\n          data = result.data\n        }\n\n        return { valid: true, data, blockNumber: result?.blockNumber }\n      }),\n    [callResults, calls, useChainId]\n  )\n}\n\ninterface CallState {\n  readonly valid: boolean\n  // the result, or undefined if loading or errored/no data\n  readonly result: Result | undefined\n  // true if the result has never been fetched\n  readonly loading: boolean\n  // true if the result is not for the latest block\n  readonly syncing: boolean\n  // true if the call was made and is synced, but the return data is invalid\n  readonly error: boolean\n}\n\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\n\nfunction toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  latestBlockNumber: number | undefined\n): CallState {\n  if (!callResult) return INVALID_CALL_STATE\n  const { valid, data, blockNumber } = callResult\n  if (!valid) return INVALID_CALL_STATE\n  if (valid && !blockNumber) return LOADING_CALL_STATE\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\n  const success = data && data.length > 2\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\n  let result: Result | undefined = undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result: result,\n    error: !success\n  }\n}\n\nexport function useSingleContractMultipleData(\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options?: ListenerOptions,\n  chainId?: any\n): CallState[] {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo(\n    () =>\n      contract && fragment && callInputs && callInputs.length > 0\n        ? callInputs.map<Call>(inputs => {\n            return {\n              address: contract.address,\n              callData: contract.interface.encodeFunctionData(fragment, inputs)\n            }\n          })\n        : [],\n    [callInputs, contract, fragment]\n  )\n  const results = useCallsData(calls, options, chainId)\n          // console.log(results)\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return results.map(result => toCallState(result, contract?.interface, fragment, latestBlockNumber))\n  }, [fragment, contract, results, latestBlockNumber])\n}\n\nexport function useMultipleContractSingleData(\n  addresses: (string | undefined)[],\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: ListenerOptions,\n  chainId?: any\n): CallState[] {\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\n  // console.log(callInputs)\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment]\n  )\n    // console.log(fragment)\n    // console.log(callInputs)\n    // console.log(contractInterface)\n    // console.log(callData)\n    // console.log(contractInterface.encodeFunctionData(fragment, callInputs))\n  const calls = useMemo(\n    () =>\n      fragment && addresses && addresses.length > 0 && callData\n        ? addresses.map<Call | undefined>(address => {\n            return address && callData\n              ? {\n                  address,\n                  callData\n                }\n              : undefined\n          })\n        : [],\n    [addresses, callData, fragment]\n  )\n          // console.log(calls)\n  const results = useCallsData(calls, options, chainId)\n  // if (methodName === 'balanceOf') {\n  // if (methodName === 'getReserves') {\n  //   console.log(methodName)\n  //   console.log(addresses)\n  // }\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return results.map(result => toCallState(result, contractInterface, fragment, latestBlockNumber))\n  }, [fragment, results, contractInterface, latestBlockNumber])\n}\n\nexport function useSingleCallResult(\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: ListenerOptions,\n  chainId?: any\n): CallState {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo<Call[]>(() => {\n    return contract && fragment && isValidMethodArgs(inputs)\n      ? [\n          {\n            address: contract.address,\n            callData: contract.interface.encodeFunctionData(fragment, inputs)\n          }\n        ]\n      : []\n  }, [contract, fragment, inputs])\n\n  const result = useCallsData(calls, options, chainId)[0]\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return toCallState(result, contract?.interface, fragment, latestBlockNumber)\n  }, [result, contract, fragment, latestBlockNumber])\n}\n"],"mappings":"AAGA,OAASA,SAAS,CAAEC,OAAO,CAAEC,WAAW,KAAQ,OAAO,CACvD,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,kBAAkB,KAAQ,aAAa,CAChD,OAASC,cAAc,KAAQ,sBAAsB,CAErD,OACEC,qBAAqB,CACrBC,aAAa,CAEbC,wBAAwB,CACxBC,YAAY,CACZC,SAAS,KAEJ,WAAW,CAWlB,QAAS,CAAAC,WAAWA,CAACC,CAAU,CAAkB,CAC/C,MAAO,CAAC,QAAQ,CAAE,QAAQ,CAAC,CAACC,OAAO,CAAC,MAAO,CAAAD,CAAC,CAAC,GAAK,CAAC,CAAC,CACtD,CAEA,QAAS,CAAAE,iBAAiBA,CAACF,CAAU,CAA+B,CAClE,MACE,CAAAA,CAAC,GAAKG,SAAS,EACdC,KAAK,CAACC,OAAO,CAACL,CAAC,CAAC,EAAIA,CAAC,CAACM,KAAK,CAACC,EAAE,EAAIR,WAAW,CAACQ,EAAE,CAAC,EAAKH,KAAK,CAACC,OAAO,CAACE,EAAE,CAAC,EAAIA,EAAE,CAACD,KAAK,CAACP,WAAW,CAAE,CAAE,CAExG,CAQA,KAAM,CAAAS,cAA0B,CAAG,CAAEC,KAAK,CAAE,KAAK,CAAEC,WAAW,CAAEP,SAAS,CAAEQ,IAAI,CAAER,SAAU,CAAC,CAE5F;AACA,MAAO,MAAM,CAAAS,YAA6B,CAAG,CAC3CC,cAAc,CAAEC,QAClB,CAAC,CAED,MAAO,SAAS,CAAAC,iBAAiBA,CAAA,CAE/B,CACA,KAAM,CAAAC,QAAQ,CAAG1B,WAAW,CAAc,CAAC,CAC3C,KAAM,CAAA2B,eAAe,CAAG5B,WAAW,CAChC6B,OAAW,EAAK,CACf;AACA;AACA;AACAF,QAAQ,CAACrB,aAAa,CAAC,CAAEuB,OAAQ,CAAC,CAAC,CAAC,CACtC,CAAC,CACD,CAACF,QAAQ,CACX,CAAC,CAED,MAAO,CACLC,eACF,CAAC,CACH,CAEA;AACA,QAAS,CAAAE,YAAYA,CAACC,KAA2B,CAAEC,OAAyB,CAAEC,WAAgB,CAAgB,CAC5G,KAAM,CAAEJ,OAAQ,CAAC,CAAG1B,kBAAkB,CAAC,CAAC,CACxC,KAAM,CAACyB,eAAe,CAAC,CAAGF,iBAAiB,CAAC,CAAC,CAC7C,KAAM,CAAAQ,UAAU,CAAGD,WAAW,CAAGA,WAAW,CAAGJ,OAAO,CACtD,KAAM,CAAAM,WAAW,CAAGjC,WAAW,CAAiDkC,KAAK,EAAIA,KAAK,CAACC,SAAS,CAACF,WAAW,CAAC,CACrH,KAAM,CAAAR,QAAQ,CAAG1B,WAAW,CAAc,CAAC,CAE3C,KAAM,CAAAqC,kBAA0B,CAAGvC,OAAO,CACxC,SAAAwC,qBAAA,CAAAC,aAAA,CAAAC,iBAAA,OACE,CAAAC,IAAI,CAACC,SAAS,EAAAJ,qBAAA,CACZR,KAAK,SAALA,KAAK,kBAAAS,aAAA,CAALT,KAAK,CACDa,MAAM,CAAEC,CAAC,EAAgBC,OAAO,CAACD,CAAC,CAAC,CAAC,UAAAL,aAAA,kBAAAC,iBAAA,CADxCD,aAAA,CAEIO,GAAG,CAACtC,SAAS,CAAC,UAAAgC,iBAAA,iBAFlBA,iBAAA,CAGIO,IAAI,CAAC,CAAC,UAAAT,qBAAA,UAAAA,qBAAA,CAAI,EAChB,CAAC,GACH,CAACR,KAAK,CACR,CAAC,CAEDjC,SAAS,CAAC,IAAM,CACd8B,eAAe,CAACM,UAAU,CAAC,CAC7B,CAAC,CAAE,CAACA,UAAU,CAAC,CAAC,CAChB;AACApC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAmD,QAAkB,CAAGP,IAAI,CAACQ,KAAK,CAACZ,kBAAkB,CAAC,CACzD,GAAI,CAACJ,UAAU,EAAIe,QAAQ,CAACE,MAAM,GAAK,CAAC,CAAE,MAAO,CAAArC,SAAS,CAC1D,KAAM,CAAAiB,KAAK,CAAGkB,QAAQ,CAACF,GAAG,CAACK,GAAG,EAAI5C,YAAY,CAAC4C,GAAG,CAAC,CAAC,CACpD;AACA;AACA;AACAzB,QAAQ,CACNtB,qBAAqB,CAAC,CACpBwB,OAAO,CAAEK,UAAU,CACnBH,KAAK,CACLC,OACF,CAAC,CACH,CAAC,CAED,MAAO,IAAM,CACXL,QAAQ,CACNpB,wBAAwB,CAAC,CACvBsB,OAAO,CAAEK,UAAU,CACnBH,KAAK,CACLC,OACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CAAE,CAACH,OAAO,CAAEF,QAAQ,CAAEK,OAAO,CAAEM,kBAAkB,CAAC,CAAC,CAEpD,MAAO,CAAAvC,OAAO,CACZ,IACEgC,KAAK,CAACgB,GAAG,CAAaM,IAAI,EAAI,KAAAC,qBAAA,CAC5B,GAAI,CAACpB,UAAU,EAAI,CAACmB,IAAI,CAAE,MAAO,CAAAlC,cAAc,CAE/C,KAAM,CAAAoC,MAAM,EAAAD,qBAAA,CAAGnB,WAAW,CAACD,UAAU,CAAC,UAAAoB,qBAAA,iBAAvBA,qBAAA,CAA0B7C,SAAS,CAAC4C,IAAI,CAAC,CAAC,CACzD,GAAI,CAAA/B,IAAI,CACR,GAAI,CAAAiC,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEjC,IAAI,GAAI,CAAAiC,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEjC,IAAI,IAAK,IAAI,CAAE,CACzCA,IAAI,CAAGiC,MAAM,CAACjC,IAAI,CACpB,CAEA,MAAO,CAAEF,KAAK,CAAE,IAAI,CAAEE,IAAI,CAAED,WAAW,CAAEkC,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAElC,WAAY,CAAC,CAChE,CAAC,CAAC,CACJ,CAACc,WAAW,CAAEJ,KAAK,CAAEG,UAAU,CACjC,CAAC,CACH,CAcA,KAAM,CAAAsB,kBAA6B,CAAG,CAAEpC,KAAK,CAAE,KAAK,CAAEmC,MAAM,CAAEzC,SAAS,CAAE2C,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,KAAM,CAAC,CACvH,KAAM,CAAAC,kBAA6B,CAAG,CAAExC,KAAK,CAAE,IAAI,CAAEmC,MAAM,CAAEzC,SAAS,CAAE2C,OAAO,CAAE,IAAI,CAAEC,OAAO,CAAE,IAAI,CAAEC,KAAK,CAAE,KAAM,CAAC,CAEpH,QAAS,CAAAE,WAAWA,CAClBC,UAAkC,CAClCC,iBAAwC,CACxCC,QAAsC,CACtCC,iBAAqC,CAC1B,CACX,GAAI,CAACH,UAAU,CAAE,MAAO,CAAAN,kBAAkB,CAC1C,KAAM,CAAEpC,KAAK,CAAEE,IAAI,CAAED,WAAY,CAAC,CAAGyC,UAAU,CAC/C,GAAI,CAAC1C,KAAK,CAAE,MAAO,CAAAoC,kBAAkB,CACrC,GAAIpC,KAAK,EAAI,CAACC,WAAW,CAAE,MAAO,CAAAuC,kBAAkB,CACpD,GAAI,CAACG,iBAAiB,EAAI,CAACC,QAAQ,EAAI,CAACC,iBAAiB,CAAE,MAAO,CAAAL,kBAAkB,CACpF,KAAM,CAAAM,OAAO,CAAG5C,IAAI,EAAIA,IAAI,CAAC6B,MAAM,CAAG,CAAC,CACvC,KAAM,CAAAO,OAAO,CAAG,CAACrC,WAAW,SAAXA,WAAW,UAAXA,WAAW,CAAI,CAAC,EAAI4C,iBAAiB,CACtD,GAAI,CAAAV,MAA0B,CAAGzC,SAAS,CAC1C,GAAIoD,OAAO,EAAI5C,IAAI,CAAE,CACnB,GAAI,CACFiC,MAAM,CAAGQ,iBAAiB,CAACI,oBAAoB,CAACH,QAAQ,CAAE1C,IAAI,CAAC,CACjE,CAAE,MAAOqC,KAAK,CAAE,CACdS,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAEL,QAAQ,CAAE1C,IAAI,CAAC,CAC3D,MAAO,CACLF,KAAK,CAAE,IAAI,CACXqC,OAAO,CAAE,KAAK,CACdE,KAAK,CAAE,IAAI,CACXD,OAAO,CACPH,MACF,CAAC,CACH,CACF,CACA,MAAO,CACLnC,KAAK,CAAE,IAAI,CACXqC,OAAO,CAAE,KAAK,CACdC,OAAO,CACPH,MAAM,CAAEA,MAAM,CACdI,KAAK,CAAE,CAACO,OACV,CAAC,CACH,CAEA,MAAO,SAAS,CAAAI,6BAA6BA,CAC3CC,QAAqC,CACrCC,UAAkB,CAClBC,UAAkC,CAClCzC,OAAyB,CACzBH,OAAa,CACA,CACb,KAAM,CAAAmC,QAAQ,CAAGjE,OAAO,CAAC,SAAA2E,mBAAA,OAAM,CAAAH,QAAQ,SAARA,QAAQ,kBAAAG,mBAAA,CAARH,QAAQ,CAAEI,SAAS,UAAAD,mBAAA,iBAAnBA,mBAAA,CAAqBE,WAAW,CAACJ,UAAU,CAAC,GAAE,CAACD,QAAQ,CAAEC,UAAU,CAAC,CAAC,CAEpG,KAAM,CAAAzC,KAAK,CAAGhC,OAAO,CACnB,IACEwE,QAAQ,EAAIP,QAAQ,EAAIS,UAAU,EAAIA,UAAU,CAACtB,MAAM,CAAG,CAAC,CACvDsB,UAAU,CAAC1B,GAAG,CAAO8B,MAAM,EAAI,CAC7B,MAAO,CACLC,OAAO,CAAEP,QAAQ,CAACO,OAAO,CACzBC,QAAQ,CAAER,QAAQ,CAACI,SAAS,CAACK,kBAAkB,CAAChB,QAAQ,CAAEa,MAAM,CAClE,CAAC,CACH,CAAC,CAAC,CACF,EAAE,CACR,CAACJ,UAAU,CAAEF,QAAQ,CAAEP,QAAQ,CACjC,CAAC,CACD,KAAM,CAAAiB,OAAO,CAAGnD,YAAY,CAACC,KAAK,CAAEC,OAAO,CAAEH,OAAO,CAAC,CAC7C;AACR,KAAM,CAAAoC,iBAAiB,CAAG7D,cAAc,CAAC,CAAC,CAE1C,MAAO,CAAAL,OAAO,CAAC,IAAM,CACnB,MAAO,CAAAkF,OAAO,CAAClC,GAAG,CAACQ,MAAM,EAAIM,WAAW,CAACN,MAAM,CAAEgB,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEI,SAAS,CAAEX,QAAQ,CAAEC,iBAAiB,CAAC,CAAC,CACrG,CAAC,CAAE,CAACD,QAAQ,CAAEO,QAAQ,CAAEU,OAAO,CAAEhB,iBAAiB,CAAC,CAAC,CACtD,CAEA,MAAO,SAAS,CAAAiB,6BAA6BA,CAC3CC,SAAiC,CACjCpB,iBAA4B,CAC5BS,UAAkB,CAClBC,UAAiC,CACjCzC,OAAyB,CACzBH,OAAa,CACA,CACb,KAAM,CAAAmC,QAAQ,CAAGjE,OAAO,CAAC,IAAMgE,iBAAiB,CAACa,WAAW,CAACJ,UAAU,CAAC,CAAE,CAACT,iBAAiB,CAAES,UAAU,CAAC,CAAC,CAC1G;AACA,KAAM,CAAAO,QAA4B,CAAGhF,OAAO,CAC1C,IACEiE,QAAQ,EAAInD,iBAAiB,CAAC4D,UAAU,CAAC,CACrCV,iBAAiB,CAACiB,kBAAkB,CAAChB,QAAQ,CAAES,UAAU,CAAC,CAC1D3D,SAAS,CACf,CAAC2D,UAAU,CAAEV,iBAAiB,CAAEC,QAAQ,CAC1C,CAAC,CACC;AACA;AACA;AACA;AACA;AACF,KAAM,CAAAjC,KAAK,CAAGhC,OAAO,CACnB,IACEiE,QAAQ,EAAImB,SAAS,EAAIA,SAAS,CAAChC,MAAM,CAAG,CAAC,EAAI4B,QAAQ,CACrDI,SAAS,CAACpC,GAAG,CAAmB+B,OAAO,EAAI,CACzC,MAAO,CAAAA,OAAO,EAAIC,QAAQ,CACtB,CACED,OAAO,CACPC,QACF,CAAC,CACDjE,SAAS,CACf,CAAC,CAAC,CACF,EAAE,CACR,CAACqE,SAAS,CAAEJ,QAAQ,CAAEf,QAAQ,CAChC,CAAC,CACO;AACR,KAAM,CAAAiB,OAAO,CAAGnD,YAAY,CAACC,KAAK,CAAEC,OAAO,CAAEH,OAAO,CAAC,CACrD;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAoC,iBAAiB,CAAG7D,cAAc,CAAC,CAAC,CAE1C,MAAO,CAAAL,OAAO,CAAC,IAAM,CACnB,MAAO,CAAAkF,OAAO,CAAClC,GAAG,CAACQ,MAAM,EAAIM,WAAW,CAACN,MAAM,CAAEQ,iBAAiB,CAAEC,QAAQ,CAAEC,iBAAiB,CAAC,CAAC,CACnG,CAAC,CAAE,CAACD,QAAQ,CAAEiB,OAAO,CAAElB,iBAAiB,CAAEE,iBAAiB,CAAC,CAAC,CAC/D,CAEA,MAAO,SAAS,CAAAmB,mBAAmBA,CACjCb,QAAqC,CACrCC,UAAkB,CAClBK,MAA6B,CAC7B7C,OAAyB,CACzBH,OAAa,CACF,CACX,KAAM,CAAAmC,QAAQ,CAAGjE,OAAO,CAAC,SAAAsF,oBAAA,OAAM,CAAAd,QAAQ,SAARA,QAAQ,kBAAAc,oBAAA,CAARd,QAAQ,CAAEI,SAAS,UAAAU,oBAAA,iBAAnBA,oBAAA,CAAqBT,WAAW,CAACJ,UAAU,CAAC,GAAE,CAACD,QAAQ,CAAEC,UAAU,CAAC,CAAC,CAEpG,KAAM,CAAAzC,KAAK,CAAGhC,OAAO,CAAS,IAAM,CAClC,MAAO,CAAAwE,QAAQ,EAAIP,QAAQ,EAAInD,iBAAiB,CAACgE,MAAM,CAAC,CACpD,CACE,CACEC,OAAO,CAAEP,QAAQ,CAACO,OAAO,CACzBC,QAAQ,CAAER,QAAQ,CAACI,SAAS,CAACK,kBAAkB,CAAChB,QAAQ,CAAEa,MAAM,CAClE,CAAC,CACF,CACD,EAAE,CACR,CAAC,CAAE,CAACN,QAAQ,CAAEP,QAAQ,CAAEa,MAAM,CAAC,CAAC,CAEhC,KAAM,CAAAtB,MAAM,CAAGzB,YAAY,CAACC,KAAK,CAAEC,OAAO,CAAEH,OAAO,CAAC,CAAC,CAAC,CAAC,CACvD,KAAM,CAAAoC,iBAAiB,CAAG7D,cAAc,CAAC,CAAC,CAE1C,MAAO,CAAAL,OAAO,CAAC,IAAM,CACnB,MAAO,CAAA8D,WAAW,CAACN,MAAM,CAAEgB,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEI,SAAS,CAAEX,QAAQ,CAAEC,iBAAiB,CAAC,CAC9E,CAAC,CAAE,CAACV,MAAM,CAAEgB,QAAQ,CAAEP,QAAQ,CAAEC,iBAAiB,CAAC,CAAC,CACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}