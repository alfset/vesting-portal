{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nexport function useSafeAppConnection(connector) {\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    connector.isSafeApp().then(loadedInSafe => {\n      if (loadedInSafe) {\n        // On success active flag will change and in that case we'll set tried to true, check the hook below\n        activate(connector, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate, connector]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    console.log(active);\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\nexport function useIsSafeAppConnection() {\n  const {\n    connector\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    if (connector === null || connector === void 0 ? void 0 : connector.isSafeApp) {\n      connector.isSafeApp().then(loadedInSafe => {\n        console.log(loadedInSafe);\n        if (loadedInSafe) {\n          // On success active flag will change and in that case we'll set tried to true, check the hook below\n          setTried(true);\n        }\n      });\n    }\n  }, [connector]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  return tried;\n}","map":{"version":3,"names":["useEffect","useState","useWeb3React","useSafeAppConnection","connector","activate","active","tried","setTried","isSafeApp","then","loadedInSafe","undefined","catch","console","log","useIsSafeAppConnection"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/connectors/gnosis-safe/hooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core'\nimport {SafeAppConnector} from './index'\n\nexport function useSafeAppConnection(connector: SafeAppConnector): boolean {\n  const { activate, active } = useWeb3React();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    connector.isSafeApp().then((loadedInSafe) => {\n      if (loadedInSafe) {\n        // On success active flag will change and in that case we'll set tried to true, check the hook below\n        activate(connector, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate, connector]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    console.log(active)\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n\n  return tried;\n}\n\nexport function useIsSafeAppConnection(): boolean {\n  const { connector }: any = useWeb3React();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (connector?.isSafeApp) {\n\n      connector.isSafeApp().then((loadedInSafe:any) => {\n        console.log(loadedInSafe)\n        if (loadedInSafe) {\n          // On success active flag will change and in that case we'll set tried to true, check the hook below\n          setTried(true);\n        }\n      });\n    }\n  }, [connector]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  return tried;\n}"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,kBAAkB;AAG/C,OAAO,SAASC,oBAAoBA,CAACC,SAA2B,EAAW;EACzE,MAAM;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAGJ,YAAY,CAAC,CAAC;EAC3C,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACdI,SAAS,CAACK,SAAS,CAAC,CAAC,CAACC,IAAI,CAAEC,YAAY,IAAK;MAC3C,IAAIA,YAAY,EAAE;QAChB;QACAN,QAAQ,CAACD,SAAS,EAAEQ,SAAS,EAAE,IAAI,CAAC,CAACC,KAAK,CAAC,MAAM;UAC/CL,QAAQ,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLA,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACH,QAAQ,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE3B;EACAJ,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;IACnB,IAAIA,MAAM,EAAE;MACVE,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC;EAEZ,OAAOC,KAAK;AACd;AAEA,OAAO,SAASS,sBAAsBA,CAAA,EAAY;EAChD,MAAM;IAAEZ;EAAe,CAAC,GAAGF,YAAY,CAAC,CAAC;EACzC,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACd,IAAII,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,SAAS,EAAE;MAExBL,SAAS,CAACK,SAAS,CAAC,CAAC,CAACC,IAAI,CAAEC,YAAgB,IAAK;QAC/CG,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;QACzB,IAAIA,YAAY,EAAE;UAChB;UACAH,QAAQ,CAAC,IAAI,CAAC;QAChB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,OAAOG,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}