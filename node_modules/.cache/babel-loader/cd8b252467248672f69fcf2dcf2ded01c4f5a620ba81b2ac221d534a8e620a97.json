{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.anyToSinglePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst keys_1 = require(\"cosmjs-types/cosmos/crypto/ed25519/keys\");\nconst keys_2 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\nconst keys_3 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\n/**\n * Takes a pubkey in the Amino JSON object style (type/value wrapper)\n * and convertes it into a protobuf `Any`.\n *\n * This is the reverse operation to `decodePubkey`.\n */\nfunction encodePubkey(pubkey) {\n  if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n    const pubkeyProto = keys_3.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_3.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isEd25519Pubkey)(pubkey)) {\n    const pubkeyProto = keys_1.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.ed25519.PubKey\",\n      value: Uint8Array.from(keys_1.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n    const pubkeyProto = keys_2.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_2.LegacyAminoPubKey.encode(pubkeyProto).finish())\n    });\n  } else {\n    throw new Error(\"Pubkey type \".concat(pubkey.type, \" not recognized\"));\n  }\n}\nexports.encodePubkey = encodePubkey;\n/**\n * Decodes a single pubkey (i.e. not a multisig pubkey) from `Any` into\n * `SinglePubkey`.\n *\n * In most cases you probably want to use `decodePubkey`, but `anyToSinglePubkey`\n * might be preferred in CosmJS 0.29.x due to https://github.com/cosmos/cosmjs/issues/1289.\n */\nfunction anyToSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        const {\n          key\n        } = keys_3.PubKey.decode(pubkey.value);\n        return (0, amino_1.encodeSecp256k1Pubkey)(key);\n      }\n    case \"/cosmos.crypto.ed25519.PubKey\":\n      {\n        const {\n          key\n        } = keys_1.PubKey.decode(pubkey.value);\n        return (0, amino_1.encodeEd25519Pubkey)(key);\n      }\n    default:\n      throw new Error(\"Pubkey type_url \".concat(pubkey.typeUrl, \" not recognized as single public key type\"));\n  }\n}\nexports.anyToSinglePubkey = anyToSinglePubkey;\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n    case \"/cosmos.crypto.ed25519.PubKey\":\n      {\n        return anyToSinglePubkey(pubkey);\n      }\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        const {\n          threshold,\n          publicKeys\n        } = keys_2.LegacyAminoPubKey.decode(pubkey.value);\n        const out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(anyToSinglePubkey)\n          }\n        };\n        return out;\n      }\n    default:\n      throw new Error(\"Pubkey type_url \".concat(pubkey.typeUrl, \" not recognized\"));\n  }\n}\nexports.decodePubkey = decodePubkey;","map":{"version":3,"names":["amino_1","require","encoding_1","math_1","keys_1","keys_2","keys_3","any_1","encodePubkey","pubkey","isSecp256k1Pubkey","pubkeyProto","PubKey","fromPartial","key","fromBase64","value","Any","typeUrl","Uint8Array","from","encode","finish","isEd25519Pubkey","isMultisigThresholdPubkey","LegacyAminoPubKey","threshold","Uint53","fromString","toNumber","publicKeys","pubkeys","map","Error","concat","type","exports","anyToSinglePubkey","decode","encodeSecp256k1Pubkey","encodeEd25519Pubkey","decodePubkey","out","toString"],"sources":["../src/pubkey.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}