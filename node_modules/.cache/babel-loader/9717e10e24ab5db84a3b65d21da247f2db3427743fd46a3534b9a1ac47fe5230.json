{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\nimport React, { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\n// import styled from 'styled-components'\n// import { useTranslation } from 'react-i18next'\n\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport { useSafeAppConnection } from '../../connectors/gnosis-safe/hooks';\nimport { gnosissafe } from '../../connectors';\n// import Loader from '../Loader'\n\n// const MessageWrapper = styled.div`\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   height: 20rem;\n// `\n\n// const Message = styled.h2`\n//   color: ${({ theme }) => theme.secondary1};\n// `\n\nexport default function Web3ReactManager(_ref) {\n  let {\n    children\n  } = _ref;\n  // const { t } = useTranslation()\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(NetworkContextName);\n  // console.log(active)\n  // console.log(networkActive)\n  // 尝试急切地连接到注入的提供者（如果它存在并且已经授予访问权限）\n  const triedEager = useEagerConnect();\n  const triedToConnectToSafe = useSafeAppConnection(gnosissafe);\n\n  // 在急切地尝试注入后，如果网络连接从未处于活动状态或处于错误状态，请激活itd\n  useEffect(() => {\n    if (!networkActive && !networkError && !active) {\n      if (triedToConnectToSafe) {\n        console.log(1);\n        activateNetwork(gnosissafe);\n      } else if (triedEager) {\n        console.log(2);\n        activateNetwork(network);\n      }\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active, triedToConnectToSafe, gnosissafe]);\n  // }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // 当没有连接帐户时，对注入的提供程序（如果存在）上的登录（广义地说）作出反应\n  useInactiveListener(!triedEager);\n\n  // handle delayed loader state\n  // const [showLoader, setShowLoader] = useState(false)\n  // useEffect(() => {\n  //   const timeout = setTimeout(() => {\n  //     setShowLoader(true)\n  //   }, 600)\n\n  //   return () => {\n  //     clearTimeout(timeout)\n  //   }\n  // }, [])\n\n  // 在页面加载时，在尝试连接到注入的连接器之前，不要执行任何操作\n  // if (!triedEager) {\n  //   return null\n  // }\n\n  // 如果帐户上下文未处于活动状态，并且网络上下文中存在错误，则这是一个无法恢复的错误\n  // if (!active && networkError) {\n  //   return (\n  //     <MessageWrapper>\n  //       <Message>{t('unknownError')}</Message>\n  //     </MessageWrapper>\n  //   )\n  // }\n\n  // 如果两个上下文都不活动，请旋转\n  // if (!active && !networkActive) {\n  //   return showLoader ? (\n  //     <MessageWrapper>\n  //       <Loader />\n  //     </MessageWrapper>\n  //   ) : null\n  // }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}","map":{"version":3,"names":["React","useEffect","useWeb3React","network","useEagerConnect","useInactiveListener","NetworkContextName","useSafeAppConnection","gnosissafe","Web3ReactManager","_ref","children","active","networkActive","error","networkError","activate","activateNetwork","triedEager","triedToConnectToSafe","console","log","createElement","Fragment"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/components/Web3ReactManager/index.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\nimport React, { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n// import styled from 'styled-components'\n// import { useTranslation } from 'react-i18next'\n\nimport { network } from '../../connectors'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\nimport { NetworkContextName } from '../../constants'\n\nimport {useSafeAppConnection} from '../../connectors/gnosis-safe/hooks'\nimport {gnosissafe} from '../../connectors'\n// import Loader from '../Loader'\n\n// const MessageWrapper = styled.div`\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   height: 20rem;\n// `\n\n// const Message = styled.h2`\n//   color: ${({ theme }) => theme.secondary1};\n// `\n\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\n  // const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n  // console.log(active)\n  // console.log(networkActive)\n  // 尝试急切地连接到注入的提供者（如果它存在并且已经授予访问权限）\n  const triedEager = useEagerConnect()\n  const triedToConnectToSafe = useSafeAppConnection(gnosissafe)\n\n  // 在急切地尝试注入后，如果网络连接从未处于活动状态或处于错误状态，请激活itd\n  useEffect(() => {\n    if (!networkActive && !networkError && !active) {\n      if (triedToConnectToSafe) {\n        console.log(1)\n        activateNetwork(gnosissafe)\n      } else if (triedEager) {\n        console.log(2)\n        activateNetwork(network)\n      }\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active, triedToConnectToSafe, gnosissafe])\n  // }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // 当没有连接帐户时，对注入的提供程序（如果存在）上的登录（广义地说）作出反应\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  // const [showLoader, setShowLoader] = useState(false)\n  // useEffect(() => {\n  //   const timeout = setTimeout(() => {\n  //     setShowLoader(true)\n  //   }, 600)\n\n  //   return () => {\n  //     clearTimeout(timeout)\n  //   }\n  // }, [])\n\n  // 在页面加载时，在尝试连接到注入的连接器之前，不要执行任何操作\n  // if (!triedEager) {\n  //   return null\n  // }\n\n  // 如果帐户上下文未处于活动状态，并且网络上下文中存在错误，则这是一个无法恢复的错误\n  // if (!active && networkError) {\n  //   return (\n  //     <MessageWrapper>\n  //       <Message>{t('unknownError')}</Message>\n  //     </MessageWrapper>\n  //   )\n  // }\n\n  // 如果两个上下文都不活动，请旋转\n  // if (!active && !networkActive) {\n  //   return showLoader ? (\n  //     <MessageWrapper>\n  //       <Loader />\n  //     </MessageWrapper>\n  //   ) : null\n  // }\n\n  return (\n    <>{children}</>\n    )\n}\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C;AACA;;AAEA,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,aAAa;AAClE,SAASC,kBAAkB,QAAQ,iBAAiB;AAEpD,SAAQC,oBAAoB,QAAO,oCAAoC;AACvE,SAAQC,UAAU,QAAO,kBAAkB;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAgBA,CAAAC,IAAA,EAA0C;EAAA,IAAzC;IAAEC;EAAoC,CAAC,GAAAD,IAAA;EAC9E;EACA,MAAM;IAAEE;EAAO,CAAC,GAAGV,YAAY,CAAC,CAAC;EACjC,MAAM;IAAEU,MAAM,EAAEC,aAAa;IAAEC,KAAK,EAAEC,YAAY;IAAEC,QAAQ,EAAEC;EAAgB,CAAC,GAAGf,YAAY,CAACI,kBAAkB,CAAC;EAClH;EACA;EACA;EACA,MAAMY,UAAU,GAAGd,eAAe,CAAC,CAAC;EACpC,MAAMe,oBAAoB,GAAGZ,oBAAoB,CAACC,UAAU,CAAC;;EAE7D;EACAP,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,aAAa,IAAI,CAACE,YAAY,IAAI,CAACH,MAAM,EAAE;MAC9C,IAAIO,oBAAoB,EAAE;QACxBC,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;QACdJ,eAAe,CAACT,UAAU,CAAC;MAC7B,CAAC,MAAM,IAAIU,UAAU,EAAE;QACrBE,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;QACdJ,eAAe,CAACd,OAAO,CAAC;MAC1B;IACF;EACF,CAAC,EAAE,CAACe,UAAU,EAAEL,aAAa,EAAEE,YAAY,EAAEE,eAAe,EAAEL,MAAM,EAAEO,oBAAoB,EAAEX,UAAU,CAAC,CAAC;EACxG;;EAEA;EACAH,mBAAmB,CAAC,CAACa,UAAU,CAAC;;EAEhC;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACElB,KAAA,CAAAsB,aAAA,CAAAtB,KAAA,CAAAuB,QAAA,QAAGZ,QAAW,CAAC;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}