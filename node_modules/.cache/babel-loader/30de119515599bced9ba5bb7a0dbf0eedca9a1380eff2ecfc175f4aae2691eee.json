{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useWallet,ConnectType}from'@terra-money/wallet-provider';// import { useWallet as useSolWallet } from '@solana/wallet-adapter-react';\n// import { useDispatch } from 'react-redux'\n// import { setOpenModal, ApplicationModal } from '../state/application/actions'\nimport{useWalletModalToggle}from'../state/application/hooks';// import { AppDispatch } from '../state/index'\nimport{useUserSelectChainId}from'../state/user/hooks';import{ChainId}from'../config/chainConfig/chainId';import config from'../config';import{useActiveReact}from'./useActiveReact';import{useLogin}from'../nonevm/near';import{connectXlmWallet}from'../nonevm/stellar';import{useLoginTrx}from'../nonevm/trx';import{useAdaLogin}from'../nonevm/cardano';import{useLoginFlow}from'../nonevm/flow';import{useLoginAptos}from'../nonevm/apt';import{useLoginBtc}from'../nonevm/btc';import{useLoginAtom}from'../nonevm/atom';import{useLoginSol}from'../nonevm/solana';import{useNasLogin}from'../nonevm/nas';export function useConnectWallet(){const{account}=useActiveReact();// const dispatch = useDispatch<AppDispatch>()\nconst{selectNetworkInfo}=useUserSelectChainId();const toggleWalletModal=useWalletModalToggle();const{connect}=useWallet();const{login}=useLogin();const{loginXlm}=connectXlmWallet();const{loginTrx}=useLoginTrx();const loginAda=useAdaLogin();const{loginFlow}=useLoginFlow();const{loginAptos}=useLoginAptos();const{loginBtc}=useLoginBtc();const{loginAtom}=useLoginAtom();const{loginSol}=useLoginSol();const{loginNas}=useNasLogin();const useChainId=useMemo(()=>{return selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.chainId;},[selectNetworkInfo]);// const {publicKey} = useSolWallet()\n// console.log(selectNetworkInfo)\nreturn useCallback(()=>{var _config$chainInfo,_config$chainInfo$use;if(useChainId===ChainId.TERRA){if(connect){try{// connect(ConnectType.CHROME_EXTENSION)\nif(!account){connect(ConnectType.CHROME_EXTENSION);}else{toggleWalletModal();// dispatch(setOpenModal(ApplicationModal.WALLET))\n}}catch(error){alert('Please install Terra Station!');}}else{alert('Please install Terra Station!');}}else if([ChainId.BTC,ChainId.BTC_TEST].includes(useChainId)&&(config===null||config===void 0?void 0:(_config$chainInfo=config.chainInfo)===null||_config$chainInfo===void 0?void 0:(_config$chainInfo$use=_config$chainInfo[useChainId])===null||_config$chainInfo$use===void 0?void 0:_config$chainInfo$use.chainType)!=='NOWALLET'){if(!account){loginBtc(useChainId);}else{toggleWalletModal();// dispatch(setOpenModal(ApplicationModal.WALLET))\n}}else if(useChainId===ChainId.NAS){if(!account){loginNas(useChainId);}else{toggleWalletModal();// dispatch(setOpenModal(ApplicationModal.WALLET))\n}}else if([ChainId.NEAR,ChainId.NEAR_TEST].includes(useChainId)){if(!account){login();}else{toggleWalletModal();// dispatch(setOpenModal(ApplicationModal.WALLET))\n}}else if([ChainId.XLM,ChainId.XLM_TEST].includes(useChainId)){if(!account){loginXlm();}else{toggleWalletModal();// dispatch(setOpenModal(ApplicationModal.WALLET))\n}}else if([ChainId.TRX,ChainId.TRX_TEST].includes(useChainId)){if(!account){loginTrx();}else{toggleWalletModal();}}else if([ChainId.ADA,ChainId.ADA_TEST].includes(useChainId)){if(!account){loginAda();}else{toggleWalletModal();}}else if([ChainId.FLOW,ChainId.FLOW_TEST].includes(useChainId)){if(!account){loginFlow();}else{toggleWalletModal();}}else if([ChainId.APT,ChainId.APT_TEST].includes(useChainId)){if(!account){loginAptos(useChainId);}else{toggleWalletModal();}}else if([ChainId.ATOM_SEI,ChainId.ATOM_SEI_TEST,ChainId.ATOM_DCORE,ChainId.ATOM_DCORE_TEST].includes(useChainId)){if(!account){loginAtom(useChainId);}else{toggleWalletModal();}}else if([ChainId.SOL,ChainId.SOL_TEST].includes(useChainId)){if(!account){loginSol();}else{toggleWalletModal();}}else{toggleWalletModal();}},[useChainId,toggleWalletModal,account]);}export function useLogoutWallet(){const{selectNetworkInfo}=useUserSelectChainId();const{logoutFlow}=useLoginFlow();const{logoutNear}=useLogin();const useChainId=useMemo(()=>{return selectNetworkInfo===null||selectNetworkInfo===void 0?void 0:selectNetworkInfo.chainId;},[selectNetworkInfo]);const logoutWallet=useCallback(()=>{if([ChainId.FLOW,ChainId.FLOW_TEST].includes(useChainId)){logoutFlow();}else if(ChainId.NEAR,ChainId.NEAR_TEST){logoutNear();}},[useChainId]);const isSupportLogout=useMemo(()=>{if([ChainId.FLOW,ChainId.FLOW_TEST,ChainId.NEAR,ChainId.NEAR_TEST].includes(useChainId)){return true;}return false;},[useChainId]);return{logoutWallet,isSupportLogout};}","map":{"version":3,"names":["useCallback","useMemo","useWallet","ConnectType","useWalletModalToggle","useUserSelectChainId","ChainId","config","useActiveReact","useLogin","connectXlmWallet","useLoginTrx","useAdaLogin","useLoginFlow","useLoginAptos","useLoginBtc","useLoginAtom","useLoginSol","useNasLogin","useConnectWallet","account","selectNetworkInfo","toggleWalletModal","connect","login","loginXlm","loginTrx","loginAda","loginFlow","loginAptos","loginBtc","loginAtom","loginSol","loginNas","useChainId","chainId","_config$chainInfo","_config$chainInfo$use","TERRA","CHROME_EXTENSION","error","alert","BTC","BTC_TEST","includes","chainInfo","chainType","NAS","NEAR","NEAR_TEST","XLM","XLM_TEST","TRX","TRX_TEST","ADA","ADA_TEST","FLOW","FLOW_TEST","APT","APT_TEST","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","SOL","SOL_TEST","useLogoutWallet","logoutFlow","logoutNear","logoutWallet","isSupportLogout"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useWallet.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport { useWallet, ConnectType } from '@terra-money/wallet-provider'\n// import { useWallet as useSolWallet } from '@solana/wallet-adapter-react';\n// import { useDispatch } from 'react-redux'\n// import { setOpenModal, ApplicationModal } from '../state/application/actions'\nimport { useWalletModalToggle } from '../state/application/hooks'\n// import { AppDispatch } from '../state/index'\nimport { useUserSelectChainId } from '../state/user/hooks'\n\nimport { ChainId } from '../config/chainConfig/chainId'\nimport config from '../config'\n\nimport {useActiveReact} from './useActiveReact'\nimport {useLogin} from '../nonevm/near'\nimport {connectXlmWallet} from '../nonevm/stellar'\nimport {useLoginTrx} from '../nonevm/trx'\nimport {useAdaLogin} from '../nonevm/cardano'\nimport {useLoginFlow} from '../nonevm/flow'\nimport {useLoginAptos} from '../nonevm/apt'\nimport {useLoginBtc} from '../nonevm/btc'\nimport {useLoginAtom} from '../nonevm/atom'\nimport {useLoginSol} from '../nonevm/solana'\nimport {useNasLogin} from '../nonevm/nas'\n\nexport function useConnectWallet () {\n  const {account} = useActiveReact()\n  // const dispatch = useDispatch<AppDispatch>()\n  const {selectNetworkInfo} = useUserSelectChainId()\n  const toggleWalletModal = useWalletModalToggle()\n  const { connect } = useWallet()\n  const {login} = useLogin()\n  const {loginXlm} = connectXlmWallet()\n  const {loginTrx} = useLoginTrx()\n  const loginAda = useAdaLogin()\n  const {loginFlow} = useLoginFlow()\n  const {loginAptos} = useLoginAptos()\n  const {loginBtc} = useLoginBtc()\n  const {loginAtom} = useLoginAtom()\n  const {loginSol} = useLoginSol()\n  const {loginNas} = useNasLogin()\n\n  const useChainId = useMemo(() => {\n    return selectNetworkInfo?.chainId\n  }, [selectNetworkInfo])\n  // const {publicKey} = useSolWallet()\n  // console.log(selectNetworkInfo)\n  return useCallback(() => {\n    if (useChainId === ChainId.TERRA) {\n      if (connect) {\n        try {\n          // connect(ConnectType.CHROME_EXTENSION)\n          if (!account) {\n            connect(ConnectType.CHROME_EXTENSION)\n          } else {\n            toggleWalletModal()\n            // dispatch(setOpenModal(ApplicationModal.WALLET))\n          }\n        } catch (error) {\n          alert('Please install Terra Station!')\n        }\n      } else {\n        alert('Please install Terra Station!')\n      }\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(useChainId) && config?.chainInfo?.[useChainId]?.chainType !== 'NOWALLET') {\n      if (!account) {\n        loginBtc(useChainId)\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if (useChainId === ChainId.NAS) {\n      if (!account) {\n        loginNas(useChainId)\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ( [ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId) ) {\n      if (!account) {\n        login()\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(useChainId)) {\n      if (!account) {\n        loginXlm()\n      } else {\n        toggleWalletModal()\n        // dispatch(setOpenModal(ApplicationModal.WALLET))\n      }\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(useChainId)) {\n      if (!account) {\n        loginTrx()\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAda()\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      if (!account) {\n        loginFlow()\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAptos(useChainId)\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(useChainId)) {\n      if (!account) {\n        loginAtom(useChainId)\n      } else {\n        toggleWalletModal()\n      }\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(useChainId)) {\n      if (!account) {\n        loginSol()\n      } else {\n        toggleWalletModal()\n      }\n    } else {\n      toggleWalletModal()\n    }\n  }, [useChainId, toggleWalletModal, account])\n}\n\nexport function useLogoutWallet () {\n  const {selectNetworkInfo} = useUserSelectChainId()\n  const {logoutFlow} = useLoginFlow()\n  const {logoutNear} = useLogin()\n  const useChainId = useMemo(() => {\n    return selectNetworkInfo?.chainId\n  }, [selectNetworkInfo])\n  const logoutWallet = useCallback(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(useChainId)) {\n      logoutFlow()\n    } else if (ChainId.NEAR, ChainId.NEAR_TEST) {\n      logoutNear()\n    }\n  }, [useChainId])\n\n  const isSupportLogout = useMemo(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST, ChainId.NEAR, ChainId.NEAR_TEST].includes(useChainId)) {\n      return true\n    }\n    return false\n  }, [useChainId])\n\n  return {\n    logoutWallet,\n    isSupportLogout\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}