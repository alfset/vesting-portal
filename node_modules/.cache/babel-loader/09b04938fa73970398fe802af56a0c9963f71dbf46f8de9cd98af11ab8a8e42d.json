{"ast":null,"code":"import{useCallback,useMemo}from\"react\";import{useDispatch,useSelector}from'react-redux';import{useTranslation}from'react-i18next';// import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport{solAddress}from'./actions';import{useActiveReact}from'../../hooks/useActiveReact';import config from\"../../config\";// import {VALID_BALANCE} from '../../config/constant'\nimport{// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager// useUserTransactionTTL,\n// useUserSlippageTolerance\n}from'../../state/user/hooks';import{tryParseAmount3}from'../../state/swap/hooks';import{recordsTxns}from'../../utils/bridge/register';import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';import{useTokensBalance}from'../../hooks/useAllBalances';import solRouter from'./router.json';// import * as solanaWeb3 from '@solana/web3.js'\n// import * as spl from '@solana/spl-token'\n/* eslint-disable */ // eslint-disable-next-line\n// import * as anchor from '@project-serum/anchor'\nconst anchor=require('@project-serum/anchor');import*as spl from\"@solana/spl-token\";const{ASSOCIATED_TOKEN_PROGRAM_ID,TOKEN_PROGRAM_ID,Token}=spl;// console.log(getAccount )\nconst solanaWeb3=anchor.web3;const Program=anchor.Program;// const spl = new anchor.Spl()\n// const Token = anchor.Spl.token\n// console.log(anchor )\n// console.log(solanaWeb3 )\n// console.log(spl )\n// console.log(Token )\n// console.log(solanaWeb3.SystemProgram.programId )\n// console.log(AnchorProvider.env() )\n// console.log(ASSOCIATED_TOKEN_PROGRAM_ID )\n// console.log(TOKEN_PROGRAM_ID )\n/* eslint-disable */const solAddressReg=/^[0-9A-Za-z]{44}$/;export const SOLBASEADDRESS='11111111111111111111111111111111';let solId=0;// fetch('https://l2api.anyswap.exchange/v2/reswaptxns?hash=3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt&srcChainID=SOL_TEST&destChainID=5').then(res => res.json()).then(json => {console.log(json)})\n// export function getSolanaInfo(chainId:any, params:any) {\nexport function getSolanaInfo(chainId,method,params){return new Promise((resolve,reject)=>{fetch(config.chainInfo[chainId].nodeRpc,{method:'POST',headers:{'content-type':'application/json',accept:'application/json'},body:JSON.stringify({\"jsonrpc\":\"2.0\",\"id\":solId++,\"method\":method,\"params\":params})}).then(res=>res.json()).then(json=>{resolve(json);}).catch(err=>{reject(err);});});}export function isSolAddress(address){if(solAddressReg.test(address)){return address;}return false;}export function useSolAddress(){const account=useSelector(state=>state.sol.solAddress);// console.log(useWallet)\n// console.log(useConnection)\nreturn{solAddress:account};}export function useLoginSol(){const dispatch=useDispatch();const loginSol=useCallback(type=>{var _window,_window$solana;if((_window=window)===null||_window===void 0?void 0:(_window$solana=_window.solana)===null||_window$solana===void 0?void 0:_window$solana.connect){var _window2,_window2$solana;(_window2=window)===null||_window2===void 0?void 0:(_window2$solana=_window2.solana)===null||_window2$solana===void 0?void 0:_window2$solana.connect().then(res=>{if(res===null||res===void 0?void 0:res.publicKey){dispatch(solAddress({address:res.publicKey.toString()}));}}).catch(err=>{console.log(err);});}else{if(!type){if(confirm('Please open or install Solana wallet.')===true){window.open('https://phantom.app/download');}}}},[]);return{loginSol};}export function useSolCreateAccount(){const getAccount=useCallback((account,token)=>{return new Promise(async resolve=>{if(account&&token){try{const base58publicKey=new solanaWeb3.PublicKey(account);const tokenpublicKey=new solanaWeb3.PublicKey(token);const acctontToToken=await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID,TOKEN_PROGRAM_ID,tokenpublicKey,base58publicKey,true);resolve(acctontToToken);}catch(error){console.log(error);resolve('');}}else{resolve('');}});},[]);// const createAccount = useCallback(async(chainId, account, token) => {\nconst createAccount=useCallback(_ref=>{let{chainId,account,token}=_ref;return new Promise(async(resolve,rejects)=>{try{var _window3,_window3$solana,_window4,_window4$solana;// const account = '8fBfAE4gVbv253UgwkwBT5TaV5SaZ7JJWgmQoqbEEei5'\n// const t = 'GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX'\nconst tokenpublicKey=new solanaWeb3.PublicKey(token);const associatedAddress=await getAccount(account,token);const connection=new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc);const signer=await((_window3=window)===null||_window3===void 0?void 0:(_window3$solana=_window3.solana)===null||_window3$solana===void 0?void 0:_window3$solana.connect());// const token  = new Token(connection, tokenpublicKey, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, new solanaWeb3.PublicKey(account))\n// console.log(token)\n// console.log(connection)\nconsole.log(signer);const tx=new solanaWeb3.Transaction();tx.add(Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID,TOKEN_PROGRAM_ID,tokenpublicKey,associatedAddress,// new solanaWeb3.PublicKey(account),\nnew solanaWeb3.PublicKey(account),// signer?.publicKey,\nsigner===null||signer===void 0?void 0:signer.publicKey));console.log(tx);const result=await connection.getLatestBlockhash();// const result = await connection.getConfirmedBlock(blockNumber)\nconsole.log(tx);console.log(result);tx.lastValidBlockHeight=result.lastValidBlockHeight;tx.recentBlockhash=result.blockhash;tx.feePayer=new solanaWeb3.PublicKey(signer===null||signer===void 0?void 0:signer.publicKey);const tsResult=await((_window4=window)===null||_window4===void 0?void 0:(_window4$solana=_window4.solana)===null||_window4$solana===void 0?void 0:_window4$solana.signAndSendTransaction(tx));console.log(tsResult);resolve(true);}catch(error){console.log(error);rejects(error);}});},[]);const getSolAccountInfo=useCallback(_ref2=>{let{chainId,account}=_ref2;return new Promise(async resolve=>{if(chainId&&account){getSolanaInfo(chainId,'getAccountInfo',[account,{\"encoding\":\"jsonParsed\"}]).then(res=>{resolve(res);}).catch(err=>{console.log(err);resolve('');});}else{resolve('');}});},[]);const validAccount=useCallback(_ref3=>{let{chainId,account,token}=_ref3;return new Promise(async resolve=>{if(chainId&&account&&token){if(token==='native'){resolve(true);}else{const t=await getAccount(account,token);Promise.all([getSolAccountInfo({chainId,account}),getSolAccountInfo({chainId,account:t})]).then(res=>{var _caResult$result,_caResult$result$valu,_caResult$result2,_caResult$result2$val,_caResult$result2$val2,_caResult$result2$val3,_caResult$result2$val4;console.log(res);const caResult=res[0];const baResult=res[1];if((caResult===null||caResult===void 0?void 0:(_caResult$result=caResult.result)===null||_caResult$result===void 0?void 0:(_caResult$result$valu=_caResult$result.value)===null||_caResult$result$valu===void 0?void 0:_caResult$result$valu.owner)===SOLBASEADDRESS){var _baResult$result,_baResult$result$valu,_baResult$result$valu2,_baResult$result$valu3,_baResult$result$valu4;if((baResult===null||baResult===void 0?void 0:(_baResult$result=baResult.result)===null||_baResult$result===void 0?void 0:(_baResult$result$valu=_baResult$result.value)===null||_baResult$result$valu===void 0?void 0:(_baResult$result$valu2=_baResult$result$valu.data)===null||_baResult$result$valu2===void 0?void 0:(_baResult$result$valu3=_baResult$result$valu2.parsed)===null||_baResult$result$valu3===void 0?void 0:(_baResult$result$valu4=_baResult$result$valu3.info)===null||_baResult$result$valu4===void 0?void 0:_baResult$result$valu4.mint)===token){resolve(t);}else{resolve(false);}}else if((caResult===null||caResult===void 0?void 0:(_caResult$result2=caResult.result)===null||_caResult$result2===void 0?void 0:(_caResult$result2$val=_caResult$result2.value)===null||_caResult$result2$val===void 0?void 0:(_caResult$result2$val2=_caResult$result2$val.data)===null||_caResult$result2$val2===void 0?void 0:(_caResult$result2$val3=_caResult$result2$val2.parsed)===null||_caResult$result2$val3===void 0?void 0:(_caResult$result2$val4=_caResult$result2$val3.info)===null||_caResult$result2$val4===void 0?void 0:_caResult$result2$val4.mint)===token){resolve(t);}else{resolve(false);}});}}else{resolve(false);}});},[]);return{getAccount,createAccount,getSolAccountInfo,validAccount};}export function useSolBalance(){const{getAccount}=useSolCreateAccount();const getSolBalance=useCallback(_ref4=>{let{chainId,account}=_ref4;return new Promise(resolve=>{if(account){getSolanaInfo(chainId,'getBalance',[account]).then(res=>{resolve(res);}).catch(err=>{console.log(err);resolve('');});}else{resolve('');}});},[]);const getSolTokenBalance=useCallback(_ref5=>{let{chainId,account,token}=_ref5;return new Promise(async resolve=>{if(chainId&&account&&token){const acctontToToken=await getAccount(account,token);if(acctontToToken){getSolanaInfo(chainId,'getTokenAccountBalance',[acctontToToken.toBase58()]).then(res=>{resolve(res);}).catch(err=>{console.log(err);resolve('');});}else{resolve('');}}else{resolve('');}});},[]);const getSolTokenInfo=useCallback(_ref6=>{let{chainId,account}=_ref6;return new Promise(async resolve=>{if(chainId&&account){getSolanaInfo(chainId,'getAccountInfo',['GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX',{\"encoding\":\"jsonParsed\"}]).then(res=>{resolve(res);}).catch(err=>{console.log(err);resolve('');});}else{resolve('');}});},[]);return{getSolBalance,getSolTokenBalance,getSolTokenInfo};}export function useSolAllowance(token,spender,chainId,account){const setSolAllowance=useCallback(()=>{return new Promise(async(resolve,reject)=>{if(token&&spender&&account&&chainId){resolve('');}else{reject('');}});},[token,spender,account,chainId]);const getSolAllowance=useCallback(()=>{return new Promise(async resolve=>{resolve('');});},[account,chainId,token,spender]);return{setSolAllowance,getSolAllowance};}var State=/*#__PURE__*/function(State){State[\"Success\"]=\"Success\";State[\"Failure\"]=\"Failure\";State[\"Null\"]=\"Null\";return State;}(State||{});export function getSolTxnsStatus(txid,chainId){return new Promise(resolve=>{const data={msg:State.Null,info:'',error:''};if(txid){getSolanaInfo(chainId,'getTransaction',[txid,\"json\"]).then(res=>{var _res$result,_res$result$meta,_res$result$meta$stat,_res$result2,_res$result2$meta,_res$result2$meta$sta;// console.log(res)\nif((res===null||res===void 0?void 0:(_res$result=res.result)===null||_res$result===void 0?void 0:(_res$result$meta=_res$result.meta)===null||_res$result$meta===void 0?void 0:(_res$result$meta$stat=_res$result$meta.status)===null||_res$result$meta$stat===void 0?void 0:_res$result$meta$stat.Ok)===null){data.msg=State.Success;data.info=res===null||res===void 0?void 0:res.result;}else if(res===null||res===void 0?void 0:(_res$result2=res.result)===null||_res$result2===void 0?void 0:(_res$result2$meta=_res$result2.meta)===null||_res$result2$meta===void 0?void 0:(_res$result2$meta$sta=_res$result2$meta.status)===null||_res$result2$meta$sta===void 0?void 0:_res$result2$meta$sta.Err){data.msg=State.Failure;data.error='Txns is failure!';}else{data.msg=State.Null;data.error='Query is empty!';}resolve(data);}).catch(err=>{console.log(err);data.msg=State.Null;data.error='Query is empty!';resolve(data);});}});}// getSolTxnsStatus('3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt', 'SOL_TEST').then(res => {\n//   console.log(res)\n// })\nexport function useSolCrossChain(routerToken,inputToken,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,useToChainId){const{account,chainId}=useActiveReact();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const{onChangeViewDtil}=useTxnsDtilOpen();const{t}=useTranslation();const[userInterfaceBalanceValid]=useInterfaceBalanceValidManager();const addTransaction=useTransactionAdder();const{getAccount}=useSolCreateAccount();const balance=useTokensBalance(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,chainId);const inputAmount=useMemo(()=>tryParseAmount3(typedValue,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[typedValue,selectCurrency]);return useMemo(()=>{if(!chainId||!selectCurrency||!receiveAddress||!useToChainId)return{};const sufficientBalance=typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);return{balance:'',execute:(sufficientBalance||!userInterfaceBalanceValid)&&inputAmount?async()=>{try{var _window5,_window5$solana;const contract=new Program(solRouter,routerToken,config.chainInfo[chainId].nodeRpc);let routeraccount=await solanaWeb3.PublicKey.findProgramAddress([Buffer.from('Router')],new solanaWeb3.PublicKey(routerToken));routeraccount=routeraccount[0];let instruction;// console.log(contract)\n// console.log(routeraccount)\nif(destConfig.routerABI.indexOf('anySwapOutNative')!==-1){// anySwapOutNative\ninstruction=await contract.instruction.swapoutNative(receiveAddress,new anchor.BN(inputAmount),new anchor.BN(useToChainId),{accounts:{signer:account,routerAccount:routeraccount,systemProgram:solanaWeb3.SystemProgram.programId}});}else if(destConfig.routerABI.indexOf('anySwapOutUnderlying')!==-1){// anySwapOutUnderlying\nconst acctontToToken=await getAccount(account,inputToken);instruction=await contract.instruction.swapoutBurn(receiveAddress,new anchor.BN(inputAmount),new anchor.BN(useToChainId),{accounts:{signer:account,routerAccount:routeraccount,from:acctontToToken,mint:inputToken,tokenProgram:TOKEN_PROGRAM_ID}});}else if(destConfig.routerABI.indexOf('anySwapOut')!==-1){// anySwapOut\nconst acctontToToken=await getAccount(account,inputToken);const routerToToken=await getAccount(routeraccount,inputToken);instruction=await contract.instruction.swapoutTransfer(receiveAddress,new anchor.BN(inputAmount),new anchor.BN(useToChainId),{accounts:{signer:account,routerAccount:routeraccount,from:acctontToToken,to:routerToToken,mint:inputToken,tokenProgram:TOKEN_PROGRAM_ID}});}// console.log(contract)\n// console.log(instruction)\nconst connection=new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc);const result=await connection.getLatestBlockhash();// const result = await connection.getConfirmedBlock(blockNumber)\nconsole.log(result);const tx=new solanaWeb3.Transaction().add(instruction);tx.lastValidBlockHeight=result.lastValidBlockHeight;tx.recentBlockhash=result.blockhash;tx.feePayer=new solanaWeb3.PublicKey(account);console.log(tx);const tsResult=await((_window5=window)===null||_window5===void 0?void 0:(_window5$solana=_window5.solana)===null||_window5$solana===void 0?void 0:_window5$solana.signAndSendTransaction(tx));console.log(tsResult);const txReceipt={hash:tsResult.signature};if(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);// const tsResult = await window?.solana?.signTransaction(tx1)\n}}catch(error){onChangeViewErrorTip(error,true);}}:undefined,inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,account,inputAmount,balance,useToChainId,userInterfaceBalanceValid]);}// enum SwapType {\n//   withdraw = 'withdraw',\n//   deposit = 'deposit',\n// }\n// export function useSolSwapPoolCallback(\n//   routerToken: string | null | undefined,\n//   selectCurrency: string | null | undefined,\n//   inputToken: string | null | undefined,\n//   typedValue: string | null | undefined,\n//   swapType: SwapType,\n//   selectChain: string | null | undefined,\n//   receiveAddress: string | null | undefined,\n//   destConfig: any,\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n//   const { account, chainId } = useActiveReact()\n//   return useMemo(() => {\n//     return {\n//       balance: '',\n//       execute: async () => {\n//         console.log(1)\n//       },\n//       inputError: ''\n//     }\n//   }, [routerToken, inputToken, swapType, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, chainId])\n// }\n// interface PoolCalls {\n//   token: string | null | undefined,\n//   account: string | null | undefined,\n//   anytoken: string | null | undefined,\n//   dec: number\n// }\n// interface PoolResult {\n//   [key:string]: {\n//     balanceOf: string,\n//     totalSupply: string,\n//     balance: string,\n//   }\n// }\n// export function useSolPoolDatas () {\n//   const getSolPoolDatas = useCallback(async(calls: Array<[PoolCalls]>, chainId: string | null | undefined): Promise<PoolResult> => {\n//     console.log(calls)\n//     console.log(chainId)\n//     return {\n//       'anytoken': {\n//         balanceOf: '',\n//         totalSupply: '',\n//         balance: '',\n//       }\n//     }\n//   }, [])\n//   return {\n//     getSolPoolDatas\n//   }\n// }","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useTranslation","solAddress","useActiveReact","config","useInterfaceBalanceValidManager","tryParseAmount3","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","useTokensBalance","solRouter","anchor","require","spl","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","Token","solanaWeb3","web3","Program","solAddressReg","SOLBASEADDRESS","solId","getSolanaInfo","chainId","method","params","Promise","resolve","reject","fetch","chainInfo","nodeRpc","headers","accept","body","JSON","stringify","then","res","json","catch","err","isSolAddress","address","test","useSolAddress","account","state","sol","useLoginSol","dispatch","loginSol","type","_window","_window$solana","window","solana","connect","_window2","_window2$solana","publicKey","toString","console","log","confirm","open","useSolCreateAccount","getAccount","token","base58publicKey","PublicKey","tokenpublicKey","acctontToToken","getAssociatedTokenAddress","error","createAccount","_ref","rejects","_window3","_window3$solana","_window4","_window4$solana","associatedAddress","connection","Connection","signer","tx","Transaction","add","createAssociatedTokenAccountInstruction","result","getLatestBlockhash","lastValidBlockHeight","recentBlockhash","blockhash","feePayer","tsResult","signAndSendTransaction","getSolAccountInfo","_ref2","validAccount","_ref3","t","all","_caResult$result","_caResult$result$valu","_caResult$result2","_caResult$result2$val","_caResult$result2$val2","_caResult$result2$val3","_caResult$result2$val4","caResult","baResult","value","owner","_baResult$result","_baResult$result$valu","_baResult$result$valu2","_baResult$result$valu3","_baResult$result$valu4","data","parsed","info","mint","useSolBalance","getSolBalance","_ref4","getSolTokenBalance","_ref5","toBase58","getSolTokenInfo","_ref6","useSolAllowance","spender","setSolAllowance","getSolAllowance","State","getSolTxnsStatus","txid","msg","Null","_res$result","_res$result$meta","_res$result$meta$stat","_res$result2","_res$result2$meta","_res$result2$meta$sta","meta","status","Ok","Success","Err","Failure","useSolCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","onChangeViewErrorTip","onChangeViewDtil","userInterfaceBalanceValid","addTransaction","balance","decimals","inputAmount","sufficientBalance","Number","toExact","execute","_window5","_window5$solana","contract","routeraccount","findProgramAddress","Buffer","from","instruction","routerABI","indexOf","swapoutNative","BN","accounts","routerAccount","systemProgram","SystemProgram","programId","swapoutBurn","tokenProgram","routerToToken","swapoutTransfer","to","txReceipt","hash","signature","formatvalue","symbol","version","pairid","summary","concat","toChainId","toAddress","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","undefined","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/solana/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\n// import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { AppState, AppDispatch } from '../../state'\nimport {solAddress} from './actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport config from \"../../config\"\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\n\nimport {useTokensBalance} from '../../hooks/useAllBalances'\n\nimport solRouter from './router.json'\n// import * as solanaWeb3 from '@solana/web3.js'\n// import * as spl from '@solana/spl-token'\n/* eslint-disable */\n// eslint-disable-next-line\n// import * as anchor from '@project-serum/anchor'\nconst anchor = require('@project-serum/anchor')\nimport * as spl from \"@solana/spl-token\";\n\nconst { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, Token} = spl\n// console.log(getAccount )\nconst solanaWeb3 = anchor.web3\nconst Program = anchor.Program\n// const spl = new anchor.Spl()\n// const Token = anchor.Spl.token\n// console.log(anchor )\n// console.log(solanaWeb3 )\n// console.log(spl )\n// console.log(Token )\n// console.log(solanaWeb3.SystemProgram.programId )\n// console.log(AnchorProvider.env() )\n// console.log(ASSOCIATED_TOKEN_PROGRAM_ID )\n// console.log(TOKEN_PROGRAM_ID )\n/* eslint-disable */\n\nconst solAddressReg = /^[0-9A-Za-z]{44}$/\n\nexport const SOLBASEADDRESS = '11111111111111111111111111111111'\n\nlet solId = 0\n// fetch('https://l2api.anyswap.exchange/v2/reswaptxns?hash=3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt&srcChainID=SOL_TEST&destChainID=5').then(res => res.json()).then(json => {console.log(json)})\n// export function getSolanaInfo(chainId:any, params:any) {\nexport function getSolanaInfo(chainId:any, method: string, params: any) {\n  return new Promise((resolve, reject) => {\n    fetch(config.chainInfo[chainId].nodeRpc, {\n      method: 'POST',\n      headers: { 'content-type': 'application/json', accept: 'application/json' },\n      body: JSON.stringify({\n        \"jsonrpc\": \"2.0\",\n        \"id\": solId ++,\n        \"method\": method,\n        \"params\": params\n      })\n    }).then(res => res.json()).then(json => {\n      resolve(json)\n    }).catch((err:any) => {\n      reject(err)\n    })\n  })\n}\n\nexport function isSolAddress (address:string):boolean | string {\n  if (solAddressReg.test(address)) {\n    return address\n  }\n  return false\n}\n\nexport function useSolAddress () {\n  const account:any = useSelector<AppState, AppState['sol']>(state => state.sol.solAddress)\n  // console.log(useWallet)\n  // console.log(useConnection)\n  return {\n    solAddress: account\n  }\n}\n\nexport function useLoginSol () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginSol = useCallback((type?:any) => {\n    if (window?.solana?.connect) {\n      window?.solana?.connect().then((res:any) => {\n        if (res?.publicKey) {\n          dispatch(solAddress({address: res.publicKey.toString()}))\n        }\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    } else {\n      if (!type) {\n        if (confirm('Please open or install Solana wallet.') === true) {\n          window.open('https://phantom.app/download')\n        }\n      }\n    }\n  }, [])\n  return {\n    loginSol\n  }\n}\n\nexport function useSolCreateAccount () {\n\n  const getAccount = useCallback((account, token) => {\n    return new Promise(async(resolve) => {\n      if (account && token) {\n        try {\n          const base58publicKey = new solanaWeb3.PublicKey(account)\n          const tokenpublicKey = new solanaWeb3.PublicKey(token)\n          const acctontToToken = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, tokenpublicKey, base58publicKey, true)\n          resolve(acctontToToken)\n        } catch (error) {\n          console.log(error)\n          resolve('')\n        }\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  // const createAccount = useCallback(async(chainId, account, token) => {\n  const createAccount = useCallback(({chainId, account, token}: {chainId: any, account:string|null|undefined, token:string|null|undefined}) => {\n    return new Promise(async(resolve, rejects) => {\n\n      try {\n        // const account = '8fBfAE4gVbv253UgwkwBT5TaV5SaZ7JJWgmQoqbEEei5'\n        // const t = 'GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX'\n        const tokenpublicKey = new solanaWeb3.PublicKey(token)\n        const associatedAddress:any = await getAccount(account, token)\n        const connection = new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc)\n        const signer = await window?.solana?.connect()\n        // const token  = new Token(connection, tokenpublicKey, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, new solanaWeb3.PublicKey(account))\n        // console.log(token)\n        // console.log(connection)\n        console.log(signer)\n        const tx = new solanaWeb3.Transaction()\n        tx.add(\n          Token.createAssociatedTokenAccountInstruction(\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n            TOKEN_PROGRAM_ID,\n            tokenpublicKey,\n            associatedAddress,\n            // new solanaWeb3.PublicKey(account),\n            new solanaWeb3.PublicKey(account),\n            // signer?.publicKey,\n            signer?.publicKey\n          )\n        )\n        console.log(tx)\n        const result = await connection.getLatestBlockhash()\n        // const result = await connection.getConfirmedBlock(blockNumber)\n        console.log(tx)\n        console.log(result)\n        tx.lastValidBlockHeight = result.lastValidBlockHeight;\n        tx.recentBlockhash = result.blockhash;\n        tx.feePayer = new solanaWeb3.PublicKey(signer?.publicKey)\n        const tsResult = await window?.solana?.signAndSendTransaction(tx)\n        console.log(tsResult)\n        resolve(true)\n      } catch (error) {\n        console.log(error)\n        rejects(error)\n      }\n    })\n  }, [])\n\n  const getSolAccountInfo = useCallback(({chainId, account}: {chainId: any, account:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account) {\n        getSolanaInfo(chainId, 'getAccountInfo', [account, {\n          \"encoding\": \"jsonParsed\"\n        }]).then((res:any) => {\n          resolve(res)\n        }).catch((err:any) => {\n          console.log(err)\n          resolve('')\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  const validAccount = useCallback(({chainId, account, token}: {chainId: any, account:string|null|undefined, token:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account && token) {\n        if (token === 'native') {\n          resolve(true)\n        } else {\n          const t:any = await getAccount(account, token)\n          Promise.all([\n            getSolAccountInfo({chainId, account}),\n            getSolAccountInfo({chainId, account: t}),\n          ]).then((res:any) => {\n            console.log(res)\n            const caResult = res[0]\n            const baResult = res[1]\n            if (caResult?.result?.value?.owner === SOLBASEADDRESS) {\n              if (baResult?.result?.value?.data?.parsed?.info?.mint === token) {\n                resolve(t)\n              } else {\n                resolve(false)\n              }\n            } else if (caResult?.result?.value?.data?.parsed?.info?.mint === token) {\n              resolve(t)\n            } else {\n              resolve(false)\n            }\n          })\n        }\n      } else {\n        resolve(false)\n      }\n    })\n  }, [])\n\n  return {\n    getAccount,\n    createAccount,\n    getSolAccountInfo,\n    validAccount\n  }\n}\n\n\nexport function useSolBalance () {\n  const {getAccount} = useSolCreateAccount()\n  const getSolBalance = useCallback(({chainId, account}: {chainId: any, account:string|null|undefined}) => {\n    return new Promise((resolve) => {\n      if (account) {\n        getSolanaInfo(chainId, 'getBalance', [account]).then((res:any) => {\n          resolve(res)\n        }).catch((err:any) => {\n          console.log(err)\n          resolve('')\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, []) \n\n  const getSolTokenBalance = useCallback(({chainId, account, token}: {chainId: any, account:string|null|undefined, token:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account && token) {\n        const acctontToToken:any = await getAccount(account, token)\n        if (acctontToToken) {\n          getSolanaInfo(chainId, 'getTokenAccountBalance', [acctontToToken.toBase58()]).then((res:any) => {\n            resolve(res)\n          }).catch((err:any) => {\n            console.log(err)\n            resolve('')\n          })\n        } else {\n          resolve('')\n        }\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  const getSolTokenInfo = useCallback(({chainId, account}: {chainId: any, account:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account) {\n        getSolanaInfo(chainId, 'getAccountInfo', ['GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX', {\n          \"encoding\": \"jsonParsed\"\n        }]).then((res:any) => {\n          resolve(res)\n        }).catch((err:any) => {\n          console.log(err)\n          resolve('')\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  return {\n    getSolBalance,\n    getSolTokenBalance,\n    getSolTokenInfo\n  }\n}\n\nexport function useSolAllowance(\n  token: string | null | undefined,\n  spender: string | null | undefined,\n  chainId: string | null | undefined,\n  account: string | null | undefined,\n) {\n  const setSolAllowance = useCallback((): Promise<any> => {\n    return new Promise(async(resolve, reject) => {\n      if (token && spender && account && chainId) {\n        resolve('')\n      } else {\n        reject('')\n      }\n    })\n  }, [token, spender, account, chainId])\n\n  const getSolAllowance = useCallback(() => {\n    return new Promise(async(resolve): Promise<any> => {\n      resolve('')\n    })\n  }, [account, chainId, token, spender])\n\n  return {\n    setSolAllowance,\n    getSolAllowance,\n  }\n}\n\nenum State {\n  Success = 'Success',\n  Failure = 'Failure',\n  Null = 'Null',\n}\n\ninterface TxDataResult {\n  msg: State,\n  info: any,\n  error: any\n}\nexport function getSolTxnsStatus (txid:string, chainId:any) {\n  return new Promise(resolve => {\n    const data:TxDataResult = {\n      msg: State.Null,\n      info: '',\n      error: ''\n    }\n    if (txid) {\n      getSolanaInfo(chainId, 'getTransaction', [txid, \"json\"]).then((res:any) => {\n        // console.log(res)\n        if (res?.result?.meta?.status?.Ok === null) {\n          data.msg = State.Success\n          data.info = res?.result\n        } else if (res?.result?.meta?.status?.Err) {\n          data.msg = State.Failure\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = State.Null\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      }).catch((err:any) => {\n        console.log(err)\n        data.msg = State.Null\n        data.error = 'Query is empty!'\n        resolve(data)\n      })\n    }\n  })\n}\n\n// getSolTxnsStatus('3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt', 'SOL_TEST').then(res => {\n//   console.log(res)\n// })\n\nexport function useSolCrossChain (\n  routerToken: string | null | undefined,\n  inputToken: string | null | undefined,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: string | null | undefined,\n  typedValue: string | undefined,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const { t } = useTranslation()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n  const addTransaction = useTransactionAdder()\n  const {getAccount} = useSolCreateAccount()\n\n  const balance = useTokensBalance(selectCurrency?.address, selectCurrency?.decimals, chainId)\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  return useMemo(() => {\n    if (!chainId || !selectCurrency || !receiveAddress || !useToChainId) return {}\n\n    const sufficientBalance = typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n\n    return {\n      balance: '',\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n      ?async () => {\n        try {\n          const contract = new Program(solRouter, routerToken, config.chainInfo[chainId].nodeRpc)\n          let routeraccount = await solanaWeb3.PublicKey.findProgramAddress([Buffer.from('Router')], new solanaWeb3.PublicKey(routerToken))\n          routeraccount = routeraccount[0]\n          let instruction:any\n          // console.log(contract)\n          // console.log(routeraccount)\n          if (destConfig.routerABI.indexOf('anySwapOutNative') !== -1) { // anySwapOutNative\n            instruction = await contract.instruction.swapoutNative(\n              receiveAddress,\n              new anchor.BN(inputAmount),\n              new anchor.BN(useToChainId),\n              {\n                accounts: {\n                  signer: account,\n                  routerAccount: routeraccount,\n                  systemProgram: solanaWeb3.SystemProgram.programId,\n                },\n              }\n            );\n          } else if (destConfig.routerABI.indexOf('anySwapOutUnderlying') !== -1) { // anySwapOutUnderlying\n            const acctontToToken = await getAccount(account, inputToken)\n            instruction = await contract.instruction.swapoutBurn(\n              receiveAddress,\n              new anchor.BN(inputAmount),\n              new anchor.BN(useToChainId),\n              {\n                accounts: {\n                  signer: account,\n                  routerAccount: routeraccount,\n                  from: acctontToToken,\n                  mint: inputToken,\n                  tokenProgram: TOKEN_PROGRAM_ID\n                },\n              }\n            );\n          } else if (destConfig.routerABI.indexOf('anySwapOut') !== -1) { // anySwapOut\n            const acctontToToken = await getAccount(account, inputToken)\n            const routerToToken = await getAccount(routeraccount, inputToken)\n            instruction = await contract.instruction.swapoutTransfer(\n              receiveAddress,\n              new anchor.BN(inputAmount),\n              new anchor.BN(useToChainId),\n              {\n                accounts: {\n                  signer: account,\n                  routerAccount: routeraccount,\n                  from: acctontToToken,\n                  to: routerToToken,\n                  mint: inputToken,\n                  tokenProgram: TOKEN_PROGRAM_ID\n                },\n              }\n            );\n          }\n          // console.log(contract)\n          // console.log(instruction)\n          const connection = new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc)\n          const result = await connection.getLatestBlockhash()\n          // const result = await connection.getConfirmedBlock(blockNumber)\n          console.log(result)\n          const tx = new solanaWeb3.Transaction().add(instruction)\n          tx.lastValidBlockHeight = result.lastValidBlockHeight;\n          tx.recentBlockhash = result.blockhash;\n          tx.feePayer = new solanaWeb3.PublicKey(account)\n          console.log(tx)\n          const tsResult = await window?.solana?.signAndSendTransaction(tx)\n          console.log(tsResult)\n          const txReceipt = {hash: tsResult.signature}\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n            // const tsResult = await window?.solana?.signTransaction(tx1)\n          }\n        } catch (error) {\n          onChangeViewErrorTip(error, true)\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, inputAmount, balance, useToChainId, userInterfaceBalanceValid])\n}\n\n// enum SwapType {\n//   withdraw = 'withdraw',\n//   deposit = 'deposit',\n// }\n\n// export function useSolSwapPoolCallback(\n//   routerToken: string | null | undefined,\n//   selectCurrency: string | null | undefined,\n//   inputToken: string | null | undefined,\n//   typedValue: string | null | undefined,\n//   swapType: SwapType,\n//   selectChain: string | null | undefined,\n//   receiveAddress: string | null | undefined,\n//   destConfig: any,\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n//   const { account, chainId } = useActiveReact()\n//   return useMemo(() => {\n//     return {\n//       balance: '',\n//       execute: async () => {\n\n//         console.log(1)\n//       },\n//       inputError: ''\n//     }\n//   }, [routerToken, inputToken, swapType, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, chainId])\n// }\n\n// interface PoolCalls {\n//   token: string | null | undefined,\n//   account: string | null | undefined,\n//   anytoken: string | null | undefined,\n//   dec: number\n// }\n\n// interface PoolResult {\n//   [key:string]: {\n//     balanceOf: string,\n//     totalSupply: string,\n//     balance: string,\n//   }\n// }\n\n// export function useSolPoolDatas () {\n//   const getSolPoolDatas = useCallback(async(calls: Array<[PoolCalls]>, chainId: string | null | undefined): Promise<PoolResult> => {\n//     console.log(calls)\n//     console.log(chainId)\n//     return {\n//       'anytoken': {\n//         balanceOf: '',\n//         totalSupply: '',\n//         balance: '',\n//       }\n//     }\n//   }, [])\n//   return {\n//     getSolPoolDatas\n//   }\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}