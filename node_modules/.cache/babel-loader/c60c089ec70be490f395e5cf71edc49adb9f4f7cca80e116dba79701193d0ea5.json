{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContractEvents = exports.getContractAddress = exports.getCodeId = void 0;\nvar TxAPI_1 = require(\"../client/lcd/api/TxAPI\");\nfunction getCodeId(txResult, msgIndex) {\n  if (msgIndex === void 0) {\n    msgIndex = 0;\n  }\n  if ((0, TxAPI_1.isTxError)(txResult) || txResult.logs === undefined || txResult.logs.length === 0) {\n    throw new Error('could not parse code id -- tx logs are empty.');\n  }\n  var codeId = txResult.logs[msgIndex].eventsByType['store_code']['code_id'][0];\n  return codeId;\n}\nexports.getCodeId = getCodeId;\nfunction getContractAddress(txResult, msgIndex, isClassic) {\n  if (msgIndex === void 0) {\n    msgIndex = 0;\n  }\n  if (isClassic === void 0) {\n    isClassic = false;\n  }\n  if ((0, TxAPI_1.isTxError)(txResult) || txResult.logs === undefined || txResult.logs.length === 0) {\n    throw new Error('could not parse contract address -- tx logs are empty.');\n  }\n  var eventName;\n  var attributeKey;\n  if (isClassic) {\n    eventName = 'instantiate_contract';\n    attributeKey = 'contract_address';\n  } else {\n    eventName = 'wasm';\n    attributeKey = '_contract_address';\n  }\n  var contractAddress = txResult.logs[msgIndex].eventsByType[eventName][attributeKey][0];\n  return contractAddress;\n}\nexports.getContractAddress = getContractAddress;\nfunction getContractEvents(txResult, msgIndex, isClassic) {\n  if (msgIndex === void 0) {\n    msgIndex = 0;\n  }\n  if (isClassic === void 0) {\n    isClassic = false;\n  }\n  if ((0, TxAPI_1.isTxError)(txResult) || txResult.logs === undefined || txResult.logs.length === 0) {\n    throw new Error('could not parse contract events -- tx logs are empty.');\n  }\n  var eventName;\n  var attributeKey;\n  if (isClassic) {\n    eventName = 'from_contract';\n    attributeKey = 'contract_address';\n  } else {\n    eventName = 'instantiate';\n    attributeKey = '_contract_address';\n  }\n  var contractEvents = [];\n  for (var _i = 0, _a = txResult.logs[msgIndex].events; _i < _a.length; _i++) {\n    var event_1 = _a[_i];\n    if (event_1.type === eventName) {\n      var eventData = {\n        contract_address: ''\n      }; // will be overwritten\n      var currentContractAddress = event_1.attributes[0].value;\n      for (var _b = 0, _c = event_1.attributes; _b < _c.length; _b++) {\n        var att = _c[_b];\n        if (att.key == attributeKey && currentContractAddress !== att.value) {\n          contractEvents.push(eventData);\n          eventData = {\n            contract_address: ''\n          };\n          currentContractAddress = att.value;\n        }\n        eventData[att.key] = att.value;\n      }\n      contractEvents.push(eventData);\n      return contractEvents;\n    }\n  }\n  throw new Error(\"could not find event type \".concat(eventName, \" in logs\"));\n}\nexports.getContractEvents = getContractEvents;","map":{"version":3,"names":["TxAPI_1","require","getCodeId","txResult","msgIndex","isTxError","logs","undefined","length","Error","codeId","eventsByType","exports","getContractAddress","isClassic","eventName","attributeKey","contractAddress","getContractEvents","contractEvents","_i","_a","events","event_1","type","eventData","contract_address","currentContractAddress","attributes","value","_b","_c","att","key","push","concat"],"sources":["../../src/util/contract.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}