{"ast":null,"code":"import React from'react';import{HashRouter}from'react-router-dom';import{createWeb3ReactRoot,Web3ReactProvider}from'@web3-react/core';import{NetworkContextName}from'../constants';import getLibrary from'../utils/getLibrary';import{WalletProvider// NetworkInfo\n}from'@terra-money/wallet-provider';// import { ConnectionProvider, WalletProvider as SolWalletProvider } from '@solana/wallet-adapter-react';\n// import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n// // import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\n// // import { PhantomWalletAdapter } from '@solana/wallet-adapter-phantom';\n// import {\n//     WalletModalProvider,\n//     WalletDisconnectButton,\n//     WalletMultiButton\n// } from '@solana/wallet-adapter-react-ui';\n// import { clusterApiUrl } from '@solana/web3.js';\nimport{WalletSelectorContextProvider}from\"../nonevm/near/WalletSelectorContext\";import{Updaters}from'../state/updaters';import App from'./App';import\"@near-wallet-selector/modal-ui/styles.css\";import\"@near-wallet-selector/account-export/styles.css\";// require('@solana/wallet-adapter-react-ui/styles.css')\nconst Web3ProviderNetwork=createWeb3ReactRoot(NetworkContextName);// if ('ethereum' in window) {\n//   ;(window.ethereum as any).autoRefreshOnNetworkChange = false\n// }\nconst mainnet={name:'mainnet',chainID:'columbus-4',lcd:'https://lcd.terra.dev'};const testnet={name:'testnet',chainID:'tequila-0004',lcd:'https://tequila-lcd.terra.dev'};const walletConnectChainIds={0:testnet,1:mainnet};export default function AppContainer(){// The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n// const network = WalletAdapterNetwork.Devnet;\n// const network = WalletAdapterNetwork.Testnet;\n// const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n// const wallets:any = useMemo(\n//     () => [\n//         /**\n//          * Select the wallets you wish to support, by instantiating wallet adapters here.\n//          *\n//          * Common adapters can be found in the npm package `@solana/wallet-adapter-wallets`.\n//          * That package supports tree shaking and lazy loading -- only the wallets you import\n//          * will be compiled into your application, and only the dependencies of wallets that\n//          * your users connect to will be loaded.\n//          */\n//         // new UnsafeBurnerWalletAdapter(),\n//         // new PhantomWalletAdapter(),\n//     ],\n//     []\n// );\nreturn/*#__PURE__*/React.createElement(WalletProvider,{defaultNetwork:mainnet,walletConnectChainIds:walletConnectChainIds},/*#__PURE__*/React.createElement(Web3ReactProvider,{getLibrary:getLibrary},/*#__PURE__*/React.createElement(Web3ProviderNetwork,{getLibrary:getLibrary},/*#__PURE__*/React.createElement(WalletSelectorContextProvider,null,/*#__PURE__*/React.createElement(Updaters,null),/*#__PURE__*/React.createElement(HashRouter,null,/*#__PURE__*/React.createElement(App,null))))));}","map":{"version":3,"names":["React","HashRouter","createWeb3ReactRoot","Web3ReactProvider","NetworkContextName","getLibrary","WalletProvider","WalletSelectorContextProvider","Updaters","App","Web3ProviderNetwork","mainnet","name","chainID","lcd","testnet","walletConnectChainIds","AppContainer","createElement","defaultNetwork"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/pages/AppContainer.tsx"],"sourcesContent":["import React from 'react'\n\nimport { HashRouter } from 'react-router-dom'\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport { NetworkContextName } from '../constants'\nimport getLibrary from '../utils/getLibrary'\n\nimport {\n  WalletProvider,\n  // NetworkInfo\n} from '@terra-money/wallet-provider'\n\n// import { ConnectionProvider, WalletProvider as SolWalletProvider } from '@solana/wallet-adapter-react';\n// import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n// // import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\n// // import { PhantomWalletAdapter } from '@solana/wallet-adapter-phantom';\n// import {\n//     WalletModalProvider,\n//     WalletDisconnectButton,\n//     WalletMultiButton\n// } from '@solana/wallet-adapter-react-ui';\n// import { clusterApiUrl } from '@solana/web3.js';\nimport { WalletSelectorContextProvider } from \"../nonevm/near/WalletSelectorContext\"\n\nimport { Updaters } from '../state/updaters'\nimport App from './App';\n\nimport \"@near-wallet-selector/modal-ui/styles.css\"\nimport \"@near-wallet-selector/account-export/styles.css\"\n// require('@solana/wallet-adapter-react-ui/styles.css')\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\n\n// if ('ethereum' in window) {\n//   ;(window.ethereum as any).autoRefreshOnNetworkChange = false\n// }\n\nconst mainnet = {\n  name: 'mainnet',\n  chainID: 'columbus-4',\n  lcd: 'https://lcd.terra.dev',\n};\n\nconst testnet = {\n  name: 'testnet',\n  chainID: 'tequila-0004',\n  lcd: 'https://tequila-lcd.terra.dev',\n};\n\nconst walletConnectChainIds: Record<number, any> = {\n  0: testnet,\n  1: mainnet,\n}\n\nexport default function AppContainer() {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  // const network = WalletAdapterNetwork.Devnet;\n  // const network = WalletAdapterNetwork.Testnet;\n  // const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  // const wallets:any = useMemo(\n  //     () => [\n  //         /**\n  //          * Select the wallets you wish to support, by instantiating wallet adapters here.\n  //          *\n  //          * Common adapters can be found in the npm package `@solana/wallet-adapter-wallets`.\n  //          * That package supports tree shaking and lazy loading -- only the wallets you import\n  //          * will be compiled into your application, and only the dependencies of wallets that\n  //          * your users connect to will be loaded.\n  //          */\n  //         // new UnsafeBurnerWalletAdapter(),\n  //         // new PhantomWalletAdapter(),\n  //     ],\n  //     []\n  // );\n\n  return (<WalletProvider\n    defaultNetwork={mainnet}\n    walletConnectChainIds={walletConnectChainIds}\n  >\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Web3ProviderNetwork getLibrary={getLibrary}>\n        <WalletSelectorContextProvider>\n          {/* <ConnectionProvider endpoint={endpoint}>\n          <SolWalletProvider wallets={wallets} autoConnect>\n            <WalletModalProvider>\n              <WalletMultiButton />\n              <WalletDisconnectButton /> */}\n              <Updaters />\n              <HashRouter>\n                <App />\n              </HashRouter>\n            {/* </WalletModalProvider>\n          </SolWalletProvider>\n        </ConnectionProvider> */}\n        </WalletSelectorContextProvider>\n        \n        \n      </Web3ProviderNetwork>\n    </Web3ReactProvider>\n  </WalletProvider>)\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,mBAAmB,CAAEC,iBAAiB,KAAQ,kBAAkB,CACzE,OAASC,kBAAkB,KAAQ,cAAc,CACjD,MAAO,CAAAC,UAAU,KAAM,qBAAqB,CAE5C,OACEC,cACA;AAAA,KACK,8BAA8B,CAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAASC,6BAA6B,KAAQ,sCAAsC,CAEpF,OAASC,QAAQ,KAAQ,mBAAmB,CAC5C,MAAO,CAAAC,GAAG,KAAM,OAAO,CAEvB,MAAO,2CAA2C,CAClD,MAAO,iDAAiD,CACxD;AAEA,KAAM,CAAAC,mBAAmB,CAAGR,mBAAmB,CAACE,kBAAkB,CAAC,CAEnE;AACA;AACA;AAEA,KAAM,CAAAO,OAAO,CAAG,CACdC,IAAI,CAAE,SAAS,CACfC,OAAO,CAAE,YAAY,CACrBC,GAAG,CAAE,uBACP,CAAC,CAED,KAAM,CAAAC,OAAO,CAAG,CACdH,IAAI,CAAE,SAAS,CACfC,OAAO,CAAE,cAAc,CACvBC,GAAG,CAAE,+BACP,CAAC,CAED,KAAM,CAAAE,qBAA0C,CAAG,CACjD,CAAC,CAAED,OAAO,CACV,CAAC,CAAEJ,OACL,CAAC,CAED,cAAe,SAAS,CAAAM,YAAYA,CAAA,CAAG,CACrC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBAAQjB,KAAA,CAAAkB,aAAA,CAACZ,cAAc,EACrBa,cAAc,CAAER,OAAQ,CACxBK,qBAAqB,CAAEA,qBAAsB,eAE7ChB,KAAA,CAAAkB,aAAA,CAACf,iBAAiB,EAACE,UAAU,CAAEA,UAAW,eACxCL,KAAA,CAAAkB,aAAA,CAACR,mBAAmB,EAACL,UAAU,CAAEA,UAAW,eAC1CL,KAAA,CAAAkB,aAAA,CAACX,6BAA6B,mBAMxBP,KAAA,CAAAkB,aAAA,CAACV,QAAQ,KAAE,CAAC,cACZR,KAAA,CAAAkB,aAAA,CAACjB,UAAU,mBACTD,KAAA,CAAAkB,aAAA,CAACT,GAAG,KAAE,CACI,CAIa,CAGZ,CACJ,CACL,CAAC,CACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}