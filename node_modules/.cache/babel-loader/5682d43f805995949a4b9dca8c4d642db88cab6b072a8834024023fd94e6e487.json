{"ast":null,"code":"var _class;\n// eslint-disable-next-line @typescript-eslint/ban-types\nvar ObserveStatus = /*#__PURE__*/function (ObserveStatus) {\n  ObserveStatus[ObserveStatus[\"Pending\"] = 0] = \"Pending\";\n  ObserveStatus[ObserveStatus[\"Connect\"] = 1] = \"Connect\";\n  ObserveStatus[ObserveStatus[\"Disconnect\"] = 2] = \"Disconnect\";\n  ObserveStatus[ObserveStatus[\"NotSupport\"] = 3] = \"NotSupport\";\n  return ObserveStatus;\n}(ObserveStatus || {});\nexport default class LazyloadService {\n  static getInstance() {\n    if (!this._instance) {\n      this._instance = new LazyloadService();\n    }\n    return this._instance;\n  }\n\n  // 创建元素观察者\n  static createElementObserve(el) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const service = new LazyloadService();\n    service.isRoot = false;\n    if (el || el === null) {\n      service.connect(el, options);\n    }\n    return service;\n  }\n  static checkLoadedUrl(url) {\n    return this.loadedUrl.indexOf(url) > -1;\n  }\n  static addLoadedUrl(url) {\n    if (!this.checkLoadedUrl(url)) {\n      this.loadedUrl.push(url);\n    }\n    return url;\n  }\n  constructor() {\n    this.observeData = void 0;\n    this.waitCallbacks = void 0;\n    this.status = void 0;\n    this.isRoot = void 0;\n    this.observeData = {\n      element: null,\n      callbacks: []\n    };\n    this.isRoot = true;\n    this.waitCallbacks = [];\n    this.status = ObserveStatus.Pending;\n  }\n\n  // 创建观察对象\n  createObserve(element) {\n    let setOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const observeItem = this.observeData;\n    const options = {\n      rootMargin: '50px',\n      ...setOptions\n    };\n    if (element) {\n      options.root = element;\n    }\n    let observe = null;\n    if ('IntersectionObserver' in window) {\n      const observeCallback = entries => {\n        var _observeItem$callback;\n        if (observeItem && ((_observeItem$callback = observeItem.callbacks) === null || _observeItem$callback === void 0 ? void 0 : _observeItem$callback.length)) {\n          for (const entry of entries) {\n            if (!entry.isIntersecting) continue;\n            for (const item of observeItem.callbacks) {\n              if (item.element === entry.target) {\n                item.callback(entry, item.unsubscribe);\n                break;\n              }\n            }\n          }\n        }\n      };\n      observe = new IntersectionObserver(observeCallback, options);\n    }\n    observeItem.observe = observe;\n    return observe;\n  }\n\n  // 连接到对象\n  connect(el) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const observe = this.createObserve(el, options);\n    if (observe) {\n      if (this.waitCallbacks.length) {\n        this.waitCallbacks.forEach(item => {\n          observe === null || observe === void 0 ? void 0 : observe.observe(item.element);\n        });\n      }\n      this.observeData.callbacks = this.waitCallbacks;\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.Connect;\n    } else {\n      const call = () => {\n        //\n      };\n      this.waitCallbacks.forEach(item => {\n        const entry = {\n          isIntersecting: 1\n        };\n        item.callback(entry, call);\n      });\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.NotSupport;\n    }\n  }\n\n  // 断开连接\n  disconnect() {\n    if (this.status == ObserveStatus.Connect) {\n      var _this$observeData$obs;\n      (_this$observeData$obs = this.observeData.observe) === null || _this$observeData$obs === void 0 ? void 0 : _this$observeData$obs.disconnect();\n      this.observeData = {\n        element: null,\n        callbacks: []\n      };\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.Disconnect;\n    }\n  }\n\n  // 订阅事件\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  subscribe(el, callback) {\n    let unsubscribe = () => {\n      //\n    };\n    if (this.isRoot && this.status != ObserveStatus.Connect) {\n      if (this.status === ObserveStatus.Pending || this.status === ObserveStatus.Disconnect) {\n        if (this.createObserve()) {\n          this.status = ObserveStatus.Connect;\n        } else {\n          this.status = ObserveStatus.NotSupport;\n        }\n      }\n      // 处理不支持的情况\n      if (this.status === ObserveStatus.NotSupport) {\n        const entry = {\n          isIntersecting: 1\n        };\n        callback(entry, unsubscribe);\n      }\n    }\n    unsubscribe = () => this.unsubscribe(el);\n    const observeItem = this.observeData;\n    if (this.status == ObserveStatus.Connect) {\n      var _observeItem$observe, _observeItem$callback2;\n      (_observeItem$observe = observeItem.observe) === null || _observeItem$observe === void 0 ? void 0 : _observeItem$observe.observe(el);\n      (_observeItem$callback2 = observeItem.callbacks) === null || _observeItem$callback2 === void 0 ? void 0 : _observeItem$callback2.push({\n        element: el,\n        callback,\n        unsubscribe\n      });\n    } else if (this.status == ObserveStatus.Pending) {\n      this.waitCallbacks.push({\n        element: el,\n        callback,\n        unsubscribe\n      });\n    } else {\n      console.warn('this observe is disconnect');\n    }\n    return unsubscribe;\n  }\n\n  // 取消订阅事件\n  unsubscribe(el) {\n    let callbacks = this.observeData.callbacks || [];\n    if (this.status == ObserveStatus.Pending) {\n      callbacks = this.waitCallbacks;\n    }\n    for (let i = callbacks.length - 1; i > -1; i--) {\n      const item = callbacks[i];\n      if (item.element === el) {\n        if (this.observeData.observe) {\n          this.observeData.observe.unobserve(el);\n        }\n        callbacks.splice(i, 1);\n        break;\n      }\n    }\n    // 仅在全局模式下自动断开连接\n    if (this.isRoot && !callbacks.length) {\n      this.disconnect();\n    }\n  }\n}\n_class = LazyloadService;\nLazyloadService._instance = void 0;\nLazyloadService.loadedUrl = [];","map":{"version":3,"names":["ObserveStatus","LazyloadService","getInstance","_instance","createElementObserve","el","options","arguments","length","undefined","service","isRoot","connect","checkLoadedUrl","url","loadedUrl","indexOf","addLoadedUrl","push","constructor","observeData","waitCallbacks","status","element","callbacks","Pending","createObserve","setOptions","observeItem","rootMargin","root","observe","window","observeCallback","entries","_observeItem$callback","entry","isIntersecting","item","target","callback","unsubscribe","IntersectionObserver","forEach","Connect","call","NotSupport","disconnect","_this$observeData$obs","Disconnect","subscribe","_observeItem$observe","_observeItem$callback2","console","warn","i","unobserve","splice","_class"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/components/Lazyload/LazyloadService.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-types\ntype SubscribeCallback = (entry: IntersectionObserverEntry, unsubscribe: Function) => void;\n\ntype CallbackItem = {\n  element: HTMLElement;\n  callback: SubscribeCallback;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  unsubscribe: Function;\n}\n\ntype ObserveData = {\n  element: HTMLElement | null;\n  observe?: IntersectionObserver;\n  callbacks?: CallbackItem[];\n}\n\nenum ObserveStatus {\n  Pending,\n  Connect,\n  Disconnect,\n  NotSupport\n}\n\nexport default class LazyloadService {\n  static _instance: LazyloadService;\n\n  static getInstance() {\n    if (!this._instance) {\n      this._instance = new LazyloadService();\n    }\n    return this._instance;\n  }\n\n  // 创建元素观察者\n  static createElementObserve(el?: HTMLElement | null, options: IntersectionObserverInit = {}): LazyloadService {\n    const service = new LazyloadService();\n    service.isRoot = false;\n    if (el || el === null) {\n      service.connect(el, options);\n    }\n    return service;\n  }\n\n  static loadedUrl: string[] = [];\n  static checkLoadedUrl(url: string) {\n    return this.loadedUrl.indexOf(url) > -1;\n  }\n  static addLoadedUrl(url: string) {\n    if (!this.checkLoadedUrl(url)) {\n      this.loadedUrl.push(url);\n    }\n    return url;\n  }\n\n  observeData: ObserveData;\n  waitCallbacks: CallbackItem[];\n  status: ObserveStatus;\n  isRoot: boolean;\n\n  constructor() {\n    this.observeData = {\n      element: null,\n      callbacks: []\n    };\n    this.isRoot = true;\n    this.waitCallbacks = [];\n    this.status = ObserveStatus.Pending;\n  }\n\n  // 创建观察对象\n  createObserve(element?: HTMLElement | null, setOptions: IntersectionObserverInit = {}) {\n    const observeItem = this.observeData as ObserveData;\n    const options: any = { rootMargin: '50px', ...setOptions };\n    if (element) {\n      options.root = element;\n    }\n    let observe: any = null;\n    if ('IntersectionObserver' in window) {\n      const observeCallback = (entries: IntersectionObserverEntry[]) => {\n        if (observeItem && observeItem.callbacks?.length) {\n          for(const entry of entries) {\n            if (!entry.isIntersecting) continue;\n            for(const item of observeItem.callbacks) {\n              if (item.element === entry.target) {\n                item.callback(entry, item.unsubscribe);\n                break;\n              }\n            }\n          }\n        }\n      };\n      observe = new IntersectionObserver(observeCallback, options);\n    }\n    observeItem.observe = observe;\n    return observe;\n  }\n\n  // 连接到对象\n  connect(el: HTMLElement | null, options: IntersectionObserverInit = {}) {\n    const observe = this.createObserve(el, options);\n    if (observe) {\n      if (this.waitCallbacks.length) {\n        this.waitCallbacks.forEach((item) => {\n          observe?.observe(item.element);\n        });\n      }\n      this.observeData.callbacks = this.waitCallbacks;\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.Connect;\n    }\n    else {\n      const call = () => {\n        //\n      };\n      this.waitCallbacks.forEach((item) => {\n        const entry: any = { isIntersecting: 1 };\n        item.callback(entry, call);\n      });\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.NotSupport;\n    }\n  }\n\n  // 断开连接\n  disconnect() {\n    if (this.status == ObserveStatus.Connect) {\n      this.observeData.observe?.disconnect();\n      this.observeData = {\n        element: null,\n        callbacks: []\n      };\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.Disconnect;\n    }\n  }\n\n  // 订阅事件\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  subscribe(el: HTMLElement, callback: SubscribeCallback): Function {\n    let unsubscribe = () => {\n      //\n    };\n    if (this.isRoot && this.status != ObserveStatus.Connect) {\n      if (\n        this.status === ObserveStatus.Pending ||\n        this.status === ObserveStatus.Disconnect\n      ) {\n        if (this.createObserve()) {\n          this.status = ObserveStatus.Connect;\n        }\n        else {\n          this.status = ObserveStatus.NotSupport;\n        }\n      }\n      // 处理不支持的情况\n      if (this.status === ObserveStatus.NotSupport) {\n        const entry: any = { isIntersecting: 1 };\n        callback(entry, unsubscribe);\n      }\n    }\n    unsubscribe = () => this.unsubscribe(el);\n    const observeItem = this.observeData;\n    if (this.status == ObserveStatus.Connect) {\n      observeItem.observe?.observe(el);\n      observeItem.callbacks?.push({\n        element: el, callback, unsubscribe\n      });\n    }\n    else if (this.status == ObserveStatus.Pending) {\n      this.waitCallbacks.push({\n        element: el, callback, unsubscribe\n      });\n    }\n    else {\n      console.warn('this observe is disconnect');\n    }\n    return unsubscribe;\n  }\n\n  // 取消订阅事件\n  unsubscribe(el: HTMLElement) {\n    let callbacks = this.observeData.callbacks || [];\n    if (this.status == ObserveStatus.Pending) {\n      callbacks = this.waitCallbacks;\n    }\n    for(let i=callbacks.length - 1; i>-1; i--) {\n      const item = callbacks[i];\n      if (item.element === el) {\n        if (this.observeData.observe) {\n          this.observeData.observe.unobserve(el);\n        }\n        callbacks.splice(i, 1);\n        break;\n      }\n    }\n    // 仅在全局模式下自动断开连接\n    if (this.isRoot && !callbacks.length) {\n      this.disconnect();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}