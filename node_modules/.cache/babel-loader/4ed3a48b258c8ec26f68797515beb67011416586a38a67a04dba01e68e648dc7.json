{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawback = clawback;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Creates a clawback operation.\n *\n * @function\n * @alias Operation.clawback\n *\n * @param {object} opts - Options object\n * @param {Asset}  opts.asset   - The asset being clawed back.\n * @param {string} opts.amount  - The amount of the asset to claw back.\n * @param {string} opts.from    - The public key of the (optionally-muxed)\n *     account to claw back from.\n *\n * @param {string} [opts.source] - The source account for the operation.\n *     Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackOp}\n *\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation\n */\nfunction clawback(opts) {\n  var attributes = {};\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.asset = opts.asset.toXDRObject();\n  try {\n    attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);\n  } catch (e) {\n    throw new Error('from address is invalid');\n  }\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.clawback(new _xdr2.default.ClawbackOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","clawback","_xdr","require","_xdr2","_interopRequireDefault","_decode_encode_muxed_account","obj","__esModule","default","opts","attributes","isValidAmount","amount","TypeError","constructAmountRequirementsError","_toXDRAmount","asset","toXDRObject","from","decodeAddressToMuxedAccount","e","Error","opAttributes","body","OperationBody","ClawbackOp","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/clawback.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawback = clawback;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a clawback operation.\n *\n * @function\n * @alias Operation.clawback\n *\n * @param {object} opts - Options object\n * @param {Asset}  opts.asset   - The asset being clawed back.\n * @param {string} opts.amount  - The amount of the asset to claw back.\n * @param {string} opts.from    - The public key of the (optionally-muxed)\n *     account to claw back from.\n *\n * @param {string} [opts.source] - The source account for the operation.\n *     Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackOp}\n *\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation\n */\nfunction clawback(opts) {\n  var attributes = {};\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.asset = opts.asset.toXDRObject();\n  try {\n    attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);\n  } catch (e) {\n    throw new Error('from address is invalid');\n  }\n\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.clawback(new _xdr2.default.ClawbackOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,QAAQ,GAAGA,QAAQ;AAE3B,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,IAAII,4BAA4B,GAAGH,OAAO,CAAC,qCAAqC,CAAC;AAEjF,SAASE,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,QAAQA,CAACS,IAAI,EAAE;EACtB,IAAIC,UAAU,GAAG,CAAC,CAAC;EACnB,IAAI,CAAC,IAAI,CAACC,aAAa,CAACF,IAAI,CAACG,MAAM,CAAC,EAAE;IACpC,MAAM,IAAIC,SAAS,CAAC,IAAI,CAACC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;EACtE;EACAJ,UAAU,CAACE,MAAM,GAAG,IAAI,CAACG,YAAY,CAACN,IAAI,CAACG,MAAM,CAAC;EAClDF,UAAU,CAACM,KAAK,GAAGP,IAAI,CAACO,KAAK,CAACC,WAAW,CAAC,CAAC;EAC3C,IAAI;IACFP,UAAU,CAACQ,IAAI,GAAG,CAAC,CAAC,EAAEb,4BAA4B,CAACc,2BAA2B,EAAEV,IAAI,CAACS,IAAI,CAAC;EAC5F,CAAC,CAAC,OAAOE,CAAC,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,IAAIC,YAAY,GAAG;IACjBC,IAAI,EAAEpB,KAAK,CAACK,OAAO,CAACgB,aAAa,CAACxB,QAAQ,CAAC,IAAIG,KAAK,CAACK,OAAO,CAACiB,UAAU,CAACf,UAAU,CAAC;EACrF,CAAC;EACD,IAAI,CAACgB,gBAAgB,CAACJ,YAAY,EAAEb,IAAI,CAAC;EAEzC,OAAO,IAAIN,KAAK,CAACK,OAAO,CAACmB,SAAS,CAACL,YAAY,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}