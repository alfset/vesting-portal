{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.claimClaimableBalance = claimClaimableBalance;\nexports.validateClaimableBalanceId = validateClaimableBalanceId;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Create a new claim claimable balance operation.\n * @function\n * @alias Operation.claimClaimableBalance\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The claimable balance id to be claimed.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} Claim claimable balance operation\n *\n * @example\n * const op = Operation.claimClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction claimClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  validateClaimableBalanceId(opts.balanceId);\n  var attributes = {};\n  attributes.balanceId = _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex');\n  var claimClaimableBalanceOp = new _xdr2.default.ClaimClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.claimClaimableBalance(claimClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}\nfunction validateClaimableBalanceId(balanceId) {\n  if (typeof balanceId !== 'string' || balanceId.length !== 8 + 64 /* 8b discriminant + 64b string */) {\n    throw new Error('must provide a valid claimable balance id');\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","claimClaimableBalance","validateClaimableBalanceId","_xdr","require","_xdr2","_interopRequireDefault","obj","__esModule","default","opts","arguments","length","undefined","balanceId","attributes","ClaimableBalanceId","fromXDR","claimClaimableBalanceOp","ClaimClaimableBalanceOp","opAttributes","body","OperationBody","setSourceAccount","Operation","Error"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/claim_claimable_balance.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.claimClaimableBalance = claimClaimableBalance;\nexports.validateClaimableBalanceId = validateClaimableBalanceId;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a new claim claimable balance operation.\n * @function\n * @alias Operation.claimClaimableBalance\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The claimable balance id to be claimed.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} Claim claimable balance operation\n *\n * @example\n * const op = Operation.claimClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction claimClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  validateClaimableBalanceId(opts.balanceId);\n\n  var attributes = {};\n  attributes.balanceId = _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex');\n  var claimClaimableBalanceOp = new _xdr2.default.ClaimClaimableBalanceOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.claimClaimableBalance(claimClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}\n\nfunction validateClaimableBalanceId(balanceId) {\n  if (typeof balanceId !== 'string' || balanceId.length !== 8 + 64 /* 8b discriminant + 64b string */\n  ) {\n      throw new Error('must provide a valid claimable balance id');\n    }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB;AACrDF,OAAO,CAACG,0BAA0B,GAAGA,0BAA0B;AAE/D,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,SAASG,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,qBAAqBA,CAAA,EAAG;EAC/B,IAAIS,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEjFT,0BAA0B,CAACQ,IAAI,CAACI,SAAS,CAAC;EAE1C,IAAIC,UAAU,GAAG,CAAC,CAAC;EACnBA,UAAU,CAACD,SAAS,GAAGT,KAAK,CAACI,OAAO,CAACO,kBAAkB,CAACC,OAAO,CAACP,IAAI,CAACI,SAAS,EAAE,KAAK,CAAC;EACtF,IAAII,uBAAuB,GAAG,IAAIb,KAAK,CAACI,OAAO,CAACU,uBAAuB,CAACJ,UAAU,CAAC;EAEnF,IAAIK,YAAY,GAAG,CAAC,CAAC;EACrBA,YAAY,CAACC,IAAI,GAAGhB,KAAK,CAACI,OAAO,CAACa,aAAa,CAACrB,qBAAqB,CAACiB,uBAAuB,CAAC;EAC9F,IAAI,CAACK,gBAAgB,CAACH,YAAY,EAAEV,IAAI,CAAC;EAEzC,OAAO,IAAIL,KAAK,CAACI,OAAO,CAACe,SAAS,CAACJ,YAAY,CAAC;AAClD;AAEA,SAASlB,0BAA0BA,CAACY,SAAS,EAAE;EAC7C,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACF,MAAM,KAAK,CAAC,GAAG,EAAE,CAAC,oCAC/D;IACE,MAAM,IAAIa,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}