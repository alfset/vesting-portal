{"ast":null,"code":"import { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n// import { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\nimport { solAddress } from './actions';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport config from \"../../config\";\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager\n// useUserTransactionTTL,\n// useUserSlippageTolerance\n} from '../../state/user/hooks';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { useTokensBalance } from '../../hooks/useAllBalances';\nimport solRouter from './router.json';\n// import * as solanaWeb3 from '@solana/web3.js'\n// import * as spl from '@solana/spl-token'\n/* eslint-disable */\n// eslint-disable-next-line\n// import * as anchor from '@project-serum/anchor'\nconst anchor = require('@project-serum/anchor');\nimport * as spl from \"@solana/spl-token\";\nconst {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  Token\n} = spl;\n// console.log(getAccount )\nconst solanaWeb3 = anchor.web3;\nconst Program = anchor.Program;\n// const spl = new anchor.Spl()\n// const Token = anchor.Spl.token\n// console.log(anchor )\n// console.log(solanaWeb3 )\n// console.log(spl )\n// console.log(Token )\n// console.log(solanaWeb3.SystemProgram.programId )\n// console.log(AnchorProvider.env() )\n// console.log(ASSOCIATED_TOKEN_PROGRAM_ID )\n// console.log(TOKEN_PROGRAM_ID )\n/* eslint-disable */\n\nconst solAddressReg = /^[0-9A-Za-z]{44}$/;\nexport const SOLBASEADDRESS = '11111111111111111111111111111111';\nlet solId = 0;\n// fetch('https://l2api.anyswap.exchange/v2/reswaptxns?hash=3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt&srcChainID=SOL_TEST&destChainID=5').then(res => res.json()).then(json => {console.log(json)})\n// export function getSolanaInfo(chainId:any, params:any) {\nexport function getSolanaInfo(chainId, method, params) {\n  return new Promise((resolve, reject) => {\n    fetch(config.chainInfo[chainId].nodeRpc, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json'\n      },\n      body: JSON.stringify({\n        \"jsonrpc\": \"2.0\",\n        \"id\": solId++,\n        \"method\": method,\n        \"params\": params\n      })\n    }).then(res => res.json()).then(json => {\n      resolve(json);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\nexport function isSolAddress(address) {\n  if (solAddressReg.test(address)) {\n    return address;\n  }\n  return false;\n}\nexport function useSolAddress() {\n  const account = useSelector(state => state.sol.solAddress);\n  // console.log(useWallet)\n  // console.log(useConnection)\n  return {\n    solAddress: account\n  };\n}\nexport function useLoginSol() {\n  const dispatch = useDispatch();\n  const loginSol = useCallback(type => {\n    var _window, _window$solana;\n    if ((_window = window) === null || _window === void 0 ? void 0 : (_window$solana = _window.solana) === null || _window$solana === void 0 ? void 0 : _window$solana.connect) {\n      var _window2, _window2$solana;\n      (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$solana = _window2.solana) === null || _window2$solana === void 0 ? void 0 : _window2$solana.connect().then(res => {\n        if (res === null || res === void 0 ? void 0 : res.publicKey) {\n          dispatch(solAddress({\n            address: res.publicKey.toString()\n          }));\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      if (!type) {\n        if (confirm('Please open or install Solana wallet.') === true) {\n          window.open('https://phantom.app/download');\n        }\n      }\n    }\n  }, []);\n  return {\n    loginSol\n  };\n}\nexport function useSolCreateAccount() {\n  const getAccount = useCallback((account, token) => {\n    return new Promise(async resolve => {\n      if (account && token) {\n        try {\n          const base58publicKey = new solanaWeb3.PublicKey(account);\n          const tokenpublicKey = new solanaWeb3.PublicKey(token);\n          const acctontToToken = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, tokenpublicKey, base58publicKey, true);\n          resolve(acctontToToken);\n        } catch (error) {\n          console.log(error);\n          resolve('');\n        }\n      } else {\n        resolve('');\n      }\n    });\n  }, []);\n\n  // const createAccount = useCallback(async(chainId, account, token) => {\n  const createAccount = useCallback(_ref => {\n    let {\n      chainId,\n      account,\n      token\n    } = _ref;\n    return new Promise(async (resolve, rejects) => {\n      try {\n        var _window3, _window3$solana, _window4, _window4$solana;\n        // const account = '8fBfAE4gVbv253UgwkwBT5TaV5SaZ7JJWgmQoqbEEei5'\n        // const t = 'GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX'\n        const tokenpublicKey = new solanaWeb3.PublicKey(token);\n        const associatedAddress = await getAccount(account, token);\n        const connection = new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc);\n        const signer = await ((_window3 = window) === null || _window3 === void 0 ? void 0 : (_window3$solana = _window3.solana) === null || _window3$solana === void 0 ? void 0 : _window3$solana.connect());\n        // const token  = new Token(connection, tokenpublicKey, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, new solanaWeb3.PublicKey(account))\n        // console.log(token)\n        // console.log(connection)\n        console.log(signer);\n        const tx = new solanaWeb3.Transaction();\n        tx.add(Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, tokenpublicKey, associatedAddress,\n        // new solanaWeb3.PublicKey(account),\n        new solanaWeb3.PublicKey(account), // signer?.publicKey,\n        signer === null || signer === void 0 ? void 0 : signer.publicKey));\n        console.log(tx);\n        const result = await connection.getLatestBlockhash();\n        // const result = await connection.getConfirmedBlock(blockNumber)\n        console.log(tx);\n        console.log(result);\n        tx.lastValidBlockHeight = result.lastValidBlockHeight;\n        tx.recentBlockhash = result.blockhash;\n        tx.feePayer = new solanaWeb3.PublicKey(signer === null || signer === void 0 ? void 0 : signer.publicKey);\n        const tsResult = await ((_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$solana = _window4.solana) === null || _window4$solana === void 0 ? void 0 : _window4$solana.signAndSendTransaction(tx));\n        console.log(tsResult);\n        resolve(true);\n      } catch (error) {\n        console.log(error);\n        rejects(error);\n      }\n    });\n  }, []);\n  const getSolAccountInfo = useCallback(_ref2 => {\n    let {\n      chainId,\n      account\n    } = _ref2;\n    return new Promise(async resolve => {\n      if (chainId && account) {\n        getSolanaInfo(chainId, 'getAccountInfo', [account, {\n          \"encoding\": \"jsonParsed\"\n        }]).then(res => {\n          resolve(res);\n        }).catch(err => {\n          console.log(err);\n          resolve('');\n        });\n      } else {\n        resolve('');\n      }\n    });\n  }, []);\n  const validAccount = useCallback(_ref3 => {\n    let {\n      chainId,\n      account,\n      token\n    } = _ref3;\n    return new Promise(async resolve => {\n      if (chainId && account && token) {\n        if (token === 'native') {\n          resolve(true);\n        } else {\n          const t = await getAccount(account, token);\n          Promise.all([getSolAccountInfo({\n            chainId,\n            account\n          }), getSolAccountInfo({\n            chainId,\n            account: t\n          })]).then(res => {\n            var _caResult$result, _caResult$result$valu, _caResult$result2, _caResult$result2$val, _caResult$result2$val2, _caResult$result2$val3, _caResult$result2$val4;\n            console.log(res);\n            const caResult = res[0];\n            const baResult = res[1];\n            if ((caResult === null || caResult === void 0 ? void 0 : (_caResult$result = caResult.result) === null || _caResult$result === void 0 ? void 0 : (_caResult$result$valu = _caResult$result.value) === null || _caResult$result$valu === void 0 ? void 0 : _caResult$result$valu.owner) === SOLBASEADDRESS) {\n              var _baResult$result, _baResult$result$valu, _baResult$result$valu2, _baResult$result$valu3, _baResult$result$valu4;\n              if ((baResult === null || baResult === void 0 ? void 0 : (_baResult$result = baResult.result) === null || _baResult$result === void 0 ? void 0 : (_baResult$result$valu = _baResult$result.value) === null || _baResult$result$valu === void 0 ? void 0 : (_baResult$result$valu2 = _baResult$result$valu.data) === null || _baResult$result$valu2 === void 0 ? void 0 : (_baResult$result$valu3 = _baResult$result$valu2.parsed) === null || _baResult$result$valu3 === void 0 ? void 0 : (_baResult$result$valu4 = _baResult$result$valu3.info) === null || _baResult$result$valu4 === void 0 ? void 0 : _baResult$result$valu4.mint) === token) {\n                resolve(t);\n              } else {\n                resolve(false);\n              }\n            } else if ((caResult === null || caResult === void 0 ? void 0 : (_caResult$result2 = caResult.result) === null || _caResult$result2 === void 0 ? void 0 : (_caResult$result2$val = _caResult$result2.value) === null || _caResult$result2$val === void 0 ? void 0 : (_caResult$result2$val2 = _caResult$result2$val.data) === null || _caResult$result2$val2 === void 0 ? void 0 : (_caResult$result2$val3 = _caResult$result2$val2.parsed) === null || _caResult$result2$val3 === void 0 ? void 0 : (_caResult$result2$val4 = _caResult$result2$val3.info) === null || _caResult$result2$val4 === void 0 ? void 0 : _caResult$result2$val4.mint) === token) {\n              resolve(t);\n            } else {\n              resolve(false);\n            }\n          });\n        }\n      } else {\n        resolve(false);\n      }\n    });\n  }, []);\n  return {\n    getAccount,\n    createAccount,\n    getSolAccountInfo,\n    validAccount\n  };\n}\nexport function useSolBalance() {\n  const {\n    getAccount\n  } = useSolCreateAccount();\n  const getSolBalance = useCallback(_ref4 => {\n    let {\n      chainId,\n      account\n    } = _ref4;\n    return new Promise(resolve => {\n      if (account) {\n        getSolanaInfo(chainId, 'getBalance', [account]).then(res => {\n          resolve(res);\n        }).catch(err => {\n          console.log(err);\n          resolve('');\n        });\n      } else {\n        resolve('');\n      }\n    });\n  }, []);\n  const getSolTokenBalance = useCallback(_ref5 => {\n    let {\n      chainId,\n      account,\n      token\n    } = _ref5;\n    return new Promise(async resolve => {\n      if (chainId && account && token) {\n        const acctontToToken = await getAccount(account, token);\n        if (acctontToToken) {\n          getSolanaInfo(chainId, 'getTokenAccountBalance', [acctontToToken.toBase58()]).then(res => {\n            resolve(res);\n          }).catch(err => {\n            console.log(err);\n            resolve('');\n          });\n        } else {\n          resolve('');\n        }\n      } else {\n        resolve('');\n      }\n    });\n  }, []);\n  const getSolTokenInfo = useCallback(_ref6 => {\n    let {\n      chainId,\n      account\n    } = _ref6;\n    return new Promise(async resolve => {\n      if (chainId && account) {\n        getSolanaInfo(chainId, 'getAccountInfo', ['GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX', {\n          \"encoding\": \"jsonParsed\"\n        }]).then(res => {\n          resolve(res);\n        }).catch(err => {\n          console.log(err);\n          resolve('');\n        });\n      } else {\n        resolve('');\n      }\n    });\n  }, []);\n  return {\n    getSolBalance,\n    getSolTokenBalance,\n    getSolTokenInfo\n  };\n}\nexport function useSolAllowance(token, spender, chainId, account) {\n  const setSolAllowance = useCallback(() => {\n    return new Promise(async (resolve, reject) => {\n      if (token && spender && account && chainId) {\n        resolve('');\n      } else {\n        reject('');\n      }\n    });\n  }, [token, spender, account, chainId]);\n  const getSolAllowance = useCallback(() => {\n    return new Promise(async resolve => {\n      resolve('');\n    });\n  }, [account, chainId, token, spender]);\n  return {\n    setSolAllowance,\n    getSolAllowance\n  };\n}\nvar State = /*#__PURE__*/function (State) {\n  State[\"Success\"] = \"Success\";\n  State[\"Failure\"] = \"Failure\";\n  State[\"Null\"] = \"Null\";\n  return State;\n}(State || {});\nexport function getSolTxnsStatus(txid, chainId) {\n  return new Promise(resolve => {\n    const data = {\n      msg: State.Null,\n      info: '',\n      error: ''\n    };\n    if (txid) {\n      getSolanaInfo(chainId, 'getTransaction', [txid, \"json\"]).then(res => {\n        var _res$result, _res$result$meta, _res$result$meta$stat, _res$result2, _res$result2$meta, _res$result2$meta$sta;\n        // console.log(res)\n        if ((res === null || res === void 0 ? void 0 : (_res$result = res.result) === null || _res$result === void 0 ? void 0 : (_res$result$meta = _res$result.meta) === null || _res$result$meta === void 0 ? void 0 : (_res$result$meta$stat = _res$result$meta.status) === null || _res$result$meta$stat === void 0 ? void 0 : _res$result$meta$stat.Ok) === null) {\n          data.msg = State.Success;\n          data.info = res === null || res === void 0 ? void 0 : res.result;\n        } else if (res === null || res === void 0 ? void 0 : (_res$result2 = res.result) === null || _res$result2 === void 0 ? void 0 : (_res$result2$meta = _res$result2.meta) === null || _res$result2$meta === void 0 ? void 0 : (_res$result2$meta$sta = _res$result2$meta.status) === null || _res$result2$meta$sta === void 0 ? void 0 : _res$result2$meta$sta.Err) {\n          data.msg = State.Failure;\n          data.error = 'Txns is failure!';\n        } else {\n          data.msg = State.Null;\n          data.error = 'Query is empty!';\n        }\n        resolve(data);\n      }).catch(err => {\n        console.log(err);\n        data.msg = State.Null;\n        data.error = 'Query is empty!';\n        resolve(data);\n      });\n    }\n  });\n}\n\n// getSolTxnsStatus('3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt', 'SOL_TEST').then(res => {\n//   console.log(res)\n// })\n\nexport function useSolCrossChain(routerToken, inputToken, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, useToChainId) {\n  const {\n    account,\n    chainId\n  } = useActiveReact();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    t\n  } = useTranslation();\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager();\n  const addTransaction = useTransactionAdder();\n  const {\n    getAccount\n  } = useSolCreateAccount();\n  const balance = useTokensBalance(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals, chainId);\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [typedValue, selectCurrency]);\n  return useMemo(() => {\n    if (!chainId || !selectCurrency || !receiveAddress || !useToChainId) return {};\n    const sufficientBalance = typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n    return {\n      balance: '',\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount ? async () => {\n        try {\n          var _window5, _window5$solana;\n          const contract = new Program(solRouter, routerToken, config.chainInfo[chainId].nodeRpc);\n          let routeraccount = await solanaWeb3.PublicKey.findProgramAddress([Buffer.from('Router')], new solanaWeb3.PublicKey(routerToken));\n          routeraccount = routeraccount[0];\n          let instruction;\n          // console.log(contract)\n          // console.log(routeraccount)\n          if (destConfig.routerABI.indexOf('anySwapOutNative') !== -1) {\n            // anySwapOutNative\n            instruction = await contract.instruction.swapoutNative(receiveAddress, new anchor.BN(inputAmount), new anchor.BN(useToChainId), {\n              accounts: {\n                signer: account,\n                routerAccount: routeraccount,\n                systemProgram: solanaWeb3.SystemProgram.programId\n              }\n            });\n          } else if (destConfig.routerABI.indexOf('anySwapOutUnderlying') !== -1) {\n            // anySwapOutUnderlying\n            const acctontToToken = await getAccount(account, inputToken);\n            instruction = await contract.instruction.swapoutBurn(receiveAddress, new anchor.BN(inputAmount), new anchor.BN(useToChainId), {\n              accounts: {\n                signer: account,\n                routerAccount: routeraccount,\n                from: acctontToToken,\n                mint: inputToken,\n                tokenProgram: TOKEN_PROGRAM_ID\n              }\n            });\n          } else if (destConfig.routerABI.indexOf('anySwapOut') !== -1) {\n            // anySwapOut\n            const acctontToToken = await getAccount(account, inputToken);\n            const routerToToken = await getAccount(routeraccount, inputToken);\n            instruction = await contract.instruction.swapoutTransfer(receiveAddress, new anchor.BN(inputAmount), new anchor.BN(useToChainId), {\n              accounts: {\n                signer: account,\n                routerAccount: routeraccount,\n                from: acctontToToken,\n                to: routerToToken,\n                mint: inputToken,\n                tokenProgram: TOKEN_PROGRAM_ID\n              }\n            });\n          }\n          // console.log(contract)\n          // console.log(instruction)\n          const connection = new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc);\n          const result = await connection.getLatestBlockhash();\n          // const result = await connection.getConfirmedBlock(blockNumber)\n          console.log(result);\n          const tx = new solanaWeb3.Transaction().add(instruction);\n          tx.lastValidBlockHeight = result.lastValidBlockHeight;\n          tx.recentBlockhash = result.blockhash;\n          tx.feePayer = new solanaWeb3.PublicKey(account);\n          console.log(tx);\n          const tsResult = await ((_window5 = window) === null || _window5 === void 0 ? void 0 : (_window5$solana = _window5.solana) === null || _window5$solana === void 0 ? void 0 : _window5$solana.signAndSendTransaction(tx));\n          console.log(tsResult);\n          const txReceipt = {\n            hash: tsResult.signature\n          };\n          if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n            const data = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              routerToken: routerToken\n            };\n            addTransaction(txReceipt, {\n              summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig.type,\n              routerToken: routerToken,\n              token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n              logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n              isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n              },\n              toInfo: {\n                symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n              }\n            });\n            recordsTxns(data);\n            onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n            // const tsResult = await window?.solana?.signTransaction(tx1)\n          }\n        } catch (error) {\n          onChangeViewErrorTip(error, true);\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, inputAmount, balance, useToChainId, userInterfaceBalanceValid]);\n}\n\n// enum SwapType {\n//   withdraw = 'withdraw',\n//   deposit = 'deposit',\n// }\n\n// export function useSolSwapPoolCallback(\n//   routerToken: string | null | undefined,\n//   selectCurrency: string | null | undefined,\n//   inputToken: string | null | undefined,\n//   typedValue: string | null | undefined,\n//   swapType: SwapType,\n//   selectChain: string | null | undefined,\n//   receiveAddress: string | null | undefined,\n//   destConfig: any,\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n//   const { account, chainId } = useActiveReact()\n//   return useMemo(() => {\n//     return {\n//       balance: '',\n//       execute: async () => {\n\n//         console.log(1)\n//       },\n//       inputError: ''\n//     }\n//   }, [routerToken, inputToken, swapType, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, chainId])\n// }\n\n// interface PoolCalls {\n//   token: string | null | undefined,\n//   account: string | null | undefined,\n//   anytoken: string | null | undefined,\n//   dec: number\n// }\n\n// interface PoolResult {\n//   [key:string]: {\n//     balanceOf: string,\n//     totalSupply: string,\n//     balance: string,\n//   }\n// }\n\n// export function useSolPoolDatas () {\n//   const getSolPoolDatas = useCallback(async(calls: Array<[PoolCalls]>, chainId: string | null | undefined): Promise<PoolResult> => {\n//     console.log(calls)\n//     console.log(chainId)\n//     return {\n//       'anytoken': {\n//         balanceOf: '',\n//         totalSupply: '',\n//         balance: '',\n//       }\n//     }\n//   }, [])\n//   return {\n//     getSolPoolDatas\n//   }\n// }","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useTranslation","solAddress","useActiveReact","config","useInterfaceBalanceValidManager","tryParseAmount3","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","useTokensBalance","solRouter","anchor","require","spl","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","Token","solanaWeb3","web3","Program","solAddressReg","SOLBASEADDRESS","solId","getSolanaInfo","chainId","method","params","Promise","resolve","reject","fetch","chainInfo","nodeRpc","headers","accept","body","JSON","stringify","then","res","json","catch","err","isSolAddress","address","test","useSolAddress","account","state","sol","useLoginSol","dispatch","loginSol","type","_window","_window$solana","window","solana","connect","_window2","_window2$solana","publicKey","toString","console","log","confirm","open","useSolCreateAccount","getAccount","token","base58publicKey","PublicKey","tokenpublicKey","acctontToToken","getAssociatedTokenAddress","error","createAccount","_ref","rejects","_window3","_window3$solana","_window4","_window4$solana","associatedAddress","connection","Connection","signer","tx","Transaction","add","createAssociatedTokenAccountInstruction","result","getLatestBlockhash","lastValidBlockHeight","recentBlockhash","blockhash","feePayer","tsResult","signAndSendTransaction","getSolAccountInfo","_ref2","validAccount","_ref3","t","all","_caResult$result","_caResult$result$valu","_caResult$result2","_caResult$result2$val","_caResult$result2$val2","_caResult$result2$val3","_caResult$result2$val4","caResult","baResult","value","owner","_baResult$result","_baResult$result$valu","_baResult$result$valu2","_baResult$result$valu3","_baResult$result$valu4","data","parsed","info","mint","useSolBalance","getSolBalance","_ref4","getSolTokenBalance","_ref5","toBase58","getSolTokenInfo","_ref6","useSolAllowance","spender","setSolAllowance","getSolAllowance","State","getSolTxnsStatus","txid","msg","Null","_res$result","_res$result$meta","_res$result$meta$stat","_res$result2","_res$result2$meta","_res$result2$meta$sta","meta","status","Ok","Success","Err","Failure","useSolCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","onChangeViewErrorTip","onChangeViewDtil","userInterfaceBalanceValid","addTransaction","balance","decimals","inputAmount","sufficientBalance","Number","toExact","execute","_window5","_window5$solana","contract","routeraccount","findProgramAddress","Buffer","from","instruction","routerABI","indexOf","swapoutNative","BN","accounts","routerAccount","systemProgram","SystemProgram","programId","swapoutBurn","tokenProgram","routerToToken","swapoutTransfer","to","txReceipt","hash","signature","formatvalue","symbol","version","pairid","summary","concat","toChainId","toAddress","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","undefined","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/solana/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\n// import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { AppState, AppDispatch } from '../../state'\nimport {solAddress} from './actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport config from \"../../config\"\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\n\nimport {useTokensBalance} from '../../hooks/useAllBalances'\n\nimport solRouter from './router.json'\n// import * as solanaWeb3 from '@solana/web3.js'\n// import * as spl from '@solana/spl-token'\n/* eslint-disable */\n// eslint-disable-next-line\n// import * as anchor from '@project-serum/anchor'\nconst anchor = require('@project-serum/anchor')\nimport * as spl from \"@solana/spl-token\";\n\nconst { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, Token} = spl\n// console.log(getAccount )\nconst solanaWeb3 = anchor.web3\nconst Program = anchor.Program\n// const spl = new anchor.Spl()\n// const Token = anchor.Spl.token\n// console.log(anchor )\n// console.log(solanaWeb3 )\n// console.log(spl )\n// console.log(Token )\n// console.log(solanaWeb3.SystemProgram.programId )\n// console.log(AnchorProvider.env() )\n// console.log(ASSOCIATED_TOKEN_PROGRAM_ID )\n// console.log(TOKEN_PROGRAM_ID )\n/* eslint-disable */\n\nconst solAddressReg = /^[0-9A-Za-z]{44}$/\n\nexport const SOLBASEADDRESS = '11111111111111111111111111111111'\n\nlet solId = 0\n// fetch('https://l2api.anyswap.exchange/v2/reswaptxns?hash=3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt&srcChainID=SOL_TEST&destChainID=5').then(res => res.json()).then(json => {console.log(json)})\n// export function getSolanaInfo(chainId:any, params:any) {\nexport function getSolanaInfo(chainId:any, method: string, params: any) {\n  return new Promise((resolve, reject) => {\n    fetch(config.chainInfo[chainId].nodeRpc, {\n      method: 'POST',\n      headers: { 'content-type': 'application/json', accept: 'application/json' },\n      body: JSON.stringify({\n        \"jsonrpc\": \"2.0\",\n        \"id\": solId ++,\n        \"method\": method,\n        \"params\": params\n      })\n    }).then(res => res.json()).then(json => {\n      resolve(json)\n    }).catch((err:any) => {\n      reject(err)\n    })\n  })\n}\n\nexport function isSolAddress (address:string):boolean | string {\n  if (solAddressReg.test(address)) {\n    return address\n  }\n  return false\n}\n\nexport function useSolAddress () {\n  const account:any = useSelector<AppState, AppState['sol']>(state => state.sol.solAddress)\n  // console.log(useWallet)\n  // console.log(useConnection)\n  return {\n    solAddress: account\n  }\n}\n\nexport function useLoginSol () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginSol = useCallback((type?:any) => {\n    if (window?.solana?.connect) {\n      window?.solana?.connect().then((res:any) => {\n        if (res?.publicKey) {\n          dispatch(solAddress({address: res.publicKey.toString()}))\n        }\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    } else {\n      if (!type) {\n        if (confirm('Please open or install Solana wallet.') === true) {\n          window.open('https://phantom.app/download')\n        }\n      }\n    }\n  }, [])\n  return {\n    loginSol\n  }\n}\n\nexport function useSolCreateAccount () {\n\n  const getAccount = useCallback((account, token) => {\n    return new Promise(async(resolve) => {\n      if (account && token) {\n        try {\n          const base58publicKey = new solanaWeb3.PublicKey(account)\n          const tokenpublicKey = new solanaWeb3.PublicKey(token)\n          const acctontToToken = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, tokenpublicKey, base58publicKey, true)\n          resolve(acctontToToken)\n        } catch (error) {\n          console.log(error)\n          resolve('')\n        }\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  // const createAccount = useCallback(async(chainId, account, token) => {\n  const createAccount = useCallback(({chainId, account, token}: {chainId: any, account:string|null|undefined, token:string|null|undefined}) => {\n    return new Promise(async(resolve, rejects) => {\n\n      try {\n        // const account = '8fBfAE4gVbv253UgwkwBT5TaV5SaZ7JJWgmQoqbEEei5'\n        // const t = 'GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX'\n        const tokenpublicKey = new solanaWeb3.PublicKey(token)\n        const associatedAddress:any = await getAccount(account, token)\n        const connection = new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc)\n        const signer = await window?.solana?.connect()\n        // const token  = new Token(connection, tokenpublicKey, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, new solanaWeb3.PublicKey(account))\n        // console.log(token)\n        // console.log(connection)\n        console.log(signer)\n        const tx = new solanaWeb3.Transaction()\n        tx.add(\n          Token.createAssociatedTokenAccountInstruction(\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n            TOKEN_PROGRAM_ID,\n            tokenpublicKey,\n            associatedAddress,\n            // new solanaWeb3.PublicKey(account),\n            new solanaWeb3.PublicKey(account),\n            // signer?.publicKey,\n            signer?.publicKey\n          )\n        )\n        console.log(tx)\n        const result = await connection.getLatestBlockhash()\n        // const result = await connection.getConfirmedBlock(blockNumber)\n        console.log(tx)\n        console.log(result)\n        tx.lastValidBlockHeight = result.lastValidBlockHeight;\n        tx.recentBlockhash = result.blockhash;\n        tx.feePayer = new solanaWeb3.PublicKey(signer?.publicKey)\n        const tsResult = await window?.solana?.signAndSendTransaction(tx)\n        console.log(tsResult)\n        resolve(true)\n      } catch (error) {\n        console.log(error)\n        rejects(error)\n      }\n    })\n  }, [])\n\n  const getSolAccountInfo = useCallback(({chainId, account}: {chainId: any, account:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account) {\n        getSolanaInfo(chainId, 'getAccountInfo', [account, {\n          \"encoding\": \"jsonParsed\"\n        }]).then((res:any) => {\n          resolve(res)\n        }).catch((err:any) => {\n          console.log(err)\n          resolve('')\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  const validAccount = useCallback(({chainId, account, token}: {chainId: any, account:string|null|undefined, token:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account && token) {\n        if (token === 'native') {\n          resolve(true)\n        } else {\n          const t:any = await getAccount(account, token)\n          Promise.all([\n            getSolAccountInfo({chainId, account}),\n            getSolAccountInfo({chainId, account: t}),\n          ]).then((res:any) => {\n            console.log(res)\n            const caResult = res[0]\n            const baResult = res[1]\n            if (caResult?.result?.value?.owner === SOLBASEADDRESS) {\n              if (baResult?.result?.value?.data?.parsed?.info?.mint === token) {\n                resolve(t)\n              } else {\n                resolve(false)\n              }\n            } else if (caResult?.result?.value?.data?.parsed?.info?.mint === token) {\n              resolve(t)\n            } else {\n              resolve(false)\n            }\n          })\n        }\n      } else {\n        resolve(false)\n      }\n    })\n  }, [])\n\n  return {\n    getAccount,\n    createAccount,\n    getSolAccountInfo,\n    validAccount\n  }\n}\n\n\nexport function useSolBalance () {\n  const {getAccount} = useSolCreateAccount()\n  const getSolBalance = useCallback(({chainId, account}: {chainId: any, account:string|null|undefined}) => {\n    return new Promise((resolve) => {\n      if (account) {\n        getSolanaInfo(chainId, 'getBalance', [account]).then((res:any) => {\n          resolve(res)\n        }).catch((err:any) => {\n          console.log(err)\n          resolve('')\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, []) \n\n  const getSolTokenBalance = useCallback(({chainId, account, token}: {chainId: any, account:string|null|undefined, token:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account && token) {\n        const acctontToToken:any = await getAccount(account, token)\n        if (acctontToToken) {\n          getSolanaInfo(chainId, 'getTokenAccountBalance', [acctontToToken.toBase58()]).then((res:any) => {\n            resolve(res)\n          }).catch((err:any) => {\n            console.log(err)\n            resolve('')\n          })\n        } else {\n          resolve('')\n        }\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  const getSolTokenInfo = useCallback(({chainId, account}: {chainId: any, account:string|null|undefined}) => {\n    return new Promise(async(resolve) => {\n      if (chainId && account) {\n        getSolanaInfo(chainId, 'getAccountInfo', ['GkzTnqZSasjZ5geL4cbvPErNVB9xWby4zYN7hpW5k5iX', {\n          \"encoding\": \"jsonParsed\"\n        }]).then((res:any) => {\n          resolve(res)\n        }).catch((err:any) => {\n          console.log(err)\n          resolve('')\n        })\n      } else {\n        resolve('')\n      }\n    })\n  }, [])\n\n  return {\n    getSolBalance,\n    getSolTokenBalance,\n    getSolTokenInfo\n  }\n}\n\nexport function useSolAllowance(\n  token: string | null | undefined,\n  spender: string | null | undefined,\n  chainId: string | null | undefined,\n  account: string | null | undefined,\n) {\n  const setSolAllowance = useCallback((): Promise<any> => {\n    return new Promise(async(resolve, reject) => {\n      if (token && spender && account && chainId) {\n        resolve('')\n      } else {\n        reject('')\n      }\n    })\n  }, [token, spender, account, chainId])\n\n  const getSolAllowance = useCallback(() => {\n    return new Promise(async(resolve): Promise<any> => {\n      resolve('')\n    })\n  }, [account, chainId, token, spender])\n\n  return {\n    setSolAllowance,\n    getSolAllowance,\n  }\n}\n\nenum State {\n  Success = 'Success',\n  Failure = 'Failure',\n  Null = 'Null',\n}\n\ninterface TxDataResult {\n  msg: State,\n  info: any,\n  error: any\n}\nexport function getSolTxnsStatus (txid:string, chainId:any) {\n  return new Promise(resolve => {\n    const data:TxDataResult = {\n      msg: State.Null,\n      info: '',\n      error: ''\n    }\n    if (txid) {\n      getSolanaInfo(chainId, 'getTransaction', [txid, \"json\"]).then((res:any) => {\n        // console.log(res)\n        if (res?.result?.meta?.status?.Ok === null) {\n          data.msg = State.Success\n          data.info = res?.result\n        } else if (res?.result?.meta?.status?.Err) {\n          data.msg = State.Failure\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = State.Null\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      }).catch((err:any) => {\n        console.log(err)\n        data.msg = State.Null\n        data.error = 'Query is empty!'\n        resolve(data)\n      })\n    }\n  })\n}\n\n// getSolTxnsStatus('3SxanA7YwydbnkJLZPjwtDYQCeAmiQ3YYNTFshk54u56t2XvDkEj2Ed65BAAzZv4QWNvUw3fA23VBQNGuZWy3tbt', 'SOL_TEST').then(res => {\n//   console.log(res)\n// })\n\nexport function useSolCrossChain (\n  routerToken: string | null | undefined,\n  inputToken: string | null | undefined,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: string | null | undefined,\n  typedValue: string | undefined,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const { t } = useTranslation()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n  const addTransaction = useTransactionAdder()\n  const {getAccount} = useSolCreateAccount()\n\n  const balance = useTokensBalance(selectCurrency?.address, selectCurrency?.decimals, chainId)\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  return useMemo(() => {\n    if (!chainId || !selectCurrency || !receiveAddress || !useToChainId) return {}\n\n    const sufficientBalance = typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n\n    return {\n      balance: '',\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n      ?async () => {\n        try {\n          const contract = new Program(solRouter, routerToken, config.chainInfo[chainId].nodeRpc)\n          let routeraccount = await solanaWeb3.PublicKey.findProgramAddress([Buffer.from('Router')], new solanaWeb3.PublicKey(routerToken))\n          routeraccount = routeraccount[0]\n          let instruction:any\n          // console.log(contract)\n          // console.log(routeraccount)\n          if (destConfig.routerABI.indexOf('anySwapOutNative') !== -1) { // anySwapOutNative\n            instruction = await contract.instruction.swapoutNative(\n              receiveAddress,\n              new anchor.BN(inputAmount),\n              new anchor.BN(useToChainId),\n              {\n                accounts: {\n                  signer: account,\n                  routerAccount: routeraccount,\n                  systemProgram: solanaWeb3.SystemProgram.programId,\n                },\n              }\n            );\n          } else if (destConfig.routerABI.indexOf('anySwapOutUnderlying') !== -1) { // anySwapOutUnderlying\n            const acctontToToken = await getAccount(account, inputToken)\n            instruction = await contract.instruction.swapoutBurn(\n              receiveAddress,\n              new anchor.BN(inputAmount),\n              new anchor.BN(useToChainId),\n              {\n                accounts: {\n                  signer: account,\n                  routerAccount: routeraccount,\n                  from: acctontToToken,\n                  mint: inputToken,\n                  tokenProgram: TOKEN_PROGRAM_ID\n                },\n              }\n            );\n          } else if (destConfig.routerABI.indexOf('anySwapOut') !== -1) { // anySwapOut\n            const acctontToToken = await getAccount(account, inputToken)\n            const routerToToken = await getAccount(routeraccount, inputToken)\n            instruction = await contract.instruction.swapoutTransfer(\n              receiveAddress,\n              new anchor.BN(inputAmount),\n              new anchor.BN(useToChainId),\n              {\n                accounts: {\n                  signer: account,\n                  routerAccount: routeraccount,\n                  from: acctontToToken,\n                  to: routerToToken,\n                  mint: inputToken,\n                  tokenProgram: TOKEN_PROGRAM_ID\n                },\n              }\n            );\n          }\n          // console.log(contract)\n          // console.log(instruction)\n          const connection = new solanaWeb3.Connection(config.chainInfo[chainId].nodeRpc)\n          const result = await connection.getLatestBlockhash()\n          // const result = await connection.getConfirmedBlock(blockNumber)\n          console.log(result)\n          const tx = new solanaWeb3.Transaction().add(instruction)\n          tx.lastValidBlockHeight = result.lastValidBlockHeight;\n          tx.recentBlockhash = result.blockhash;\n          tx.feePayer = new solanaWeb3.PublicKey(account)\n          console.log(tx)\n          const tsResult = await window?.solana?.signAndSendTransaction(tx)\n          console.log(tsResult)\n          const txReceipt = {hash: tsResult.signature}\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n            // const tsResult = await window?.solana?.signTransaction(tx1)\n          }\n        } catch (error) {\n          onChangeViewErrorTip(error, true)\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, inputAmount, balance, useToChainId, userInterfaceBalanceValid])\n}\n\n// enum SwapType {\n//   withdraw = 'withdraw',\n//   deposit = 'deposit',\n// }\n\n// export function useSolSwapPoolCallback(\n//   routerToken: string | null | undefined,\n//   selectCurrency: string | null | undefined,\n//   inputToken: string | null | undefined,\n//   typedValue: string | null | undefined,\n//   swapType: SwapType,\n//   selectChain: string | null | undefined,\n//   receiveAddress: string | null | undefined,\n//   destConfig: any,\n// ): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n//   const { account, chainId } = useActiveReact()\n//   return useMemo(() => {\n//     return {\n//       balance: '',\n//       execute: async () => {\n\n//         console.log(1)\n//       },\n//       inputError: ''\n//     }\n//   }, [routerToken, inputToken, swapType, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, chainId])\n// }\n\n// interface PoolCalls {\n//   token: string | null | undefined,\n//   account: string | null | undefined,\n//   anytoken: string | null | undefined,\n//   dec: number\n// }\n\n// interface PoolResult {\n//   [key:string]: {\n//     balanceOf: string,\n//     totalSupply: string,\n//     balance: string,\n//   }\n// }\n\n// export function useSolPoolDatas () {\n//   const getSolPoolDatas = useCallback(async(calls: Array<[PoolCalls]>, chainId: string | null | undefined): Promise<PoolResult> => {\n//     console.log(calls)\n//     console.log(chainId)\n//     return {\n//       'anytoken': {\n//         balanceOf: '',\n//         totalSupply: '',\n//         balance: '',\n//       }\n//     }\n//   }, [])\n//   return {\n//     getSolPoolDatas\n//   }\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}