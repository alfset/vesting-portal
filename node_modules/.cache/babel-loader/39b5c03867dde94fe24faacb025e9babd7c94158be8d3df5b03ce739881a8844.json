{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemorySigner = exports.Signer = void 0;\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n  constructor(keyStore) {\n    super();\n    this.keyStore = keyStore;\n  }\n  /**\n   * Creates a single account Signer instance with account, network and keyPair provided.\n   *\n   * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n   *\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account to assign the key pair to\n   * @param keyPair The keyPair to use for signing\n   */\n  static async fromKeyPair(networkId, accountId, keyPair) {\n    const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n    await keyStore.setKey(networkId, accountId, keyPair);\n    return new InMemorySigner(keyStore);\n  }\n  /**\n   * Creates a public key for the account given\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<PublicKey>}\n   */\n  async createKey(accountId, networkId) {\n    const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n    await this.keyStore.setKey(networkId, accountId, keyPair);\n    return keyPair.getPublicKey();\n  }\n  /**\n   * Gets the existing public key for a given account\n   * @param accountId The NEAR account to assign a public key to\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<PublicKey>} Returns the public key or null if not found\n   */\n  async getPublicKey(accountId, networkId) {\n    const keyPair = await this.keyStore.getKey(networkId, accountId);\n    if (keyPair === null) {\n      return null;\n    }\n    return keyPair.getPublicKey();\n  }\n  /**\n   * @param message A message to be signed, typically a serialized transaction\n   * @param accountId the NEAR account signing the message\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns {Promise<Signature>}\n   */\n  async signMessage(message, accountId, networkId) {\n    const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n    if (!accountId) {\n      throw new Error('InMemorySigner requires provided account id');\n    }\n    const keyPair = await this.keyStore.getKey(networkId, accountId);\n    if (keyPair === null) {\n      throw new Error(\"Key for \".concat(accountId, \" not found in \").concat(networkId));\n    }\n    return keyPair.sign(hash);\n  }\n  toString() {\n    return \"InMemorySigner(\".concat(this.keyStore, \")\");\n  }\n}\nexports.InMemorySigner = InMemorySigner;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","InMemorySigner","Signer","js_sha256_1","require","key_pair_1","in_memory_key_store_1","constructor","keyStore","fromKeyPair","networkId","accountId","keyPair","InMemoryKeyStore","setKey","createKey","KeyPair","fromRandom","getPublicKey","getKey","signMessage","message","hash","Uint8Array","default","sha256","array","Error","concat","sign","toString"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/near-api-js/lib/signer.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemorySigner = exports.Signer = void 0;\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    /**\n     * Creates a single account Signer instance with account, network and keyPair provided.\n     *\n     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n     *\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account to assign the key pair to\n     * @param keyPair The keyPair to use for signing\n     */\n    static async fromKeyPair(networkId, accountId, keyPair) {\n        const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n        await keyStore.setKey(networkId, accountId, keyPair);\n        return new InMemorySigner(keyStore);\n    }\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    async createKey(accountId, networkId) {\n        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n        await this.keyStore.setKey(networkId, accountId, keyPair);\n        return keyPair.getPublicKey();\n    }\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n    async getPublicKey(accountId, networkId) {\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            return null;\n        }\n        return keyPair.getPublicKey();\n    }\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n    async signMessage(message, accountId, networkId) {\n        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n        if (!accountId) {\n            throw new Error('InMemorySigner requires provided account id');\n        }\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            throw new Error(`Key for ${accountId} not found in ${networkId}`);\n        }\n        return keyPair.sign(hash);\n    }\n    toString() {\n        return `InMemorySigner(${this.keyStore})`;\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,MAAM,GAAG,KAAK,CAAC;AAChD,MAAMC,WAAW,GAAGT,eAAe,CAACU,OAAO,CAAC,WAAW,CAAC,CAAC;AACzD,MAAMC,UAAU,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC9C,MAAME,qBAAqB,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AACzE;AACA;AACA;AACA,MAAMF,MAAM,CAAC;AAEbH,OAAO,CAACG,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA,MAAMD,cAAc,SAASC,MAAM,CAAC;EAChCK,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,aAAaC,WAAWA,CAACC,SAAS,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACpD,MAAMJ,QAAQ,GAAG,IAAIF,qBAAqB,CAACO,gBAAgB,CAAC,CAAC;IAC7D,MAAML,QAAQ,CAACM,MAAM,CAACJ,SAAS,EAAEC,SAAS,EAAEC,OAAO,CAAC;IACpD,OAAO,IAAIX,cAAc,CAACO,QAAQ,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMO,SAASA,CAACJ,SAAS,EAAED,SAAS,EAAE;IAClC,MAAME,OAAO,GAAGP,UAAU,CAACW,OAAO,CAACC,UAAU,CAAC,SAAS,CAAC;IACxD,MAAM,IAAI,CAACT,QAAQ,CAACM,MAAM,CAACJ,SAAS,EAAEC,SAAS,EAAEC,OAAO,CAAC;IACzD,OAAOA,OAAO,CAACM,YAAY,CAAC,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMA,YAAYA,CAACP,SAAS,EAAED,SAAS,EAAE;IACrC,MAAME,OAAO,GAAG,MAAM,IAAI,CAACJ,QAAQ,CAACW,MAAM,CAACT,SAAS,EAAEC,SAAS,CAAC;IAChE,IAAIC,OAAO,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;IACf;IACA,OAAOA,OAAO,CAACM,YAAY,CAAC,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAME,WAAWA,CAACC,OAAO,EAAEV,SAAS,EAAED,SAAS,EAAE;IAC7C,MAAMY,IAAI,GAAG,IAAIC,UAAU,CAACpB,WAAW,CAACqB,OAAO,CAACC,MAAM,CAACC,KAAK,CAACL,OAAO,CAAC,CAAC;IACtE,IAAI,CAACV,SAAS,EAAE;MACZ,MAAM,IAAIgB,KAAK,CAAC,6CAA6C,CAAC;IAClE;IACA,MAAMf,OAAO,GAAG,MAAM,IAAI,CAACJ,QAAQ,CAACW,MAAM,CAACT,SAAS,EAAEC,SAAS,CAAC;IAChE,IAAIC,OAAO,KAAK,IAAI,EAAE;MAClB,MAAM,IAAIe,KAAK,YAAAC,MAAA,CAAYjB,SAAS,oBAAAiB,MAAA,CAAiBlB,SAAS,CAAE,CAAC;IACrE;IACA,OAAOE,OAAO,CAACiB,IAAI,CAACP,IAAI,CAAC;EAC7B;EACAQ,QAAQA,CAAA,EAAG;IACP,yBAAAF,MAAA,CAAyB,IAAI,CAACpB,QAAQ;EAC1C;AACJ;AACAT,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}