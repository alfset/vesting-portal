{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["../../../src/@terra-dev/web-connector-interface/connector.ts"],"sourcesContent":["import type { CreateTxOptions } from '@terra-money/terra.js';\nimport type { Observable, Observer } from 'rxjs';\nimport { WebConnectorNetworkInfo } from './models/network';\nimport { WebConnectorStates } from './models/states';\nimport { WebConnectorStatus } from './models/status';\nimport { WebConnectorTxResult } from './models/tx';\n\nexport interface TerraWebConnectorInfo {\n  icon: string;\n  name: string;\n  url: string;\n}\n\nexport interface TerraWebConnector {\n  getInfo: () => TerraWebConnectorInfo;\n\n  // ---------------------------------------------\n  // open / close\n  // ---------------------------------------------\n  checkBrowserAvailability: (userAgent: string) => boolean;\n\n  open: (\n    hostWindow: Window,\n    statusObserver: Observer<WebConnectorStatus>,\n    statesObserver: Observer<WebConnectorStates>,\n  ) => void;\n\n  close: () => void;\n\n  // ---------------------------------------------\n  // commands\n  // ---------------------------------------------\n  requestApproval: () => void;\n\n  refetchStates: () => void;\n\n  post: (\n    terraAddress: string,\n    tx: CreateTxOptions,\n  ) => Observable<WebConnectorTxResult>;\n\n  hasCW20Tokens: (\n    chainID: string,\n    ...tokenAddrs: string[]\n  ) => Promise<{ [tokenAddr: string]: boolean }>;\n\n  addCW20Tokens: (\n    chainID: string,\n    ...tokenAddrs: string[]\n  ) => Promise<{ [tokenAddr: string]: boolean }>;\n\n  hasNetwork: (\n    network: Omit<WebConnectorNetworkInfo, 'name'>,\n  ) => Promise<boolean>;\n\n  addNetwork: (network: WebConnectorNetworkInfo) => Promise<boolean>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}