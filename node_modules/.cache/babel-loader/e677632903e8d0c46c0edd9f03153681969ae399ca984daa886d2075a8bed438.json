{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolId = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _clone = require('lodash/clone');\nvar _clone2 = _interopRequireDefault(_clone);\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * LiquidityPoolId class represents the asset referenced by a trustline to a\n * liquidity pool.\n *\n * @constructor\n * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.\n */\nvar LiquidityPoolId = exports.LiquidityPoolId = function () {\n  function LiquidityPoolId(liquidityPoolId) {\n    _classCallCheck(this, LiquidityPoolId);\n    if (!liquidityPoolId) {\n      throw new Error('liquidityPoolId cannot be empty');\n    }\n    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {\n      throw new Error('Liquidity pool ID is not a valid hash');\n    }\n    this.liquidityPoolId = liquidityPoolId;\n  }\n\n  /**\n   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.\n   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolId}\n   */\n\n  _createClass(LiquidityPoolId, [{\n    key: 'toXDRObject',\n    /**\n     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.\n     *\n     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please\n     * refer to the\n     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.\n     *\n     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object\n     */\n    value: function toXDRObject() {\n      var xdrPoolId = _xdr2.default.PoolId.fromXDR(this.liquidityPoolId, 'hex');\n      return new _xdr2.default.TrustLineAsset('assetTypePoolShare', xdrPoolId);\n    }\n\n    /**\n     * @returns {string} Liquidity pool ID.\n     */\n  }, {\n    key: 'getLiquidityPoolId',\n    value: function getLiquidityPoolId() {\n      return (0, _clone2.default)(this.liquidityPoolId);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.liquidityPoolId === asset.getLiquidityPoolId();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return 'liquidity_pool:' + this.liquidityPoolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(tlAssetXdr) {\n      var assetType = tlAssetXdr.switch();\n      if (assetType === _xdr2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString('hex');\n        return new this(liquidityPoolId);\n      }\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n  return LiquidityPoolId;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","LiquidityPoolId","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_clone","require","_clone2","_interopRequireDefault","_xdr","_xdr2","obj","__esModule","default","_classCallCheck","instance","TypeError","liquidityPoolId","Error","test","toXDRObject","xdrPoolId","PoolId","fromXDR","TrustLineAsset","getLiquidityPoolId","getAssetType","equals","asset","toString","fromOperation","tlAssetXdr","assetType","switch","AssetType","assetTypePoolShare","name"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/liquidity_pool_id.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolId = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * LiquidityPoolId class represents the asset referenced by a trustline to a\n * liquidity pool.\n *\n * @constructor\n * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.\n */\nvar LiquidityPoolId = exports.LiquidityPoolId = function () {\n  function LiquidityPoolId(liquidityPoolId) {\n    _classCallCheck(this, LiquidityPoolId);\n\n    if (!liquidityPoolId) {\n      throw new Error('liquidityPoolId cannot be empty');\n    }\n    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {\n      throw new Error('Liquidity pool ID is not a valid hash');\n    }\n\n    this.liquidityPoolId = liquidityPoolId;\n  }\n\n  /**\n   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.\n   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolId}\n   */\n\n\n  _createClass(LiquidityPoolId, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.\n     *\n     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please\n     * refer to the\n     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.\n     *\n     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object\n     */\n    value: function toXDRObject() {\n      var xdrPoolId = _xdr2.default.PoolId.fromXDR(this.liquidityPoolId, 'hex');\n      return new _xdr2.default.TrustLineAsset('assetTypePoolShare', xdrPoolId);\n    }\n\n    /**\n     * @returns {string} Liquidity pool ID.\n     */\n\n  }, {\n    key: 'getLiquidityPoolId',\n    value: function getLiquidityPoolId() {\n      return (0, _clone2.default)(this.liquidityPoolId);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.liquidityPoolId === asset.getLiquidityPoolId();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return 'liquidity_pool:' + this.liquidityPoolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(tlAssetXdr) {\n      var assetType = tlAssetXdr.switch();\n      if (assetType === _xdr2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString('hex');\n        return new this(liquidityPoolId);\n      }\n\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n\n  return LiquidityPoolId;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}