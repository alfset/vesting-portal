{"ast":null,"code":"import _taggedTemplateLiteral from \"/workspace/Planq-Dapps/vesting-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject,\n  _templateObject2,\n  _jsxFileName = \"/workspace/Planq-Dapps/vesting-portal/src/components/NumericalInput/index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { escapeRegExp } from '../../utils';\nconst StyledInput = styled.input(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  width: 100%;\\n  position: relative;\\n  font-weight: 500;\\n  outline: none;\\n  border: none;\\n  flex: 1 1 auto;\\n  background-color: \", \";\\n  font-size: \", \";\\n  text-align: \", \";\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding: 0px;\\n  -webkit-appearance: textfield;\\n  height: 70px;\\n  background: none;\\n  border-bottom: 0.0625rem solid \", \";\\n  margin-right: 1.875rem;\\n\\n  ::-webkit-search-decoration {\\n    -webkit-appearance: none;\\n  }\\n\\n  [type='number'] {\\n    -moz-appearance: textfield;\\n  }\\n\\n  ::-webkit-outer-spin-button,\\n  ::-webkit-inner-spin-button {\\n    -webkit-appearance: none;\\n  }\\n\\n  ::placeholder {\\n    // color: \", \";\\n    color:#DADADA;\\n  }\\n  \", \";\\n  &.error {\\n    color: \", \";\\n  }\\n\"])), _ref => {\n  let {\n    error,\n    theme\n  } = _ref;\n  return error ? 'rgb(255, 104, 113)' : theme.textColorBold;\n}, _ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.bg1;\n}, _ref3 => {\n  let {\n    fontSize\n  } = _ref3;\n  return fontSize !== null && fontSize !== void 0 ? fontSize : '44px';\n}, _ref4 => {\n  let {\n    align\n  } = _ref4;\n  return align && align;\n}, _ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.inputBorder;\n}, _ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return theme.text4;\n}, _ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return theme.mediaWidth.upToLarge(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    width: 100%;\\n    margin-right: 0;\\n    height: 50px;\\n    font-size: 24px;\\n  \"])));\n}, _ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return theme.red1;\n});\nconst inputRegex = RegExp(\"^\\\\d*(?:\\\\\\\\[.])?\\\\d*$\"); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput(_ref9) {\n  let {\n    value,\n    onUserInput,\n    placeholder,\n    ...rest\n  } = _ref9;\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n  return /*#__PURE__*/React.createElement(StyledInput, Object.assign({}, rest, {\n    value: value,\n    onChange: event => {\n      // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n      enforcer(event.target.value.replace(/,/g, ''));\n    }\n    // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\"\n    // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }));\n});\nexport default Input;\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group","map":{"version":3,"names":["React","styled","escapeRegExp","StyledInput","input","_templateObject","_taggedTemplateLiteral","_ref","error","theme","textColorBold","_ref2","bg1","_ref3","fontSize","_ref4","align","_ref5","inputBorder","_ref6","text4","_ref7","mediaWidth","upToLarge","_templateObject2","_ref8","red1","inputRegex","RegExp","Input","memo","InnerInput","_ref9","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","createElement","Object","assign","onChange","event","target","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/components/NumericalInput/index.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? 'rgb(255, 104, 113)' : theme.textColorBold)};\n  width: 100%;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: ${({ fontSize }) => fontSize ?? '44px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n  height: 70px;\n  background: none;\n  border-bottom: 0.0625rem solid ${({ theme }) => theme.inputBorder};\n  margin-right: 1.875rem;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    // color: ${({ theme }) => theme.text4};\n    color:#DADADA;\n  }\n  ${({ theme }) => theme.mediaWidth.upToLarge`\n    width: 100%;\n    margin-right: 0;\n    height: 50px;\n    font-size: 24px;\n  `};\n  &.error {\n    color: ${({ theme }) => theme.red1};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={event => {\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, ''))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title=\"Token Amount\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,YAAY,QAAQ,aAAa;AAE1C,MAAMC,WAAW,GAAGF,MAAM,CAACG,KAAK,CAAAC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,ixBACrBC,IAAA;EAAA,IAAC;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAAA,OAAMC,KAAK,GAAG,oBAAoB,GAAGC,KAAK,CAACC,aAAa;AAAA,CAAC,EAO/DC,KAAA;EAAA,IAAC;IAAEF;EAAM,CAAC,GAAAE,KAAA;EAAA,OAAKF,KAAK,CAACG,GAAG;AAAA,GAC/BC,KAAA;EAAA,IAAC;IAAEC;EAAS,CAAC,GAAAD,KAAA;EAAA,OAAKC,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,MAAM;AAAA,GACnCC,KAAA;EAAA,IAAC;IAAEC;EAAM,CAAC,GAAAD,KAAA;EAAA,OAAKC,KAAK,IAAIA,KAAK;AAAA,GAQVC,KAAA;EAAA,IAAC;IAAER;EAAM,CAAC,GAAAQ,KAAA;EAAA,OAAKR,KAAK,CAACS,WAAW;AAAA,GAiBnDC,KAAA;EAAA,IAAC;IAAEV;EAAM,CAAC,GAAAU,KAAA;EAAA,OAAKV,KAAK,CAACW,KAAK;AAAA,GAGtCC,KAAA;EAAA,IAAC;IAAEZ;EAAM,CAAC,GAAAY,KAAA;EAAA,OAAKZ,KAAK,CAACa,UAAU,CAACC,SAAS,CAAAC,gBAAA,KAAAA,gBAAA,GAAAlB,sBAAA;AAAA,CAK1C,EAEUmB,KAAA;EAAA,IAAC;IAAEhB;EAAM,CAAC,GAAAgB,KAAA;EAAA,OAAKhB,KAAK,CAACiB,IAAI;AAAA,EAErC;AAED,MAAMC,UAAU,GAAGC,MAAM,yBAAyB,CAAC,EAAC;;AAEpD,OAAO,MAAMC,KAAK,GAAG7B,KAAK,CAAC8B,IAAI,CAAC,SAASC,UAAUA,CAAAC,KAAA,EAWqB;EAAA,IAXpB;IAClDC,KAAK;IACLC,WAAW;IACXC,WAAW;IACX,GAAGC;EAOgE,CAAC,GAAAJ,KAAA;EACpE,MAAMK,QAAQ,GAAIC,aAAqB,IAAK;IAC1C,IAAIA,aAAa,KAAK,EAAE,IAAIX,UAAU,CAACY,IAAI,CAACrC,YAAY,CAACoC,aAAa,CAAC,CAAC,EAAE;MACxEJ,WAAW,CAACI,aAAa,CAAC;IAC5B;EACF,CAAC;EAED,oBACEtC,KAAA,CAAAwC,aAAA,CAACrC,WAAW,EAAAsC,MAAA,CAAAC,MAAA,KACNN,IAAI;IACRH,KAAK,EAAEA,KAAM;IACbU,QAAQ,EAAEC,KAAK,IAAI;MACjB;MACAP,QAAQ,CAACO,KAAK,CAACC,MAAM,CAACZ,KAAK,CAACa,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAChD;IACA;IAAA;IACAC,SAAS,EAAC,SAAS;IACnBC,KAAK,EAAC,cAAc;IACpBC,YAAY,EAAC,KAAK;IAClBC,WAAW,EAAC;IACZ;IAAA;IACAC,IAAI,EAAC,MAAM;IACXC,OAAO,EAAC,qBAAqB;IAC7BjB,WAAW,EAAEA,WAAW,IAAI,KAAM;IAClCkB,SAAS,EAAE,CAAE;IACbC,SAAS,EAAE,EAAG;IACdC,UAAU,EAAC,OAAO;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACnB,CAAC;AAEN,CAAC,CAAC;AAEF,eAAehC,KAAK;;AAEpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}