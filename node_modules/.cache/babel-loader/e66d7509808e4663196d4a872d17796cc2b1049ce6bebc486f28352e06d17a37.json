{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst combiner_1 = require('./combiner');\nconst parser_1 = require('./parser');\nconst typeFields_1 = require('./typeFields');\nconst utils_1 = require('./utils');\nclass Psbt {\n  constructor(tx) {\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx\n    };\n  }\n  static fromBase64(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromHex(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromBuffer(buffer, txFromBuffer) {\n    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n    const psbt = new this(results.globalMap.unsignedTx);\n    Object.assign(psbt, results);\n    return psbt;\n  }\n  toBase64() {\n    const buffer = this.toBuffer();\n    return buffer.toString('base64');\n  }\n  toHex() {\n    const buffer = this.toBuffer();\n    return buffer.toString('hex');\n  }\n  toBuffer() {\n    return parser_1.psbtToBuffer(this);\n  }\n  updateGlobal(updateData) {\n    utils_1.updateGlobal(updateData, this.globalMap);\n    return this;\n  }\n  updateInput(inputIndex, updateData) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.updateInput(updateData, input);\n    return this;\n  }\n  updateOutput(outputIndex, updateData) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.updateOutput(updateData, output);\n    return this;\n  }\n  addUnknownKeyValToGlobal(keyVal) {\n    utils_1.checkHasKey(keyVal, this.globalMap.unknownKeyVals, utils_1.getEnumLength(typeFields_1.GlobalTypes));\n    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n    this.globalMap.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.checkHasKey(keyVal, input.unknownKeyVals, utils_1.getEnumLength(typeFields_1.InputTypes));\n    if (!input.unknownKeyVals) input.unknownKeyVals = [];\n    input.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.checkHasKey(keyVal, output.unknownKeyVals, utils_1.getEnumLength(typeFields_1.OutputTypes));\n    if (!output.unknownKeyVals) output.unknownKeyVals = [];\n    output.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addInput(inputData) {\n    this.globalMap.unsignedTx.addInput(inputData);\n    this.inputs.push({\n      unknownKeyVals: []\n    });\n    const addKeyVals = inputData.unknownKeyVals || [];\n    const inputIndex = this.inputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal => this.addUnknownKeyValToInput(inputIndex, keyVal));\n    utils_1.addInputAttributes(this.inputs, inputData);\n    return this;\n  }\n  addOutput(outputData) {\n    this.globalMap.unsignedTx.addOutput(outputData);\n    this.outputs.push({\n      unknownKeyVals: []\n    });\n    const addKeyVals = outputData.unknownKeyVals || [];\n    const outputIndex = this.outputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal => this.addUnknownKeyValToOutput(outputIndex, keyVal));\n    utils_1.addOutputAttributes(this.outputs, outputData);\n    return this;\n  }\n  clearFinalizedInput(inputIndex) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.inputCheckUncleanFinalized(inputIndex, input);\n    for (const key of Object.keys(input)) {\n      if (!['witnessUtxo', 'nonWitnessUtxo', 'finalScriptSig', 'finalScriptWitness', 'unknownKeyVals'].includes(key)) {\n        // @ts-ignore\n        delete input[key];\n      }\n    }\n    return this;\n  }\n  combine() {\n    for (var _len = arguments.length, those = new Array(_len), _key = 0; _key < _len; _key++) {\n      those[_key] = arguments[_key];\n    }\n    // Combine this with those.\n    // Return self for chaining.\n    const result = combiner_1.combine([this].concat(those));\n    Object.assign(this, result);\n    return this;\n  }\n  getTransaction() {\n    return this.globalMap.unsignedTx.toBuffer();\n  }\n}\nexports.Psbt = Psbt;","map":{"version":3,"names":["Object","defineProperty","exports","value","combiner_1","require","parser_1","typeFields_1","utils_1","Psbt","constructor","tx","inputs","outputs","globalMap","unsignedTx","fromBase64","data","txFromBuffer","buffer","Buffer","from","fromBuffer","fromHex","results","psbtFromBuffer","psbt","assign","toBase64","toBuffer","toString","toHex","psbtToBuffer","updateGlobal","updateData","updateInput","inputIndex","input","checkForInput","updateOutput","outputIndex","output","checkForOutput","addUnknownKeyValToGlobal","keyVal","checkHasKey","unknownKeyVals","getEnumLength","GlobalTypes","push","addUnknownKeyValToInput","InputTypes","addUnknownKeyValToOutput","OutputTypes","addInput","inputData","addKeyVals","length","Array","isArray","Error","forEach","addInputAttributes","addOutput","outputData","addOutputAttributes","clearFinalizedInput","inputCheckUncleanFinalized","key","keys","includes","combine","_len","arguments","those","_key","result","concat","getTransaction"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip174/src/lib/psbt.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst combiner_1 = require('./combiner');\nconst parser_1 = require('./parser');\nconst typeFields_1 = require('./typeFields');\nconst utils_1 = require('./utils');\nclass Psbt {\n  constructor(tx) {\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx,\n    };\n  }\n  static fromBase64(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromHex(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromBuffer(buffer, txFromBuffer) {\n    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n    const psbt = new this(results.globalMap.unsignedTx);\n    Object.assign(psbt, results);\n    return psbt;\n  }\n  toBase64() {\n    const buffer = this.toBuffer();\n    return buffer.toString('base64');\n  }\n  toHex() {\n    const buffer = this.toBuffer();\n    return buffer.toString('hex');\n  }\n  toBuffer() {\n    return parser_1.psbtToBuffer(this);\n  }\n  updateGlobal(updateData) {\n    utils_1.updateGlobal(updateData, this.globalMap);\n    return this;\n  }\n  updateInput(inputIndex, updateData) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.updateInput(updateData, input);\n    return this;\n  }\n  updateOutput(outputIndex, updateData) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.updateOutput(updateData, output);\n    return this;\n  }\n  addUnknownKeyValToGlobal(keyVal) {\n    utils_1.checkHasKey(\n      keyVal,\n      this.globalMap.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.GlobalTypes),\n    );\n    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n    this.globalMap.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      input.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.InputTypes),\n    );\n    if (!input.unknownKeyVals) input.unknownKeyVals = [];\n    input.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      output.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.OutputTypes),\n    );\n    if (!output.unknownKeyVals) output.unknownKeyVals = [];\n    output.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addInput(inputData) {\n    this.globalMap.unsignedTx.addInput(inputData);\n    this.inputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = inputData.unknownKeyVals || [];\n    const inputIndex = this.inputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToInput(inputIndex, keyVal),\n    );\n    utils_1.addInputAttributes(this.inputs, inputData);\n    return this;\n  }\n  addOutput(outputData) {\n    this.globalMap.unsignedTx.addOutput(outputData);\n    this.outputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = outputData.unknownKeyVals || [];\n    const outputIndex = this.outputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToOutput(outputIndex, keyVal),\n    );\n    utils_1.addOutputAttributes(this.outputs, outputData);\n    return this;\n  }\n  clearFinalizedInput(inputIndex) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.inputCheckUncleanFinalized(inputIndex, input);\n    for (const key of Object.keys(input)) {\n      if (\n        ![\n          'witnessUtxo',\n          'nonWitnessUtxo',\n          'finalScriptSig',\n          'finalScriptWitness',\n          'unknownKeyVals',\n        ].includes(key)\n      ) {\n        // @ts-ignore\n        delete input[key];\n      }\n    }\n    return this;\n  }\n  combine(...those) {\n    // Combine this with those.\n    // Return self for chaining.\n    const result = combiner_1.combine([this].concat(those));\n    Object.assign(this, result);\n    return this;\n  }\n  getTransaction() {\n    return this.globalMap.unsignedTx.toBuffer();\n  }\n}\nexports.Psbt = Psbt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}