{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.p2wsh = void 0;\nconst bcrypto = require('../crypto');\nconst networks_1 = require('../networks');\nconst bscript = require('../script');\nconst types_1 = require('../types');\nconst lazy = require('./lazy');\nconst bech32_1 = require('bech32');\nconst OPS = bscript.OPS;\nconst EMPTY_BUFFER = Buffer.alloc(0);\nfunction stacksEqual(a, b) {\n  if (a.length !== b.length) return false;\n  return a.every((x, i) => {\n    return x.equals(b[i]);\n  });\n}\nfunction chunkHasUncompressedPubkey(chunk) {\n  if (Buffer.isBuffer(chunk) && chunk.length === 65 && chunk[0] === 0x04 && (0, types_1.isPoint)(chunk)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// input: <>\n// witness: [redeemScriptSig ...] {redeemScript}\n// output: OP_0 {sha256(redeemScript)}\nfunction p2wsh(a, opts) {\n  if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness) throw new TypeError('Not enough data');\n  opts = Object.assign({\n    validate: true\n  }, opts || {});\n  (0, types_1.typeforce)({\n    network: types_1.typeforce.maybe(types_1.typeforce.Object),\n    address: types_1.typeforce.maybe(types_1.typeforce.String),\n    hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(32)),\n    output: types_1.typeforce.maybe(types_1.typeforce.BufferN(34)),\n    redeem: types_1.typeforce.maybe({\n      input: types_1.typeforce.maybe(types_1.typeforce.Buffer),\n      network: types_1.typeforce.maybe(types_1.typeforce.Object),\n      output: types_1.typeforce.maybe(types_1.typeforce.Buffer),\n      witness: types_1.typeforce.maybe(types_1.typeforce.arrayOf(types_1.typeforce.Buffer))\n    }),\n    input: types_1.typeforce.maybe(types_1.typeforce.BufferN(0)),\n    witness: types_1.typeforce.maybe(types_1.typeforce.arrayOf(types_1.typeforce.Buffer))\n  }, a);\n  const _address = lazy.value(() => {\n    const result = bech32_1.bech32.decode(a.address);\n    const version = result.words.shift();\n    const data = bech32_1.bech32.fromWords(result.words);\n    return {\n      version,\n      prefix: result.prefix,\n      data: Buffer.from(data)\n    };\n  });\n  const _rchunks = lazy.value(() => {\n    return bscript.decompile(a.redeem.input);\n  });\n  let network = a.network;\n  if (!network) {\n    network = a.redeem && a.redeem.network || networks_1.bitcoin;\n  }\n  const o = {\n    network\n  };\n  lazy.prop(o, 'address', () => {\n    if (!o.hash) return;\n    const words = bech32_1.bech32.toWords(o.hash);\n    words.unshift(0x00);\n    return bech32_1.bech32.encode(network.bech32, words);\n  });\n  lazy.prop(o, 'hash', () => {\n    if (a.output) return a.output.slice(2);\n    if (a.address) return _address().data;\n    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);\n  });\n  lazy.prop(o, 'output', () => {\n    if (!o.hash) return;\n    return bscript.compile([OPS.OP_0, o.hash]);\n  });\n  lazy.prop(o, 'redeem', () => {\n    if (!a.witness) return;\n    return {\n      output: a.witness[a.witness.length - 1],\n      input: EMPTY_BUFFER,\n      witness: a.witness.slice(0, -1)\n    };\n  });\n  lazy.prop(o, 'input', () => {\n    if (!o.witness) return;\n    return EMPTY_BUFFER;\n  });\n  lazy.prop(o, 'witness', () => {\n    // transform redeem input to witness stack?\n    if (a.redeem && a.redeem.input && a.redeem.input.length > 0 && a.redeem.output && a.redeem.output.length > 0) {\n      const stack = bscript.toStack(_rchunks());\n      // assign, and blank the existing input\n      o.redeem = Object.assign({\n        witness: stack\n      }, a.redeem);\n      o.redeem.input = EMPTY_BUFFER;\n      return [].concat(stack, a.redeem.output);\n    }\n    if (!a.redeem) return;\n    if (!a.redeem.output) return;\n    if (!a.redeem.witness) return;\n    return [].concat(a.redeem.witness, a.redeem.output);\n  });\n  lazy.prop(o, 'name', () => {\n    const nameParts = ['p2wsh'];\n    if (o.redeem !== undefined && o.redeem.name !== undefined) nameParts.push(o.redeem.name);\n    return nameParts.join('-');\n  });\n  // extended validation\n  if (opts.validate) {\n    let hash = Buffer.from([]);\n    if (a.address) {\n      if (_address().prefix !== network.bech32) throw new TypeError('Invalid prefix or Network mismatch');\n      if (_address().version !== 0x00) throw new TypeError('Invalid address version');\n      if (_address().data.length !== 32) throw new TypeError('Invalid address data');\n      hash = _address().data;\n    }\n    if (a.hash) {\n      if (hash.length > 0 && !hash.equals(a.hash)) throw new TypeError('Hash mismatch');else hash = a.hash;\n    }\n    if (a.output) {\n      if (a.output.length !== 34 || a.output[0] !== OPS.OP_0 || a.output[1] !== 0x20) throw new TypeError('Output is invalid');\n      const hash2 = a.output.slice(2);\n      if (hash.length > 0 && !hash.equals(hash2)) throw new TypeError('Hash mismatch');else hash = hash2;\n    }\n    if (a.redeem) {\n      if (a.redeem.network && a.redeem.network !== network) throw new TypeError('Network mismatch');\n      // is there two redeem sources?\n      if (a.redeem.input && a.redeem.input.length > 0 && a.redeem.witness && a.redeem.witness.length > 0) throw new TypeError('Ambiguous witness source');\n      // is the redeem output non-empty/valid?\n      if (a.redeem.output) {\n        const decompile = bscript.decompile(a.redeem.output);\n        if (!decompile || decompile.length < 1) throw new TypeError('Redeem.output is invalid');\n        if (a.redeem.output.byteLength > 3600) throw new TypeError('Redeem.output unspendable if larger than 3600 bytes');\n        if (bscript.countNonPushOnlyOPs(decompile) > 201) throw new TypeError('Redeem.output unspendable with more than 201 non-push ops');\n        // match hash against other sources\n        const hash2 = bcrypto.sha256(a.redeem.output);\n        if (hash.length > 0 && !hash.equals(hash2)) throw new TypeError('Hash mismatch');else hash = hash2;\n      }\n      if (a.redeem.input && !bscript.isPushOnly(_rchunks())) throw new TypeError('Non push-only scriptSig');\n      if (a.witness && a.redeem.witness && !stacksEqual(a.witness, a.redeem.witness)) throw new TypeError('Witness and redeem.witness mismatch');\n      if (a.redeem.input && _rchunks().some(chunkHasUncompressedPubkey) || a.redeem.output && (bscript.decompile(a.redeem.output) || []).some(chunkHasUncompressedPubkey)) {\n        throw new TypeError('redeem.input or redeem.output contains uncompressed pubkey');\n      }\n    }\n    if (a.witness && a.witness.length > 0) {\n      const wScript = a.witness[a.witness.length - 1];\n      if (a.redeem && a.redeem.output && !a.redeem.output.equals(wScript)) throw new TypeError('Witness and redeem.output mismatch');\n      if (a.witness.some(chunkHasUncompressedPubkey) || (bscript.decompile(wScript) || []).some(chunkHasUncompressedPubkey)) throw new TypeError('Witness contains uncompressed pubkey');\n    }\n  }\n  return Object.assign(o, a);\n}\nexports.p2wsh = p2wsh;","map":{"version":3,"names":["Object","defineProperty","exports","value","p2wsh","bcrypto","require","networks_1","bscript","types_1","lazy","bech32_1","OPS","EMPTY_BUFFER","Buffer","alloc","stacksEqual","a","b","length","every","x","i","equals","chunkHasUncompressedPubkey","chunk","isBuffer","isPoint","opts","address","hash","output","redeem","witness","TypeError","assign","validate","typeforce","network","maybe","String","BufferN","input","arrayOf","_address","result","bech32","decode","version","words","shift","data","fromWords","prefix","from","_rchunks","decompile","bitcoin","o","prop","toWords","unshift","encode","slice","sha256","compile","OP_0","stack","toStack","concat","nameParts","undefined","name","push","join","hash2","byteLength","countNonPushOnlyOPs","isPushOnly","some","wScript"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bitcoinjs-lib/src/payments/p2wsh.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.p2wsh = void 0;\nconst bcrypto = require('../crypto');\nconst networks_1 = require('../networks');\nconst bscript = require('../script');\nconst types_1 = require('../types');\nconst lazy = require('./lazy');\nconst bech32_1 = require('bech32');\nconst OPS = bscript.OPS;\nconst EMPTY_BUFFER = Buffer.alloc(0);\nfunction stacksEqual(a, b) {\n  if (a.length !== b.length) return false;\n  return a.every((x, i) => {\n    return x.equals(b[i]);\n  });\n}\nfunction chunkHasUncompressedPubkey(chunk) {\n  if (\n    Buffer.isBuffer(chunk) &&\n    chunk.length === 65 &&\n    chunk[0] === 0x04 &&\n    (0, types_1.isPoint)(chunk)\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// input: <>\n// witness: [redeemScriptSig ...] {redeemScript}\n// output: OP_0 {sha256(redeemScript)}\nfunction p2wsh(a, opts) {\n  if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness)\n    throw new TypeError('Not enough data');\n  opts = Object.assign({ validate: true }, opts || {});\n  (0, types_1.typeforce)(\n    {\n      network: types_1.typeforce.maybe(types_1.typeforce.Object),\n      address: types_1.typeforce.maybe(types_1.typeforce.String),\n      hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(32)),\n      output: types_1.typeforce.maybe(types_1.typeforce.BufferN(34)),\n      redeem: types_1.typeforce.maybe({\n        input: types_1.typeforce.maybe(types_1.typeforce.Buffer),\n        network: types_1.typeforce.maybe(types_1.typeforce.Object),\n        output: types_1.typeforce.maybe(types_1.typeforce.Buffer),\n        witness: types_1.typeforce.maybe(\n          types_1.typeforce.arrayOf(types_1.typeforce.Buffer),\n        ),\n      }),\n      input: types_1.typeforce.maybe(types_1.typeforce.BufferN(0)),\n      witness: types_1.typeforce.maybe(\n        types_1.typeforce.arrayOf(types_1.typeforce.Buffer),\n      ),\n    },\n    a,\n  );\n  const _address = lazy.value(() => {\n    const result = bech32_1.bech32.decode(a.address);\n    const version = result.words.shift();\n    const data = bech32_1.bech32.fromWords(result.words);\n    return {\n      version,\n      prefix: result.prefix,\n      data: Buffer.from(data),\n    };\n  });\n  const _rchunks = lazy.value(() => {\n    return bscript.decompile(a.redeem.input);\n  });\n  let network = a.network;\n  if (!network) {\n    network = (a.redeem && a.redeem.network) || networks_1.bitcoin;\n  }\n  const o = { network };\n  lazy.prop(o, 'address', () => {\n    if (!o.hash) return;\n    const words = bech32_1.bech32.toWords(o.hash);\n    words.unshift(0x00);\n    return bech32_1.bech32.encode(network.bech32, words);\n  });\n  lazy.prop(o, 'hash', () => {\n    if (a.output) return a.output.slice(2);\n    if (a.address) return _address().data;\n    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);\n  });\n  lazy.prop(o, 'output', () => {\n    if (!o.hash) return;\n    return bscript.compile([OPS.OP_0, o.hash]);\n  });\n  lazy.prop(o, 'redeem', () => {\n    if (!a.witness) return;\n    return {\n      output: a.witness[a.witness.length - 1],\n      input: EMPTY_BUFFER,\n      witness: a.witness.slice(0, -1),\n    };\n  });\n  lazy.prop(o, 'input', () => {\n    if (!o.witness) return;\n    return EMPTY_BUFFER;\n  });\n  lazy.prop(o, 'witness', () => {\n    // transform redeem input to witness stack?\n    if (\n      a.redeem &&\n      a.redeem.input &&\n      a.redeem.input.length > 0 &&\n      a.redeem.output &&\n      a.redeem.output.length > 0\n    ) {\n      const stack = bscript.toStack(_rchunks());\n      // assign, and blank the existing input\n      o.redeem = Object.assign({ witness: stack }, a.redeem);\n      o.redeem.input = EMPTY_BUFFER;\n      return [].concat(stack, a.redeem.output);\n    }\n    if (!a.redeem) return;\n    if (!a.redeem.output) return;\n    if (!a.redeem.witness) return;\n    return [].concat(a.redeem.witness, a.redeem.output);\n  });\n  lazy.prop(o, 'name', () => {\n    const nameParts = ['p2wsh'];\n    if (o.redeem !== undefined && o.redeem.name !== undefined)\n      nameParts.push(o.redeem.name);\n    return nameParts.join('-');\n  });\n  // extended validation\n  if (opts.validate) {\n    let hash = Buffer.from([]);\n    if (a.address) {\n      if (_address().prefix !== network.bech32)\n        throw new TypeError('Invalid prefix or Network mismatch');\n      if (_address().version !== 0x00)\n        throw new TypeError('Invalid address version');\n      if (_address().data.length !== 32)\n        throw new TypeError('Invalid address data');\n      hash = _address().data;\n    }\n    if (a.hash) {\n      if (hash.length > 0 && !hash.equals(a.hash))\n        throw new TypeError('Hash mismatch');\n      else hash = a.hash;\n    }\n    if (a.output) {\n      if (\n        a.output.length !== 34 ||\n        a.output[0] !== OPS.OP_0 ||\n        a.output[1] !== 0x20\n      )\n        throw new TypeError('Output is invalid');\n      const hash2 = a.output.slice(2);\n      if (hash.length > 0 && !hash.equals(hash2))\n        throw new TypeError('Hash mismatch');\n      else hash = hash2;\n    }\n    if (a.redeem) {\n      if (a.redeem.network && a.redeem.network !== network)\n        throw new TypeError('Network mismatch');\n      // is there two redeem sources?\n      if (\n        a.redeem.input &&\n        a.redeem.input.length > 0 &&\n        a.redeem.witness &&\n        a.redeem.witness.length > 0\n      )\n        throw new TypeError('Ambiguous witness source');\n      // is the redeem output non-empty/valid?\n      if (a.redeem.output) {\n        const decompile = bscript.decompile(a.redeem.output);\n        if (!decompile || decompile.length < 1)\n          throw new TypeError('Redeem.output is invalid');\n        if (a.redeem.output.byteLength > 3600)\n          throw new TypeError(\n            'Redeem.output unspendable if larger than 3600 bytes',\n          );\n        if (bscript.countNonPushOnlyOPs(decompile) > 201)\n          throw new TypeError(\n            'Redeem.output unspendable with more than 201 non-push ops',\n          );\n        // match hash against other sources\n        const hash2 = bcrypto.sha256(a.redeem.output);\n        if (hash.length > 0 && !hash.equals(hash2))\n          throw new TypeError('Hash mismatch');\n        else hash = hash2;\n      }\n      if (a.redeem.input && !bscript.isPushOnly(_rchunks()))\n        throw new TypeError('Non push-only scriptSig');\n      if (\n        a.witness &&\n        a.redeem.witness &&\n        !stacksEqual(a.witness, a.redeem.witness)\n      )\n        throw new TypeError('Witness and redeem.witness mismatch');\n      if (\n        (a.redeem.input && _rchunks().some(chunkHasUncompressedPubkey)) ||\n        (a.redeem.output &&\n          (bscript.decompile(a.redeem.output) || []).some(\n            chunkHasUncompressedPubkey,\n          ))\n      ) {\n        throw new TypeError(\n          'redeem.input or redeem.output contains uncompressed pubkey',\n        );\n      }\n    }\n    if (a.witness && a.witness.length > 0) {\n      const wScript = a.witness[a.witness.length - 1];\n      if (a.redeem && a.redeem.output && !a.redeem.output.equals(wScript))\n        throw new TypeError('Witness and redeem.output mismatch');\n      if (\n        a.witness.some(chunkHasUncompressedPubkey) ||\n        (bscript.decompile(wScript) || []).some(chunkHasUncompressedPubkey)\n      )\n        throw new TypeError('Witness contains uncompressed pubkey');\n    }\n  }\n  return Object.assign(o, a);\n}\nexports.p2wsh = p2wsh;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}