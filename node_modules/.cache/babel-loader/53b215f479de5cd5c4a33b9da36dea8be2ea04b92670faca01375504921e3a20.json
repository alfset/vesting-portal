{"ast":null,"code":"import { useCallback, useMemo } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nonevmAddress } from '../hooks/actions';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { ChainId } from \"../../config/chainConfig/chainId\";\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { BigAmount } from '../../utils/formatBignumber';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport config from '../../config';\nimport { atomChainConfig } from './walletConfig';\nimport {\n// assertIsBroadcastTxSuccess,\nSigningStargateClient, StargateClient } from '@cosmjs/stargate';\nconst ChainIdList = {\n  [ChainId.ATOM]: '',\n  [ChainId.ATOM_SEI_TEST]: 'atlantic-1',\n  [ChainId.ATOM_DCORE]: '',\n  // [ChainId.ATOM_DCORE_TEST]: 'coreum-devnet-1',\n  [ChainId.ATOM_DCORE_TEST]: 'coreum-testnet-1'\n};\nconst seiAddressReg = /^sei[0-9A-Za-z]{39}$/;\n// const devdcoreAddressReg = /^devcore[0-9A-Za-z]{39}$/\nconst devdcoreAddressReg = /^testcore[0-9A-Za-z]{39}$/;\nconst dcoreAddressReg = /^core[0-9A-Za-z]{39}$/;\nexport function isAtomAddress(address, chainId) {\n  if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST].includes(chainId)) {\n    return seiAddressReg.test(address) ? address : false; //true: address; false: false\n  } else if ([ChainId.ATOM_DCORE].includes(chainId)) {\n    return dcoreAddressReg.test(address) ? address : false; //true: address; false: false\n  } else if ([ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n    return devdcoreAddressReg.test(address) ? address : false; //true: address; false: false\n  }\n\n  return false;\n}\n\n/**\n * Connect wallet and get account address\n */\nexport function useLoginAtom() {\n  const dispatch = useDispatch();\n  const loginAtom = useCallback(chainId => {\n    var _window, _window$keplr;\n    if ((_window = window) === null || _window === void 0 ? void 0 : (_window$keplr = _window.keplr) === null || _window$keplr === void 0 ? void 0 : _window$keplr.enable) {\n      var _window2, _window2$keplr;\n      (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$keplr = _window2.keplr) === null || _window2$keplr === void 0 ? void 0 : _window2$keplr.enable(ChainIdList[chainId]).then(() => {\n        // console.log(res)\n        const offlineSigner = window.getOfflineSigner(ChainIdList[chainId]);\n        offlineSigner.getAccounts().then(res => {\n          var _res$;\n          console.log(res);\n          if (res === null || res === void 0 ? void 0 : (_res$ = res[0]) === null || _res$ === void 0 ? void 0 : _res$.address) {\n            var _res$2;\n            dispatch(nonevmAddress({\n              chainId,\n              account: res === null || res === void 0 ? void 0 : (_res$2 = res[0]) === null || _res$2 === void 0 ? void 0 : _res$2.address\n            }));\n          } else {\n            dispatch(nonevmAddress({\n              chainId,\n              account: ''\n            }));\n          }\n        });\n      }).catch(error => {\n        console.log(error);\n        if (atomChainConfig[chainId]) {\n          window.keplr.experimentalSuggestChain(atomChainConfig[chainId]).then(res => {\n            console.log(res);\n            loginAtom(chainId);\n          }).catch(error => {\n            console.log(error);\n            dispatch(nonevmAddress({\n              chainId,\n              account: ''\n            }));\n          });\n        } else {\n          dispatch(nonevmAddress({\n            chainId,\n            account: ''\n          }));\n        }\n      });\n    } else {\n      if (confirm('Please install Petra Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap');\n      }\n    }\n  }, []);\n  return {\n    loginAtom\n  };\n}\n\n/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */\nexport function useAtomBalance() {\n  const atomBalanceList = useSelector(state => state.atom.atomBalanceList);\n  const getAtomSeiBalance = useCallback(_ref => {\n    let {\n      account,\n      chainId\n    } = _ref;\n    return new Promise(async resolve => {\n      if (account) {\n        try {\n          const client = await StargateClient.connect(config.chainInfo[chainId].nodeRpc);\n          client.getAllBalances(account).then(res => {\n            // console.log(res)\n            resolve(res);\n          }).catch(error => {\n            console.log(error);\n            resolve('');\n          });\n        } catch {\n          // console.log(err.toString())\n          resolve('');\n        }\n      }\n    });\n  }, []);\n  return {\n    atomBalanceList,\n    getAtomSeiBalance\n  };\n}\n\n/**\n * Get transaction info\n *\n * @param txid transaction hash\n */\nexport function getAtomTxnsStatus(txid, chainId) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(async resolve => {\n    try {\n      const client = await StargateClient.connect(config.chainInfo[chainId].nodeRpc);\n      client.getTx(txid).then(json => {\n        // console.log(json)\n        if (json) {\n          if (json.status === 'ERROR') {\n            data.msg = 'Null';\n            data.error = 'Query is empty!';\n          } else if (json.code === 0) {\n            data.msg = 'Success';\n            data.info = json;\n          } else {\n            data.msg = 'Failure';\n            data.error = 'Txns is failure!';\n          }\n        } else {\n          data.msg = 'Null';\n          data.error = 'Query is empty!';\n        }\n        resolve(data);\n      }).catch(err => {\n        console.log(err.toString());\n        data.error = 'Query is empty!';\n        resolve(data);\n      });\n    } catch {\n      // console.log(error.toString())\n      data.error = 'Query is empty!';\n      resolve(data);\n    }\n  });\n}\n\n// getAtomTxnsStatus('5215EAFB54324C2C33DF446AB40CB9A0EECC53891E9A611B12B7CAD46D5C671D', 'ATOM_SEI_TEST')\n\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */\nexport function useAtomCrossChain(routerToken, inputToken, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, useToChainId) {\n  const {\n    account,\n    chainId\n  } = useActiveReact();\n  const {\n    atomBalanceList\n  } = useAtomBalance();\n  const {\n    t\n  } = useTranslation();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const addTransaction = useTransactionAdder();\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [typedValue, selectCurrency]);\n  const balance = useMemo(() => {\n    const token = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address;\n    if (token) {\n      var _atomBalanceList$NATI, _atomBalanceList$toke;\n      if ((selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'NATIVE' && (atomBalanceList === null || atomBalanceList === void 0 ? void 0 : (_atomBalanceList$NATI = atomBalanceList['NATIVE']) === null || _atomBalanceList$NATI === void 0 ? void 0 : _atomBalanceList$NATI.balance)) {\n        var _atomBalanceList$NATI2;\n        return BigAmount.format(6, atomBalanceList === null || atomBalanceList === void 0 ? void 0 : (_atomBalanceList$NATI2 = atomBalanceList['NATIVE']) === null || _atomBalanceList$NATI2 === void 0 ? void 0 : _atomBalanceList$NATI2.balance);\n      } else if (atomBalanceList === null || atomBalanceList === void 0 ? void 0 : (_atomBalanceList$toke = atomBalanceList[token]) === null || _atomBalanceList$toke === void 0 ? void 0 : _atomBalanceList$toke.balance) {\n        var _atomBalanceList$toke2;\n        return BigAmount.format(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals, atomBalanceList === null || atomBalanceList === void 0 ? void 0 : (_atomBalanceList$toke2 = atomBalanceList[token]) === null || _atomBalanceList$toke2 === void 0 ? void 0 : _atomBalanceList$toke2.balance);\n      }\n      return BigAmount.format(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals, '0');\n    }\n    return undefined;\n  }, [selectCurrency, atomBalanceList]);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    if (!account || !chainId || !selectCurrency || !useToChainId) return {};\n    return {\n      balance: balance,\n      execute: async () => {\n        try {\n          const useChainId = ChainIdList[chainId];\n          // console.log(useChainId)\n          const offlineSigner = window.getOfflineSigner(useChainId);\n          // console.log(offlineSigner)\n          // console.log(config.chainInfo[chainId].nodeRpc)\n          const client = await SigningStargateClient.connectWithSigner(config.chainInfo[chainId].nodeRpc, offlineSigner);\n          // console.log(client)\n          const amountFinal = {\n            denom: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n            amount: inputAmount\n          };\n          const fee = {\n            amount: [{\n              denom: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n              amount: '5000'\n            }],\n            gas: '200000'\n          };\n          // const txReceipt = await client.sendTokens(account, routerToken, [amountFinal], fee, \"\")\n          // const txResult = await client.sendTokens(account, routerToken, [amountFinal], \"auto\", receiveAddress + ':' + selectChain)\n          const txResult = await client.sendTokens(account, routerToken, [amountFinal], fee, receiveAddress + ':' + useToChainId);\n          console.log(txResult);\n          const txReceipt = {\n            hash: txResult === null || txResult === void 0 ? void 0 : txResult.transactionHash\n          };\n          // resolve({hash: txResult?.hash})\n          if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n            const data = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              routerToken: routerToken\n            };\n            addTransaction(txReceipt, {\n              summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: (receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.indexOf('0x')) === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n              symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n              version: destConfig === null || destConfig === void 0 ? void 0 : destConfig.type,\n              routerToken: routerToken,\n              token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n              logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n              isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n              },\n              toInfo: {\n                symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n              }\n            });\n            recordsTxns(data);\n            onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n          }\n        } catch (error) {\n          // reject(error)\n          console.log(error);\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, inputAmount, sufficientBalance, useToChainId]);\n}","map":{"version":3,"names":["useCallback","useMemo","useTranslation","useDispatch","useSelector","nonevmAddress","useActiveReact","ChainId","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","tryParseAmount3","BigAmount","recordsTxns","config","atomChainConfig","SigningStargateClient","StargateClient","ChainIdList","ATOM","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","seiAddressReg","devdcoreAddressReg","dcoreAddressReg","isAtomAddress","address","chainId","ATOM_SEI","includes","test","useLoginAtom","dispatch","loginAtom","_window","_window$keplr","window","keplr","enable","_window2","_window2$keplr","then","offlineSigner","getOfflineSigner","getAccounts","res","_res$","console","log","_res$2","account","catch","error","experimentalSuggestChain","confirm","open","useAtomBalance","atomBalanceList","state","atom","getAtomSeiBalance","_ref","Promise","resolve","client","connect","chainInfo","nodeRpc","getAllBalances","getAtomTxnsStatus","txid","data","msg","info","getTx","json","status","code","err","toString","useAtomCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","inputAmount","decimals","balance","token","_atomBalanceList$NATI","_atomBalanceList$toke","tokenType","_atomBalanceList$NATI2","format","_atomBalanceList$toke2","undefined","sufficientBalance","Number","toExact","execute","useChainId","connectWithSigner","amountFinal","denom","amount","fee","gas","txResult","sendTokens","txReceipt","hash","transactionHash","value","formatvalue","to","symbol","version","type","pairid","summary","concat","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/atom/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {BigAmount} from '../../utils/formatBignumber'\nimport {recordsTxns} from '../../utils/bridge/register'\n\nimport config from '../../config'\n\nimport {atomChainConfig} from './walletConfig'\n\nimport {\n  // assertIsBroadcastTxSuccess,\n  SigningStargateClient,\n  StargateClient\n} from '@cosmjs/stargate'\n\nconst ChainIdList:any = {\n  [ChainId.ATOM]: '',\n  [ChainId.ATOM_SEI_TEST]: 'atlantic-1',\n  [ChainId.ATOM_DCORE]: '',\n  // [ChainId.ATOM_DCORE_TEST]: 'coreum-devnet-1',\n  [ChainId.ATOM_DCORE_TEST]: 'coreum-testnet-1',\n}\nconst seiAddressReg = /^sei[0-9A-Za-z]{39}$/\n// const devdcoreAddressReg = /^devcore[0-9A-Za-z]{39}$/\nconst devdcoreAddressReg = /^testcore[0-9A-Za-z]{39}$/\nconst dcoreAddressReg = /^core[0-9A-Za-z]{39}$/\nexport function isAtomAddress (address:string, chainId:any):boolean | string {\n  if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST].includes(chainId)) {\n    return seiAddressReg.test(address) ? address : false //true: address; false: false\n  } else if ([ChainId.ATOM_DCORE].includes(chainId)) {\n    return dcoreAddressReg.test(address) ? address : false //true: address; false: false\n  } else if ([ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n    return devdcoreAddressReg.test(address) ? address : false //true: address; false: false\n  }\n  return false\n}\n\n/**\n * Connect wallet and get account address\n */\nexport function useLoginAtom () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginAtom = useCallback((chainId) => {\n    if (window?.keplr?.enable) {\n      window?.keplr?.enable(ChainIdList[chainId]).then(() => {\n        // console.log(res)\n        const offlineSigner = window.getOfflineSigner(ChainIdList[chainId])\n        offlineSigner.getAccounts().then((res:any) => {\n          console.log(res)\n          if (res?.[0]?.address) {\n            dispatch(nonevmAddress({chainId, account: res?.[0]?.address}))\n          } else {\n            dispatch(nonevmAddress({chainId, account: ''}))\n          }\n        })\n      }).catch((error:any) => {\n        console.log(error)\n        if (atomChainConfig[chainId]) {\n          window.keplr.experimentalSuggestChain(atomChainConfig[chainId]).then((res:any) => {\n            console.log(res)\n            loginAtom(chainId)\n          }).catch((error:any) => {\n            console.log(error)\n            dispatch(nonevmAddress({chainId, account: ''}))\n          })\n        } else {\n          dispatch(nonevmAddress({chainId, account: ''}))\n        }\n      })\n    } else {\n      if (confirm('Please install Petra Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap')\n      }\n    }\n  }, [])\n  return {\n    loginAtom\n  }\n}\n\n/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */\nexport function useAtomBalance () {\n  const atomBalanceList:any = useSelector<AppState, AppState['atom']>(state => state.atom.atomBalanceList)\n  const getAtomSeiBalance = useCallback(({account, chainId}: {account: any, chainId:any}) => {\n    return new Promise(async(resolve) => {\n      if (account) {\n        try {\n          const client = await StargateClient.connect(\n            config.chainInfo[chainId].nodeRpc\n          )\n          client.getAllBalances(account).then((res:any) => {\n            // console.log(res)\n            resolve(res)\n          }).catch((error:any) => {\n            console.log(error)\n            resolve('')\n          })\n        } catch {\n          // console.log(err.toString())\n          resolve('')\n        }\n      }\n    })\n  }, []) \n\n  return {\n    atomBalanceList,\n    getAtomSeiBalance,\n  }\n}\n\n/**\n * Get transaction info\n *\n * @param txid transaction hash\n */\nexport function getAtomTxnsStatus (txid:string, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(async(resolve) => {\n    try {\n      \n      const client = await StargateClient.connect(\n        config.chainInfo[chainId].nodeRpc\n      )\n      client.getTx(txid).then((json:any) => {\n        // console.log(json)\n        if (json) {\n          if (json.status === 'ERROR') {\n            data.msg = 'Null'\n            data.error = 'Query is empty!'\n          } else if (json.code === 0) {\n            data.msg = 'Success'\n            data.info = json\n          } else {\n            data.msg = 'Failure'\n            data.error = 'Txns is failure!'\n          }\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      }).catch(err => {\n        console.log(err.toString())\n        data.error = 'Query is empty!'\n        resolve(data)\n      })\n    } catch {\n      // console.log(error.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    }\n  })\n}\n\n// getAtomTxnsStatus('5215EAFB54324C2C33DF446AB40CB9A0EECC53891E9A611B12B7CAD46D5C671D', 'ATOM_SEI_TEST')\n\n\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */\nexport function useAtomCrossChain (\n  routerToken: any,\n  inputToken: any,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: string | null | undefined,\n  typedValue: string | undefined,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {atomBalanceList} = useAtomBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (selectCurrency?.tokenType === 'NATIVE' && atomBalanceList?.['NATIVE']?.balance) {\n        return BigAmount.format(6, atomBalanceList?.['NATIVE']?.balance)\n      } else if (atomBalanceList?.[token]?.balance) {\n        return BigAmount.format(selectCurrency?.decimals, atomBalanceList?.[token]?.balance)\n      }\n      return BigAmount.format(selectCurrency?.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, atomBalanceList])\n\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n  return useMemo(() => {\n    if (!account || !chainId || !selectCurrency || !useToChainId) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n        try {\n          const useChainId = ChainIdList[chainId]\n          // console.log(useChainId)\n          const offlineSigner = window.getOfflineSigner(useChainId);\n          // console.log(offlineSigner)\n          // console.log(config.chainInfo[chainId].nodeRpc)\n          const client = await SigningStargateClient.connectWithSigner(\n            config.chainInfo[chainId].nodeRpc,\n            offlineSigner\n          )\n          // console.log(client)\n          const amountFinal = {\n            denom: selectCurrency?.address,\n            amount: inputAmount,\n          }\n          const fee = {\n            amount: [{\n              denom: selectCurrency?.address,\n              amount: '5000',\n            }],\n            gas: '200000',\n          }\n          // const txReceipt = await client.sendTokens(account, routerToken, [amountFinal], fee, \"\")\n          // const txResult = await client.sendTokens(account, routerToken, [amountFinal], \"auto\", receiveAddress + ':' + selectChain)\n          const txResult = await client.sendTokens(account, routerToken, [amountFinal], fee, receiveAddress + ':' + useToChainId)\n          console.log(txResult)\n          const txReceipt = {hash: txResult?.transactionHash}\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress?.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig?.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (error) {\n          // reject(error)\n          console.log(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, inputAmount, sufficientBalance, useToChainId])\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC5C,SAASC,cAAc,QAAQ,eAAe;AAC9C,SACEC,WAAW,EACXC,WAAW,QACN,aAAa;AAKpB,SAAQC,aAAa,QAAO,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,OAAO,QAAQ,kCAAkC;AAC1D,SAAQC,eAAe,EAAEC,mBAAmB,QAAO,+BAA+B;AAClF,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAAQC,SAAS,QAAO,6BAA6B;AACrD,SAAQC,WAAW,QAAO,6BAA6B;AAEvD,OAAOC,MAAM,MAAM,cAAc;AAEjC,SAAQC,eAAe,QAAO,gBAAgB;AAE9C;AACE;AACAC,qBAAqB,EACrBC,cAAc,QACT,kBAAkB;AAEzB,MAAMC,WAAe,GAAG;EACtB,CAACX,OAAO,CAACY,IAAI,GAAG,EAAE;EAClB,CAACZ,OAAO,CAACa,aAAa,GAAG,YAAY;EACrC,CAACb,OAAO,CAACc,UAAU,GAAG,EAAE;EACxB;EACA,CAACd,OAAO,CAACe,eAAe,GAAG;AAC7B,CAAC;AACD,MAAMC,aAAa,GAAG,sBAAsB;AAC5C;AACA,MAAMC,kBAAkB,GAAG,2BAA2B;AACtD,MAAMC,eAAe,GAAG,uBAAuB;AAC/C,OAAO,SAASC,aAAaA,CAAEC,OAAc,EAAEC,OAAW,EAAmB;EAC3E,IAAI,CAACrB,OAAO,CAACsB,QAAQ,EAAEtB,OAAO,CAACa,aAAa,CAAC,CAACU,QAAQ,CAACF,OAAO,CAAC,EAAE;IAC/D,OAAOL,aAAa,CAACQ,IAAI,CAACJ,OAAO,CAAC,GAAGA,OAAO,GAAG,KAAK,EAAC;EACvD,CAAC,MAAM,IAAI,CAACpB,OAAO,CAACc,UAAU,CAAC,CAACS,QAAQ,CAACF,OAAO,CAAC,EAAE;IACjD,OAAOH,eAAe,CAACM,IAAI,CAACJ,OAAO,CAAC,GAAGA,OAAO,GAAG,KAAK,EAAC;EACzD,CAAC,MAAM,IAAI,CAACpB,OAAO,CAACe,eAAe,CAAC,CAACQ,QAAQ,CAACF,OAAO,CAAC,EAAE;IACtD,OAAOJ,kBAAkB,CAACO,IAAI,CAACJ,OAAO,CAAC,GAAGA,OAAO,GAAG,KAAK,EAAC;EAC5D;;EACA,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA,OAAO,SAASK,YAAYA,CAAA,EAAI;EAC9B,MAAMC,QAAQ,GAAG9B,WAAW,CAAc,CAAC;EAC3C,MAAM+B,SAAS,GAAGlC,WAAW,CAAE4B,OAAO,IAAK;IAAA,IAAAO,OAAA,EAAAC,aAAA;IACzC,KAAAD,OAAA,GAAIE,MAAM,cAAAF,OAAA,wBAAAC,aAAA,GAAND,OAAA,CAAQG,KAAK,cAAAF,aAAA,uBAAbA,aAAA,CAAeG,MAAM,EAAE;MAAA,IAAAC,QAAA,EAAAC,cAAA;MACzB,CAAAD,QAAA,GAAAH,MAAM,cAAAG,QAAA,wBAAAC,cAAA,GAAND,QAAA,CAAQF,KAAK,cAAAG,cAAA,uBAAbA,cAAA,CAAeF,MAAM,CAACrB,WAAW,CAACU,OAAO,CAAC,CAAC,CAACc,IAAI,CAAC,MAAM;QACrD;QACA,MAAMC,aAAa,GAAGN,MAAM,CAACO,gBAAgB,CAAC1B,WAAW,CAACU,OAAO,CAAC,CAAC;QACnEe,aAAa,CAACE,WAAW,CAAC,CAAC,CAACH,IAAI,CAAEI,GAAO,IAAK;UAAA,IAAAC,KAAA;UAC5CC,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;UAChB,IAAIA,GAAG,aAAHA,GAAG,wBAAAC,KAAA,GAAHD,GAAG,CAAG,CAAC,CAAC,cAAAC,KAAA,uBAARA,KAAA,CAAUpB,OAAO,EAAE;YAAA,IAAAuB,MAAA;YACrBjB,QAAQ,CAAC5B,aAAa,CAAC;cAACuB,OAAO;cAAEuB,OAAO,EAAEL,GAAG,aAAHA,GAAG,wBAAAI,MAAA,GAAHJ,GAAG,CAAG,CAAC,CAAC,cAAAI,MAAA,uBAARA,MAAA,CAAUvB;YAAO,CAAC,CAAC,CAAC;UAChE,CAAC,MAAM;YACLM,QAAQ,CAAC5B,aAAa,CAAC;cAACuB,OAAO;cAAEuB,OAAO,EAAE;YAAE,CAAC,CAAC,CAAC;UACjD;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAS,IAAK;QACtBL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;QAClB,IAAItC,eAAe,CAACa,OAAO,CAAC,EAAE;UAC5BS,MAAM,CAACC,KAAK,CAACgB,wBAAwB,CAACvC,eAAe,CAACa,OAAO,CAAC,CAAC,CAACc,IAAI,CAAEI,GAAO,IAAK;YAChFE,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;YAChBZ,SAAS,CAACN,OAAO,CAAC;UACpB,CAAC,CAAC,CAACwB,KAAK,CAAEC,KAAS,IAAK;YACtBL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;YAClBpB,QAAQ,CAAC5B,aAAa,CAAC;cAACuB,OAAO;cAAEuB,OAAO,EAAE;YAAE,CAAC,CAAC,CAAC;UACjD,CAAC,CAAC;QACJ,CAAC,MAAM;UACLlB,QAAQ,CAAC5B,aAAa,CAAC;YAACuB,OAAO;YAAEuB,OAAO,EAAE;UAAE,CAAC,CAAC,CAAC;QACjD;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAII,OAAO,CAAC,8BAA8B,CAAC,KAAK,IAAI,EAAE;QACpDlB,MAAM,CAACmB,IAAI,CAAC,kFAAkF,CAAC;MACjG;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IACLtB;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuB,cAAcA,CAAA,EAAI;EAChC,MAAMC,eAAmB,GAAGtD,WAAW,CAA6BuD,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACF,eAAe,CAAC;EACxG,MAAMG,iBAAiB,GAAG7D,WAAW,CAAC8D,IAAA,IAAqD;IAAA,IAApD;MAACX,OAAO;MAAEvB;IAAoC,CAAC,GAAAkC,IAAA;IACpF,OAAO,IAAIC,OAAO,CAAC,MAAMC,OAAO,IAAK;MACnC,IAAIb,OAAO,EAAE;QACX,IAAI;UACF,MAAMc,MAAM,GAAG,MAAMhD,cAAc,CAACiD,OAAO,CACzCpD,MAAM,CAACqD,SAAS,CAACvC,OAAO,CAAC,CAACwC,OAC5B,CAAC;UACDH,MAAM,CAACI,cAAc,CAAClB,OAAO,CAAC,CAACT,IAAI,CAAEI,GAAO,IAAK;YAC/C;YACAkB,OAAO,CAAClB,GAAG,CAAC;UACd,CAAC,CAAC,CAACM,KAAK,CAAEC,KAAS,IAAK;YACtBL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;YAClBW,OAAO,CAAC,EAAE,CAAC;UACb,CAAC,CAAC;QACJ,CAAC,CAAC,MAAM;UACN;UACAA,OAAO,CAAC,EAAE,CAAC;QACb;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLN,eAAe;IACfG;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,iBAAiBA,CAAEC,IAAW,EAAE3C,OAAW,EAAE;EAC3D,MAAM4C,IAAQ,GAAG;IACfC,GAAG,EAAE,OAAO;IACZC,IAAI,EAAE;EACR,CAAC;EACD,OAAO,IAAIX,OAAO,CAAC,MAAMC,OAAO,IAAK;IACnC,IAAI;MAEF,MAAMC,MAAM,GAAG,MAAMhD,cAAc,CAACiD,OAAO,CACzCpD,MAAM,CAACqD,SAAS,CAACvC,OAAO,CAAC,CAACwC,OAC5B,CAAC;MACDH,MAAM,CAACU,KAAK,CAACJ,IAAI,CAAC,CAAC7B,IAAI,CAAEkC,IAAQ,IAAK;QACpC;QACA,IAAIA,IAAI,EAAE;UACR,IAAIA,IAAI,CAACC,MAAM,KAAK,OAAO,EAAE;YAC3BL,IAAI,CAACC,GAAG,GAAG,MAAM;YACjBD,IAAI,CAACnB,KAAK,GAAG,iBAAiB;UAChC,CAAC,MAAM,IAAIuB,IAAI,CAACE,IAAI,KAAK,CAAC,EAAE;YAC1BN,IAAI,CAACC,GAAG,GAAG,SAAS;YACpBD,IAAI,CAACE,IAAI,GAAGE,IAAI;UAClB,CAAC,MAAM;YACLJ,IAAI,CAACC,GAAG,GAAG,SAAS;YACpBD,IAAI,CAACnB,KAAK,GAAG,kBAAkB;UACjC;QACF,CAAC,MAAM;UACLmB,IAAI,CAACC,GAAG,GAAG,MAAM;UACjBD,IAAI,CAACnB,KAAK,GAAG,iBAAiB;QAChC;QACAW,OAAO,CAACQ,IAAI,CAAC;MACf,CAAC,CAAC,CAACpB,KAAK,CAAC2B,GAAG,IAAI;QACd/B,OAAO,CAACC,GAAG,CAAC8B,GAAG,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC3BR,IAAI,CAACnB,KAAK,GAAG,iBAAiB;QAC9BW,OAAO,CAACQ,IAAI,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC,MAAM;MACN;MACAA,IAAI,CAACnB,KAAK,GAAG,iBAAiB;MAC9BW,OAAO,CAACQ,IAAI,CAAC;IACf;EACF,CAAC,CAAC;AACJ;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,iBAAiBA,CAC/BC,WAAgB,EAChBC,UAAe,EACfC,cAAmB,EACnBC,WAAgB,EAChBC,cAAyC,EACzCC,UAA8B,EAC9BC,UAAe,EACfC,YAAiB,EAKjB;EACA,MAAM;IAAEtC,OAAO;IAAEvB;EAAQ,CAAC,GAAGtB,cAAc,CAAC,CAAC;EAC7C,MAAM;IAACoD;EAAe,CAAC,GAAGD,cAAc,CAAC,CAAC;EAE1C,MAAM;IAAEiC;EAAE,CAAC,GAAGxF,cAAc,CAAC,CAAC;EAC9B,MAAM;IAACyF;EAAgB,CAAC,GAAGnF,eAAe,CAAC,CAAC;EAC5C,MAAM;IAACoF;EAAoB,CAAC,GAAGnF,mBAAmB,CAAC,CAAC;EACpD,MAAMoF,cAAc,GAAGnF,mBAAmB,CAAC,CAAC;EAE5C,MAAMoF,WAAW,GAAG7F,OAAO,CAAC,MAAMU,eAAe,CAAC4E,UAAU,EAAEH,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEW,QAAQ,CAAC,EAAE,CAACR,UAAU,EAAEH,cAAc,CAAC,CAAC;EAEtH,MAAMY,OAAW,GAAG/F,OAAO,CAAC,MAAM;IAChC,MAAMgG,KAAK,GAAGb,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEzD,OAAO;IACrC,IAAIsE,KAAK,EAAE;MAAA,IAAAC,qBAAA,EAAAC,qBAAA;MACT,IAAI,CAAAf,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgB,SAAS,MAAK,QAAQ,KAAI1C,eAAe,aAAfA,eAAe,wBAAAwC,qBAAA,GAAfxC,eAAe,CAAG,QAAQ,CAAC,cAAAwC,qBAAA,uBAA3BA,qBAAA,CAA6BF,OAAO,GAAE;QAAA,IAAAK,sBAAA;QAClF,OAAOzF,SAAS,CAAC0F,MAAM,CAAC,CAAC,EAAE5C,eAAe,aAAfA,eAAe,wBAAA2C,sBAAA,GAAf3C,eAAe,CAAG,QAAQ,CAAC,cAAA2C,sBAAA,uBAA3BA,sBAAA,CAA6BL,OAAO,CAAC;MAClE,CAAC,MAAM,IAAItC,eAAe,aAAfA,eAAe,wBAAAyC,qBAAA,GAAfzC,eAAe,CAAGuC,KAAK,CAAC,cAAAE,qBAAA,uBAAxBA,qBAAA,CAA0BH,OAAO,EAAE;QAAA,IAAAO,sBAAA;QAC5C,OAAO3F,SAAS,CAAC0F,MAAM,CAAClB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEW,QAAQ,EAAErC,eAAe,aAAfA,eAAe,wBAAA6C,sBAAA,GAAf7C,eAAe,CAAGuC,KAAK,CAAC,cAAAM,sBAAA,uBAAxBA,sBAAA,CAA0BP,OAAO,CAAC;MACtF;MACA,OAAOpF,SAAS,CAAC0F,MAAM,CAAClB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEW,QAAQ,EAAE,GAAG,CAAC;IACxD;IACA,OAAOS,SAAS;EAClB,CAAC,EAAE,CAACpB,cAAc,EAAE1B,eAAe,CAAC,CAAC;EAErC,IAAI+C,iBAAqB,GAAG,KAAK;EACjC,IAAI;IACF;IACAA,iBAAiB,GAAGrB,cAAc,IAAIG,UAAU,IAAIS,OAAO,IAAKU,MAAM,CAACV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,OAAO,CAAC,CAAC,CAAC,IAAID,MAAM,CAACnB,UAAU,CAAE;EACnH,CAAC,CAAC,OAAOlC,KAAK,EAAE;IACdL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;EACpB;EACA,OAAOpD,OAAO,CAAC,MAAM;IACnB,IAAI,CAACkD,OAAO,IAAI,CAACvB,OAAO,IAAI,CAACwD,cAAc,IAAI,CAACK,YAAY,EAAE,OAAO,CAAC,CAAC;IACvE,OAAO;MACLO,OAAO,EAAEA,OAAO;MAChBY,OAAO,EAAE,MAAAA,CAAA,KAAY;QACnB,IAAI;UACF,MAAMC,UAAU,GAAG3F,WAAW,CAACU,OAAO,CAAC;UACvC;UACA,MAAMe,aAAa,GAAGN,MAAM,CAACO,gBAAgB,CAACiE,UAAU,CAAC;UACzD;UACA;UACA,MAAM5C,MAAM,GAAG,MAAMjD,qBAAqB,CAAC8F,iBAAiB,CAC1DhG,MAAM,CAACqD,SAAS,CAACvC,OAAO,CAAC,CAACwC,OAAO,EACjCzB,aACF,CAAC;UACD;UACA,MAAMoE,WAAW,GAAG;YAClBC,KAAK,EAAE5B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEzD,OAAO;YAC9BsF,MAAM,EAAEnB;UACV,CAAC;UACD,MAAMoB,GAAG,GAAG;YACVD,MAAM,EAAE,CAAC;cACPD,KAAK,EAAE5B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEzD,OAAO;cAC9BsF,MAAM,EAAE;YACV,CAAC,CAAC;YACFE,GAAG,EAAE;UACP,CAAC;UACD;UACA;UACA,MAAMC,QAAQ,GAAG,MAAMnD,MAAM,CAACoD,UAAU,CAAClE,OAAO,EAAE+B,WAAW,EAAE,CAAC6B,WAAW,CAAC,EAAEG,GAAG,EAAE5B,cAAc,GAAG,GAAG,GAAGG,YAAY,CAAC;UACvHzC,OAAO,CAACC,GAAG,CAACmE,QAAQ,CAAC;UACrB,MAAME,SAAS,GAAG;YAACC,IAAI,EAAEH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI;UAAe,CAAC;UACnD;UACA,IAAIF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEC,IAAI,EAAE;YACnB,MAAM/C,IAAQ,GAAG;cACf+C,IAAI,EAAED,SAAS,CAACC,IAAI;cACpB3F,OAAO,EAAEA,OAAO;cAChByD,WAAW,EAAEA,WAAW;cACxBlC,OAAO,EAAEA,OAAO;cAChBsE,KAAK,EAAE3B,WAAW;cAClB4B,WAAW,EAAEnC,UAAU;cACvBoC,EAAE,EAAErC,cAAc;cAClBsC,MAAM,EAAExC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwC,MAAM;cAC9BC,OAAO,EAAErC,UAAU,CAACsC,IAAI;cACxBC,MAAM,EAAE3C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwC,MAAM;cAC9B1C,WAAW,EAAEA;YACf,CAAC;YACDW,cAAc,CAACyB,SAAS,EAAE;cACxBU,OAAO,kBAAAC,MAAA,CAAkB1C,UAAU,OAAA0C,MAAA,CAAI7C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwC,MAAM,CAAE;cAC/DH,KAAK,EAAElC,UAAU;cACjB2C,SAAS,EAAE7C,WAAW;cACtB8C,SAAS,EAAE,CAAA7C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE8C,OAAO,CAAC,IAAI,CAAC,MAAK,CAAC,GAAG9C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE+C,WAAW,CAAC,CAAC,GAAG/C,cAAc;cAC/FsC,MAAM,EAAExC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwC,MAAM;cAC9BC,OAAO,EAAErC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEsC,IAAI;cACzB5C,WAAW,EAAEA,WAAW;cACxBe,KAAK,EAAEb,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEzD,OAAO;cAC9B2G,OAAO,EAAElD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEkD,OAAO;cAChCC,WAAW,EAAE/C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE+C,WAAW;cACpCC,QAAQ,EAAE;gBACRZ,MAAM,EAAExC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwC,MAAM;gBAC9Ba,IAAI,EAAErD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEqD,IAAI;gBAC1B1C,QAAQ,EAAEX,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEW,QAAQ;gBAClCpE,OAAO,EAAEyD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEzD;cAC3B,CAAC;cACD+G,MAAM,EAAE;gBACNd,MAAM,EAAEpC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEoC,MAAM;gBAC1Ba,IAAI,EAAEjD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEiD,IAAI;gBACtB1C,QAAQ,EAAEP,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,QAAQ;gBAC9BpE,OAAO,EAAE6D,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE7D;cACvB;YACF,CAAC,CAAC;YACFd,WAAW,CAAC2D,IAAI,CAAC;YACjBmB,gBAAgB,CAAC2B,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEC,IAAI,EAAE,IAAI,CAAC;UACzC;QACF,CAAC,CAAC,OAAOlE,KAAK,EAAE;UACd;UACAL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;UAClBuC,oBAAoB,CAAC,eAAe,EAAE,IAAI,CAAC;QAC7C;MACF,CAAC;MACD+C,UAAU,EAAElC,iBAAiB,GAAGD,SAAS,GAAGd,CAAC,CAAC,cAAc,EAAE;QAACkC,MAAM,EAAExC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwC;MAAM,CAAC;IAChG,CAAC;EACH,CAAC,EAAE,CAAC1C,WAAW,EAAEC,UAAU,EAAEvD,OAAO,EAAEwD,cAAc,EAAEC,WAAW,EAAEC,cAAc,EAAEC,UAAU,EAAEC,UAAU,EAAErC,OAAO,EAAE6C,OAAO,EAAEF,WAAW,EAAEW,iBAAiB,EAAEhB,YAAY,CAAC,CAAC;AAC7K"},"metadata":{},"sourceType":"module","externalDependencies":[]}