{"ast":null,"code":"import { createBrowserHistory } from 'history';\nimport { chainInfo, spportChainArr } from '../chainConfig';\nimport { isAddress } from '../../utils';\n\n// import {ARBITRUM_MAIN_CHAINID} from './chainConfig/arbitrum'\n// import {AVAX_MAIN_CHAINID} from './chainConfig/avax'\nimport { BNB_MAIN_CHAINID } from '../chainConfig/bsc';\nimport { ETH_MAIN_CHAINID } from '../chainConfig/eth';\nimport { selectNetwork } from './methods';\nexport function getParams(param) {\n  const str = window.location.href.indexOf('?') ? window.location.href.split('?')[1] : '';\n  if (str) {\n    const arr = str.split('&');\n    let value = '';\n    for (const str2 of arr) {\n      const arr2 = str2.split('=');\n      if (arr2[0] === param) {\n        value = arr2[1];\n        break;\n      }\n    }\n    return value;\n  } else {\n    return '';\n  }\n}\nexport function getInitBridgeChain(destChainID, bridgeToken) {\n  const nc = {\n    initChain: destChainID,\n    bridgeInitToken: bridgeToken\n  };\n  const dc = getParams('destchainid');\n  const bt = getParams('bridgetoken');\n  if (dc) {\n    nc.initChain = dc;\n  }\n  if (bt && isAddress(bt)) {\n    nc.bridgeInitToken = bt;\n  }\n  return nc;\n}\nlet onlyOne = 0;\nfunction getParamNode(type, INIT_NODE) {\n  var _type, _type$toString;\n  type = (_type = type) === null || _type === void 0 ? void 0 : (_type$toString = _type.toString()) === null || _type$toString === void 0 ? void 0 : _type$toString.toLowerCase();\n  const history = createBrowserHistory();\n  // console.log(history)\n  // console.log(history.location.hash)\n  // history.replace('')\n  let labelStr = INIT_NODE;\n  for (const key in chainInfo) {\n    // console.log(key)\n    if (type === key || type === chainInfo[key].symbol.toLowerCase() || type === chainInfo[key].name.toLowerCase()) {\n      labelStr = chainInfo[key].label;\n      break;\n    }\n  }\n  if (!onlyOne) {\n    onlyOne = 1;\n    const lpath = history.location.hash.split('?');\n    const pathKey = lpath[0];\n    const paramKey = lpath[1];\n    const paramArr = paramKey.split('&');\n    const paramList = [];\n    for (const k of paramArr) {\n      if (k.indexOf('network=') === 0) continue;\n      paramList.push(k);\n    }\n    history.replace(pathKey + '?' + paramList.join('&'));\n    if (!isNaN(labelStr)) {\n      selectNetwork(labelStr, 1).then(res => {\n        console.log(res);\n        if (res.msg === 'Error') {\n          alert(\"Please switch metamask network to\\uFF1A\".concat(chainInfo[labelStr].networkName));\n        }\n      });\n    }\n  }\n  return labelStr;\n}\nfunction getNode(type, INIT_NODE) {\n  let labelStr = INIT_NODE;\n  if (type.indexOf('bsc') !== -1) {\n    labelStr = chainInfo[BNB_MAIN_CHAINID].label;\n  } else if (type.indexOf('eth') !== -1) {\n    labelStr = chainInfo[ETH_MAIN_CHAINID].label;\n  }\n  if (!onlyOne) {\n    selectNetwork(labelStr);\n  }\n  return labelStr;\n}\nexport function getNetwork(ENV_NODE_CONFIG, INIT_NODE) {\n  let nc = '';\n  const urlParams = getParams('network');\n  const srcchainid = getParams('srcchainid');\n  const localHost = window.location.host;\n  let localStr = window.localStorage.getItem(ENV_NODE_CONFIG);\n  if (localStr && !spportChainArr.includes(localStr.toString())) {\n    localStr = INIT_NODE;\n  }\n  if (urlParams) {\n    nc = getParamNode(urlParams, INIT_NODE);\n    // window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  } else if (srcchainid) {\n    nc = getParamNode(srcchainid, INIT_NODE);\n    // window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  } else {\n    if (localStr) {\n      nc = localStr;\n    } else {\n      nc = getNode(localHost, INIT_NODE);\n    }\n  }\n  window.localStorage.setItem(ENV_NODE_CONFIG, nc);\n  return nc;\n}\nconst ID_CODE = 'ID_CODE';\nexport function getIdCode() {\n  const urlParams = getParams('agent');\n  if (urlParams) {\n    window.localStorage.setItem(ID_CODE, urlParams);\n  }\n}","map":{"version":3,"names":["createBrowserHistory","chainInfo","spportChainArr","isAddress","BNB_MAIN_CHAINID","ETH_MAIN_CHAINID","selectNetwork","getParams","param","str","window","location","href","indexOf","split","arr","value","str2","arr2","getInitBridgeChain","destChainID","bridgeToken","nc","initChain","bridgeInitToken","dc","bt","onlyOne","getParamNode","type","INIT_NODE","_type","_type$toString","toString","toLowerCase","history","labelStr","key","symbol","name","label","lpath","hash","pathKey","paramKey","paramArr","paramList","k","push","replace","join","isNaN","then","res","console","log","msg","alert","concat","networkName","getNode","getNetwork","ENV_NODE_CONFIG","urlParams","srcchainid","localHost","host","localStr","localStorage","getItem","includes","setItem","ID_CODE","getIdCode"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/config/tools/getUrlParams.ts"],"sourcesContent":["import { createBrowserHistory } from 'history'\n\nimport { chainInfo,spportChainArr } from '../chainConfig'\nimport { isAddress } from '../../utils'\n\n// import {ARBITRUM_MAIN_CHAINID} from './chainConfig/arbitrum'\n// import {AVAX_MAIN_CHAINID} from './chainConfig/avax'\nimport {BNB_MAIN_CHAINID} from '../chainConfig/bsc'\nimport {ETH_MAIN_CHAINID} from '../chainConfig/eth'\n\n\nimport {selectNetwork} from './methods'\n\n\nexport function getParams(param: any) {\n  const str = window.location.href.indexOf('?') ? window.location.href.split('?')[1] : ''\n  if (str) {\n    const arr = str.split('&')\n    let value = ''\n    for (const str2 of arr) {\n      const arr2 = str2.split('=')\n      if (arr2[0] === param) {\n        value = arr2[1]\n        break\n      }\n    }\n    return value\n  } else {\n    return ''\n  }\n}\n\nexport function getInitBridgeChain(destChainID: any, bridgeToken: any) {\n  const nc = {\n    initChain: destChainID,\n    bridgeInitToken: bridgeToken\n  }\n  const dc = getParams('destchainid')\n  const bt = getParams('bridgetoken')\n  if (dc) {\n    nc.initChain = dc\n  }\n  if (bt && isAddress(bt)) {\n    nc.bridgeInitToken = bt\n  }\n\n  return nc\n}\n\nlet onlyOne = 0\nfunction getParamNode(type: any, INIT_NODE: any) {\n  type = type?.toString()?.toLowerCase()\n  const history = createBrowserHistory()\n  // console.log(history)\n  // console.log(history.location.hash)\n  // history.replace('')\n  let labelStr = INIT_NODE\n  for (const key in chainInfo) {\n    // console.log(key)\n    if (\n      type === key\n      || type === chainInfo[key].symbol.toLowerCase()\n      || type === chainInfo[key].name.toLowerCase()\n    ) {\n      labelStr = chainInfo[key].label\n      break\n    }\n  }\n  if (!onlyOne) {\n    onlyOne = 1\n    const lpath = history.location.hash.split('?')\n    const pathKey = lpath[0]\n    const paramKey = lpath[1]\n    const paramArr = paramKey.split('&')\n    const paramList = []\n    for (const k of paramArr) {\n      if (k.indexOf('network=') === 0) continue\n      paramList.push(k)\n    }\n    history.replace(pathKey + '?' + paramList.join('&'))\n    if (!isNaN(labelStr)) {\n      selectNetwork(labelStr, 1).then((res:any) => {\n        console.log(res)\n        if (res.msg === 'Error') {\n          alert(`Please switch metamask network toï¼š${chainInfo[labelStr].networkName}`)\n        }\n      })\n    }\n  }\n  return labelStr\n}\n\nfunction getNode(type: any, INIT_NODE: any) {\n  let labelStr = INIT_NODE\n  if (type.indexOf('bsc') !== -1) {\n    labelStr = chainInfo[BNB_MAIN_CHAINID].label\n  } else if (type.indexOf('eth') !== -1) {\n    labelStr = chainInfo[ETH_MAIN_CHAINID].label\n  }\n  if (!onlyOne) {\n    selectNetwork(labelStr)\n  }\n  return labelStr\n}\nexport function getNetwork(ENV_NODE_CONFIG: any, INIT_NODE: any) {\n  let nc = ''\n  const urlParams = getParams('network')\n  const srcchainid = getParams('srcchainid')\n  const localHost = window.location.host\n  let localStr = window.localStorage.getItem(ENV_NODE_CONFIG)\n  if (localStr && !spportChainArr.includes(localStr.toString())) {\n    localStr = INIT_NODE\n  }\n  if (urlParams) {\n    nc = getParamNode(urlParams, INIT_NODE)\n    // window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  } else if (srcchainid) {\n    nc = getParamNode(srcchainid, INIT_NODE)\n    // window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  } else {\n    if (localStr) {\n      nc = localStr\n    } else {\n      nc = getNode(localHost, INIT_NODE)\n    }\n  }\n  window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  return nc\n}\n\nconst ID_CODE = 'ID_CODE'\nexport function getIdCode() {\n  const urlParams = getParams('agent')\n  if (urlParams) {\n    window.localStorage.setItem(ID_CODE, urlParams)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}