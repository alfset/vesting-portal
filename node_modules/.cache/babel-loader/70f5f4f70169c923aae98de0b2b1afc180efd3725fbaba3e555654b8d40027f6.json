{"ast":null,"code":"import{ChainId}from\"../../config/chainConfig/chainId\";const bitcoin=require('bitcoinjs-lib');const OPS=require('bitcoin-ops');// const NETWORK = config.env === 'test' ? bitcoin.networks.testnet : bitcoin.networks.bitcoin\nconst NETWORK=bitcoin.networks.bitcoin;const LITECOIN={messagePrefix:'\\x19Litecoin Signed Message:\\n',bech32:'ltc',bip32:{public:0x019da462,private:0x019d9cfe},pubKeyHash:0x30,scriptHash:0x32,wif:0xb0};const BLOCK={messagePrefix:'\\x19Blocknet Signed Message:\\n',bech32:'block',bip32:{public:0x0488B21E,private:0x0488ADE4},pubKeyHash:0x1a,scriptHash:0x1c,wif:0x9a};const COLOSSUSXT={messagePrefix:'\\x19ColossusXT Signed Message:\\n',bip32:{public:0x019da462,private:0x019d9cfe},pubKeyHash:0x1e,scriptHash:0x0d,wif:0xd4};function getNetwork(chainId){let network=NETWORK;chainId=chainId?chainId.toUpperCase():'';if(chainId===ChainId.BTC){network=bitcoin.networks.bitcoin;}else if(chainId===ChainId.BTC_TEST){network=bitcoin.networks.testnet;}else if(chainId===ChainId.LTC){network=LITECOIN;}else if(chainId===ChainId.BLOCK){network=BLOCK;}else if(chainId===ChainId.COLX){network=COLOSSUSXT;}return network;}export function createAddress(address,chainId,initAddr){const network=getNetwork(chainId);address=address.replace('0x','');const{hash}=bitcoin.address.fromBase58Check(initAddr);const reddemScript=bitcoin.script.compile([Buffer.from(address,'hex'),OPS.OP_DROP,OPS.OP_DUP,OPS.OP_HASH160,Buffer.from(hash,'hex'),OPS.OP_EQUALVERIFY,OPS.OP_CHECKSIG]);const output=bitcoin.script.compile([OPS.OP_HASH160,bitcoin.crypto.hash160(reddemScript),OPS.OP_EQUAL]);const p2shAddress=bitcoin.payments.p2sh({output:output,network:network});// console.log(p2shAddress.address)\nreturn p2shAddress.address;}export const BTCARR=[ChainId.BTC,ChainId.BTC_TEST,ChainId.LTC,ChainId.BLOCK,ChainId.COLX];export function isBTCAddress(address,chainId){const network=getNetwork(chainId);try{bitcoin.address.toOutputScript(address,network);return address;}catch(error){return false;}}","map":{"version":3,"names":["ChainId","bitcoin","require","OPS","NETWORK","networks","LITECOIN","messagePrefix","bech32","bip32","public","private","pubKeyHash","scriptHash","wif","BLOCK","COLOSSUSXT","getNetwork","chainId","network","toUpperCase","BTC","BTC_TEST","testnet","LTC","COLX","createAddress","address","initAddr","replace","hash","fromBase58Check","reddemScript","script","compile","Buffer","from","OP_DROP","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","output","crypto","hash160","OP_EQUAL","p2shAddress","payments","p2sh","BTCARR","isBTCAddress","toOutputScript","error"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/isAddress/BTC.ts"],"sourcesContent":["import { ChainId } from \"../../config/chainConfig/chainId\"\nconst bitcoin = require('bitcoinjs-lib')\nconst OPS = require('bitcoin-ops')\n\n// const NETWORK = config.env === 'test' ? bitcoin.networks.testnet : bitcoin.networks.bitcoin\nconst NETWORK = bitcoin.networks.bitcoin\nconst LITECOIN = {\n  messagePrefix: '\\x19Litecoin Signed Message:\\n',\n  bech32: 'ltc',\n  bip32: {\n    public: 0x019da462,\n    private: 0x019d9cfe,\n  },\n  pubKeyHash: 0x30,\n  scriptHash: 0x32,\n  wif: 0xb0,\n}\n\nconst BLOCK = {\n  messagePrefix: '\\x19Blocknet Signed Message:\\n',\n  bech32: 'block',\n  bip32: {\n   public: 0x0488B21E,\n   private: 0x0488ADE4\n  },\n  \n  pubKeyHash: 0x1a,\n  scriptHash: 0x1c,\n  wif: 0x9a,\n}\n\nconst COLOSSUSXT = {\n  messagePrefix: '\\x19ColossusXT Signed Message:\\n',\n  bip32: {\n    public: 0x019da462,\n    private: 0x019d9cfe,\n  },\n  pubKeyHash: 0x1e,\n  scriptHash: 0x0d,\n  wif: 0xd4,\n}\n\nfunction getNetwork (chainId?:string) {\n  let network = NETWORK\n  chainId = chainId ? chainId.toUpperCase() : ''\n  if (chainId === ChainId.BTC) {\n    network = bitcoin.networks.bitcoin\n  } else if (chainId === ChainId.BTC_TEST) {\n    network = bitcoin.networks.testnet\n  } else if (chainId === ChainId.LTC) {\n    network = LITECOIN\n  } else if (chainId === ChainId.BLOCK) {\n    network = BLOCK\n  } else if (chainId === ChainId.COLX) {\n    network = COLOSSUSXT\n  } \n  return network\n}\n\nexport function createAddress (address:string, chainId:string | undefined, initAddr:string) {\n  const network = getNetwork(chainId)\n  address = address.replace('0x', '')\n  const {hash} = bitcoin.address.fromBase58Check(initAddr)\n\n  const reddemScript = bitcoin.script.compile([\n    Buffer.from(address, 'hex'),\n    OPS.OP_DROP,\n    OPS.OP_DUP,\n    OPS.OP_HASH160,\n    Buffer.from(hash,'hex'),\n    OPS.OP_EQUALVERIFY,\n    OPS.OP_CHECKSIG,\n  ])\n  const output = bitcoin.script.compile([\n    OPS.OP_HASH160,\n    bitcoin.crypto.hash160(reddemScript),\n    OPS.OP_EQUAL,\n  ])\n  const p2shAddress = bitcoin.payments.p2sh({\n    output: output,\n    network: network,\n  })\n  // console.log(p2shAddress.address)\n  return p2shAddress.address;\n}\n\nexport const BTCARR = [ChainId.BTC, ChainId.BTC_TEST, ChainId.LTC, ChainId.BLOCK, ChainId.COLX]\n\nexport function isBTCAddress (address:string, chainId?:string) {\n  const network = getNetwork(chainId)\n  try {\n    bitcoin.address.toOutputScript(address, network)\n    return address\n  } catch (error) {\n    return false\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}