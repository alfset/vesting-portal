{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeMultisignedTxBytes = exports.makeMultisignedTx = exports.makeCompactBitArray = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst multisig_1 = require(\"cosmjs-types/cosmos/crypto/multisig/v1beta1/multisig\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst tx_2 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nfunction makeCompactBitArray(bits) {\n  const byteCount = Math.ceil(bits.length / 8);\n  const extraBits = bits.length - Math.floor(bits.length / 8) * 8;\n  const bytes = new Uint8Array(byteCount); // zero-filled\n  bits.forEach((value, index) => {\n    const bytePos = Math.floor(index / 8);\n    const bitPos = index % 8;\n    // eslint-disable-next-line no-bitwise\n    if (value) bytes[bytePos] |= 0b1 << 8 - 1 - bitPos;\n  });\n  return multisig_1.CompactBitArray.fromPartial({\n    elems: bytes,\n    extraBitsStored: extraBits\n  });\n}\nexports.makeCompactBitArray = makeCompactBitArray;\n/**\n * Creates a signed transaction from signer info, transaction body and signatures.\n * The result can be broadcasted after serialization.\n *\n * Consider using `makeMultisignedTxBytes` instead if you want to broadcast the\n * transaction immediately.\n */\nfunction makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures) {\n  const addresses = Array.from(signatures.keys());\n  const prefix = (0, encoding_1.fromBech32)(addresses[0]).prefix;\n  const signers = Array(multisigPubkey.value.pubkeys.length).fill(false);\n  const signaturesList = new Array();\n  for (let i = 0; i < multisigPubkey.value.pubkeys.length; i++) {\n    const signerAddress = (0, amino_1.pubkeyToAddress)(multisigPubkey.value.pubkeys[i], prefix);\n    const signature = signatures.get(signerAddress);\n    if (signature) {\n      signers[i] = true;\n      signaturesList.push(signature);\n    }\n  }\n  const signerInfo = {\n    publicKey: (0, proto_signing_1.encodePubkey)(multisigPubkey),\n    modeInfo: {\n      multi: {\n        bitarray: makeCompactBitArray(signers),\n        modeInfos: signaturesList.map(_ => ({\n          single: {\n            mode: signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON\n          }\n        }))\n      }\n    },\n    sequence: long_1.default.fromNumber(sequence)\n  };\n  const authInfo = tx_1.AuthInfo.fromPartial({\n    signerInfos: [signerInfo],\n    fee: {\n      amount: [...fee.amount],\n      gasLimit: long_1.default.fromString(fee.gas)\n    }\n  });\n  const authInfoBytes = tx_1.AuthInfo.encode(authInfo).finish();\n  const signedTx = tx_2.TxRaw.fromPartial({\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    signatures: [multisig_1.MultiSignature.encode(multisig_1.MultiSignature.fromPartial({\n      signatures: signaturesList\n    })).finish()]\n  });\n  return signedTx;\n}\nexports.makeMultisignedTx = makeMultisignedTx;\n/**\n * Creates a signed transaction from signer info, transaction body and signatures.\n * The result can be broadcasted.\n *\n * This is a wrapper around `makeMultisignedTx` that encodes the transaction for broadcasting.\n */\nfunction makeMultisignedTxBytes(multisigPubkey, sequence, fee, bodyBytes, signatures) {\n  const signedTx = makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures);\n  return Uint8Array.from(tx_2.TxRaw.encode(signedTx).finish());\n}\nexports.makeMultisignedTxBytes = makeMultisignedTxBytes;","map":{"version":3,"names":["amino_1","require","encoding_1","proto_signing_1","multisig_1","signing_1","tx_1","tx_2","long_1","__importDefault","makeCompactBitArray","bits","byteCount","Math","ceil","length","extraBits","floor","bytes","Uint8Array","forEach","value","index","bytePos","bitPos","CompactBitArray","fromPartial","elems","extraBitsStored","exports","makeMultisignedTx","multisigPubkey","sequence","fee","bodyBytes","signatures","addresses","Array","from","keys","prefix","fromBech32","signers","pubkeys","fill","signaturesList","i","signerAddress","pubkeyToAddress","signature","get","push","signerInfo","publicKey","encodePubkey","modeInfo","multi","bitarray","modeInfos","map","_","single","mode","SignMode","SIGN_MODE_LEGACY_AMINO_JSON","default","fromNumber","authInfo","AuthInfo","signerInfos","amount","gasLimit","fromString","gas","authInfoBytes","encode","finish","signedTx","TxRaw","MultiSignature","makeMultisignedTxBytes"],"sources":["../src/multisignature.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}