{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.twistedEdwards = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nconst modular_js_1 = require(\"./modular.js\");\nconst ut = require(\"./utils.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst curve_js_1 = require(\"./curve.js\");\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = {\n  zip215: true\n};\nfunction validateOpts(curve) {\n  const opts = (0, curve_js_1.validateBasic)(curve);\n  ut.validateObject(curve, {\n    hash: 'function',\n    a: 'bigint',\n    d: 'bigint',\n    randomBytes: 'function'\n  }, {\n    adjustScalarBytes: 'function',\n    domain: 'function',\n    uvRatio: 'function',\n    mapToCurve: 'function'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...opts\n  });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nfunction twistedEdwards(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor\n  } = CURVE;\n  const MASK = _2n << BigInt(nByteLength * 8) - _1n;\n  const modP = Fp.create; // Function overrides\n  // sqrt(u/v)\n  const uvRatio = CURVE.uvRatio || ((u, v) => {\n    try {\n      return {\n        isValid: true,\n        value: Fp.sqrt(u * Fp.inv(v))\n      };\n    } catch (e) {\n      return {\n        isValid: false,\n        value: _0n\n      };\n    }\n  });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || (bytes => bytes); // NOOP\n  const domain = CURVE.domain || ((data, ctx, phflag) => {\n    if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n    return data;\n  }); // NOOP\n  const inBig = n => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = n => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n, max) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(\"Expected valid scalar < \".concat(max, \", got \").concat(typeof n, \" \").concat(n));\n  }\n  function assertGE0(n) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n\n  const pointPrecomputes = new Map();\n  function isPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point {\n    constructor(ex, ey, ez, et) {\n      this.ex = ex;\n      this.ey = ey;\n      this.ez = ez;\n      this.et = et;\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static fromAffine(p) {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const {\n        x,\n        y\n      } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity() {\n      const {\n        a,\n        d\n      } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const {\n        ex: X,\n        ey: Y,\n        ez: Z,\n        et: T\n      } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n    // Compare one point to another.\n    equals(other) {\n      isPoint(other);\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2\n      } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    negate() {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double() {\n      const {\n        a\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other) {\n      isPoint(other);\n      const {\n        a,\n        d\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1,\n        et: T1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2,\n        et: T2\n      } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n    // Constant-time multiplication.\n    multiply(scalar) {\n      const {\n        p,\n        f\n      } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar) {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder() {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree() {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz) {\n      const {\n        ex: x,\n        ey: y,\n        ez: z\n      } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return {\n        x: _0n,\n        y: _1n\n      };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return {\n        x: ax,\n        y: ay\n      };\n    }\n    clearCofactor() {\n      const {\n        h: cofactor\n      } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex) {\n      let zip215 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const {\n        d,\n        a\n      } = CURVE;\n      const len = Fp.BYTES;\n      hex = (0, utils_js_1.ensureBytes)('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let {\n        isValid,\n        value: x\n      } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({\n        x,\n        y\n      });\n    }\n    static fromPrivateKey(privKey) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes() {\n      const {\n        x,\n        y\n      } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n\n    toHex() {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n  Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n  const {\n    BASE: G,\n    ZERO: I\n  } = Point;\n  const wnaf = (0, curve_js_1.wNAF)(Point, nByteLength * 8);\n  function modN(a) {\n    return (0, modular_js_1.mod)(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash) {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key) {\n    const len = nByteLength;\n    key = (0, utils_js_1.ensureBytes)('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = (0, utils_js_1.ensureBytes)('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return {\n      head,\n      prefix,\n      scalar,\n      point,\n      pointBytes\n    };\n  }\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey) {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n    for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      msgs[_key - 1] = arguments[_key];\n    }\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, (0, utils_js_1.ensureBytes)('context', context), !!prehash)));\n  }\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg, privKey) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    msg = (0, utils_js_1.ensureBytes)('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const {\n      prefix,\n      scalar,\n      pointBytes\n    } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return (0, utils_js_1.ensureBytes)('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts = VERIFY_DEFAULT;\n  function verify(sig, msg, publicKey) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : verifyOpts;\n    const {\n      context,\n      zip215\n    } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = (0, utils_js_1.ensureBytes)('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = (0, utils_js_1.ensureBytes)('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: () => randomBytes(Fp.BYTES),\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute() {\n      let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    }\n  };\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils\n  };\n}\nexports.twistedEdwards = twistedEdwards;","map":{"version":3,"names":["modular_js_1","require","ut","utils_js_1","curve_js_1","_0n","BigInt","_1n","_2n","_8n","VERIFY_DEFAULT","zip215","validateOpts","curve","opts","validateBasic","validateObject","hash","a","d","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","Object","freeze","twistedEdwards","curveDef","CURVE","Fp","n","CURVE_ORDER","prehash","cHash","nByteLength","h","cofactor","MASK","modP","create","u","v","isValid","value","sqrt","inv","e","bytes","data","ctx","phflag","length","Error","inBig","inRange","max","in0MaskRange","assertInRange","concat","assertGE0","pointPrecomputes","Map","isPoint","other","Point","constructor","ex","ey","ez","et","x","toAffine","y","fromAffine","p","normalizeZ","points","toInv","invertBatch","map","i","_setWindowSize","windowSize","_WINDOW_SIZE","delete","assertValidity","is0","X","Y","Z","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","wNAF","wnaf","wNAFCached","multiply","scalar","f","multiplyUnsafe","I","unsafeLadder","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","hex","arguments","undefined","len","BYTES","ensureBytes","normed","slice","lastByte","bytesToNumberLE","ORDER","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","numberToBytesLE","toHex","bytesToHex","BASE","Gx","Gy","modN","mod","modN_LE","key","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","Uint8Array","_len","msgs","Array","_key","msg","concatBytes","sign","options","r","R","k","s","res","verifyOpts","verify","sig","publicKey","SB","error","RkA","utils","randomPrivateKey","precompute","ExtendedPoint","exports"],"sources":["../src/abstract/edwards.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}