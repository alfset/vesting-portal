{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrKey = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}(); /* eslint no-bitwise: [\"error\", {\"allow\": [\"<<\"]}] */\n\nexports.decodeCheck = decodeCheck;\nexports.encodeCheck = encodeCheck;\nvar _base = require('base32.js');\nvar _base2 = _interopRequireDefault(_base);\nvar _crc = require('crc');\nvar _crc2 = _interopRequireDefault(_crc);\nvar _isUndefined = require('lodash/isUndefined');\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\nvar _isNull = require('lodash/isNull');\nvar _isNull2 = _interopRequireDefault(_isNull);\nvar _isString = require('lodash/isString');\nvar _isString2 = _interopRequireDefault(_isString);\nvar _checksum = require('./util/checksum');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar versionBytes = {\n  ed25519PublicKey: 6 << 3,\n  // G (when encoded in base32)\n  ed25519SecretSeed: 18 << 3,\n  // S\n  med25519PublicKey: 12 << 3,\n  // M\n  preAuthTx: 19 << 3,\n  // T\n  sha256Hash: 23 << 3,\n  // X\n  signedPayload: 15 << 3 // P\n};\n\nvar strkeyTypes = {\n  G: 'ed25519PublicKey',\n  S: 'ed25519SecretSeed',\n  M: 'med25519PublicKey',\n  T: 'preAuthTx',\n  X: 'sha256Hash',\n  P: 'signedPayload'\n};\n\n/**\n * StrKey is a helper class that allows encoding and decoding Stellar keys\n * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and\n * string (i.e. \"GABCD...\", etc.) representations.\n */\n\nvar StrKey = exports.StrKey = function () {\n  function StrKey() {\n    _classCallCheck(this, StrKey);\n  }\n  _createClass(StrKey, null, [{\n    key: 'encodeEd25519PublicKey',\n    /**\n     * Encodes `data` to strkey ed25519 public key.\n     *\n     * @param   {Buffer} data   raw data to encode\n     * @returns {string}        \"G...\" representation of the key\n     */\n    value: function encodeEd25519PublicKey(data) {\n      return encodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 public key to raw data.\n     *\n     * If the parameter is a muxed account key (\"M...\"), this will only encode it\n     * as a basic Ed25519 key (as if in \"G...\" format).\n     *\n     * @param   {string} data   \"G...\" (or \"M...\") key representation to decode\n     * @returns {Buffer}        raw key\n     */\n  }, {\n    key: 'decodeEd25519PublicKey',\n    value: function decodeEd25519PublicKey(data) {\n      return decodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid ed25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isValidEd25519PublicKey',\n    value: function isValidEd25519PublicKey(publicKey) {\n      return isValid('ed25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey ed25519 seed.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: 'encodeEd25519SecretSeed',\n    value: function encodeEd25519SecretSeed(data) {\n      return encodeCheck('ed25519SecretSeed', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 seed to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'decodeEd25519SecretSeed',\n    value: function decodeEd25519SecretSeed(address) {\n      return decodeCheck('ed25519SecretSeed', address);\n    }\n\n    /**\n     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.\n     * @param {string} seed seed to check\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isValidEd25519SecretSeed',\n    value: function isValidEd25519SecretSeed(seed) {\n      return isValid('ed25519SecretSeed', seed);\n    }\n\n    /**\n     * Encodes data to strkey med25519 public key.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: 'encodeMed25519PublicKey',\n    value: function encodeMed25519PublicKey(data) {\n      return encodeCheck('med25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey med25519 public key to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'decodeMed25519PublicKey',\n    value: function decodeMed25519PublicKey(address) {\n      return decodeCheck('med25519PublicKey', address);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid med25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isValidMed25519PublicKey',\n    value: function isValidMed25519PublicKey(publicKey) {\n      return isValid('med25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey preAuthTx.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: 'encodePreAuthTx',\n    value: function encodePreAuthTx(data) {\n      return encodeCheck('preAuthTx', data);\n    }\n\n    /**\n     * Decodes strkey PreAuthTx to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'decodePreAuthTx',\n    value: function decodePreAuthTx(address) {\n      return decodeCheck('preAuthTx', address);\n    }\n\n    /**\n     * Encodes data to strkey sha256 hash.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: 'encodeSha256Hash',\n    value: function encodeSha256Hash(data) {\n      return encodeCheck('sha256Hash', data);\n    }\n\n    /**\n     * Decodes strkey sha256 hash to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'decodeSha256Hash',\n    value: function decodeSha256Hash(address) {\n      return decodeCheck('sha256Hash', address);\n    }\n\n    /**\n     * Encodes raw data to strkey signed payload (P...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n  }, {\n    key: 'encodeSignedPayload',\n    value: function encodeSignedPayload(data) {\n      return encodeCheck('signedPayload', data);\n    }\n\n    /**\n     * Decodes strkey signed payload (P...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'decodeSignedPayload',\n    value: function decodeSignedPayload(address) {\n      return decodeCheck('signedPayload', address);\n    }\n\n    /**\n     * Checks validity of alleged signed payload (P...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isValidSignedPayload',\n    value: function isValidSignedPayload(address) {\n      return isValid('signedPayload', address);\n    }\n  }, {\n    key: 'getVersionByteForPrefix',\n    value: function getVersionByteForPrefix(address) {\n      return strkeyTypes[address[0]];\n    }\n  }]);\n  return StrKey;\n}();\n\n/**\n * Sanity-checks whether or not a strkey *appears* valid.\n *\n * @param  {string}  versionByteName the type of strkey to expect in `encoded`\n * @param  {string}  encoded         the strkey to validate\n *\n * @return {Boolean} whether or not the `encoded` strkey appears valid for the\n *     `versionByteName` strkey type (see `versionBytes`, above).\n *\n * @note This isn't a *definitive* check of validity, but rather a best-effort\n *     check based on (a) input length, (b) whether or not it can be decoded,\n *     and (c) output length.\n */\n\nfunction isValid(versionByteName, encoded) {\n  if (!(0, _isString2.default)(encoded)) {\n    return false;\n  }\n\n  // basic length checks on the strkey lengths\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash':\n      if (encoded.length !== 56) {\n        return false;\n      }\n      break;\n    case 'med25519PublicKey':\n      if (encoded.length !== 69) {\n        return false;\n      }\n      break;\n    case 'signedPayload':\n      if (encoded.length < 56 || encoded.length > 165) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  var decoded = '';\n  try {\n    decoded = decodeCheck(versionByteName, encoded);\n  } catch (err) {\n    return false;\n  }\n\n  // basic length checks on the resulting buffer sizes\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash':\n      return decoded.length === 32;\n    case 'med25519PublicKey':\n      return decoded.length === 40;\n    // +8 bytes for the ID\n\n    case 'signedPayload':\n      return (\n        // 32 for the signer, +4 for the payload size, then either +4 for the\n        // min or +64 for the max payload\n        decoded.length >= 32 + 4 + 4 && decoded.length <= 32 + 4 + 64\n      );\n    default:\n      return false;\n  }\n}\nfunction decodeCheck(versionByteName, encoded) {\n  if (!(0, _isString2.default)(encoded)) {\n    throw new TypeError('encoded argument must be of type String');\n  }\n  var decoded = _base2.default.decode(encoded);\n  var versionByte = decoded[0];\n  var payload = decoded.slice(0, -2);\n  var data = payload.slice(1);\n  var checksum = decoded.slice(-2);\n  if (encoded !== _base2.default.encode(decoded)) {\n    throw new Error('invalid encoded string');\n  }\n  var expectedVersion = versionBytes[versionByteName];\n  if ((0, _isUndefined2.default)(expectedVersion)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n  if (versionByte !== expectedVersion) {\n    throw new Error('invalid version byte. expected ' + expectedVersion + ', got ' + versionByte);\n  }\n  var expectedChecksum = calculateChecksum(payload);\n  if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) {\n    throw new Error('invalid checksum');\n  }\n  return Buffer.from(data);\n}\nfunction encodeCheck(versionByteName, data) {\n  if ((0, _isNull2.default)(data) || (0, _isUndefined2.default)(data)) {\n    throw new Error('cannot encode null data');\n  }\n  var versionByte = versionBytes[versionByteName];\n  if ((0, _isUndefined2.default)(versionByte)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n  data = Buffer.from(data);\n  var versionBuffer = Buffer.from([versionByte]);\n  var payload = Buffer.concat([versionBuffer, data]);\n  var checksum = calculateChecksum(payload);\n  var unencoded = Buffer.concat([payload, checksum]);\n  return _base2.default.encode(unencoded);\n}\n\n// Computes the CRC16-XModem checksum of `payload` in little-endian order\nfunction calculateChecksum(payload) {\n  var checksum = Buffer.alloc(2);\n  checksum.writeUInt16LE(_crc2.default.crc16xmodem(payload), 0);\n  return checksum;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","StrKey","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","decodeCheck","encodeCheck","_base","require","_base2","_interopRequireDefault","_crc","_crc2","_isUndefined","_isUndefined2","_isNull","_isNull2","_isString","_isString2","_checksum","obj","__esModule","default","_classCallCheck","instance","TypeError","versionBytes","ed25519PublicKey","ed25519SecretSeed","med25519PublicKey","preAuthTx","sha256Hash","signedPayload","strkeyTypes","G","S","M","T","X","P","encodeEd25519PublicKey","data","decodeEd25519PublicKey","isValidEd25519PublicKey","publicKey","isValid","encodeEd25519SecretSeed","decodeEd25519SecretSeed","address","isValidEd25519SecretSeed","seed","encodeMed25519PublicKey","decodeMed25519PublicKey","isValidMed25519PublicKey","encodePreAuthTx","decodePreAuthTx","encodeSha256Hash","decodeSha256Hash","encodeSignedPayload","decodeSignedPayload","isValidSignedPayload","getVersionByteForPrefix","versionByteName","encoded","decoded","err","decode","versionByte","payload","slice","checksum","encode","Error","expectedVersion","keys","join","expectedChecksum","calculateChecksum","verifyChecksum","Buffer","from","versionBuffer","concat","unencoded","alloc","writeUInt16LE","crc16xmodem"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/strkey.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrKey = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-bitwise: [\"error\", {\"allow\": [\"<<\"]}] */\n\nexports.decodeCheck = decodeCheck;\nexports.encodeCheck = encodeCheck;\n\nvar _base = require('base32.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _crc = require('crc');\n\nvar _crc2 = _interopRequireDefault(_crc);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isNull = require('lodash/isNull');\n\nvar _isNull2 = _interopRequireDefault(_isNull);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _checksum = require('./util/checksum');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar versionBytes = {\n  ed25519PublicKey: 6 << 3, // G (when encoded in base32)\n  ed25519SecretSeed: 18 << 3, // S\n  med25519PublicKey: 12 << 3, // M\n  preAuthTx: 19 << 3, // T\n  sha256Hash: 23 << 3, // X\n  signedPayload: 15 << 3 // P\n};\n\nvar strkeyTypes = {\n  G: 'ed25519PublicKey',\n  S: 'ed25519SecretSeed',\n  M: 'med25519PublicKey',\n  T: 'preAuthTx',\n  X: 'sha256Hash',\n  P: 'signedPayload'\n};\n\n/**\n * StrKey is a helper class that allows encoding and decoding Stellar keys\n * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and\n * string (i.e. \"GABCD...\", etc.) representations.\n */\n\nvar StrKey = exports.StrKey = function () {\n  function StrKey() {\n    _classCallCheck(this, StrKey);\n  }\n\n  _createClass(StrKey, null, [{\n    key: 'encodeEd25519PublicKey',\n\n    /**\n     * Encodes `data` to strkey ed25519 public key.\n     *\n     * @param   {Buffer} data   raw data to encode\n     * @returns {string}        \"G...\" representation of the key\n     */\n    value: function encodeEd25519PublicKey(data) {\n      return encodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 public key to raw data.\n     *\n     * If the parameter is a muxed account key (\"M...\"), this will only encode it\n     * as a basic Ed25519 key (as if in \"G...\" format).\n     *\n     * @param   {string} data   \"G...\" (or \"M...\") key representation to decode\n     * @returns {Buffer}        raw key\n     */\n\n  }, {\n    key: 'decodeEd25519PublicKey',\n    value: function decodeEd25519PublicKey(data) {\n      return decodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid ed25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidEd25519PublicKey',\n    value: function isValidEd25519PublicKey(publicKey) {\n      return isValid('ed25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey ed25519 seed.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeEd25519SecretSeed',\n    value: function encodeEd25519SecretSeed(data) {\n      return encodeCheck('ed25519SecretSeed', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 seed to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeEd25519SecretSeed',\n    value: function decodeEd25519SecretSeed(address) {\n      return decodeCheck('ed25519SecretSeed', address);\n    }\n\n    /**\n     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.\n     * @param {string} seed seed to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidEd25519SecretSeed',\n    value: function isValidEd25519SecretSeed(seed) {\n      return isValid('ed25519SecretSeed', seed);\n    }\n\n    /**\n     * Encodes data to strkey med25519 public key.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeMed25519PublicKey',\n    value: function encodeMed25519PublicKey(data) {\n      return encodeCheck('med25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey med25519 public key to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeMed25519PublicKey',\n    value: function decodeMed25519PublicKey(address) {\n      return decodeCheck('med25519PublicKey', address);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid med25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidMed25519PublicKey',\n    value: function isValidMed25519PublicKey(publicKey) {\n      return isValid('med25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey preAuthTx.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodePreAuthTx',\n    value: function encodePreAuthTx(data) {\n      return encodeCheck('preAuthTx', data);\n    }\n\n    /**\n     * Decodes strkey PreAuthTx to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodePreAuthTx',\n    value: function decodePreAuthTx(address) {\n      return decodeCheck('preAuthTx', address);\n    }\n\n    /**\n     * Encodes data to strkey sha256 hash.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeSha256Hash',\n    value: function encodeSha256Hash(data) {\n      return encodeCheck('sha256Hash', data);\n    }\n\n    /**\n     * Decodes strkey sha256 hash to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeSha256Hash',\n    value: function decodeSha256Hash(address) {\n      return decodeCheck('sha256Hash', address);\n    }\n\n    /**\n     * Encodes raw data to strkey signed payload (P...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeSignedPayload',\n    value: function encodeSignedPayload(data) {\n      return encodeCheck('signedPayload', data);\n    }\n\n    /**\n     * Decodes strkey signed payload (P...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeSignedPayload',\n    value: function decodeSignedPayload(address) {\n      return decodeCheck('signedPayload', address);\n    }\n\n    /**\n     * Checks validity of alleged signed payload (P...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidSignedPayload',\n    value: function isValidSignedPayload(address) {\n      return isValid('signedPayload', address);\n    }\n  }, {\n    key: 'getVersionByteForPrefix',\n    value: function getVersionByteForPrefix(address) {\n      return strkeyTypes[address[0]];\n    }\n  }]);\n\n  return StrKey;\n}();\n\n/**\n * Sanity-checks whether or not a strkey *appears* valid.\n *\n * @param  {string}  versionByteName the type of strkey to expect in `encoded`\n * @param  {string}  encoded         the strkey to validate\n *\n * @return {Boolean} whether or not the `encoded` strkey appears valid for the\n *     `versionByteName` strkey type (see `versionBytes`, above).\n *\n * @note This isn't a *definitive* check of validity, but rather a best-effort\n *     check based on (a) input length, (b) whether or not it can be decoded,\n *     and (c) output length.\n */\n\n\nfunction isValid(versionByteName, encoded) {\n  if (!(0, _isString2.default)(encoded)) {\n    return false;\n  }\n\n  // basic length checks on the strkey lengths\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash':\n      if (encoded.length !== 56) {\n        return false;\n      }\n      break;\n\n    case 'med25519PublicKey':\n      if (encoded.length !== 69) {\n        return false;\n      }\n      break;\n\n    case 'signedPayload':\n      if (encoded.length < 56 || encoded.length > 165) {\n        return false;\n      }\n      break;\n\n    default:\n      return false;\n  }\n\n  var decoded = '';\n  try {\n    decoded = decodeCheck(versionByteName, encoded);\n  } catch (err) {\n    return false;\n  }\n\n  // basic length checks on the resulting buffer sizes\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash':\n      return decoded.length === 32;\n\n    case 'med25519PublicKey':\n      return decoded.length === 40; // +8 bytes for the ID\n\n    case 'signedPayload':\n      return (\n        // 32 for the signer, +4 for the payload size, then either +4 for the\n        // min or +64 for the max payload\n        decoded.length >= 32 + 4 + 4 && decoded.length <= 32 + 4 + 64\n      );\n\n    default:\n      return false;\n  }\n}\n\nfunction decodeCheck(versionByteName, encoded) {\n  if (!(0, _isString2.default)(encoded)) {\n    throw new TypeError('encoded argument must be of type String');\n  }\n\n  var decoded = _base2.default.decode(encoded);\n  var versionByte = decoded[0];\n  var payload = decoded.slice(0, -2);\n  var data = payload.slice(1);\n  var checksum = decoded.slice(-2);\n\n  if (encoded !== _base2.default.encode(decoded)) {\n    throw new Error('invalid encoded string');\n  }\n\n  var expectedVersion = versionBytes[versionByteName];\n\n  if ((0, _isUndefined2.default)(expectedVersion)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n\n  if (versionByte !== expectedVersion) {\n    throw new Error('invalid version byte. expected ' + expectedVersion + ', got ' + versionByte);\n  }\n\n  var expectedChecksum = calculateChecksum(payload);\n\n  if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) {\n    throw new Error('invalid checksum');\n  }\n\n  return Buffer.from(data);\n}\n\nfunction encodeCheck(versionByteName, data) {\n  if ((0, _isNull2.default)(data) || (0, _isUndefined2.default)(data)) {\n    throw new Error('cannot encode null data');\n  }\n\n  var versionByte = versionBytes[versionByteName];\n\n  if ((0, _isUndefined2.default)(versionByte)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n  data = Buffer.from(data);\n\n  var versionBuffer = Buffer.from([versionByte]);\n  var payload = Buffer.concat([versionBuffer, data]);\n  var checksum = calculateChecksum(payload);\n  var unencoded = Buffer.concat([payload, checksum]);\n\n  return _base2.default.encode(unencoded);\n}\n\n// Computes the CRC16-XModem checksum of `payload` in little-endian order\nfunction calculateChecksum(payload) {\n  var checksum = Buffer.alloc(2);\n  checksum.writeUInt16LE(_crc2.default.crc16xmodem(payload), 0);\n  return checksum;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}