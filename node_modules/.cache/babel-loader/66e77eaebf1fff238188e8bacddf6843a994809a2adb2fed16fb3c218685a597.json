{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _isString = require('lodash/isString');\nvar _isString2 = _interopRequireDefault(_isString);\nvar _bignumber = require('bignumber.js');\nvar _bignumber2 = _interopRequireDefault(_bignumber);\nvar _strkey = require('./strkey');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Create a new Account object.\n *\n * `Account` represents a single account in the Stellar network and its sequence\n * number. Account tracks the sequence number as it is used by {@link\n * TransactionBuilder}. See\n * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for\n * more information about how accounts work in Stellar.\n *\n * @constructor\n *\n * @param {string} accountId - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n * @param {string} sequence  - current sequence number of the account\n */\nvar Account = exports.Account = function () {\n  function Account(accountId, sequence) {\n    _classCallCheck(this, Account);\n    if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) {\n      throw new Error('accountId is an M-address; use MuxedAccount instead');\n    }\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    if (!(0, _isString2.default)(sequence)) {\n      throw new Error('sequence must be of type string');\n    }\n    this._accountId = accountId;\n    this.sequence = new _bignumber2.default(sequence);\n  }\n\n  /**\n   * Returns Stellar account ID, ex.\n   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.\n   * @returns {string}\n   */\n\n  _createClass(Account, [{\n    key: 'accountId',\n    value: function accountId() {\n      return this._accountId;\n    }\n\n    /**\n     * @returns {string}  sequence number for the account as a string\n     */\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.sequence.toString();\n    }\n\n    /**\n     * Increments sequence number in this object by one.\n     * @returns {void}\n     */\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      this.sequence = this.sequence.add(1);\n    }\n  }]);\n  return Account;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","Account","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_isString","require","_isString2","_interopRequireDefault","_bignumber","_bignumber2","_strkey","obj","__esModule","default","_classCallCheck","instance","TypeError","accountId","sequence","StrKey","isValidMed25519PublicKey","Error","isValidEd25519PublicKey","_accountId","sequenceNumber","toString","incrementSequenceNumber","add"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/account.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Create a new Account object.\n *\n * `Account` represents a single account in the Stellar network and its sequence\n * number. Account tracks the sequence number as it is used by {@link\n * TransactionBuilder}. See\n * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for\n * more information about how accounts work in Stellar.\n *\n * @constructor\n *\n * @param {string} accountId - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n * @param {string} sequence  - current sequence number of the account\n */\nvar Account = exports.Account = function () {\n  function Account(accountId, sequence) {\n    _classCallCheck(this, Account);\n\n    if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) {\n      throw new Error('accountId is an M-address; use MuxedAccount instead');\n    }\n\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    if (!(0, _isString2.default)(sequence)) {\n      throw new Error('sequence must be of type string');\n    }\n\n    this._accountId = accountId;\n    this.sequence = new _bignumber2.default(sequence);\n  }\n\n  /**\n   * Returns Stellar account ID, ex.\n   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.\n   * @returns {string}\n   */\n\n\n  _createClass(Account, [{\n    key: 'accountId',\n    value: function accountId() {\n      return this._accountId;\n    }\n\n    /**\n     * @returns {string}  sequence number for the account as a string\n     */\n\n  }, {\n    key: 'sequenceNumber',\n    value: function sequenceNumber() {\n      return this.sequence.toString();\n    }\n\n    /**\n     * Increments sequence number in this object by one.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'incrementSequenceNumber',\n    value: function incrementSequenceNumber() {\n      this.sequence = this.sequence.add(1);\n    }\n  }]);\n\n  return Account;\n}();"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,SAAS;AAE3B,IAAIC,YAAY,GAAG,YAAY;EAAE,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,KAAK,EAAE;IAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAC,CAAC;MAAEE,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;MAAED,UAAU,CAACE,YAAY,GAAG,IAAI;MAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;MAAEf,MAAM,CAACC,cAAc,CAACO,MAAM,EAAEI,UAAU,CAACI,GAAG,EAAEJ,UAAU,CAAC;IAAE;EAAE;EAAE,OAAO,UAAUK,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAE;IAAE,IAAID,UAAU,EAAEX,gBAAgB,CAACU,WAAW,CAACG,SAAS,EAAEF,UAAU,CAAC;IAAE,IAAIC,WAAW,EAAEZ,gBAAgB,CAACU,WAAW,EAAEE,WAAW,CAAC;IAAE,OAAOF,WAAW;EAAE,CAAC;AAAE,CAAC,CAAC,CAAC;AAEnjB,IAAII,SAAS,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE1C,IAAIC,UAAU,GAAGC,sBAAsB,CAACH,SAAS,CAAC;AAElD,IAAII,UAAU,GAAGH,OAAO,CAAC,cAAc,CAAC;AAExC,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAU,CAAC;AAEpD,IAAIE,OAAO,GAAGL,OAAO,CAAC,UAAU,CAAC;AAEjC,SAASE,sBAAsBA,CAACI,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;AAE9F,SAASG,eAAeA,CAACC,QAAQ,EAAEf,WAAW,EAAE;EAAE,IAAI,EAAEe,QAAQ,YAAYf,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIgB,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;;AAExJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI7B,OAAO,GAAGF,OAAO,CAACE,OAAO,GAAG,YAAY;EAC1C,SAASA,OAAOA,CAAC8B,SAAS,EAAEC,QAAQ,EAAE;IACpCJ,eAAe,CAAC,IAAI,EAAE3B,OAAO,CAAC;IAE9B,IAAIuB,OAAO,CAACS,MAAM,CAACC,wBAAwB,CAACH,SAAS,CAAC,EAAE;MACtD,MAAM,IAAII,KAAK,CAAC,qDAAqD,CAAC;IACxE;IAEA,IAAI,CAACX,OAAO,CAACS,MAAM,CAACG,uBAAuB,CAACL,SAAS,CAAC,EAAE;MACtD,MAAM,IAAII,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,IAAI,CAAC,CAAC,CAAC,EAAEf,UAAU,CAACO,OAAO,EAAEK,QAAQ,CAAC,EAAE;MACtC,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,IAAI,CAACE,UAAU,GAAGN,SAAS;IAC3B,IAAI,CAACC,QAAQ,GAAG,IAAIT,WAAW,CAACI,OAAO,CAACK,QAAQ,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;;EAGE7B,YAAY,CAACF,OAAO,EAAE,CAAC;IACrBY,GAAG,EAAE,WAAW;IAChBb,KAAK,EAAE,SAAS+B,SAASA,CAAA,EAAG;MAC1B,OAAO,IAAI,CAACM,UAAU;IACxB;;IAEA;AACJ;AACA;EAEE,CAAC,EAAE;IACDxB,GAAG,EAAE,gBAAgB;IACrBb,KAAK,EAAE,SAASsC,cAAcA,CAAA,EAAG;MAC/B,OAAO,IAAI,CAACN,QAAQ,CAACO,QAAQ,CAAC,CAAC;IACjC;;IAEA;AACJ;AACA;AACA;EAEE,CAAC,EAAE;IACD1B,GAAG,EAAE,yBAAyB;IAC9Bb,KAAK,EAAE,SAASwC,uBAAuBA,CAAA,EAAG;MACxC,IAAI,CAACR,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACS,GAAG,CAAC,CAAC,CAAC;IACtC;EACF,CAAC,CAAC,CAAC;EAEH,OAAOxC,OAAO;AAChB,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}