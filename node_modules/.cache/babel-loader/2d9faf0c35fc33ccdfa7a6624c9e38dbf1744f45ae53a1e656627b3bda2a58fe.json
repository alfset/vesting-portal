{"ast":null,"code":"import{useCallback,useEffect,useMemo,useState}from'react';import{useDispatch,useSelector}from'react-redux';// import config from '../../config'\nimport{isAddress}from'ethers/lib/utils';import{userSelectCurrency}from'./actions';import{getTokenlist,isSupportIndexedDB}from'../../utils/indexedDB';import config from'../../config';export function listsToTokenMap(list){// console.log(list)\nconst map={};for(const t in list){if(!isAddress(t)||!list[t].name||!list[t].symbol)continue;// console.log(list[t])\nmap[t]=list[t];}return map;}export function useBridgeTokenList(key,chainId){const lists=useSelector(state=>state.lists);// console.log(lists)\nconst init={};return useMemo(()=>{var _lists$key,_lists$key$chainId;if(!key||!chainId)return init;const current=(_lists$key=lists[key])===null||_lists$key===void 0?void 0:(_lists$key$chainId=_lists$key[chainId])===null||_lists$key$chainId===void 0?void 0:_lists$key$chainId.tokenList;// console.log(current)\nif(!current)return init;try{return listsToTokenMap(current);// return current\n}catch(error){console.error('Could not show token list due to error',error);return init;}},[lists,key,chainId]);}export function useAllMergeBridgeTokenList(key,chainId){const lists=useSelector(state=>state.lists);const updateTokenlistTime=useSelector(state=>state.lists.updateTokenlistTime);// console.log(chainId)\nconst useChain=useMemo(()=>{if(chainId){return chainId;}else if(config.getCurChainInfo(chainId).chainID){return config.getCurChainInfo(chainId).chainID;}return undefined;},[chainId]);const[tokenlist,setTokenlist]=useState({});const getCurTokenlist=useCallback(()=>{// console.log(useChain)\nif(isSupportIndexedDB){getTokenlist(useChain).then(res=>{// console.log(res)\nif(res===null||res===void 0?void 0:res.tokenList){setTokenlist(res.tokenList);}else{var _lists$key2,_lists$key2$useChain;let current=key?(_lists$key2=lists[key])===null||_lists$key2===void 0?void 0:(_lists$key2$useChain=_lists$key2[useChain])===null||_lists$key2$useChain===void 0?void 0:_lists$key2$useChain.tokenList:'';if(!current)current={};setTokenlist(current);}});}else{var _lists$key3,_lists$key3$useChain;let current=key?(_lists$key3=lists[key])===null||_lists$key3===void 0?void 0:(_lists$key3$useChain=_lists$key3[useChain])===null||_lists$key3$useChain===void 0?void 0:_lists$key3$useChain.tokenList:'';if(!current)current={};setTokenlist(current);}},[useChain,updateTokenlistTime]);useEffect(()=>{getCurTokenlist();},[getCurTokenlist,useChain,updateTokenlistTime]);return tokenlist;}export function useInitUserSelectCurrency(chainId){const userInit=useSelector(state=>state.lists.userSelectCurrency);const dispatch=useDispatch();const setUserFromSelect=useCallback(_ref=>{let{useChainId,token,toChainId,tokenKey}=_ref;const id=useChainId;dispatch(userSelectCurrency({chainId:id,token,toChainId,tokenKey}));},[dispatch]);const setUserToSelect=useCallback(_ref2=>{let{useChainId,token,toChainId,tokenKey}=_ref2;const id=useChainId;dispatch(userSelectCurrency({chainId:id,token,toChainId,tokenKey}));},[dispatch]);return{userInit:userInit&&chainId&&userInit[chainId]?userInit[chainId]:{},setUserFromSelect,setUserToSelect};}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","useDispatch","useSelector","isAddress","userSelectCurrency","getTokenlist","isSupportIndexedDB","config","listsToTokenMap","list","map","t","name","symbol","useBridgeTokenList","key","chainId","lists","state","init","_lists$key","_lists$key$chainId","current","tokenList","error","console","useAllMergeBridgeTokenList","updateTokenlistTime","useChain","getCurChainInfo","chainID","undefined","tokenlist","setTokenlist","getCurTokenlist","then","res","_lists$key2","_lists$key2$useChain","_lists$key3","_lists$key3$useChain","useInitUserSelectCurrency","userInit","dispatch","setUserFromSelect","_ref","useChainId","token","toChainId","tokenKey","id","setUserToSelect","_ref2"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/lists/hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppDispatch, AppState } from '../index'\n// import config from '../../config'\nimport { isAddress } from 'ethers/lib/utils'\nimport {userSelectCurrency} from './actions'\n\nimport {getTokenlist, isSupportIndexedDB} from '../../utils/indexedDB'\nimport config from '../../config'\n\n\n\nexport type TokenAddressMap = Readonly<{ [chainId in any]: Readonly<{ [tokenAddress: string]: any }> }>\n\nexport function listsToTokenMap(list:any): TokenAddressMap {\n\n  // console.log(list)\n  const map:any = {}\n  for (const t in list) {\n    if(!isAddress(t) || !list[t].name || !list[t].symbol) continue\n    // console.log(list[t])\n    map[t] = list[t]\n  }\n  return map\n}\n\n\nexport function useBridgeTokenList(key?: string | undefined, chainId?:any): any {\n  const lists:any = useSelector<AppState, AppState['lists']>(state => state.lists)\n  // console.log(lists)\n  const init = {}\n  return useMemo(() => {\n    if (!key || !chainId) return init\n    const current = lists[key]?.[chainId]?.tokenList\n    // console.log(current)\n    if (!current) return init\n    try {\n      return listsToTokenMap(current)\n      // return current\n    } catch (error) {\n      console.error('Could not show token list due to error', error)\n      return init\n    }\n  }, [lists, key, chainId])\n}\n\nexport function useAllMergeBridgeTokenList(key?: string | undefined, chainId?:any): any {\n  const lists:any = useSelector<AppState, AppState['lists']>(state => state.lists)\n  const updateTokenlistTime:any = useSelector<AppState, AppState['lists']>(state => state.lists.updateTokenlistTime)\n  // console.log(chainId)\n\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID\n    }\n    return undefined\n  }, [chainId])\n\n  const [tokenlist, setTokenlist] = useState<any>({})\n  const getCurTokenlist = useCallback(() => {\n    // console.log(useChain)\n    if (isSupportIndexedDB) {\n      getTokenlist(useChain).then((res:any) => {\n        // console.log(res)\n        if (res?.tokenList) {\n          setTokenlist(res.tokenList)\n        } else {\n          let current = key ? lists[key]?.[useChain]?.tokenList : ''\n          if (!current) current = {}\n          setTokenlist(current)\n        }\n      })\n    } else {\n      let current = key ? lists[key]?.[useChain]?.tokenList : ''\n      if (!current) current = {}\n      setTokenlist(current)\n    }\n  }, [useChain, updateTokenlistTime])\n\n  useEffect(() => {\n    getCurTokenlist()\n  }, [getCurTokenlist, useChain, updateTokenlistTime])\n\n  return tokenlist\n}\n\nexport function useInitUserSelectCurrency(chainId?: any) {\n  const userInit:any = useSelector<AppState, AppState['lists']['userSelectCurrency']>(state => state.lists.userSelectCurrency)\n  const dispatch = useDispatch<AppDispatch>()\n  const setUserFromSelect = useCallback(({useChainId, token, toChainId, tokenKey}: {useChainId?: any, token?:any, toChainId?:any, tokenKey?:any}) => {\n    const id = useChainId\n    dispatch(userSelectCurrency({chainId: id, token, toChainId, tokenKey}))\n  }, [dispatch])\n\n  const setUserToSelect = useCallback(({useChainId, token, toChainId, tokenKey}: {useChainId?: any, token?:any, toChainId?:any, tokenKey?:any}) => {\n    const id = useChainId\n    dispatch(userSelectCurrency({chainId: id, token, toChainId, tokenKey}))\n  }, [dispatch])\n\n  return {\n    userInit: userInit && chainId && userInit[chainId] ? userInit[chainId] : {},\n    setUserFromSelect,\n    setUserToSelect,\n  }\n}\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,SAAS,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CAEjE,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CAEtD;AACA,OAASC,SAAS,KAAQ,kBAAkB,CAC5C,OAAQC,kBAAkB,KAAO,WAAW,CAE5C,OAAQC,YAAY,CAAEC,kBAAkB,KAAO,uBAAuB,CACtE,MAAO,CAAAC,MAAM,KAAM,cAAc,CAMjC,MAAO,SAAS,CAAAC,eAAeA,CAACC,IAAQ,CAAmB,CAEzD;AACA,KAAM,CAAAC,GAAO,CAAG,CAAC,CAAC,CAClB,IAAK,KAAM,CAAAC,CAAC,GAAI,CAAAF,IAAI,CAAE,CACpB,GAAG,CAACN,SAAS,CAACQ,CAAC,CAAC,EAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAACC,IAAI,EAAI,CAACH,IAAI,CAACE,CAAC,CAAC,CAACE,MAAM,CAAE,SACtD;AACAH,GAAG,CAACC,CAAC,CAAC,CAAGF,IAAI,CAACE,CAAC,CAAC,CAClB,CACA,MAAO,CAAAD,GAAG,CACZ,CAGA,MAAO,SAAS,CAAAI,kBAAkBA,CAACC,GAAwB,CAAEC,OAAY,CAAO,CAC9E,KAAM,CAAAC,KAAS,CAAGf,WAAW,CAA8BgB,KAAK,EAAIA,KAAK,CAACD,KAAK,CAAC,CAChF;AACA,KAAM,CAAAE,IAAI,CAAG,CAAC,CAAC,CACf,MAAO,CAAApB,OAAO,CAAC,IAAM,KAAAqB,UAAA,CAAAC,kBAAA,CACnB,GAAI,CAACN,GAAG,EAAI,CAACC,OAAO,CAAE,MAAO,CAAAG,IAAI,CACjC,KAAM,CAAAG,OAAO,EAAAF,UAAA,CAAGH,KAAK,CAACF,GAAG,CAAC,UAAAK,UAAA,kBAAAC,kBAAA,CAAVD,UAAA,CAAaJ,OAAO,CAAC,UAAAK,kBAAA,iBAArBA,kBAAA,CAAuBE,SAAS,CAChD;AACA,GAAI,CAACD,OAAO,CAAE,MAAO,CAAAH,IAAI,CACzB,GAAI,CACF,MAAO,CAAAX,eAAe,CAACc,OAAO,CAAC,CAC/B;AACF,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAC9D,MAAO,CAAAL,IAAI,CACb,CACF,CAAC,CAAE,CAACF,KAAK,CAAEF,GAAG,CAAEC,OAAO,CAAC,CAAC,CAC3B,CAEA,MAAO,SAAS,CAAAU,0BAA0BA,CAACX,GAAwB,CAAEC,OAAY,CAAO,CACtF,KAAM,CAAAC,KAAS,CAAGf,WAAW,CAA8BgB,KAAK,EAAIA,KAAK,CAACD,KAAK,CAAC,CAChF,KAAM,CAAAU,mBAAuB,CAAGzB,WAAW,CAA8BgB,KAAK,EAAIA,KAAK,CAACD,KAAK,CAACU,mBAAmB,CAAC,CAClH;AAEA,KAAM,CAAAC,QAAQ,CAAG7B,OAAO,CAAC,IAAM,CAC7B,GAAIiB,OAAO,CAAE,CACX,MAAO,CAAAA,OAAO,CAChB,CAAC,IAAM,IAAIT,MAAM,CAACsB,eAAe,CAACb,OAAO,CAAC,CAACc,OAAO,CAAE,CAClD,MAAO,CAAAvB,MAAM,CAACsB,eAAe,CAACb,OAAO,CAAC,CAACc,OAAO,CAChD,CACA,MAAO,CAAAC,SAAS,CAClB,CAAC,CAAE,CAACf,OAAO,CAAC,CAAC,CAEb,KAAM,CAACgB,SAAS,CAAEC,YAAY,CAAC,CAAGjC,QAAQ,CAAM,CAAC,CAAC,CAAC,CACnD,KAAM,CAAAkC,eAAe,CAAGrC,WAAW,CAAC,IAAM,CACxC;AACA,GAAIS,kBAAkB,CAAE,CACtBD,YAAY,CAACuB,QAAQ,CAAC,CAACO,IAAI,CAAEC,GAAO,EAAK,CACvC;AACA,GAAIA,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEb,SAAS,CAAE,CAClBU,YAAY,CAACG,GAAG,CAACb,SAAS,CAAC,CAC7B,CAAC,IAAM,KAAAc,WAAA,CAAAC,oBAAA,CACL,GAAI,CAAAhB,OAAO,CAAGP,GAAG,EAAAsB,WAAA,CAAGpB,KAAK,CAACF,GAAG,CAAC,UAAAsB,WAAA,kBAAAC,oBAAA,CAAVD,WAAA,CAAaT,QAAQ,CAAC,UAAAU,oBAAA,iBAAtBA,oBAAA,CAAwBf,SAAS,CAAG,EAAE,CAC1D,GAAI,CAACD,OAAO,CAAEA,OAAO,CAAG,CAAC,CAAC,CAC1BW,YAAY,CAACX,OAAO,CAAC,CACvB,CACF,CAAC,CAAC,CACJ,CAAC,IAAM,KAAAiB,WAAA,CAAAC,oBAAA,CACL,GAAI,CAAAlB,OAAO,CAAGP,GAAG,EAAAwB,WAAA,CAAGtB,KAAK,CAACF,GAAG,CAAC,UAAAwB,WAAA,kBAAAC,oBAAA,CAAVD,WAAA,CAAaX,QAAQ,CAAC,UAAAY,oBAAA,iBAAtBA,oBAAA,CAAwBjB,SAAS,CAAG,EAAE,CAC1D,GAAI,CAACD,OAAO,CAAEA,OAAO,CAAG,CAAC,CAAC,CAC1BW,YAAY,CAACX,OAAO,CAAC,CACvB,CACF,CAAC,CAAE,CAACM,QAAQ,CAAED,mBAAmB,CAAC,CAAC,CAEnC7B,SAAS,CAAC,IAAM,CACdoC,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,CAACA,eAAe,CAAEN,QAAQ,CAAED,mBAAmB,CAAC,CAAC,CAEpD,MAAO,CAAAK,SAAS,CAClB,CAEA,MAAO,SAAS,CAAAS,yBAAyBA,CAACzB,OAAa,CAAE,CACvD,KAAM,CAAA0B,QAAY,CAAGxC,WAAW,CAAoDgB,KAAK,EAAIA,KAAK,CAACD,KAAK,CAACb,kBAAkB,CAAC,CAC5H,KAAM,CAAAuC,QAAQ,CAAG1C,WAAW,CAAc,CAAC,CAC3C,KAAM,CAAA2C,iBAAiB,CAAG/C,WAAW,CAACgD,IAAA,EAA6G,IAA5G,CAACC,UAAU,CAAEC,KAAK,CAAEC,SAAS,CAAEC,QAAuE,CAAC,CAAAJ,IAAA,CAC5I,KAAM,CAAAK,EAAE,CAAGJ,UAAU,CACrBH,QAAQ,CAACvC,kBAAkB,CAAC,CAACY,OAAO,CAAEkC,EAAE,CAAEH,KAAK,CAAEC,SAAS,CAAEC,QAAQ,CAAC,CAAC,CAAC,CACzE,CAAC,CAAE,CAACN,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAAQ,eAAe,CAAGtD,WAAW,CAACuD,KAAA,EAA6G,IAA5G,CAACN,UAAU,CAAEC,KAAK,CAAEC,SAAS,CAAEC,QAAuE,CAAC,CAAAG,KAAA,CAC1I,KAAM,CAAAF,EAAE,CAAGJ,UAAU,CACrBH,QAAQ,CAACvC,kBAAkB,CAAC,CAACY,OAAO,CAAEkC,EAAE,CAAEH,KAAK,CAAEC,SAAS,CAAEC,QAAQ,CAAC,CAAC,CAAC,CACzE,CAAC,CAAE,CAACN,QAAQ,CAAC,CAAC,CAEd,MAAO,CACLD,QAAQ,CAAEA,QAAQ,EAAI1B,OAAO,EAAI0B,QAAQ,CAAC1B,OAAO,CAAC,CAAG0B,QAAQ,CAAC1B,OAAO,CAAC,CAAG,CAAC,CAAC,CAC3E4B,iBAAiB,CACjBO,eACF,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}