{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n  return signers.map(_ref => {\n    let {\n      pubkey,\n      sequence\n    } = _ref;\n    return {\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    };\n  });\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit, feeGranter, feePayer) {\n  let signMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  // Required arguments 4 and 5 were added in CosmJS 0.29. Use runtime checks to help our non-TS users.\n  (0, utils_1.assert)(feeGranter === undefined || typeof feeGranter === \"string\", \"feeGranter must be undefined or string\");\n  (0, utils_1.assert)(feePayer === undefined || typeof feePayer === \"string\", \"feePayer must be undefined or string\");\n  const authInfo = tx_1.AuthInfo.fromPartial({\n    signerInfos: makeSignerInfos(signers, signMode),\n    fee: {\n      amount: [...feeAmount],\n      gasLimit: long_1.default.fromNumber(gasLimit),\n      granter: feeGranter,\n      payer: feePayer\n    }\n  });\n  return tx_1.AuthInfo.encode(authInfo).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes(_ref2) {\n  let {\n    accountNumber,\n    authInfoBytes,\n    bodyBytes,\n    chainId\n  } = _ref2;\n  const signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"names":["utils_1","require","signing_1","tx_1","long_1","__importDefault","makeSignerInfos","signers","signMode","map","_ref","pubkey","sequence","publicKey","modeInfo","single","mode","default","fromNumber","makeAuthInfoBytes","feeAmount","gasLimit","feeGranter","feePayer","arguments","length","undefined","SignMode","SIGN_MODE_DIRECT","assert","authInfo","AuthInfo","fromPartial","signerInfos","fee","amount","granter","payer","encode","finish","exports","makeSignDoc","bodyBytes","authInfoBytes","chainId","accountNumber","makeSignBytes","_ref2","signDoc","SignDoc"],"sources":["../src/signing.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,IAAA,GAAAF,OAAA;AAEA,MAAAG,MAAA,GAAAC,eAAA,CAAAJ,OAAA;AAEA;;;;;AAKA,SAASK,eAAeA,CACtBC,OAA2E,EAC3EC,QAAkB;EAElB,OAAOD,OAAO,CAACE,GAAG,CAChBC,IAAA;IAAA,IAAC;MAAEC,MAAM;MAAEC;IAAQ,CAAE,GAAAF,IAAA;IAAA,OAAkB;MACrCG,SAAS,EAAEF,MAAM;MACjBG,QAAQ,EAAE;QACRC,MAAM,EAAE;UAAEC,IAAI,EAAER;QAAQ;OACzB;MACDI,QAAQ,EAAER,MAAA,CAAAa,OAAI,CAACC,UAAU,CAACN,QAAQ;KACnC;EAAA,CAAC,CACH;AACH;AAEA;;;;;AAKA,SAAgBO,iBAAiBA,CAC/BZ,OAA2E,EAC3Ea,SAA0B,EAC1BC,QAAgB,EAChBC,UAA8B,EAC9BC,QAA4B,EACQ;EAAA,IAApCf,QAAQ,GAAAgB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGtB,SAAA,CAAAyB,QAAQ,CAACC,gBAAgB;EAEpC;EACA,IAAA5B,OAAA,CAAA6B,MAAM,EACJP,UAAU,KAAKI,SAAS,IAAI,OAAOJ,UAAU,KAAK,QAAQ,EAC1D,wCAAwC,CACzC;EACD,IAAAtB,OAAA,CAAA6B,MAAM,EAACN,QAAQ,KAAKG,SAAS,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE,sCAAsC,CAAC;EAEtG,MAAMO,QAAQ,GAAG3B,IAAA,CAAA4B,QAAQ,CAACC,WAAW,CAAC;IACpCC,WAAW,EAAE3B,eAAe,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC/C0B,GAAG,EAAE;MACHC,MAAM,EAAE,CAAC,GAAGf,SAAS,CAAC;MACtBC,QAAQ,EAAEjB,MAAA,CAAAa,OAAI,CAACC,UAAU,CAACG,QAAQ,CAAC;MACnCe,OAAO,EAAEd,UAAU;MACnBe,KAAK,EAAEd;;GAEV,CAAC;EACF,OAAOpB,IAAA,CAAA4B,QAAQ,CAACO,MAAM,CAACR,QAAQ,CAAC,CAACS,MAAM,EAAE;AAC3C;AAzBAC,OAAA,CAAArB,iBAAA,GAAAA,iBAAA;AA2BA,SAAgBsB,WAAWA,CACzBC,SAAqB,EACrBC,aAAyB,EACzBC,OAAe,EACfC,aAAqB;EAErB,OAAO;IACLH,SAAS,EAAEA,SAAS;IACpBC,aAAa,EAAEA,aAAa;IAC5BC,OAAO,EAAEA,OAAO;IAChBC,aAAa,EAAEzC,MAAA,CAAAa,OAAI,CAACC,UAAU,CAAC2B,aAAa;GAC7C;AACH;AAZAL,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAcA,SAAgBK,aAAaA,CAAAC,KAAA,EAA8D;EAAA,IAA7D;IAAEF,aAAa;IAAEF,aAAa;IAAED,SAAS;IAAEE;EAAO,CAAW,GAAAG,KAAA;EACzF,MAAMC,OAAO,GAAG7C,IAAA,CAAA8C,OAAO,CAACjB,WAAW,CAAC;IAClCa,aAAa,EAAEA,aAAa;IAC5BF,aAAa,EAAEA,aAAa;IAC5BD,SAAS,EAAEA,SAAS;IACpBE,OAAO,EAAEA;GACV,CAAC;EACF,OAAOzC,IAAA,CAAA8C,OAAO,CAACX,MAAM,CAACU,OAAO,CAAC,CAACT,MAAM,EAAE;AACzC;AARAC,OAAA,CAAAM,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}