{"ast":null,"code":"import { useCallback, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport { useDispatch\n// useSelector\n} from 'react-redux';\nimport { ChainId } from \"../../config/chainConfig/chainId\";\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { flowAddress, flowBalanceList } from './actions';\nimport useInterval from \"../../hooks/useInterval\";\n\n// import {\n//   useFlowBalance,\n//   // useSendFlowTxns\n//   // getFLOWTxnsStatus\n// } from './index'\n\nexport default function Updater() {\n  const {\n    chainId,\n    account\n  } = useActiveReact();\n  const dispatch = useDispatch();\n\n  // const {getFlowTokenBalance} = useFlowBalance()\n\n  // const {transferFn} = useSendFlowTxns()\n\n  const getBalance = useCallback(async () => {\n    // console.log(account)\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId) && account) {\n      // getFLOWTxnsStatus('a133c54d778fbb59bd4fb06ba4e41d8aa0d0e97c54dda283ac77c9d281cae150', chainId)\n      // getFLOWTxnsStatus('90f105a707a2f8cf6114347d6ad7769a616e98f8b37d302004b2f039f2cb5413', chainId)\n      // fcl.account(account).then((res:any) => {\n      // const useAccount = '0x79126cfa5c96017c'\n      const useAccount = account;\n      // getFlowTokenBalance(useAccount)\n      // const tsResult = await transferFn('0x79126cfa5c96017c', 1.0)\n      // console.log(tsResult)\n\n      // fcl.query({\n      //   cadence: `\n      //     import AnyExampleToken from 0x2627a6b6570638c4\n\n      //     pub fun main():String? {\n      //       return AnyExampleToken.underlying()\n      //     }\n      //   `,\n      // }).then((res:any) => {\n      //   console.log(res)\n      // }).catch((err:any) => {\n      //   console.log(err)\n      // })\n\n      fcl.account(useAccount).then(async res => {\n        console.log(res);\n        if (res) {\n          const blList = {};\n          const result = res;\n          blList['NATIVE'] = result.balance;\n          if (result.contracts && result.contracts.length > 0) {\n            for (const obj of result.contracts) {\n              const key = obj.policyId + '.' + obj.assetName;\n              blList[key] = obj.amount;\n            }\n          }\n          dispatch(flowBalanceList({\n            list: blList\n          }));\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [chainId, account]);\n  useEffect(() => {\n    getBalance();\n  }, [chainId, account]);\n  useInterval(getBalance, 1000 * 10);\n  useEffect(() => {\n    if (chainId && [ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      // let flowNetwork = 'https://access-testnet.onflow.org'\n      // let BloctoWallet = 'https://flow-wallet-testnet.blocto.app/authn'\n      let flowNetwork = 'https://rest-testnet.onflow.org';\n      let BloctoWallet = 'https://fcl-discovery.onflow.org/testnet/authn';\n      let FungibleToken = '0x9a0766d93b6608b7';\n      let FlowToken = '0x7e60df042a9c0868';\n      if (chainId === ChainId.FLOW) {\n        flowNetwork = 'https://rest-mainnet.onflow.org';\n        BloctoWallet = 'https://fcl-discovery.onflow.org/authn';\n        FungibleToken = '0xf233dcee88fe0abe';\n        FlowToken = '0x1654653399040a61';\n      }\n      fcl.config().put(\"challenge.scope\", \"email\").put(\"accessNode.api\", flowNetwork) // connect to Flow testnet\n      .put(\"challenge.handshake\", BloctoWallet) // use Blocto testnet wallet\n      // .put(\"flow.network\", \"testnet\")\n      // .put(\"discovery.wallet\", \"https://fcl-discovery.onflow.org/testnet/authn\")\n      .put(\"app.detail.title\", \"Multichain - Cross Chain\").put(\"app.detail.icon\", \"https://assets.coingecko.com/coins/images/22087/large/1_Wyot-SDGZuxbjdkaOeT2-A.png\")\n      // .put(\"0xFlowToken\", \"0x7e60df042a9c0868\")\n      .put(\"0xFungibleToken\", FungibleToken).put(\"0xFlowToken\", FlowToken);\n      console.log(fcl);\n      fcl.currentUser().subscribe(user => {\n        console.log(user);\n        if (user === null || user === void 0 ? void 0 : user.addr) {\n          dispatch(flowAddress({\n            address: user === null || user === void 0 ? void 0 : user.addr\n          }));\n        } else {\n          dispatch(flowAddress({\n            address: ''\n          }));\n        }\n      });\n    }\n  }, [chainId]);\n  return null;\n}","map":{"version":3,"names":["useCallback","useEffect","fcl","useDispatch","ChainId","useActiveReact","flowAddress","flowBalanceList","useInterval","Updater","chainId","account","dispatch","getBalance","FLOW","FLOW_TEST","includes","useAccount","then","res","console","log","blList","result","balance","contracts","length","obj","key","policyId","assetName","amount","list","catch","err","flowNetwork","BloctoWallet","FungibleToken","FlowToken","config","put","currentUser","subscribe","user","addr","address"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/flow/updater.ts"],"sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\"\nimport { \n  useDispatch,\n  // useSelector\n} from 'react-redux'\nimport { \n  // AppState,\n  AppDispatch\n} from '../../state'\nimport { ChainId } from \"../../config/chainConfig/chainId\";\n\nimport {useActiveReact} from '../../hooks/useActiveReact'\n\nimport {\n  flowAddress,\n  flowBalanceList\n} from './actions'\nimport useInterval from \"../../hooks/useInterval\";\n\n// import {\n//   useFlowBalance,\n//   // useSendFlowTxns\n//   // getFLOWTxnsStatus\n// } from './index'\n\nexport default function Updater(): null {\n  const {chainId, account} = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n\n  // const {getFlowTokenBalance} = useFlowBalance()\n\n  // const {transferFn} = useSendFlowTxns()\n\n  const getBalance = useCallback(async() => {\n    // console.log(account)\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId) && account) {\n      // getFLOWTxnsStatus('a133c54d778fbb59bd4fb06ba4e41d8aa0d0e97c54dda283ac77c9d281cae150', chainId)\n      // getFLOWTxnsStatus('90f105a707a2f8cf6114347d6ad7769a616e98f8b37d302004b2f039f2cb5413', chainId)\n      // fcl.account(account).then((res:any) => {\n      // const useAccount = '0x79126cfa5c96017c'\n      const useAccount = account\n      // getFlowTokenBalance(useAccount)\n      // const tsResult = await transferFn('0x79126cfa5c96017c', 1.0)\n      // console.log(tsResult)\n\n      // fcl.query({\n      //   cadence: `\n      //     import AnyExampleToken from 0x2627a6b6570638c4\n          \n      //     pub fun main():String? {\n      //       return AnyExampleToken.underlying()\n      //     }\n      //   `,\n      // }).then((res:any) => {\n      //   console.log(res)\n      // }).catch((err:any) => {\n      //   console.log(err)\n      // })\n\n\n      fcl.account(useAccount).then(async(res:any) => {\n        console.log(res)\n        if (res) {\n          const blList:any = {}\n          const result = res\n          blList['NATIVE'] = result.balance\n          if (result.contracts && result.contracts.length > 0) {\n            for (const obj of result.contracts) {\n              const key = obj.policyId + '.' + obj.assetName\n              blList[key] = obj.amount\n            }\n          }\n          dispatch(flowBalanceList({list: blList}))\n        }\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    }\n  }, [chainId, account])\n\n  useEffect(() => {\n    getBalance()\n  }, [chainId, account])\n\n  useInterval(getBalance, 1000 * 10)\n\n  useEffect(() => {\n    if (chainId && [ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      // let flowNetwork = 'https://access-testnet.onflow.org'\n      // let BloctoWallet = 'https://flow-wallet-testnet.blocto.app/authn'\n      let flowNetwork = 'https://rest-testnet.onflow.org'\n      let BloctoWallet = 'https://fcl-discovery.onflow.org/testnet/authn'\n      let FungibleToken = '0x9a0766d93b6608b7'\n      let FlowToken = '0x7e60df042a9c0868'\n      if (chainId === ChainId.FLOW) {\n        flowNetwork = 'https://rest-mainnet.onflow.org'\n        BloctoWallet = 'https://fcl-discovery.onflow.org/authn'\n        FungibleToken = '0xf233dcee88fe0abe'\n        FlowToken = '0x1654653399040a61'\n      }\n      fcl.config()\n      .put(\"challenge.scope\", \"email\")\n      .put(\"accessNode.api\", flowNetwork) // connect to Flow testnet\n      .put(\"challenge.handshake\", BloctoWallet) // use Blocto testnet wallet\n      // .put(\"flow.network\", \"testnet\")\n      // .put(\"discovery.wallet\", \"https://fcl-discovery.onflow.org/testnet/authn\")\n      .put(\"app.detail.title\", \"Multichain - Cross Chain\")\n      .put(\"app.detail.icon\", \"https://assets.coingecko.com/coins/images/22087/large/1_Wyot-SDGZuxbjdkaOeT2-A.png\")\n      // .put(\"0xFlowToken\", \"0x7e60df042a9c0868\")\n      .put(\"0xFungibleToken\", FungibleToken)\n      .put(\"0xFlowToken\", FlowToken)\n\n      console.log(fcl)\n\n      fcl\n        .currentUser()\n        .subscribe((user:any) => {\n          console.log(user)\n          if (user?.addr) {\n            dispatch(flowAddress({address: user?.addr}))\n          } else {\n            dispatch(flowAddress({address: ''}))\n          }\n        })\n    }\n  }, [chainId])\n\n  return null\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}