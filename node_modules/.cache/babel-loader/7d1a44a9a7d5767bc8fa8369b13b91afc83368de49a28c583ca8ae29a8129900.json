{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useTranslation}from'react-i18next';import{useActiveReact}from'../../hooks/useActiveReact';import{tryParseAmount3}from'../../state/swap/hooks';import{recordsTxns}from'../../utils/bridge/register';import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';import{BigAmount}from\"../../utils/formatBignumber\";import{ChainId}from\"../../config/chainConfig/chainId\";import{adaAddress}from'./actions';// import * as typhonjs from '@stricahq/typhonjs'\n// export const CardanoWasm = () => { // 路由懒加载\n//   return () => Promise.resolve(require(`@emurgo/cardano-serialization-lib-nodejs`).default)\n// }\n// const CardanoWasm = require('@emurgo/cardano-serialization-lib-nodejs')\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import CardanoWasm from \"@emurgo/cardano-serialization-lib-asmjs\"\n// import CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// const CardanoWasm = require('@dcspark/cardano-multiplatform-lib-browser')\n// console.log(typhonjs)\n// console.log(CardanoWasm)\nexport function useAdaAddress(){const account=useSelector(state=>state.ada.adaAddress);return{adaAddress:account};}export async function eternlLogin(){try{const api=await window.cardano.eternl.enable();window.lucid.selectWallet(api);localStorage.setItem(\"lucid\",\"true\");}catch(error){console.log(error);}}export function useAdaLogin(){// const api = await window.cardano.eternl.enable();\n// window.lucid.selectWallet(api);\nconst{chainId}=useActiveReact();const dispatch=useDispatch();return useCallback(()=>{var _window,_window2,_window2$cardano,_window3,_window4,_window4$lucid,_window5,_window6,_window6$lucid;const adaWallet=((_window=window)===null||_window===void 0?void 0:_window.cardano)&&((_window2=window)===null||_window2===void 0?void 0:(_window2$cardano=_window2.cardano)===null||_window2$cardano===void 0?void 0:_window2$cardano.eternl);if(((_window3=window)===null||_window3===void 0?void 0:_window3.lucid)&&((_window4=window)===null||_window4===void 0?void 0:(_window4$lucid=_window4.lucid)===null||_window4$lucid===void 0?void 0:_window4$lucid.wallet)===undefined){eternlLogin();return;}if(adaWallet&&(adaWallet===null||adaWallet===void 0?void 0:adaWallet.enable)&&((_window5=window)===null||_window5===void 0?void 0:_window5.lucid)&&((_window6=window)===null||_window6===void 0?void 0:(_window6$lucid=_window6.lucid)===null||_window6$lucid===void 0?void 0:_window6$lucid.wallet)){if(ChainId.ADA_TEST===chainId||ChainId.ADA===chainId){window.lucid.wallet.getUtxos().then(e=>{if(e&&e.length>0){dispatch(adaAddress({address:e[0].address}));}});}else{alert('Network Error.');}}else{if(confirm('Please connect Eternl or install Eternl.')===true){// window.open('https://namiwallet.io/')\nwindow.open('https://eternl.io/');}}},[]);}export function useAdaBalance(){const adaBalanceList=useSelector(state=>state.ada.adaBalanceList);return{adaBalanceList// getAdaTokenBalance\n};}export function getADATxnsStatus(txid,chainId){const data={msg:'Error',info:''};return new Promise(resolve=>{const query=\"{\\n      transactions(where: { hash: { _eq: \\\"\".concat(txid,\"\\\"}}) {\\n        block {number epochNo slotNo}\\n        hash metadata{key value}\\n        inputs{\\n          tokens{\\n            asset{\\n              assetId\\n              assetName\\n            }\\n            quantity\\n          }\\n          value\\n        }\\n        outputs(order_by:{index:asc}){\\n          address\\n          index\\n          tokens{\\n            asset{\\n              assetId\\n              assetName\\n            }\\n            quantity\\n          }\\n          value\\n        }\\n        validContract\\n      }\\n    }\");let url='https://graphql-api.mainnet.dandelion.link/';if(chainId==='ADA_TEST'){url='https://graphql-api.testnet.dandelion.link/';}fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})}).then(res=>res.json()).then(json=>{// console.log(json)\n// console.log(json.data)\n// console.log(json.data.transactions)\n// console.log(JSON.stringify(json.data.transactions))\n// console.log(json)\nif(json&&json.data&&json.data.transactions&&json.data.transactions.length>0){if(!json.data.transactions[0].outputs){data.msg='Failure';data.error='Txns is failure!';}else{data.msg='Success';data.info=json.data.transactions[0];}}else{data.msg='Null';data.error='Query is empty!';}resolve(data);}).catch(err=>{data.error='Query is empty!';console.log(err);resolve(data);});});}const baseValue=2;export function useAdaCrossChain(routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,useToChainId){var _window7,_window8,_window8$cardano;const{account}=useActiveReact();const{t}=useTranslation();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const{adaBalanceList}=useAdaBalance();const adaWallet=((_window7=window)===null||_window7===void 0?void 0:_window7.cardano)&&((_window8=window)===null||_window8===void 0?void 0:(_window8$cardano=_window8.cardano)===null||_window8$cardano===void 0?void 0:_window8$cardano.eternl);const addTransaction=useTransactionAdder();const inputValue=(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='NATIVE'?Number(typedValue)+baseValue:typedValue;const inputAmount=useMemo(()=>tryParseAmount3(inputValue+'',selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[inputValue,selectCurrency]);const useBalance=useMemo(()=>{if((selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)&&adaBalanceList){const dec=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals;if((selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='NATIVE'&&adaBalanceList['NATIVE']){return BigAmount.format(dec,adaBalanceList['NATIVE']);}else if((selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='TOKEN'&&adaBalanceList[selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address]){console.log(adaBalanceList);return BigAmount.format(dec,adaBalanceList[selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address]);}}return'';},[adaBalanceList,selectCurrency]);let sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&useBalance&&Number(useBalance===null||useBalance===void 0?void 0:useBalance.toExact())>=Number(inputValue);}catch(error){console.log(error);}return useMemo(()=>{if(!account||![ChainId.ADA,ChainId.ADA_TEST].includes(chainId)||!routerToken||!adaWallet||!useToChainId)return{};return{balance:useBalance,execute:async()=>{// let txResult:any = ''\nconsole.log(adaWallet);try{// const MetaDatum: any = {\n//   \"bind\": receiveAddress,\n//   \"toChainId\": useToChainId + ''\n// }\n// const auxDataCbor = typhonjs.utils\n// .createAuxiliaryDataCbor({\n//   metadata: [\n//     {\n//       label: 123,\n//       data: MetaDatum,\n//     },\n//   ],\n// })\n// .toString(\"hex\");\nlet tx=undefined;if((selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='NATIVE'){tx=await window.lucid.newTx().payToContract(routerToken,{inline:window.lucid.data.to(BigInt(0))},{lovelace:BigInt(inputAmount)}).attachMetadata(123,{\"bind\":receiveAddress,\"toChainId\":useToChainId+''}).complete();}else{const tokenArr=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address.split('.');const tokenObj={};// const decimals = selectCurrency.decimals;\ntokenObj[tokenArr[0]+tokenArr[1]]=BigInt(inputAmount);tx=await window.lucid.newTx().payToContract(routerToken,{inline:window.lucid.data.to(BigInt(0))},tokenObj).attachMetadata(123,{\"bind\":receiveAddress,\"toChainId\":useToChainId+''}).complete();}const signedTx=await tx.sign().complete();const txHash=await signedTx.submit();const txResult={data:{transactionId:txHash},status:true};// const txResult = await adaWallet.paymentTransaction({\n//   auxiliaryDataCbor: auxDataCbor,\n//   outputs: [...outputs], \n// });\nconsole.log(txResult);if(txResult===null||txResult===void 0?void 0:txResult.status){var _txResult$data;const txReceipt={hash:txResult===null||txResult===void 0?void 0:(_txResult$data=txResult.data)===null||_txResult$data===void 0?void 0:_txResult$data.transactionId};console.log(txReceipt);if(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}}else{// onChangeViewErrorTip('Txns failure.', true)\nonChangeViewErrorTip(JSON.stringify(txResult),true);}}catch(error){console.log(error);onChangeViewErrorTip('Txns failure.',true);}},inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[receiveAddress,account,selectCurrency,inputAmount,chainId,routerToken,selectChain,destConfig,inputToken,useBalance,adaWallet,useToChainId]);}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useTranslation","useActiveReact","tryParseAmount3","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","BigAmount","ChainId","adaAddress","useAdaAddress","account","state","ada","eternlLogin","api","window","cardano","eternl","enable","lucid","selectWallet","localStorage","setItem","error","console","log","useAdaLogin","chainId","dispatch","_window","_window2","_window2$cardano","_window3","_window4","_window4$lucid","_window5","_window6","_window6$lucid","adaWallet","wallet","undefined","ADA_TEST","ADA","getUtxos","then","e","length","address","alert","confirm","open","useAdaBalance","adaBalanceList","getADATxnsStatus","txid","data","msg","info","Promise","resolve","query","concat","url","fetch","method","headers","body","JSON","stringify","res","json","transactions","outputs","catch","err","baseValue","useAdaCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","_window7","_window8","_window8$cardano","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","inputValue","tokenType","Number","inputAmount","decimals","useBalance","dec","format","sufficientBalance","toExact","includes","balance","execute","tx","newTx","payToContract","inline","to","BigInt","lovelace","attachMetadata","complete","tokenArr","split","tokenObj","signedTx","sign","txHash","submit","txResult","transactionId","status","_txResult$data","txReceipt","hash","value","formatvalue","symbol","version","type","pairid","summary","toChainId","toAddress","indexOf","toLowerCase","token","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/cardano/index.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport { AppState, AppDispatch } from '../../state'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { recordsTxns } from '../../utils/bridge/register'\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { BigAmount } from \"../../utils/formatBignumber\"\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n\nimport { adaAddress } from './actions'\n\n// import * as typhonjs from '@stricahq/typhonjs'\n// export const CardanoWasm = () => { // 路由懒加载\n//   return () => Promise.resolve(require(`@emurgo/cardano-serialization-lib-nodejs`).default)\n// }\n// const CardanoWasm = require('@emurgo/cardano-serialization-lib-nodejs')\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import CardanoWasm from \"@emurgo/cardano-serialization-lib-asmjs\"\n// import CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// const CardanoWasm = require('@dcspark/cardano-multiplatform-lib-browser')\n// console.log(typhonjs)\n// console.log(CardanoWasm)\n\nexport function useAdaAddress() {\n  const account: any = useSelector<AppState, AppState['ada']>(state => state.ada.adaAddress)\n  return {\n    adaAddress: account\n  }\n}\n\nexport async function eternlLogin() {\n  try {\n    const api = await window.cardano.eternl.enable();\n    window.lucid.selectWallet(api);\n    localStorage.setItem(\"lucid\", \"true\");\n  } catch (error) {\n    console.log(error)\n  }\n  \n}\n\nexport function useAdaLogin() {\n  // const api = await window.cardano.eternl.enable();\n  // window.lucid.selectWallet(api);\n  const { chainId } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => {\n    const adaWallet =  window?.cardano && window?.cardano?.eternl\n\n    if(window?.lucid && window?.lucid?.wallet === undefined) {\n      eternlLogin();\n      return;\n    }\n\n    if (adaWallet && adaWallet?.enable && window?.lucid && window?.lucid?.wallet) {\n      \n      if (\n        (ChainId.ADA_TEST === chainId) || (ChainId.ADA === chainId)\n      ) {\n        window.lucid.wallet.getUtxos().then((e: any) => {\n          if (e && e.length > 0) {\n            dispatch(adaAddress({ address: e[0].address }))\n          }\n        })\n      } else {\n        alert('Network Error.')\n      }\n\n    } else {\n      if (confirm('Please connect Eternl or install Eternl.') === true) {\n        // window.open('https://namiwallet.io/')\n        window.open('https://eternl.io/')\n      }\n    }\n  }, [])\n}\n\nexport function useAdaBalance() {\n  const adaBalanceList: any = useSelector<AppState, AppState['ada']>(state => state.ada.adaBalanceList)\n\n  return {\n    adaBalanceList\n    // getAdaTokenBalance\n  }\n}\n\nexport function getADATxnsStatus(txid: string, chainId: any) {\n  const data: any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    const query = `{\n      transactions(where: { hash: { _eq: \"${txid}\"}}) {\n        block {number epochNo slotNo}\n        hash metadata{key value}\n        inputs{\n          tokens{\n            asset{\n              assetId\n              assetName\n            }\n            quantity\n          }\n          value\n        }\n        outputs(order_by:{index:asc}){\n          address\n          index\n          tokens{\n            asset{\n              assetId\n              assetName\n            }\n            quantity\n          }\n          value\n        }\n        validContract\n      }\n    }`\n    let url = 'https://graphql-api.mainnet.dandelion.link/'\n    if (chainId === 'ADA_TEST') {\n      url = 'https://graphql-api.testnet.dandelion.link/'\n    }\n    fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query }),\n    }).then(res => res.json()).then(json => {\n      // console.log(json)\n      // console.log(json.data)\n      // console.log(json.data.transactions)\n      // console.log(JSON.stringify(json.data.transactions))\n      // console.log(json)\n      if (json && json.data && json.data.transactions && json.data.transactions.length > 0) {\n        if (!json.data.transactions[0].outputs) {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Success'\n          data.info = json.data.transactions[0]\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      data.error = 'Query is empty!'\n      console.log(err)\n      resolve(data)\n    })\n  })\n}\n\nconst baseValue = 2\n\nexport function useAdaCrossChain(\n  routerToken: any,\n  inputToken: any,\n  chainId: any,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: any,\n  typedValue: any,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account } = useActiveReact()\n  const { t } = useTranslation()\n  const { onChangeViewDtil } = useTxnsDtilOpen()\n  const { onChangeViewErrorTip } = useTxnsErrorTipOpen()\n\n  const { adaBalanceList } = useAdaBalance()\n\n  const adaWallet = window?.cardano && window?.cardano?.eternl\n  const addTransaction = useTransactionAdder()\n\n  const inputValue = selectCurrency?.tokenType === 'NATIVE' ? Number(typedValue) + baseValue : typedValue\n\n  const inputAmount = useMemo(() => tryParseAmount3(inputValue + '', selectCurrency?.decimals), [inputValue, selectCurrency])\n\n  const useBalance = useMemo(() => {\n    if (selectCurrency?.tokenType && adaBalanceList) {\n      const dec = selectCurrency?.decimals\n      if (selectCurrency?.tokenType === 'NATIVE' && adaBalanceList['NATIVE']) {\n        return BigAmount.format(dec, adaBalanceList['NATIVE'])\n      } else if (selectCurrency?.tokenType === 'TOKEN' && adaBalanceList[selectCurrency?.address]) {\n        console.log(adaBalanceList)\n        return BigAmount.format(dec, adaBalanceList[selectCurrency?.address])\n      }\n    }\n    return ''\n  }, [adaBalanceList, selectCurrency])\n  let sufficientBalance: any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && useBalance && (Number(useBalance?.toExact()) >= Number(inputValue))\n  } catch (error) {\n    console.log(error)\n  }\n  return useMemo(() => {\n    if (!account || ![ChainId.ADA, ChainId.ADA_TEST].includes(chainId) || !routerToken || !adaWallet || !useToChainId) return {}\n    return {\n      balance: useBalance,\n      execute: async () => {\n        // let txResult:any = ''\n        console.log(adaWallet)\n\n        try {\n          // const MetaDatum: any = {\n          //   \"bind\": receiveAddress,\n          //   \"toChainId\": useToChainId + ''\n          // }\n          // const auxDataCbor = typhonjs.utils\n          // .createAuxiliaryDataCbor({\n          //   metadata: [\n          //     {\n          //       label: 123,\n          //       data: MetaDatum,\n          //     },\n          //   ],\n          // })\n          // .toString(\"hex\");\n          let tx = undefined;\n          if (selectCurrency?.tokenType === 'NATIVE') {\n            tx = await window.lucid.newTx().payToContract(\n              routerToken,\n              {\n                inline: window.lucid.data.to(BigInt(0)),\n              },\n              { lovelace: BigInt(inputAmount) })\n              .attachMetadata(123, {\n                \"bind\": receiveAddress,\n                \"toChainId\": useToChainId + ''\n              })\n              .complete();\n          } else {\n            const tokenArr = selectCurrency?.address.split('.');\n            const tokenObj: any = {};\n            // const decimals = selectCurrency.decimals;\n            tokenObj[tokenArr[0] + tokenArr[1]] = BigInt(inputAmount);\n            tx = await window.lucid.newTx().payToContract(\n              routerToken,\n              {\n                inline: window.lucid.data.to(BigInt(0)),\n              },\n              tokenObj)\n              .attachMetadata(123, {\n                \"bind\": receiveAddress,\n                \"toChainId\": useToChainId + ''\n              })\n              .complete();\n          }\n\n          const signedTx = await tx.sign().complete();\n          const txHash = await signedTx.submit();\n          const txResult = {\n            data: {\n              transactionId: txHash\n            },\n            status: true,\n          }\n          // const txResult = await adaWallet.paymentTransaction({\n          //   auxiliaryDataCbor: auxDataCbor,\n          //   outputs: [...outputs], \n          // });\n          console.log(txResult)\n          if (txResult?.status) {\n            const txReceipt: any = { hash: txResult?.data?.transactionId }\n            console.log(txReceipt)\n            if (txReceipt?.hash) {\n              const data: any = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency?.symbol,\n                routerToken: routerToken\n              }\n              addTransaction(txReceipt, {\n                summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                routerToken: routerToken,\n                token: selectCurrency?.address,\n                logoUrl: selectCurrency?.logoUrl,\n                isLiquidity: destConfig?.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency?.symbol,\n                  name: selectCurrency?.name,\n                  decimals: selectCurrency?.decimals,\n                  address: selectCurrency?.address,\n                },\n                toInfo: {\n                  symbol: destConfig?.symbol,\n                  name: destConfig?.name,\n                  decimals: destConfig?.decimals,\n                  address: destConfig?.address,\n                },\n              })\n              recordsTxns(data)\n              onChangeViewDtil(txReceipt?.hash, true)\n            }\n          } else {\n            // onChangeViewErrorTip('Txns failure.', true)\n            onChangeViewErrorTip(JSON.stringify(txResult), true)\n          }\n        } catch (error) {\n          console.log(error);\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', { symbol: selectCurrency?.symbol })\n    }\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, useBalance, adaWallet, useToChainId])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}