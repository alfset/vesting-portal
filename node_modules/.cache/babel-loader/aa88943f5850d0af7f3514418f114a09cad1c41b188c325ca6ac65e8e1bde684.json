{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { WalletContext, WalletStatus } from '@terra-dev/use-wallet';\nimport { useMemo } from 'react';\nexport function StaticWalletProvider(_ref) {\n  let {\n    children,\n    defaultNetwork,\n    status = WalletStatus.INITIALIZING,\n    availableConnectTypes = [],\n    availableInstallTypes = [],\n    availableConnections = [],\n    wallets = []\n  } = _ref;\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      status,\n      network: defaultNetwork,\n      wallets,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      }\n    };\n  }, [availableConnectTypes, availableInstallTypes, availableConnections, defaultNetwork, status, wallets]);\n  return _jsx(WalletContext.Provider, Object.assign({\n    value: state\n  }, {\n    children: children\n  }), void 0);\n}","map":{"version":3,"names":["WalletContext","WalletStatus","useMemo","StaticWalletProvider","_ref","children","defaultNetwork","status","INITIALIZING","availableConnectTypes","availableInstallTypes","availableConnections","wallets","state","network","install","Error","connect","connectReadonly","disconnect","post","sign","recheckStatus","isChromeExtensionCompatibleBrowser","_jsx","Provider","Object","assign","value"],"sources":["../../../../src/@terra-money/wallet-provider/react/StaticWalletProvider.tsx"],"sourcesContent":["import {\n  Connection,\n  ConnectType,\n  Wallet,\n  WalletContext,\n  WalletInfo,\n  WalletStatus,\n} from '@terra-dev/use-wallet';\nimport { NetworkInfo } from '@terra-dev/wallet-types';\nimport React, { ReactNode, useMemo } from 'react';\n\nexport interface StaticWalletProviderProps {\n  children: ReactNode;\n  defaultNetwork: NetworkInfo;\n  status?: WalletStatus;\n  availableConnectTypes?: ConnectType[];\n  availableInstallTypes?: ConnectType[];\n  availableConnections?: Connection[];\n  wallets?: WalletInfo[];\n}\n\nexport function StaticWalletProvider({\n  children,\n  defaultNetwork,\n  status = WalletStatus.INITIALIZING,\n  availableConnectTypes = [],\n  availableInstallTypes = [],\n  availableConnections = [],\n  wallets = [],\n}: StaticWalletProviderProps) {\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      status,\n      network: defaultNetwork,\n      wallets,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n    };\n  }, [\n    availableConnectTypes,\n    availableInstallTypes,\n    availableConnections,\n    defaultNetwork,\n    status,\n    wallets,\n  ]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"mappings":";AAAA,SAIEA,aAAa,EAEbC,YAAY,QACP,uBAAuB;AAE9B,SAA2BC,OAAO,QAAQ,OAAO;AAYjD,OAAM,SAAUC,oBAAoBA,CAAAC,IAAA,EAQR;EAAA,IARS;IACnCC,QAAQ;IACRC,cAAc;IACdC,MAAM,GAAGN,YAAY,CAACO,YAAY;IAClCC,qBAAqB,GAAG,EAAE;IAC1BC,qBAAqB,GAAG,EAAE;IAC1BC,oBAAoB,GAAG,EAAE;IACzBC,OAAO,GAAG;EAAE,CACc,GAAAR,IAAA;EAC1B,MAAMS,KAAK,GAAGX,OAAO,CAAS,MAAK;IACjC,OAAO;MACLO,qBAAqB;MACrBC,qBAAqB;MACrBC,oBAAoB;MACpBJ,MAAM;MACNO,OAAO,EAAER,cAAc;MACvBM,OAAO;MACPG,OAAO,EAAEA,CAAA,KAAK;QACZ,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDC,OAAO,EAAEA,CAAA,KAAK;QACZ,MAAM,IAAID,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDE,eAAe,EAAEA,CAAA,KAAK;QACpB,MAAM,IAAIF,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDG,UAAU,EAAEA,CAAA,KAAK;QACf,MAAM,IAAIH,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDI,IAAI,EAAEA,CAAA,KAAK;QACT,MAAM,IAAIJ,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDK,IAAI,EAAEA,CAAA,KAAK;QACT,MAAM,IAAIL,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDM,aAAa,EAAEA,CAAA,KAAK;QAClB,MAAM,IAAIN,KAAK,CAAC,kBAAkB,CAAC;MACrC,CAAC;MACDO,kCAAkC,EAAEA,CAAA,KAAK;QACvC,MAAM,IAAIP,KAAK,CAAC,kBAAkB,CAAC;MACrC;KACD;EACH,CAAC,EAAE,CACDP,qBAAqB,EACrBC,qBAAqB,EACrBC,oBAAoB,EACpBL,cAAc,EACdC,MAAM,EACNK,OAAO,CACR,CAAC;EAEF,OACEY,IAAA,CAACxB,aAAa,CAACyB,QAAQ,EAAAC,MAAA,CAAAC,MAAA;IAACC,KAAK,EAAEf;EAAK;IAAAR,QAAA,EAAGA;EAAQ,WAA0B;AAE7E"},"metadata":{},"sourceType":"module","externalDependencies":[]}