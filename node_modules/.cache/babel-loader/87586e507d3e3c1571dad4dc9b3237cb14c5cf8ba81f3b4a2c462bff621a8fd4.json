{"ast":null,"code":"var _jsxFileName = \"/workspace/Planq-Dapps/vesting-portal/src/pages/AppContainer.tsx\";\nimport React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core';\nimport { NetworkContextName } from '../constants';\nimport getLibrary from '../utils/getLibrary';\nimport { WalletProvider\n// NetworkInfo\n} from '@terra-money/wallet-provider';\n\n// import { ConnectionProvider, WalletProvider as SolWalletProvider } from '@solana/wallet-adapter-react';\n// import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n// // import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\n// // import { PhantomWalletAdapter } from '@solana/wallet-adapter-phantom';\n// import {\n//     WalletModalProvider,\n//     WalletDisconnectButton,\n//     WalletMultiButton\n// } from '@solana/wallet-adapter-react-ui';\n// import { clusterApiUrl } from '@solana/web3.js';\nimport { WalletSelectorContextProvider } from \"../nonevm/near/WalletSelectorContext\";\nimport { Updaters } from '../state/updaters';\nimport App from './App';\nimport \"@near-wallet-selector/modal-ui/styles.css\";\nimport \"@near-wallet-selector/account-export/styles.css\";\n// require('@solana/wallet-adapter-react-ui/styles.css')\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName);\n\n// if ('ethereum' in window) {\n//   ;(window.ethereum as any).autoRefreshOnNetworkChange = false\n// }\n\nconst mainnet = {\n  name: 'mainnet',\n  chainID: 'columbus-4',\n  lcd: 'https://lcd.terra.dev'\n};\nconst testnet = {\n  name: 'testnet',\n  chainID: 'tequila-0004',\n  lcd: 'https://tequila-lcd.terra.dev'\n};\nconst walletConnectChainIds = {\n  0: testnet,\n  1: mainnet\n};\nexport default function AppContainer() {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  // const network = WalletAdapterNetwork.Devnet;\n  // const network = WalletAdapterNetwork.Testnet;\n  // const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  // const wallets:any = useMemo(\n  //     () => [\n  //         /**\n  //          * Select the wallets you wish to support, by instantiating wallet adapters here.\n  //          *\n  //          * Common adapters can be found in the npm package `@solana/wallet-adapter-wallets`.\n  //          * That package supports tree shaking and lazy loading -- only the wallets you import\n  //          * will be compiled into your application, and only the dependencies of wallets that\n  //          * your users connect to will be loaded.\n  //          */\n  //         // new UnsafeBurnerWalletAdapter(),\n  //         // new PhantomWalletAdapter(),\n  //     ],\n  //     []\n  // );\n\n  return /*#__PURE__*/React.createElement(WalletProvider, {\n    defaultNetwork: mainnet,\n    walletConnectChainIds: walletConnectChainIds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Web3ReactProvider, {\n    getLibrary: getLibrary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Web3ProviderNetwork, {\n    getLibrary: getLibrary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(WalletSelectorContextProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Updaters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(HashRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"names":["React","HashRouter","createWeb3ReactRoot","Web3ReactProvider","NetworkContextName","getLibrary","WalletProvider","WalletSelectorContextProvider","Updaters","App","Web3ProviderNetwork","mainnet","name","chainID","lcd","testnet","walletConnectChainIds","AppContainer","createElement","defaultNetwork","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/pages/AppContainer.tsx"],"sourcesContent":["import React from 'react'\n\nimport { HashRouter } from 'react-router-dom'\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport { NetworkContextName } from '../constants'\nimport getLibrary from '../utils/getLibrary'\n\nimport {\n  WalletProvider,\n  // NetworkInfo\n} from '@terra-money/wallet-provider'\n\n// import { ConnectionProvider, WalletProvider as SolWalletProvider } from '@solana/wallet-adapter-react';\n// import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n// // import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\n// // import { PhantomWalletAdapter } from '@solana/wallet-adapter-phantom';\n// import {\n//     WalletModalProvider,\n//     WalletDisconnectButton,\n//     WalletMultiButton\n// } from '@solana/wallet-adapter-react-ui';\n// import { clusterApiUrl } from '@solana/web3.js';\nimport { WalletSelectorContextProvider } from \"../nonevm/near/WalletSelectorContext\"\n\nimport { Updaters } from '../state/updaters'\nimport App from './App';\n\nimport \"@near-wallet-selector/modal-ui/styles.css\"\nimport \"@near-wallet-selector/account-export/styles.css\"\n// require('@solana/wallet-adapter-react-ui/styles.css')\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\n\n// if ('ethereum' in window) {\n//   ;(window.ethereum as any).autoRefreshOnNetworkChange = false\n// }\n\nconst mainnet = {\n  name: 'mainnet',\n  chainID: 'columbus-4',\n  lcd: 'https://lcd.terra.dev',\n};\n\nconst testnet = {\n  name: 'testnet',\n  chainID: 'tequila-0004',\n  lcd: 'https://tequila-lcd.terra.dev',\n};\n\nconst walletConnectChainIds: Record<number, any> = {\n  0: testnet,\n  1: mainnet,\n}\n\nexport default function AppContainer() {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  // const network = WalletAdapterNetwork.Devnet;\n  // const network = WalletAdapterNetwork.Testnet;\n  // const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  // const wallets:any = useMemo(\n  //     () => [\n  //         /**\n  //          * Select the wallets you wish to support, by instantiating wallet adapters here.\n  //          *\n  //          * Common adapters can be found in the npm package `@solana/wallet-adapter-wallets`.\n  //          * That package supports tree shaking and lazy loading -- only the wallets you import\n  //          * will be compiled into your application, and only the dependencies of wallets that\n  //          * your users connect to will be loaded.\n  //          */\n  //         // new UnsafeBurnerWalletAdapter(),\n  //         // new PhantomWalletAdapter(),\n  //     ],\n  //     []\n  // );\n\n  return (<WalletProvider\n    defaultNetwork={mainnet}\n    walletConnectChainIds={walletConnectChainIds}\n  >\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Web3ProviderNetwork getLibrary={getLibrary}>\n        <WalletSelectorContextProvider>\n          {/* <ConnectionProvider endpoint={endpoint}>\n          <SolWalletProvider wallets={wallets} autoConnect>\n            <WalletModalProvider>\n              <WalletMultiButton />\n              <WalletDisconnectButton /> */}\n              <Updaters />\n              <HashRouter>\n                <App />\n              </HashRouter>\n            {/* </WalletModalProvider>\n          </SolWalletProvider>\n        </ConnectionProvider> */}\n        </WalletSelectorContextProvider>\n        \n        \n      </Web3ProviderNetwork>\n    </Web3ReactProvider>\n  </WalletProvider>)\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,kBAAkB;AACzE,SAASC,kBAAkB,QAAQ,cAAc;AACjD,OAAOC,UAAU,MAAM,qBAAqB;AAE5C,SACEC;AACA;AAAA,OACK,8BAA8B;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,6BAA6B,QAAQ,sCAAsC;AAEpF,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,GAAG,MAAM,OAAO;AAEvB,OAAO,2CAA2C;AAClD,OAAO,iDAAiD;AACxD;;AAEA,MAAMC,mBAAmB,GAAGR,mBAAmB,CAACE,kBAAkB,CAAC;;AAEnE;AACA;AACA;;AAEA,MAAMO,OAAO,GAAG;EACdC,IAAI,EAAE,SAAS;EACfC,OAAO,EAAE,YAAY;EACrBC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,OAAO,GAAG;EACdH,IAAI,EAAE,SAAS;EACfC,OAAO,EAAE,cAAc;EACvBC,GAAG,EAAE;AACP,CAAC;AAED,MAAME,qBAA0C,GAAG;EACjD,CAAC,EAAED,OAAO;EACV,CAAC,EAAEJ;AACL,CAAC;AAED,eAAe,SAASM,YAAYA,CAAA,EAAG;EACrC;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAQjB,KAAA,CAAAkB,aAAA,CAACZ,cAAc;IACrBa,cAAc,EAAER,OAAQ;IACxBK,qBAAqB,EAAEA,qBAAsB;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE7CzB,KAAA,CAAAkB,aAAA,CAACf,iBAAiB;IAACE,UAAU,EAAEA,UAAW;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACxCzB,KAAA,CAAAkB,aAAA,CAACR,mBAAmB;IAACL,UAAU,EAAEA,UAAW;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1CzB,KAAA,CAAAkB,aAAA,CAACX,6BAA6B;IAAAa,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAMxBzB,KAAA,CAAAkB,aAAA,CAACV,QAAQ;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACZzB,KAAA,CAAAkB,aAAA,CAACjB,UAAU;IAAAmB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACTzB,KAAA,CAAAkB,aAAA,CAACT,GAAG;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACI,CAIa,CAGZ,CACJ,CACL,CAAC;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}