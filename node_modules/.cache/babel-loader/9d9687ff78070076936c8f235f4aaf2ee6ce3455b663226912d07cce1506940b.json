{"ast":null,"code":"import { chainInfo } from '../chainConfig';\nimport { ENV_NODE_CONFIG } from '../constant';\nexport function selectNetwork(chainID, type) {\n  return new Promise(resolve => {\n    var _request;\n    const {\n      ethereum\n    } = window;\n    const ethereumFN = ethereum;\n    ethereumFN.request = (_request = ethereum.request) !== null && _request !== void 0 ? _request : '';\n    window.localStorage.setItem(ENV_NODE_CONFIG, chainInfo[chainID].label);\n    if (ethereumFN && ethereumFN.request) {\n      // console.log(ethereumFN)\n      // console.log(ethereumFN.chainId)\n      const useChainId = '0x' + Number(chainID).toString(16);\n      ethereumFN.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: useChainId\n        }]\n      }).then(res => {\n        // console.log(chainID)\n        console.log(res);\n        if (!type) {\n          history.go(0);\n        }\n        resolve({\n          msg: 'Success'\n        });\n      }).catch(switchError => {\n        console.log(switchError);\n        if (switchError.code === 4902) {\n          var _chainInfo$chainID$wa, _chainInfo$chainID;\n          const data = {\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: useChainId,\n              // A 0x-prefixed hexadecimal string\n              chainName: (_chainInfo$chainID$wa = (_chainInfo$chainID = chainInfo[chainID]) === null || _chainInfo$chainID === void 0 ? void 0 : _chainInfo$chainID.walletName) !== null && _chainInfo$chainID$wa !== void 0 ? _chainInfo$chainID$wa : chainInfo[chainID].networkName,\n              nativeCurrency: {\n                name: chainInfo[chainID].name,\n                symbol: chainInfo[chainID].symbol,\n                // 2-6 characters long\n                decimals: 18\n              },\n              rpcUrls: [chainInfo[chainID].nodeRpc],\n              blockExplorerUrls: chainInfo[chainID].explorer && chainInfo[chainID].explorer.indexOf('https') === 0 ? [chainInfo[chainID].explorer] : null,\n              iconUrls: null // Currently ignored.\n            }]\n          };\n\n          console.log(data);\n          ethereumFN.request(data).then(res => {\n            // console.log(chainID)\n            console.log(res);\n            if (!type) {\n              history.go(0);\n            }\n            resolve({\n              msg: 'Success'\n            });\n          }).catch(err => {\n            console.log(err);\n            resolve({\n              msg: 'Error'\n            });\n          });\n        } else {\n          resolve({\n            msg: 'Error'\n          });\n        }\n      });\n    } else {\n      resolve({\n        msg: 'Error'\n      });\n    }\n  });\n}\nexport function addToken(address, symbol, decimals, logoUrl) {\n  return new Promise(resolve => {\n    var _request2;\n    const {\n      ethereum\n    } = window;\n    // const ethereumFN:any = {\n    //   request: '',\n    //   ...ethereum\n    // }\n    const ethereumFN = ethereum;\n    ethereumFN.request = (_request2 = ethereum.request) !== null && _request2 !== void 0 ? _request2 : '';\n    if (ethereumFN && ethereumFN.request) {\n      const params = {\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          // 最初只支持ERC20，但最终支持更多\n          options: {\n            address: address,\n            // 令牌所在的地址。\n            symbol: symbol,\n            // A ticker symbol or shorthand, up to 5 chars.\n            decimals: decimals,\n            // The number of decimals in the token\n            image: logoUrl // A string url of the token logo\n          }\n        }\n      };\n      // console.log(params)\n      ethereumFN.request(params).then(res => {\n        console.log(res);\n        resolve({\n          msg: 'Success'\n        });\n      }).catch(err => {\n        console.log(err);\n        resolve({\n          msg: 'Error'\n        });\n      });\n    } else {\n      resolve({\n        msg: 'Error'\n      });\n    }\n  });\n}","map":{"version":3,"names":["chainInfo","ENV_NODE_CONFIG","selectNetwork","chainID","type","Promise","resolve","_request","ethereum","window","ethereumFN","request","localStorage","setItem","label","useChainId","Number","toString","method","params","chainId","then","res","console","log","history","go","msg","catch","switchError","code","_chainInfo$chainID$wa","_chainInfo$chainID","data","chainName","walletName","networkName","nativeCurrency","name","symbol","decimals","rpcUrls","nodeRpc","blockExplorerUrls","explorer","indexOf","iconUrls","err","addToken","address","logoUrl","_request2","options","image"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/config/tools/methods.ts"],"sourcesContent":["import { chainInfo } from '../chainConfig'\nimport {\n  ENV_NODE_CONFIG\n} from '../constant'\n\nexport function selectNetwork (chainID:any, type?: any) {\n  return new Promise(resolve => {\n    const { ethereum } = window\n    const ethereumFN: any = ethereum;\n    ethereumFN.request = (ethereum as any).request ?? '';\n    window.localStorage.setItem(ENV_NODE_CONFIG, chainInfo[chainID].label)\n    if (ethereumFN && ethereumFN.request) {\n      // console.log(ethereumFN)\n      // console.log(ethereumFN.chainId)\n      const useChainId = '0x' + Number(chainID).toString(16)\n      ethereumFN.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: useChainId }],\n      }).then((res: any) => {\n        // console.log(chainID)\n        console.log(res)\n        if (!type) {\n          history.go(0)\n        }\n        resolve({\n          msg: 'Success'\n        })\n      }).catch((switchError: any) => {\n        console.log(switchError)\n        if (switchError.code === 4902) {\n          const data = {\n            method: 'wallet_addEthereumChain',\n            params: [\n              {\n                chainId: useChainId, // A 0x-prefixed hexadecimal string\n                chainName: chainInfo[chainID]?.walletName ?? chainInfo[chainID].networkName,\n                nativeCurrency: {\n                  name: chainInfo[chainID].name,\n                  symbol: chainInfo[chainID].symbol, // 2-6 characters long\n                  decimals: 18,\n                },\n                rpcUrls: [chainInfo[chainID].nodeRpc],\n                blockExplorerUrls: chainInfo[chainID].explorer && chainInfo[chainID].explorer.indexOf('https') === 0 ? [chainInfo[chainID].explorer] : null,\n                iconUrls: null // Currently ignored.\n              }\n            ],\n          }\n          console.log(data)\n          ethereumFN.request(data).then((res: any) => {\n            // console.log(chainID)\n            console.log(res)\n            if (!type) {\n              history.go(0)\n            }\n            resolve({\n              msg: 'Success'\n            })\n          }).catch((err: any) => {\n            console.log(err)\n            resolve({\n              msg: 'Error'\n            })\n          })\n        } else {\n          resolve({\n            msg: 'Error'\n          })\n        }\n      })\n\n\n    } else {\n      resolve({\n        msg: 'Error'\n      })\n    }\n  })\n}\n\nexport function addToken (address:string, symbol: string, decimals: number, logoUrl?:string) {\n  return new Promise(resolve => {\n    const { ethereum } = window\n    // const ethereumFN:any = {\n    //   request: '',\n    //   ...ethereum\n    // }\n    const ethereumFN: any = ethereum;\n    ethereumFN.request = (ethereum as any).request ?? '';\n    if (ethereumFN && ethereumFN.request) {\n      const params = {\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20', // 最初只支持ERC20，但最终支持更多\n          options: {\n            address: address, // 令牌所在的地址。\n            symbol: symbol, // A ticker symbol or shorthand, up to 5 chars.\n            decimals: decimals, // The number of decimals in the token\n            image: logoUrl, // A string url of the token logo\n          },\n        },\n      }\n      // console.log(params)\n      ethereumFN.request(params).then((res: any) => {\n        console.log(res)\n        resolve({\n          msg: 'Success'\n        })\n      }).catch((err: any) => {\n        console.log(err)\n        resolve({\n          msg: 'Error'\n        })\n      })\n    } else {\n      resolve({\n        msg: 'Error'\n      })\n    }\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}