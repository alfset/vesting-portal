{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keypair = undefined;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}(); /* eslint no-bitwise: [\"error\", {\"allow\": [\"^\"]}] */\n\nvar _tweetnacl = require('tweetnacl');\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\nvar _isUndefined = require('lodash/isUndefined');\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\nvar _isString = require('lodash/isString');\nvar _isString2 = _interopRequireDefault(_isString);\nvar _signing = require('./signing');\nvar _strkey = require('./strkey');\nvar _hashing = require('./hashing');\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\nvar Keypair = exports.Keypair = function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n    this.type = keys.type;\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n\n  _createClass(Keypair, [{\n    key: 'xdrAccountId',\n    value: function xdrAccountId() {\n      return new _xdr2.default.AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: 'xdrPublicKey',\n    value: function xdrPublicKey() {\n      return new _xdr2.default.PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Creates a {@link xdr.MuxedAccount} object from the public key.\n     *\n     * You will get a different type of muxed account depending on whether or not\n     * you pass an ID.\n     *\n     * @param  {string} [id] - stringified integer indicating the underlying muxed\n     *     ID of the new account object\n     *\n     * @return {xdr.MuxedAccount}\n     */\n  }, {\n    key: 'xdrMuxedAccount',\n    value: function xdrMuxedAccount(id) {\n      if (!(0, _isUndefined2.default)(id)) {\n        if (!(0, _isString2.default)(id)) {\n          throw new TypeError('expected string for ID, got ' + (typeof id === 'undefined' ? 'undefined' : _typeof(id)));\n        }\n        return _xdr2.default.MuxedAccount.keyTypeMuxedEd25519(new _xdr2.default.MuxedAccountMed25519({\n          id: _xdr2.default.Uint64.fromString(id),\n          ed25519: this._publicKey\n        }));\n      }\n      return new _xdr2.default.MuxedAccount.keyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'rawPublicKey',\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: 'signatureHint',\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n      return a.slice(a.length - 4);\n    }\n\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n  }, {\n    key: 'publicKey',\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n  }, {\n    key: 'secret',\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n      throw new Error('Invalid Keypair type');\n    }\n\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'rawSecretKey',\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n  }, {\n    key: 'canSign',\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n  }, {\n    key: 'sign',\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n  }, {\n    key: 'verify',\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n\n    /**\n     * Returns the decorated signature (hint+sig) for arbitrary data.\n     *\n     * @param  {Buffer} data  arbitrary data to sign\n     * @return {xdr.DecoratedSignature}   the raw signature structure which can be\n     *     added directly to a transaction envelope\n     *\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: 'signDecorated',\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n      return new _xdr2.default.DecoratedSignature({\n        hint: hint,\n        signature: signature\n      });\n    }\n\n    /**\n     * Returns the raw decorated signature (hint+sig) for a signed payload signer.\n     *\n     *  The hint is defined as the last 4 bytes of the signer key XORed with last\n     *  4 bytes of the payload (zero-left-padded if necessary).\n     *\n     * @param  {Buffer} data    data to both sign and treat as the payload\n     * @return {xdr.DecoratedSignature}\n     *\n     * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0040.md#signature-hint\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: 'signPayloadDecorated',\n    value: function signPayloadDecorated(data) {\n      var signature = this.sign(data);\n      var keyHint = this.signatureHint();\n      var hint = Buffer.from(data.slice(-4));\n      if (hint.length < 4) {\n        // append zeroes as needed\n        hint = Buffer.concat([hint, Buffer.alloc(4 - data.length, 0)]);\n      }\n      return new _xdr2.default.DecoratedSignature({\n        hint: hint.map(function (byte, i) {\n          return byte ^ keyHint[i];\n        }),\n        signature: signature\n      });\n    }\n  }], [{\n    key: 'fromSecret',\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n  }, {\n    key: 'fromRawEd25519Seed',\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({\n        type: 'ed25519',\n        secretKey: rawSeed\n      });\n    }\n\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n  }, {\n    key: 'master',\n    value: function master(networkPassphrase) {\n      if (!networkPassphrase) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n      }\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n  }, {\n    key: 'fromPublicKey',\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n      return new this({\n        type: 'ed25519',\n        publicKey: publicKey\n      });\n    }\n\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n  }, {\n    key: 'random',\n    value: function random() {\n      var secret = _tweetnacl2.default.randomBytes(32);\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n  return Keypair;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","Keypair","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","_tweetnacl","require","_tweetnacl2","_interopRequireDefault","_isUndefined","_isUndefined2","_isString","_isString2","_signing","_strkey","_hashing","_xdr","_xdr2","__esModule","default","_classCallCheck","instance","TypeError","keys","type","Error","secretKey","Buffer","from","_secretSeed","_publicKey","generate","_secretKey","concat","publicKey","equals","xdrAccountId","AccountId","publicKeyTypeEd25519","xdrPublicKey","PublicKey","xdrMuxedAccount","id","MuxedAccount","keyTypeMuxedEd25519","MuxedAccountMed25519","Uint64","fromString","ed25519","keyTypeEd25519","rawPublicKey","signatureHint","a","toXDR","slice","StrKey","encodeEd25519PublicKey","secret","encodeEd25519SecretSeed","rawSecretKey","canSign","sign","data","verify","signature","signDecorated","hint","DecoratedSignature","signPayloadDecorated","keyHint","alloc","map","byte","fromSecret","rawSecret","decodeEd25519SecretSeed","fromRawEd25519Seed","rawSeed","master","networkPassphrase","hash","fromPublicKey","decodeEd25519PublicKey","random","randomBytes"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/keypair.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keypair = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-bitwise: [\"error\", {\"allow\": [\"^\"]}] */\n\nvar _tweetnacl = require('tweetnacl');\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _signing = require('./signing');\n\nvar _strkey = require('./strkey');\n\nvar _hashing = require('./hashing');\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\nvar Keypair = exports.Keypair = function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n\n    this.type = keys.type;\n\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n\n\n  _createClass(Keypair, [{\n    key: 'xdrAccountId',\n    value: function xdrAccountId() {\n      return new _xdr2.default.AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: 'xdrPublicKey',\n    value: function xdrPublicKey() {\n      return new _xdr2.default.PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Creates a {@link xdr.MuxedAccount} object from the public key.\n     *\n     * You will get a different type of muxed account depending on whether or not\n     * you pass an ID.\n     *\n     * @param  {string} [id] - stringified integer indicating the underlying muxed\n     *     ID of the new account object\n     *\n     * @return {xdr.MuxedAccount}\n     */\n\n  }, {\n    key: 'xdrMuxedAccount',\n    value: function xdrMuxedAccount(id) {\n      if (!(0, _isUndefined2.default)(id)) {\n        if (!(0, _isString2.default)(id)) {\n          throw new TypeError('expected string for ID, got ' + (typeof id === 'undefined' ? 'undefined' : _typeof(id)));\n        }\n\n        return _xdr2.default.MuxedAccount.keyTypeMuxedEd25519(new _xdr2.default.MuxedAccountMed25519({\n          id: _xdr2.default.Uint64.fromString(id),\n          ed25519: this._publicKey\n        }));\n      }\n\n      return new _xdr2.default.MuxedAccount.keyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawPublicKey',\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: 'signatureHint',\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n\n      return a.slice(a.length - 4);\n    }\n\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n\n  }, {\n    key: 'publicKey',\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n\n  }, {\n    key: 'secret',\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n\n      throw new Error('Invalid Keypair type');\n    }\n\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawSecretKey',\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'canSign',\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'sign',\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'verify',\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n\n    /**\n     * Returns the decorated signature (hint+sig) for arbitrary data.\n     *\n     * @param  {Buffer} data  arbitrary data to sign\n     * @return {xdr.DecoratedSignature}   the raw signature structure which can be\n     *     added directly to a transaction envelope\n     *\n     * @see TransactionBase.addDecoratedSignature\n     */\n\n  }, {\n    key: 'signDecorated',\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n\n      return new _xdr2.default.DecoratedSignature({ hint: hint, signature: signature });\n    }\n\n    /**\n     * Returns the raw decorated signature (hint+sig) for a signed payload signer.\n     *\n     *  The hint is defined as the last 4 bytes of the signer key XORed with last\n     *  4 bytes of the payload (zero-left-padded if necessary).\n     *\n     * @param  {Buffer} data    data to both sign and treat as the payload\n     * @return {xdr.DecoratedSignature}\n     *\n     * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0040.md#signature-hint\n     * @see TransactionBase.addDecoratedSignature\n     */\n\n  }, {\n    key: 'signPayloadDecorated',\n    value: function signPayloadDecorated(data) {\n      var signature = this.sign(data);\n      var keyHint = this.signatureHint();\n\n      var hint = Buffer.from(data.slice(-4));\n      if (hint.length < 4) {\n        // append zeroes as needed\n        hint = Buffer.concat([hint, Buffer.alloc(4 - data.length, 0)]);\n      }\n\n      return new _xdr2.default.DecoratedSignature({\n        hint: hint.map(function (byte, i) {\n          return byte ^ keyHint[i];\n        }),\n        signature: signature\n      });\n    }\n  }], [{\n    key: 'fromSecret',\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromRawEd25519Seed',\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({ type: 'ed25519', secretKey: rawSeed });\n    }\n\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'master',\n    value: function master(networkPassphrase) {\n      if (!networkPassphrase) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n      }\n\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromPublicKey',\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n      return new this({ type: 'ed25519', publicKey: publicKey });\n    }\n\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'random',\n    value: function random() {\n      var secret = _tweetnacl2.default.randomBytes(32);\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n\n  return Keypair;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}