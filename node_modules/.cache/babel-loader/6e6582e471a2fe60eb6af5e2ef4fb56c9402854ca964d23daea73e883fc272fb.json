{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolFeeV18 = undefined;\nexports.getLiquidityPoolId = getLiquidityPoolId;\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _asset = require('./asset');\nvar _hashing = require('./hashing');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).\nvar LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;\n\n/**\n * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.\n *\n * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)\n *\n * @export\n * @param {string} liquidityPoolType – A string representing the liquidity pool type.\n * @param {object} liquidityPoolParameters        – The liquidity pool parameters.\n * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.\n * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.\n * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.\n *\n * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`\n */\nfunction getLiquidityPoolId(liquidityPoolType) {\n  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (liquidityPoolType !== 'constant_product') {\n    throw new Error('liquidityPoolType is invalid');\n  }\n  var assetA = liquidityPoolParameters.assetA,\n    assetB = liquidityPoolParameters.assetB,\n    fee = liquidityPoolParameters.fee;\n  if (!assetA || !(assetA instanceof _asset.Asset)) {\n    throw new Error('assetA is invalid');\n  }\n  if (!assetB || !(assetB instanceof _asset.Asset)) {\n    throw new Error('assetB is invalid');\n  }\n  if (!fee || fee !== LiquidityPoolFeeV18) {\n    throw new Error('fee is invalid');\n  }\n  if (_asset.Asset.compare(assetA, assetB) !== -1) {\n    throw new Error('Assets are not in lexicographic order');\n  }\n  var lpTypeData = _xdr2.default.LiquidityPoolType.liquidityPoolConstantProduct().toXDR();\n  var lpParamsData = new _xdr2.default.LiquidityPoolConstantProductParameters({\n    assetA: assetA.toXDRObject(),\n    assetB: assetB.toXDRObject(),\n    fee: fee\n  }).toXDR();\n  var payload = Buffer.concat([lpTypeData, lpParamsData]);\n  return (0, _hashing.hash)(payload);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","LiquidityPoolFeeV18","undefined","getLiquidityPoolId","_xdr","require","_xdr2","_interopRequireDefault","_asset","_hashing","obj","__esModule","default","liquidityPoolType","liquidityPoolParameters","arguments","length","Error","assetA","assetB","fee","Asset","compare","lpTypeData","LiquidityPoolType","liquidityPoolConstantProduct","toXDR","lpParamsData","LiquidityPoolConstantProductParameters","toXDRObject","payload","Buffer","concat","hash"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/get_liquidity_pool_id.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolFeeV18 = undefined;\nexports.getLiquidityPoolId = getLiquidityPoolId;\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _asset = require('./asset');\n\nvar _hashing = require('./hashing');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).\nvar LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;\n\n/**\n * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.\n *\n * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)\n *\n * @export\n * @param {string} liquidityPoolType – A string representing the liquidity pool type.\n * @param {object} liquidityPoolParameters        – The liquidity pool parameters.\n * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.\n * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.\n * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.\n *\n * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`\n */\nfunction getLiquidityPoolId(liquidityPoolType) {\n  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (liquidityPoolType !== 'constant_product') {\n    throw new Error('liquidityPoolType is invalid');\n  }\n\n  var assetA = liquidityPoolParameters.assetA,\n      assetB = liquidityPoolParameters.assetB,\n      fee = liquidityPoolParameters.fee;\n\n  if (!assetA || !(assetA instanceof _asset.Asset)) {\n    throw new Error('assetA is invalid');\n  }\n  if (!assetB || !(assetB instanceof _asset.Asset)) {\n    throw new Error('assetB is invalid');\n  }\n  if (!fee || fee !== LiquidityPoolFeeV18) {\n    throw new Error('fee is invalid');\n  }\n\n  if (_asset.Asset.compare(assetA, assetB) !== -1) {\n    throw new Error('Assets are not in lexicographic order');\n  }\n\n  var lpTypeData = _xdr2.default.LiquidityPoolType.liquidityPoolConstantProduct().toXDR();\n  var lpParamsData = new _xdr2.default.LiquidityPoolConstantProductParameters({\n    assetA: assetA.toXDRObject(),\n    assetB: assetB.toXDRObject(),\n    fee: fee\n  }).toXDR();\n  var payload = Buffer.concat([lpTypeData, lpParamsData]);\n  return (0, _hashing.hash)(payload);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,mBAAmB,GAAGC,SAAS;AACvCH,OAAO,CAACI,kBAAkB,GAAGA,kBAAkB;AAE/C,IAAIC,IAAI,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE3B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,IAAII,MAAM,GAAGH,OAAO,CAAC,SAAS,CAAC;AAE/B,IAAII,QAAQ,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAEnC,SAASE,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA,IAAIT,mBAAmB,GAAGF,OAAO,CAACE,mBAAmB,GAAG,EAAE;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACU,iBAAiB,EAAE;EAC7C,IAAIC,uBAAuB,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKb,SAAS,GAAGa,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEpG,IAAIF,iBAAiB,KAAK,kBAAkB,EAAE;IAC5C,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,IAAIC,MAAM,GAAGJ,uBAAuB,CAACI,MAAM;IACvCC,MAAM,GAAGL,uBAAuB,CAACK,MAAM;IACvCC,GAAG,GAAGN,uBAAuB,CAACM,GAAG;EAErC,IAAI,CAACF,MAAM,IAAI,EAAEA,MAAM,YAAYV,MAAM,CAACa,KAAK,CAAC,EAAE;IAChD,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;EACtC;EACA,IAAI,CAACE,MAAM,IAAI,EAAEA,MAAM,YAAYX,MAAM,CAACa,KAAK,CAAC,EAAE;IAChD,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;EACtC;EACA,IAAI,CAACG,GAAG,IAAIA,GAAG,KAAKnB,mBAAmB,EAAE;IACvC,MAAM,IAAIgB,KAAK,CAAC,gBAAgB,CAAC;EACnC;EAEA,IAAIT,MAAM,CAACa,KAAK,CAACC,OAAO,CAACJ,MAAM,EAAEC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;IAC/C,MAAM,IAAIF,KAAK,CAAC,uCAAuC,CAAC;EAC1D;EAEA,IAAIM,UAAU,GAAGjB,KAAK,CAACM,OAAO,CAACY,iBAAiB,CAACC,4BAA4B,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACvF,IAAIC,YAAY,GAAG,IAAIrB,KAAK,CAACM,OAAO,CAACgB,sCAAsC,CAAC;IAC1EV,MAAM,EAAEA,MAAM,CAACW,WAAW,CAAC,CAAC;IAC5BV,MAAM,EAAEA,MAAM,CAACU,WAAW,CAAC,CAAC;IAC5BT,GAAG,EAAEA;EACP,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC;EACV,IAAII,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACT,UAAU,EAAEI,YAAY,CAAC,CAAC;EACvD,OAAO,CAAC,CAAC,EAAElB,QAAQ,CAACwB,IAAI,EAAEH,OAAO,CAAC;AACpC"},"metadata":{},"sourceType":"script","externalDependencies":[]}