{"ast":null,"code":"import{useCallback,useMemo}from'react';import JSBI from'jsbi';import{useDispatch,useSelector}from'react-redux';import ERC20_INTERFACE from'../../constants/abis/erc20';import{useActiveWeb3React}from'../../hooks';import{useActiveReact}from'../../hooks/useActiveReact';import{tryParseAmount5,tryParseAmount6}from'../swap/hooks';import{useMulticallContract}from'../../hooks/useContract';import{isAddress}from'../../utils';import{BigAmount}from'../../utils/formatBignumber';import{useSingleContractMultipleData,useMultipleContractSingleData}from'../multicall/hooks';import{gnosissafe}from'../../connectors';import{walletViews,updateTokenBalance}from'./actions';export function useIsGnosisSafeWallet(){const{connector,account}=useActiveWeb3React();const isGnosisSafeWallet=useMemo(()=>{// console.log(gnosissafe)\n// console.log(connector)\nif(gnosissafe===connector&&account){return true;}return false;},[gnosissafe,connector,account]);return{isGnosisSafeWallet};}/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */export function useETHWalletBalances(uncheckedAddresses,chainId){const multicallContract=useMulticallContract();const addresses=useMemo(()=>uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(a=>a!==false).sort():[],[uncheckedAddresses]);const results=useSingleContractMultipleData(multicallContract,'getEthBalance',addresses.map(address=>[address]),undefined,chainId);// console.log(results)\nreturn useMemo(()=>addresses.reduce((memo,address,i)=>{var _results$i,_results$i$result;const value=results===null||results===void 0?void 0:(_results$i=results[i])===null||_results$i===void 0?void 0:(_results$i$result=_results$i.result)===null||_results$i$result===void 0?void 0:_results$i$result[0];if(value)memo[address]=BigAmount.format(18,value.toString());return memo;},{}),[addresses,results]);}/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */export function useTokenBalancesWithLoadingIndicator(address,tokens,chainId){const validatedTokens=useMemo(()=>{var _tokens$filter;return(_tokens$filter=tokens===null||tokens===void 0?void 0:tokens.filter(t=>isAddress(t===null||t===void 0?void 0:t.address)!==false))!==null&&_tokens$filter!==void 0?_tokens$filter:[];},[tokens]);const validatedTokenAddresses=useMemo(()=>validatedTokens.map(vt=>vt.address),[validatedTokens]);// console.log(chainId)\n// console.log(validatedTokenAddresses)\nconst balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'balanceOf',[address],undefined,chainId);// console.log(validatedTokenAddresses)\n// console.log(address)\n// console.log(balances)\nconst anyLoading=useMemo(()=>balances.some(callState=>callState.loading),[balances]);return[useMemo(()=>{if(address&&validatedTokens.length>0){const results=validatedTokens.reduce((memo,token,i)=>{var _balances$i,_balances$i$result;const value=balances===null||balances===void 0?void 0:(_balances$i=balances[i])===null||_balances$i===void 0?void 0:(_balances$i$result=_balances$i.result)===null||_balances$i$result===void 0?void 0:_balances$i$result[0];const amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token.address.toLowerCase()]=BigAmount.format(token.decimals,amount);}// console.log(memo)\nreturn memo;},{});return results;}else{return{};}},[address,validatedTokens,balances]),anyLoading];}export function useTokenBalancesWithLoadingIndicator1(address,token,decimals,chainId){// const validatedTokens: any[] = useMemo(\n//   () => tokens?.filter((t?: any): t is any => isAddress(t?.address) !== false) ?? [],\n//   [tokens]\n// )\n// const validatedTokenAddresses = isAddress(token) ? [token] : []\n// const validatedAddresses = isAddress(address) ? [address] : [undefined]\nconst validatedTokenAddresses=useMemo(()=>{if(isAddress(token)){return[token];}return[undefined];},[token]);const validatedAddresses=useMemo(()=>{if(isAddress(address)){return[address];}return[undefined];},[address]);// console.log(chainId)\n// console.log(validatedTokenAddresses)\n// console.log(validatedAddresses)\nconst balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'balanceOf',validatedAddresses,undefined,chainId);// console.log(validatedTokenAddresses)\n// console.log(address)\n// console.log(balances)\nconst anyLoading=useMemo(()=>balances.some(callState=>callState.loading),[balances]);return useMemo(()=>{// console.log(token, address, balances)\nif(address&&token&&!anyLoading){var _balances$,_balances$$result;const value=balances===null||balances===void 0?void 0:(_balances$=balances[0])===null||_balances$===void 0?void 0:(_balances$$result=_balances$.result)===null||_balances$$result===void 0?void 0:_balances$$result[0];const amount=value?value.toString():undefined;// console.log('amount', amount)\n// console.log('decimals', decimals)\n// console.log(balances)\nreturn amount||amount===0?BigAmount.format(decimals,amount):undefined;}else{return undefined;}},[address,token,balances,anyLoading]);}export function useOneTokenBalance(token){const{chainId,account}=useActiveReact();const lists=useSelector(state=>state.wallet.tokenBalanceList);// console.log(lists)\nreturn useMemo(()=>{if(chainId&&account&&lists&&token){var _lists$account,_lists$account$chainI;// console.log(lists)\n// console.log(account)\n// console.log(chainId)\n// console.log(token)\nif(lists===null||lists===void 0?void 0:(_lists$account=lists[account])===null||_lists$account===void 0?void 0:(_lists$account$chainI=_lists$account[chainId])===null||_lists$account$chainI===void 0?void 0:_lists$account$chainI[token]){const blItem=lists[account][chainId][token];if(token==='NATIVE'){// console.log(blItem)\nreturn{...blItem,balances:blItem.balancestr==='0'?BigAmount.format(18,'0'):tryParseAmount6(blItem.balancestr)};}const tokens={chainId,address:token,decimals:blItem.dec};const amount=blItem.balancestr?JSBI.BigInt(blItem.balancestr.toString()):undefined;return{...blItem,balances1:tryParseAmount6(blItem.balancestr),balances2:tryParseAmount5(blItem.balancestr,blItem.dec),balances:tokens&&amount?BigAmount.format(tokens.decimals,amount):''};}return{};}return{};},[lists,chainId,account,token]);}export function useCurrencyBalance1(account,token,decimals,chainId){// const balances = useTokenBalanceList()\n// console.log(currency)\nconst balanceWallet=useTokenBalancesWithLoadingIndicator1(account,token,decimals,chainId);const blItem=useOneTokenBalance(token?token===null||token===void 0?void 0:token.toLowerCase():undefined);// console.log('balanceWallet', token, balanceWallet)\nreturn useMemo(()=>{// console.log('blItem', blItem)\n// console.log('balanceWallet', token, balanceWallet)\nif(balanceWallet){return balanceWallet;}else{if(blItem===null||blItem===void 0?void 0:blItem.balances){// return BigAmount.format(decimals, blItem.balances)\nreturn blItem.balances;}return undefined;}},[balanceWallet,blItem===null||blItem===void 0?void 0:blItem.balances,decimals]);// }, [account, token, chainId, balanceWallet, blItem?.balances, decimals])\n}export function useTokenTotalSupplyWithLoadingIndicator(tokens,chainId){const validatedTokens=useMemo(()=>{var _tokens$filter2;return(_tokens$filter2=tokens===null||tokens===void 0?void 0:tokens.filter(t=>isAddress(t===null||t===void 0?void 0:t.address)!==false))!==null&&_tokens$filter2!==void 0?_tokens$filter2:[];},[tokens]);const validatedTokenAddresses=useMemo(()=>validatedTokens.map(vt=>vt.address),[validatedTokens]);// console.log(tokens)\n// console.log(validatedTokenAddresses)\nconst balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'totalSupply',[],undefined,chainId);// console.log(validatedTokenAddresses)\n// console.log(balances)\n// console.log(balances)\nconst anyLoading=useMemo(()=>balances.some(callState=>callState.loading),[balances]);return[useMemo(()=>validatedTokens.length>0?validatedTokens.reduce((memo,token,i)=>{var _balances$i2,_balances$i2$result;const value=balances===null||balances===void 0?void 0:(_balances$i2=balances[i])===null||_balances$i2===void 0?void 0:(_balances$i2$result=_balances$i2.result)===null||_balances$i2$result===void 0?void 0:_balances$i2$result[0];const amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){// memo[token.address.toLowerCase()] = new TokenAmount(token, amount)\nmemo[token.address.toLowerCase()]=BigAmount.format(token.decimals,amount);}// console.log(memo)\nreturn memo;},{}):{},[validatedTokens,balances]),anyLoading];}export function useTokenBalancesList(address,tokens,chainId){const validatedTokens=useMemo(()=>{var _tokens$filter3;return(_tokens$filter3=tokens===null||tokens===void 0?void 0:tokens.filter(t=>isAddress(t)!==false))!==null&&_tokens$filter3!==void 0?_tokens$filter3:[];},[tokens]);const validatedTokenAddresses=useMemo(()=>validatedTokens.map(vt=>vt),[validatedTokens]);// console.log(tokens)\n// console.log(validatedTokenAddresses)\nconst balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'balanceOf',[address],undefined,chainId);// console.log(validatedTokenAddresses)\n// console.log(address)\n// console.log(balances)\nconst anyLoading=useMemo(()=>balances.some(callState=>callState.loading),[balances]);return[useMemo(()=>address&&validatedTokens.length>0?validatedTokens.reduce((memo,token,i)=>{var _balances$i3,_balances$i3$result;const value=balances===null||balances===void 0?void 0:(_balances$i3=balances[i])===null||_balances$i3===void 0?void 0:(_balances$i3$result=_balances$i3.result)===null||_balances$i3$result===void 0?void 0:_balances$i3$result[0];const amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token]=amount.toString();}// console.log(memo)\nreturn memo;},{}):{},[address,validatedTokens,balances]),anyLoading];}export function useTokenBalanceList(){const{chainId,account}=useActiveReact();const lists=useSelector(state=>state.wallet.tokenBalanceList);// console.log(lists)\nreturn useMemo(()=>{if(chainId&&account&&lists){if(lists[account]&&lists[account][chainId]){const list={};for(const token in lists[account][chainId]){const obj=lists[account][chainId][token];// const amount = obj.balancestr ? JSBI.BigInt(obj.balancestr.toString()) : undefined\ntry{list[token]={...obj,balances:BigAmount.format(obj.dec?obj.dec:0,obj.balancestr)// balances: amount\n};}catch(error){console.log(error);console.log(obj);console.log(account,chainId,token);}}return list;}return{};}return{};},[lists,chainId,account]);}export function useETHBalances(uncheckedAddresses,chainId){const ethBalance=useETHWalletBalances(uncheckedAddresses,chainId);const blItem=useOneTokenBalance('NATIVE');const addresses=useMemo(()=>uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(a=>a!==false).sort():[],[uncheckedAddresses]);return useMemo(()=>{if(chainId){// console.log(1)\n// console.log(ethBalance)\nreturn ethBalance;}else{// console.log(2)\n// console.log(blItem)\n// console.log(blItem.balances)\n// console.log(ethBalance)\nreturn addresses.reduce((memo,address)=>{if(ethBalance[address])return ethBalance;if(blItem===null||blItem===void 0?void 0:blItem.balances)return{[address]:blItem===null||blItem===void 0?void 0:blItem.balances};return memo;},{});}},[ethBalance,blItem,chainId]);}export function useTokenTotalSupply(tokens,chainId){const validatedTokens=useMemo(()=>{var _tokens$filter4;return(_tokens$filter4=tokens===null||tokens===void 0?void 0:tokens.filter(t=>isAddress(t)!==false))!==null&&_tokens$filter4!==void 0?_tokens$filter4:[];},[tokens]);const validatedTokenAddresses=useMemo(()=>validatedTokens.map(vt=>vt),[validatedTokens]);// console.log(tokens)\n// console.log(validatedTokenAddresses)\nconst balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'totalSupply',[],undefined,chainId);// console.log(validatedTokenAddresses)\n// console.log(balances)\n// console.log(balances)\nconst anyLoading=useMemo(()=>balances.some(callState=>callState.loading),[balances]);return[useMemo(()=>validatedTokens.length>0?validatedTokens.reduce((memo,token,i)=>{var _balances$i4,_balances$i4$result;const value=balances===null||balances===void 0?void 0:(_balances$i4=balances[i])===null||_balances$i4===void 0?void 0:(_balances$i4$result=_balances$i4.result)===null||_balances$i4$result===void 0?void 0:_balances$i4$result[0];const amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token]=amount.toString();}// console.log(memo)\nreturn memo;},{}):{},[validatedTokens,balances]),anyLoading];}export function useTokenBalances(address,tokens,chainId){return useTokenBalancesWithLoadingIndicator(address?address===null||address===void 0?void 0:address.toLowerCase():undefined,tokens,chainId)[0];}// get the balance for a single token/account combo\nexport function useTokenBalance(account,token,chainId){const tokenBalances=useTokenBalances(account,[token],chainId);if(!(token===null||token===void 0?void 0:token.address))return undefined;return tokenBalances[token.address.toLowerCase()];}export function useCurrencyBalances(account,currencies,chainId,isETH){const tokens=useMemo(()=>{var _currencies$filter;return(_currencies$filter=currencies===null||currencies===void 0?void 0:currencies.filter(currency=>currency===null||currency===void 0?void 0:currency.address))!==null&&_currencies$filter!==void 0?_currencies$filter:[];},[currencies]);// console.log(tokens)\nconst tokenBalances=useTokenBalances(account,tokens,chainId);const containsETH=isETH;const ethBalance=useETHBalances(containsETH?[account]:[],chainId);return useMemo(()=>{var _currencies$map;return(_currencies$map=currencies===null||currencies===void 0?void 0:currencies.map(currency=>{var _currency$address;if(!account||!currency)return undefined;if(isETH)return ethBalance[account];if(currency===null||currency===void 0?void 0:currency.address)return tokenBalances[(_currency$address=currency.address)===null||_currency$address===void 0?void 0:_currency$address.toLowerCase()];// if (currency === ETHER) return ethBalance[account]\nreturn undefined;}))!==null&&_currencies$map!==void 0?_currencies$map:[];},[account,currencies,ethBalance,tokenBalances]);}export function useCurrencyBalance(account,currency,chainId,isETH){var _currency$address2;// const balances = useTokenBalanceList()\n// console.log(currency)\nconst balanceWallet=useCurrencyBalances(account,currency?[currency]:[],chainId,isETH)[0];const blItem=useOneTokenBalance(currency?currency===null||currency===void 0?void 0:(_currency$address2=currency.address)===null||_currency$address2===void 0?void 0:_currency$address2.toLowerCase():undefined);return useMemo(()=>{if(chainId||balanceWallet){return balanceWallet;}else{if(blItem&&blItem.balances){return blItem.balances;}return undefined;}},[account,currency,chainId,isETH,balanceWallet,blItem]);}export function useWalletViews(){const walletViewsResult=useSelector(state=>state.wallet.walletViews);const dispatch=useDispatch();// const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT)\nconst setWalletView=useCallback(type=>{// console.log(type)\ndispatch(walletViews({type}));},[]);return{walletView:walletViewsResult,setWalletView};}export function useAllTokenBalance(){const dispatch=useDispatch();const tokenBalance=useSelector(state=>state.wallet.tokenBalance);const setTokenBalance=useCallback((chainId,token,account,balance,decimals)=>{dispatch(updateTokenBalance({chainId,token,account,balance,decimals}));},[dispatch]);const getTokenBalance=useCallback((chainId,token,account)=>{var _tokenBalance$chainId,_tokenBalance$chainId2;// console.log(tokenBalance)\nif(tokenBalance===null||tokenBalance===void 0?void 0:(_tokenBalance$chainId=tokenBalance[chainId])===null||_tokenBalance$chainId===void 0?void 0:(_tokenBalance$chainId2=_tokenBalance$chainId[account])===null||_tokenBalance$chainId2===void 0?void 0:_tokenBalance$chainId2[token]){var _tokenBalance$chainId3,_tokenBalance$chainId4;return tokenBalance===null||tokenBalance===void 0?void 0:(_tokenBalance$chainId3=tokenBalance[chainId])===null||_tokenBalance$chainId3===void 0?void 0:(_tokenBalance$chainId4=_tokenBalance$chainId3[account])===null||_tokenBalance$chainId4===void 0?void 0:_tokenBalance$chainId4[token];}return;},[tokenBalance]);return{setTokenBalance,getTokenBalance};}","map":{"version":3,"names":["useCallback","useMemo","JSBI","useDispatch","useSelector","ERC20_INTERFACE","useActiveWeb3React","useActiveReact","tryParseAmount5","tryParseAmount6","useMulticallContract","isAddress","BigAmount","useSingleContractMultipleData","useMultipleContractSingleData","gnosissafe","walletViews","updateTokenBalance","useIsGnosisSafeWallet","connector","account","isGnosisSafeWallet","useETHWalletBalances","uncheckedAddresses","chainId","multicallContract","addresses","map","filter","a","sort","results","address","undefined","reduce","memo","i","_results$i","_results$i$result","value","result","format","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","_tokens$filter","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","_balances$i","_balances$i$result","amount","BigInt","toLowerCase","decimals","useTokenBalancesWithLoadingIndicator1","validatedAddresses","_balances$","_balances$$result","useOneTokenBalance","lists","state","wallet","tokenBalanceList","_lists$account","_lists$account$chainI","blItem","balancestr","dec","balances1","balances2","useCurrencyBalance1","balanceWallet","useTokenTotalSupplyWithLoadingIndicator","_tokens$filter2","_balances$i2","_balances$i2$result","useTokenBalancesList","_tokens$filter3","_balances$i3","_balances$i3$result","useTokenBalanceList","list","obj","error","console","log","useETHBalances","ethBalance","useTokenTotalSupply","_tokens$filter4","_balances$i4","_balances$i4$result","useTokenBalances","useTokenBalance","tokenBalances","useCurrencyBalances","currencies","isETH","_currencies$filter","currency","containsETH","_currencies$map","_currency$address","useCurrencyBalance","_currency$address2","useWalletViews","walletViewsResult","dispatch","setWalletView","type","walletView","useAllTokenBalance","tokenBalance","setTokenBalance","balance","getTokenBalance","_tokenBalance$chainId","_tokenBalance$chainId2","_tokenBalance$chainId3","_tokenBalance$chainId4"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/wallet/hooks.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport JSBI from 'jsbi'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\nimport {useActiveWeb3React} from '../../hooks'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { tryParseAmount5,tryParseAmount6 } from '../swap/hooks'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { BigAmount } from '../../utils/formatBignumber'\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\nimport { AppState, AppDispatch } from '../index'\n\nimport {gnosissafe} from '../../connectors'\nimport { walletViews, updateTokenBalance } from './actions'\n\nexport function useIsGnosisSafeWallet () {\n  const { connector, account } = useActiveWeb3React()\n  const isGnosisSafeWallet =  useMemo(() => {\n    // console.log(gnosissafe)\n    // console.log(connector)\n    if ( gnosissafe === connector && account) {\n      return true\n    }\n    return false\n  }, [gnosissafe, connector, account])\n  return {\n    isGnosisSafeWallet\n  }\n}\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHWalletBalances(\n  uncheckedAddresses?: (string | undefined)[],\n  chainId?: any\n): { [address: string]: any | undefined } {\n  const multicallContract = useMulticallContract()\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map(address => [address]),\n    undefined,\n    chainId\n  )\n  // console.log(results)\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: any }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value) memo[address] = BigAmount.format(18, value.toString())\n        return memo\n      }, {}),\n    [addresses, results]\n  )\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (any | undefined)[],\n  chainId?:any\n): [{ [tokenAddress: string]: any }, boolean] {\n  const validatedTokens: any[] = useMemo(\n    () => tokens?.filter((t?: any) => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\n  // console.log(chainId)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () => {\n        if (address && validatedTokens.length > 0) {\n          const results = validatedTokens.reduce<{ [tokenAddress: string]: any }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address.toLowerCase()] = BigAmount.format(token.decimals, amount)\n            }\n            // console.log(memo)\n            return memo\n          }, {})\n          return results\n        } else {\n          return {}\n        }\n      },\n      [address, validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalancesWithLoadingIndicator1(\n  address?: any,\n  token?: any,\n  decimals?: any,\n  chainId?:any\n): any {\n  // const validatedTokens: any[] = useMemo(\n  //   () => tokens?.filter((t?: any): t is any => isAddress(t?.address) !== false) ?? [],\n  //   [tokens]\n  // )\n\n  // const validatedTokenAddresses = isAddress(token) ? [token] : []\n  // const validatedAddresses = isAddress(address) ? [address] : [undefined]\n  const validatedTokenAddresses = useMemo(() => {\n    if (isAddress(token)) {\n      return [token]\n    } \n    return [undefined]\n  }, [token])\n  const validatedAddresses = useMemo(() => {\n    if (isAddress(address)) {\n      return [address]\n    } \n    return [undefined]\n  }, [address])\n  // console.log(chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(validatedAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', validatedAddresses, undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return useMemo(\n    () => {\n      // console.log(token, address, balances)\n      if (address && token && !anyLoading) {\n        const value = balances?.[0]?.result?.[0]\n        const amount = value ? value.toString() : undefined\n        // console.log('amount', amount)\n        // console.log('decimals', decimals)\n        // console.log(balances)\n        return amount || amount === 0 ? BigAmount.format(decimals, amount) : undefined\n      } else {\n        return undefined\n      }\n    },\n    [address, token, balances, anyLoading]\n  )\n}\n\nexport function useOneTokenBalance(token:any): any {\n  const { chainId, account } = useActiveReact()\n  const lists:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.tokenBalanceList)\n  // console.log(lists)\n  return useMemo(() => {\n    if (chainId && account && lists && token) {\n      // console.log(lists)\n      // console.log(account)\n      // console.log(chainId)\n      // console.log(token)\n      if (lists?.[account]?.[chainId]?.[token]) {\n        const blItem = lists[account][chainId][token]\n        if (token === 'NATIVE') {\n          // console.log(blItem)\n          return {\n            ...blItem,\n            balances: blItem.balancestr === '0' ? BigAmount.format(18, '0') : tryParseAmount6(blItem.balancestr)\n          }\n        }\n        \n        const tokens = {chainId,address: token, decimals: blItem.dec}\n        const amount = blItem.balancestr ? JSBI.BigInt(blItem.balancestr.toString()) : undefined\n        return {\n          ...blItem,\n          balances1: tryParseAmount6(blItem.balancestr),\n          balances2: tryParseAmount5(blItem.balancestr, blItem.dec),\n          balances: tokens && amount ? BigAmount.format(tokens.decimals, amount) : ''\n        }\n      }\n      return {}\n    }\n    return {}\n  }, [lists, chainId, account, token])\n}\n\nexport function useCurrencyBalance1(account?: string | null, token?: string, decimals?: any, chainId?:any): any | undefined {\n  // const balances = useTokenBalanceList()\n  // console.log(currency)\n  const balanceWallet  = useTokenBalancesWithLoadingIndicator1(account, token, decimals, chainId)\n  const blItem = useOneTokenBalance(token ? token?.toLowerCase() : undefined)\n  // console.log('balanceWallet', token, balanceWallet)\n  return useMemo(() => {\n    // console.log('blItem', blItem)\n    // console.log('balanceWallet', token, balanceWallet)\n    if (balanceWallet) {\n      return balanceWallet\n    } else {\n      if (blItem?.balances) {\n        // return BigAmount.format(decimals, blItem.balances)\n        return blItem.balances\n      }\n      return undefined\n    }\n  }, [balanceWallet, blItem?.balances, decimals])\n  // }, [account, token, chainId, balanceWallet, blItem?.balances, decimals])\n}\n\n\nexport function useTokenTotalSupplyWithLoadingIndicator(\n  tokens?: (any)[],\n  chainId?:any\n): [{ [tokenAddress: string]: any }, boolean] {\n  const validatedTokens: any[] = useMemo(\n    () => tokens?.filter((t?: any) => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'totalSupply', [], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(balances)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: any }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                // memo[token.address.toLowerCase()] = new TokenAmount(token, amount)\n                memo[token.address.toLowerCase()] = BigAmount.format(token.decimals, amount)\n              }\n              // console.log(memo)\n              return memo\n            }, {})\n          : {},\n      [validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalancesList(\n  address?: string,\n  tokens?: (string | undefined)[],\n  chainId?:any\n): [{ [tokenAddress: string]: string | undefined }, boolean] {\n  const validatedTokens: string[] = useMemo(\n    () => tokens?.filter((t?: string): t is string => isAddress(t) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt), [validatedTokens])\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: string | undefined }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token] = amount.toString()\n              }\n              // console.log(memo)\n              return memo\n            }, {})\n          : {},\n      [address, validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalanceList(): any {\n  const { chainId, account } = useActiveReact()\n  const lists:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.tokenBalanceList)\n  // console.log(lists)\n  return useMemo(() => {\n    if (chainId && account && lists) {\n      if (lists[account] && lists[account][chainId]) {\n        const list:any = {}\n        for (const token in lists[account][chainId]) {\n          const obj = lists[account][chainId][token]\n          // const amount = obj.balancestr ? JSBI.BigInt(obj.balancestr.toString()) : undefined\n          try {\n            list[token] = {\n              ...obj,\n              balances: BigAmount.format(obj.dec ? obj.dec : 0, obj.balancestr)\n              // balances: amount\n            }\n          } catch (error) {\n            console.log(error)\n            console.log(obj)\n            console.log(account, chainId, token)\n          }\n        }\n        return list\n      }\n      return {}\n    }\n    return {}\n  }, [lists, chainId, account])\n}\n\n\nexport function useETHBalances(\n  uncheckedAddresses?: (string | undefined)[],\n  chainId?: any\n): { [address: string]: any | undefined } {\n  const ethBalance = useETHWalletBalances(uncheckedAddresses, chainId)\n  const blItem = useOneTokenBalance('NATIVE')\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n  return useMemo(\n    () => {\n      if (chainId) {\n        // console.log(1)\n        // console.log(ethBalance)\n        return ethBalance\n      } else {\n        // console.log(2)\n        // console.log(blItem)\n        // console.log(blItem.balances)\n        // console.log(ethBalance)\n        return addresses.reduce<{ [address: string]: any }>((memo, address) => {\n          if (ethBalance[address]) return ethBalance\n          if (blItem?.balances) return {[address]: blItem?.balances}\n          return memo\n        }, {})\n      }\n    },\n    [ethBalance, blItem, chainId]\n  )\n}\nexport function useTokenTotalSupply(\n  tokens?: (string | undefined)[],\n  chainId?:any\n): [{ [tokenAddress: string]: string | undefined }, boolean] {\n  const validatedTokens: string[] = useMemo(\n    () => tokens?.filter((t?: string): t is string => isAddress(t) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt), [validatedTokens])\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'totalSupply', [], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(balances)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: string | undefined }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token] = amount.toString()\n              }\n              // console.log(memo)\n              return memo\n            }, {})\n          : {},\n      [validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (any | undefined)[],\n  chainId?:any\n): { [tokenAddress: string]: any } {\n  return useTokenBalancesWithLoadingIndicator(address ? address?.toLowerCase() : undefined, tokens, chainId)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: any, chainId?:any): any {\n  const tokenBalances = useTokenBalances(account, [token], chainId)\n  if (!token?.address) return undefined\n  return tokenBalances[token.address.toLowerCase()]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (any | undefined)[],\n  chainId?:any,\n  isETH?:any\n): (any | undefined)[] {\n  const tokens = useMemo(() => currencies?.filter((currency) => currency?.address) ?? [], [\n    currencies\n  ])\n  // console.log(tokens)\n  const tokenBalances = useTokenBalances(account, tokens, chainId)\n  const containsETH: boolean = isETH\n  const ethBalance = useETHBalances(containsETH ? [account] : [], chainId)\n\n  return useMemo(\n    () =>\n      currencies?.map(currency => {\n        if (!account || !currency) return undefined\n        if (isETH) return ethBalance[account]\n        if (currency?.address) return tokenBalances[currency.address?.toLowerCase()]\n        // if (currency === ETHER) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: any, chainId?:any, isETH?:any): any | undefined {\n  // const balances = useTokenBalanceList()\n  // console.log(currency)\n  const balanceWallet  = useCurrencyBalances(account, currency ? [currency] : [], chainId, isETH)[0]\n  const blItem = useOneTokenBalance(currency ? currency?.address?.toLowerCase() : undefined)\n  return useMemo(() => {\n    if (chainId || balanceWallet) {\n      return balanceWallet\n    } else {\n      if (blItem && blItem.balances) {\n        return blItem.balances\n      }\n      return undefined\n    }\n  }, [account, currency, chainId, isETH, balanceWallet, blItem])\n}\n\n\n\nexport function useWalletViews () {\n  const walletViewsResult:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.walletViews)\n  const dispatch = useDispatch<AppDispatch>()\n  // const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT)\n\n  const setWalletView = useCallback((type: any) => {\n    // console.log(type)\n    dispatch(walletViews({type}))\n  }, [])\n\n  return {\n    walletView: walletViewsResult,\n    setWalletView\n  }\n}\n\nexport function useAllTokenBalance() {\n  const dispatch = useDispatch<AppDispatch>()\n  const tokenBalance:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.tokenBalance)\n\n  const setTokenBalance = useCallback((chainId: any, token:any, account:any, balance:string, decimals:number) => {\n    dispatch(updateTokenBalance({chainId, token, account, balance, decimals}))\n  }, [dispatch])\n\n  const getTokenBalance = useCallback((chainId: any, token:any, account:any) => {\n    // console.log(tokenBalance)\n    if (tokenBalance?.[chainId]?.[account]?.[token]) {\n      return tokenBalance?.[chainId]?.[account]?.[token]\n    }\n    return\n  }, [tokenBalance])\n  return {\n    setTokenBalance,\n    getTokenBalance\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}