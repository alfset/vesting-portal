{"ast":null,"code":"import{useCallback,useMemo}from\"react\";import{useTranslation}from'react-i18next';import{useDispatch,useSelector}from'react-redux';import{nonevmAddress}from'../hooks/actions';import{useActiveReact}from'../../hooks/useActiveReact';import config from'../../config';// import {VALID_BALANCE} from '../../config/constant'\nimport{// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager// useUserTransactionTTL,\n// useUserSlippageTolerance\n}from'../../state/user/hooks';import{BigAmount}from'../../utils/formatBignumber';import{recordsTxns}from'../../utils/bridge/register';import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';import{tryParseAmount3}from'../../state/swap/hooks';import{ChainId}from\"../../config/chainConfig/chainId\";// import {AptosClient} from 'aptos'\n// import {connect} from 'Aptos-api-js'\n// console.log(Aptos)\n// const {AptosClient} = require('aptos')\n// function getClient (chainId:any) {\n//   const rpc = config.chainInfo[chainId].nodeRpc\n//   // return new AptosClient(rpc)\n//   return rpc\n// }\nconst aptAddressReg=/^0x[0-9A-Za-z]{64}$/;export function isAptosAddress(address){if(aptAddressReg.test(address)){return address;}return false;}/**\n * Connect wallet and get account address\n */export function useLoginAptos(){const dispatch=useDispatch();const loginAptos=useCallback(async chainId=>{var _window;if((_window=window)===null||_window===void 0?void 0:_window.aptos){window.aptos.connect().then(res=>{console.log(res);if(res===null||res===void 0?void 0:res.address){dispatch(nonevmAddress({chainId,account:res.address}));}else{dispatch(nonevmAddress({chainId,account:''}));}}).catch(error=>{console.log(error);dispatch(nonevmAddress({chainId,account:''}));});}else{if(confirm('Please install Petra Wallet.')===true){window.open('https://chrome.google.com/webstore/detail/petra/ejjladinnckdgjemekebdpeokbikhfci');}}},[]);return{loginAptos};}/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */export function useAptosBalance(){const aptBalanceList=useSelector(state=>state.apt.aptBalanceList);// const getAptosResource = useCallback(async ({address, res_type}: {address: string | object, res_type: string | null = null}) => {\n// const getAptosResource = (async function (address: string | object, res_type: string | null = null) {\nconst getAptosResource=useCallback(async function(chainId,address){let token=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;// console.log(chainId, address, token)\n// console.log(isAptosAddress(address))\nif(!isAptosAddress(address)){return null;}const rpc=config.chainInfo[chainId].nodeRpc;const options={method:'GET',headers:{'Content-Type':'application/json'}};let url;if(!token){url=rpc+\"/v1/accounts/\"+address+\"/resources\";}else{url=rpc+\"/v1/accounts/\"+address+\"/resource/\"+token;}const result=await fetch(url,options).then(response=>response.json()).catch(err=>console.error(err));// console.log(result)\nreturn result;},[]);return{getAptosResource,aptBalanceList// getAptosTokenBalance,\n};}/**\n * Authorization and obtaining authorization information\n *\n * @param account wallet address\n * @param token token address\n * @param spender spender address\n */export const bytecode='a11ceb0b0500000006010004030411041508051d0e072b36086120000000010102000100000301040100000400020100010302030105020501060c010500010900010101090104636f696e067369676e65720a616464726573735f6f661569735f6163636f756e745f7265676973746572656408726567697374657200000000000000000000000000000000000000000000000000000000000000010200000001150a0011000c010a013800200308050a0a0038010b01380220030f05120b00380305140b000102';export function useAptAllowance(){const setAptAllowance=useCallback((token,chainId,account,anytoken)=>{return new Promise(async(resolve,reject)=>{const curAccount=await window.aptos.account();if((curAccount===null||curAccount===void 0?void 0:curAccount.address)!==account){alert('This address is not the current wallet address. Please switch wallets.');}else{if(token&&account&&chainId&&[ChainId.APT,ChainId.APT_TEST].includes(chainId)){const transaction={arguments:[],function:'0x1::managed_coin::register',type:'entry_function_payload','type_arguments':[token]};// const transaction = {\n//   arguments: [],\n//   code: {\n//     bytecode: bytecode\n//   },\n//   function: '0x1::coin::transfer',\n//   type: 'script_payload',\n//   'type_arguments': [token, anytoken ? anytoken : token],\n// }\nconsole.log(anytoken);console.log(transaction);try{const txResult=await window.aptos.signAndSubmitTransaction(transaction);console.log(txResult);resolve({hash:txResult===null||txResult===void 0?void 0:txResult.hash});}catch(error){reject(error);}}else{reject('Parameter error.');}}});},[]);return{setAptAllowance};}/**\n * Get transaction info\n *\n * @param txid transaction hash\n */export function getAptTxnsStatus(txid,chainId){return new Promise(resolve=>{const data={};if(txid){const rpc=config.chainInfo[chainId].nodeRpc;const url=\"\".concat(rpc,\"/v1/transactions/by_hash/\").concat(txid);// window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\nfetch(url).then(res=>res.json()).then(json=>{console.log(json);if(json){if(json.success===true){data.msg='Success';data.info=json;}else if(json.success===false){data.msg='Failure';data.error='Txns is failure!';}else{data.msg='Null';data.error='Query is empty!';}}else{data.msg='Null';data.error='Query is empty!';}resolve(data);}).catch(err=>{console.log(err.toString());data.error='Query is empty!';resolve(data);});}else{data.msg='Null';data.error='Query is empty!';resolve(data);}});}// getAptTxnsStatus('0x013dbfba6bee428b70a66603a306dd95044e7e16a7bcddef094154a11b62f070', 'APT_TEST')\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */export function useAptCrossChain(routerToken,inputToken,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,useToChainId){const{account,chainId}=useActiveReact();const{aptBalanceList}=useAptosBalance();const{t}=useTranslation();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const addTransaction=useTransactionAdder();const[userInterfaceBalanceValid]=useInterfaceBalanceValidManager();const inputAmount=useMemo(()=>tryParseAmount3(typedValue,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[typedValue,selectCurrency]);const balance=useMemo(()=>{const token=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address;if(token){var _aptBalanceList$token,_aptBalanceList$token3,_aptBalanceList$token4;if((selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='NATIVE'&&(aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token=aptBalanceList[token])===null||_aptBalanceList$token===void 0?void 0:_aptBalanceList$token.balance)){var _aptBalanceList$token2;return BigAmount.format(8,aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token2=aptBalanceList[token])===null||_aptBalanceList$token2===void 0?void 0:_aptBalanceList$token2.balance);}else if((aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token3=aptBalanceList[token])===null||_aptBalanceList$token3===void 0?void 0:_aptBalanceList$token3.balance)&&(aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token4=aptBalanceList[token])===null||_aptBalanceList$token4===void 0?void 0:_aptBalanceList$token4.balance)){var _aptBalanceList$token5;return BigAmount.format(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token5=aptBalanceList[token])===null||_aptBalanceList$token5===void 0?void 0:_aptBalanceList$token5.balance);}return BigAmount.format(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,'0');}return undefined;},[selectCurrency,aptBalanceList]);let sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);}catch(error){console.log(error);}return useMemo(()=>{// console.log(sufficientBalance)\n// console.log(balance ? balance?.toExact() : '')\n// console.log(typedValue)\nif(!account||!chainId||!selectCurrency||!receiveAddress||!useToChainId)return{};return{balance:balance,execute:(sufficientBalance||!userInterfaceBalanceValid)&&inputAmount?async()=>{const transaction={arguments:[inputAmount,receiveAddress,useToChainId],function:routerToken+'::Router::swapout',type:'entry_function_payload','type_arguments':[selectCurrency.address]};console.log(transaction);try{const txReceipt=await window.aptos.signAndSubmitTransaction(transaction);console.log(txReceipt);// resolve({hash: txResult?.hash})\nif(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig===null||destConfig===void 0?void 0:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}}catch(error){// reject(error)\nonChangeViewErrorTip('Txns failure.',true);}}:undefined,inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,account,balance,useToChainId,userInterfaceBalanceValid]);}/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param selectCurrency select current token info\n * @param inputToken any or underlying address\n * @param typedValue typed Value\n * @param swapType deposit or withdraw\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param destConfig to chain info\n */export function useAptSwapPoolCallback(routerToken,selectCurrency,inputToken,typedValue,swapType,selectChain,receiveAddress,destConfig,inputCurrency,useToChainId){const{account,chainId}=useActiveReact();const{aptBalanceList}=useAptosBalance();const{t}=useTranslation();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const addTransaction=useTransactionAdder();const inputAmount=useMemo(()=>tryParseAmount3(typedValue,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[typedValue,selectCurrency]);const balance=useMemo(()=>{const token=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address;if(token){var _aptBalanceList$token6,_aptBalanceList$token8,_aptBalanceList$token9;if((selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='NATIVE'&&(aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token6=aptBalanceList[token])===null||_aptBalanceList$token6===void 0?void 0:_aptBalanceList$token6.balance)){var _aptBalanceList$token7;return BigAmount.format(8,aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token7=aptBalanceList[token])===null||_aptBalanceList$token7===void 0?void 0:_aptBalanceList$token7.balance);}else if((aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token8=aptBalanceList[token])===null||_aptBalanceList$token8===void 0?void 0:_aptBalanceList$token8.balance)&&(aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token9=aptBalanceList[token])===null||_aptBalanceList$token9===void 0?void 0:_aptBalanceList$token9.balance)){var _aptBalanceList$token10;return BigAmount.format(selectCurrency.decimals,aptBalanceList===null||aptBalanceList===void 0?void 0:(_aptBalanceList$token10=aptBalanceList[token])===null||_aptBalanceList$token10===void 0?void 0:_aptBalanceList$token10.balance);}return BigAmount.format(selectCurrency.decimals,'0');}return undefined;},[selectCurrency,aptBalanceList]);let sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);}catch(error){console.log(error);}return useMemo(()=>{if(!account||!chainId||!selectCurrency||!swapType)return{};return{balance:balance,execute:async()=>{let transaction={};if(chainId.toString()!==selectChain.toString()&&swapType!=='deposit'){transaction={arguments:[inputAmount,receiveAddress,useToChainId],function:routerToken+'::Router::swapout',type:'entry_function_payload','type_arguments':[inputToken]};}else{if(swapType==='deposit'){transaction={arguments:[inputAmount],function:routerToken+'::Pool::deposit',type:'entry_function_payload','type_arguments':[inputCurrency.address,inputToken]};}else{transaction={arguments:[inputAmount],function:routerToken+'::Pool::withdraw',type:'entry_function_payload','type_arguments':[inputToken,inputCurrency.address]};}}console.log(transaction);try{const txReceipt=await window.aptos.signAndSubmitTransaction(transaction);console.log(txReceipt);// resolve({hash: txResult?.hash})\nif(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){if(chainId.toString()!==selectChain.toString()&&swapType!=='deposit'){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:(receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.indexOf('0x'))===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig===null||destConfig===void 0?void 0:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}else{addTransaction(txReceipt,{summary:\"\".concat(swapType==='deposit'?'Deposit':'Withdraw',\" \").concat(typedValue,\" \").concat(config.getBaseCoin(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,chainId))});}}}catch(error){// reject(error)\nonChangeViewErrorTip('Txns failure.',true);}},inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,account,balance,inputCurrency,useToChainId]);}/**\n * Get pool info\n *\n * @param chainId router token address\n * @param calls [{token: '', anytoken: '', account: ''}]\n * @return {'anytoken': {'balanceOf': '', 'totalSupply': '', 'balance': ''}}\n */export function useAptPoolDatas(){const{getAptosResource}=useAptosBalance();const getAptPoolDatas=useCallback(async(calls,chainId)=>{return new Promise(resolve=>{const arr=[];const labelArr=[];// console.log(calls)\nif([ChainId.APT,ChainId.APT_TEST].includes(chainId)){// console.log(calls)\n// const useAccount = window.tronWeb.defaultAddress.base58\nfor(const item of calls){const anytoken=item.anytoken?item.anytoken.split('::')[0]:'';const anytokenSource=item.anytoken;const underlyingToken=item.token;// console.log('anytoken', anytoken)\n// console.log('underlyingToken', underlyingToken)\nif(underlyingToken&&anytoken){// console.log(underlyingToken, anytoken)\n// arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\narr.push(getAptosResource(chainId,anytoken));// arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\nlabelArr.push({key:anytokenSource,label:'balanceOf',dec:item.dec});}// console.log(item)\n// console.log(chainId)\nif(anytoken&&isAptosAddress(item.account)){// arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\narr.push(getAptosResource(chainId,item.account));labelArr.push({key:anytokenSource,label:'balance',dec:item.dec});}}}// console.log(arr)\nconst list={};Promise.all(arr).then(res=>{// console.log(res)\nfor(let i=0,len=arr.length;i<len;i++){const k=labelArr[i].key;const l=labelArr[i].label;const result=res[i];// const dec = labelArr[i].dec\nif(!list[k])list[k]={};// list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\n// list[k][l] = result\nif(result){for(const obj of result){if(obj&&!obj.error_code){const type=obj.type;const tokenKey=type.replace('0x1::coin::CoinStore<','').replace('>','');if(tokenKey===k){list[k][l]=obj.data.coin.value;break;}}}}}// console.log(list)\nresolve(list);}).catch(error=>{console.log(error);resolve(list);});});},[]);return{getAptPoolDatas};}","map":{"version":3,"names":["useCallback","useMemo","useTranslation","useDispatch","useSelector","nonevmAddress","useActiveReact","config","useInterfaceBalanceValidManager","BigAmount","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","tryParseAmount3","ChainId","aptAddressReg","isAptosAddress","address","test","useLoginAptos","dispatch","loginAptos","chainId","_window","window","aptos","connect","then","res","console","log","account","catch","error","confirm","open","useAptosBalance","aptBalanceList","state","apt","getAptosResource","token","arguments","length","undefined","rpc","chainInfo","nodeRpc","options","method","headers","url","result","fetch","response","json","err","bytecode","useAptAllowance","setAptAllowance","anytoken","Promise","resolve","reject","curAccount","alert","APT","APT_TEST","includes","transaction","function","type","txResult","signAndSubmitTransaction","hash","getAptTxnsStatus","txid","data","concat","success","msg","info","toString","useAptCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","userInterfaceBalanceValid","inputAmount","decimals","balance","_aptBalanceList$token","_aptBalanceList$token3","_aptBalanceList$token4","tokenType","_aptBalanceList$token2","format","_aptBalanceList$token5","sufficientBalance","Number","toExact","execute","txReceipt","value","formatvalue","to","symbol","version","pairid","summary","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError","useAptSwapPoolCallback","swapType","inputCurrency","_aptBalanceList$token6","_aptBalanceList$token8","_aptBalanceList$token9","_aptBalanceList$token7","_aptBalanceList$token10","getBaseCoin","useAptPoolDatas","getAptPoolDatas","calls","arr","labelArr","item","split","anytokenSource","underlyingToken","push","key","label","dec","list","all","i","len","k","l","obj","error_code","tokenKey","replace","coin"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/apt/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport config from '../../config'\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\n\nimport {BigAmount} from '../../utils/formatBignumber'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n\n\n// import {AptosClient} from 'aptos'\n// import {connect} from 'Aptos-api-js'\n// console.log(Aptos)\n// const {AptosClient} = require('aptos')\n\n// function getClient (chainId:any) {\n//   const rpc = config.chainInfo[chainId].nodeRpc\n//   // return new AptosClient(rpc)\n//   return rpc\n// }\nconst aptAddressReg = /^0x[0-9A-Za-z]{64}$/\nexport function isAptosAddress (address: string) {\n  if (aptAddressReg.test(address)) {\n    return address\n  }\n  return false\n}\n\n/**\n * Connect wallet and get account address\n */\n export function useLoginAptos() {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginAptos = useCallback(async(chainId) => {\n    if (window?.aptos) {\n      window.aptos.connect().then((res:any) => {\n        console.log(res)\n        if (res?.address) {\n          dispatch(nonevmAddress({chainId, account: res.address}))\n        } else {\n          dispatch(nonevmAddress({chainId, account: ''}))\n        }\n      }).catch((error:any) => {\n        console.log(error)\n        dispatch(nonevmAddress({chainId, account: ''}))\n      })\n    } else {\n      if (confirm('Please install Petra Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/petra/ejjladinnckdgjemekebdpeokbikhfci')\n      }\n    }\n  }, [])\n\n  return {\n    loginAptos\n  }\n}\n\n/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */\n export function useAptosBalance () {\n\n  const aptBalanceList:any = useSelector<AppState, AppState['apt']>(state => state.apt.aptBalanceList)\n  // const getAptosResource = useCallback(async ({address, res_type}: {address: string | object, res_type: string | null = null}) => {\n  // const getAptosResource = (async function (address: string | object, res_type: string | null = null) {\n  const getAptosResource = useCallback(async function (chainId:any, address: any, token: string | null = null) {\n    // console.log(chainId, address, token)\n    // console.log(isAptosAddress(address))\n    if (!isAptosAddress(address)) { return null }\n    const rpc = config.chainInfo[chainId].nodeRpc\n    const options = {method: 'GET', headers: {'Content-Type': 'application/json'}};\n    let url \n    if (!token) {\n      url = rpc + \"/v1/accounts/\" + address +\"/resources\";\n    } else {\n      url = rpc + \"/v1/accounts/\" + address +\"/resource/\" + token;\n    }\n    const result = await fetch(url, options)\n      .then((response) => response.json())\n      .catch(err => console.error(err));\n      // console.log(result)\n    return result;\n  }, [])\n\n  return {\n    getAptosResource,\n    aptBalanceList\n    // getAptosTokenBalance,\n  }\n}\n\n/**\n * Authorization and obtaining authorization information\n *\n * @param account wallet address\n * @param token token address\n * @param spender spender address\n */\nexport const bytecode = 'a11ceb0b0500000006010004030411041508051d0e072b36086120000000010102000100000301040100000400020100010302030105020501060c010500010900010101090104636f696e067369676e65720a616464726573735f6f661569735f6163636f756e745f7265676973746572656408726567697374657200000000000000000000000000000000000000000000000000000000000000010200000001150a0011000c010a013800200308050a0a0038010b01380220030f05120b00380305140b000102'\nexport function useAptAllowance() {\n  const setAptAllowance = useCallback((\n    token: string | null | undefined,\n    chainId: any,\n    account: string | null | undefined,\n    anytoken?: any\n  ): Promise<any> => {\n    return new Promise(async(resolve, reject) => {\n      const curAccount = await window.aptos.account()\n      if (curAccount?.address !== account) {\n        alert('This address is not the current wallet address. Please switch wallets.')\n      } else {\n        if (token && account && chainId && [ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n          const transaction = {\n            arguments: [],\n            function: '0x1::managed_coin::register',\n            type: 'entry_function_payload',\n            'type_arguments': [token],\n          }\n          // const transaction = {\n          //   arguments: [],\n          //   code: {\n          //     bytecode: bytecode\n          //   },\n          //   function: '0x1::coin::transfer',\n          //   type: 'script_payload',\n          //   'type_arguments': [token, anytoken ? anytoken : token],\n          // }\n          console.log(anytoken)\n          console.log(transaction)\n          try {\n            const txResult:any = await (window as any).aptos.signAndSubmitTransaction(transaction);\n            console.log(txResult)\n            resolve({hash: txResult?.hash})\n          } catch (error) {\n            reject(error)\n          }\n        } else {\n          reject('Parameter error.')\n        }\n      }\n    })\n  }, [])\n\n  return {\n    setAptAllowance,\n  }\n}\n\n/**\n * Get transaction info\n *\n * @param txid transaction hash\n */\nexport function getAptTxnsStatus (txid:string, chainId:any) {\n  return new Promise(resolve => {\n    const data:any = {}\n    if (txid) {\n      const rpc = config.chainInfo[chainId].nodeRpc\n      const url = `${rpc}/v1/transactions/by_hash/${txid}`\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n      fetch(url).then(res => res.json()).then(json => {\n        console.log(json)\n        if (json) {\n          if (json.success === true) {\n            data.msg = 'Success'\n            data.info = json\n          } else if (json.success === false) {\n            data.msg = 'Failure'\n            data.error = 'Txns is failure!'\n          } else {\n            data.msg = 'Null'\n            data.error = 'Query is empty!'\n          }\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      }).catch(err => {\n        console.log(err.toString())\n        data.error = 'Query is empty!'\n        resolve(data)\n      })\n    } else {\n      data.msg = 'Null'\n      data.error = 'Query is empty!'\n      resolve(data)\n    }\n  })\n}\n// getAptTxnsStatus('0x013dbfba6bee428b70a66603a306dd95044e7e16a7bcddef094154a11b62f070', 'APT_TEST')\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */\nexport function useAptCrossChain (\n  routerToken: string | null | undefined,\n  inputToken: string | null | undefined,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: any,\n  typedValue: any,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {aptBalanceList} = useAptosBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (selectCurrency?.tokenType === 'NATIVE' && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(8, aptBalanceList?.[token]?.balance)\n      } else if (aptBalanceList?.[token]?.balance && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(selectCurrency?.decimals, aptBalanceList?.[token]?.balance)\n      }\n      return BigAmount.format(selectCurrency?.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, aptBalanceList])\n\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    // console.log(sufficientBalance)\n    // console.log(balance ? balance?.toExact() : '')\n    // console.log(typedValue)\n    if (!account || !chainId || !selectCurrency || !receiveAddress || !useToChainId) return {}\n    return {\n      balance: balance,\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n      ? async () => {\n\n        const transaction = {\n          arguments: [inputAmount, receiveAddress, useToChainId],\n          function: routerToken + '::Router::swapout',\n          type: 'entry_function_payload',\n          'type_arguments': [selectCurrency.address],\n        }\n        console.log(transaction)\n        try {\n          const txReceipt:any = await (window as any).aptos.signAndSubmitTransaction(transaction);\n          console.log(txReceipt)\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig?.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (error) {\n          // reject(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, useToChainId, userInterfaceBalanceValid])\n}\n\n\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param selectCurrency select current token info\n * @param inputToken any or underlying address\n * @param typedValue typed Value\n * @param swapType deposit or withdraw\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param destConfig to chain info\n */\nexport function useAptSwapPoolCallback(\n  routerToken: string | null | undefined,\n  selectCurrency: any,\n  inputToken: string | null | undefined,\n  typedValue: any,\n  swapType: any,\n  selectChain: any,\n  receiveAddress: string | null | undefined,\n  destConfig: any,\n  inputCurrency: any,\n  useToChainId: any,\n): { execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { account, chainId } = useActiveReact()\n  const {aptBalanceList} = useAptosBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (selectCurrency?.tokenType === 'NATIVE' && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(8, aptBalanceList?.[token]?.balance)\n      } else if (aptBalanceList?.[token]?.balance && aptBalanceList?.[token]?.balance) {\n        return BigAmount.format(selectCurrency.decimals, aptBalanceList?.[token]?.balance)\n      }\n      return BigAmount.format(selectCurrency.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, aptBalanceList])\n\n  let sufficientBalance = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    if (!account || !chainId || !selectCurrency || !swapType) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n\n        let transaction = {}\n        if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n          transaction = {\n            arguments: [inputAmount, receiveAddress, useToChainId],\n            function: routerToken + '::Router::swapout',\n            type: 'entry_function_payload',\n            'type_arguments': [inputToken],\n          }\n        } else {\n          if (swapType === 'deposit') {\n            transaction = {\n              arguments: [inputAmount],\n              function: routerToken + '::Pool::deposit',\n              type: 'entry_function_payload',\n              'type_arguments': [inputCurrency.address,inputToken],\n            }\n          } else {\n            transaction = {\n              arguments: [inputAmount],\n              function: routerToken + '::Pool::withdraw',\n              type: 'entry_function_payload',\n              'type_arguments': [inputToken, inputCurrency.address],\n            }\n          }\n        }\n        console.log(transaction)\n        try {\n          const txReceipt:any = await (window as any).aptos.signAndSubmitTransaction(transaction);\n          console.log(txReceipt)\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            if (chainId.toString() !== selectChain.toString() && swapType !== 'deposit') {\n\n              const data:any = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency?.symbol,\n                routerToken: routerToken\n              }\n              addTransaction(txReceipt, {\n                summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress?.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig?.type,\n                routerToken: routerToken,\n                token: selectCurrency?.address,\n                logoUrl: selectCurrency?.logoUrl,\n                isLiquidity: destConfig?.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency?.symbol,\n                  name: selectCurrency?.name,\n                  decimals: selectCurrency?.decimals,\n                  address: selectCurrency?.address,\n                },\n                toInfo: {\n                  symbol: destConfig?.symbol,\n                  name: destConfig?.name,\n                  decimals: destConfig?.decimals,\n                  address: destConfig?.address,\n                },\n              })\n              recordsTxns(data)\n              onChangeViewDtil(txReceipt?.hash, true)\n            } else {\n              addTransaction(txReceipt, { summary: `${swapType === 'deposit' ? 'Deposit' : 'Withdraw'} ${typedValue} ${config.getBaseCoin(selectCurrency?.symbol, chainId)}` })\n            }\n          }\n        } catch (error) {\n          // reject(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, inputCurrency, useToChainId])\n}\n\n\n/**\n * Get pool info\n *\n * @param chainId router token address\n * @param calls [{token: '', anytoken: '', account: ''}]\n * @return {'anytoken': {'balanceOf': '', 'totalSupply': '', 'balance': ''}}\n */\nexport function useAptPoolDatas () {\n  const {getAptosResource} = useAptosBalance()\n  const getAptPoolDatas = useCallback(async(calls: any, chainId: any): Promise<void> => {\n    return new Promise(resolve => {\n      const arr = []\n      const labelArr:any = []\n      // console.log(calls)\n      if ([ChainId.APT, ChainId.APT_TEST].includes(chainId) ) {\n        // console.log(calls)\n        // const useAccount = window.tronWeb.defaultAddress.base58\n        for (const item of calls) {\n          const anytoken = item.anytoken ? item.anytoken.split('::')[0] : ''\n          const anytokenSource = item.anytoken\n          const underlyingToken = item.token\n          // console.log('anytoken', anytoken)\n          // console.log('underlyingToken', underlyingToken)\n          if (underlyingToken && anytoken) {\n            // console.log(underlyingToken, anytoken)\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            arr.push(getAptosResource(chainId, anytoken))\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(underlyingToken, \"balanceOf(address)\", {}, {type:'address',value: anytoken}, useAccount))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balanceOf',\n              dec: item.dec\n            })\n          }\n          // console.log(item)\n          // console.log(chainId)\n          if (anytoken && isAptosAddress(item.account)) {\n            // arr.push(window?.tronWeb?.transactionBuilder.triggerSmartContract(anytoken, \"balanceOf(address)\", {}, {type:'address',value: item.account}, useAccount))\n            arr.push(getAptosResource(chainId, item.account))\n            labelArr.push({\n              key: anytokenSource,\n              label: 'balance',\n              dec: item.dec\n            })\n          }\n        }\n      }\n      // console.log(arr)\n      const list:any = {}\n      Promise.all(arr).then(res => {\n        // console.log(res)\n        for (let i = 0, len = arr.length; i < len; i++) {\n          const k = labelArr[i].key\n          const l = labelArr[i].label\n          const result = res[i]\n          // const dec = labelArr[i].dec\n          if (!list[k]) list[k] = {}\n          // list[k][l] = res[i] ? BigAmount.format(dec, res[i].toString()).toExact() : ''\n          // list[k][l] = result\n          if (result) {\n            for (const obj of result) {\n              if (obj && !obj.error_code) {\n                const type = obj.type\n                const tokenKey = type.replace('0x1::coin::CoinStore<', '').replace('>', '')\n                if (tokenKey === k) {\n                  list[k][l] = obj.data.coin.value\n                  break\n                }\n              }\n            }\n          }\n        }\n        // console.log(list)\n        resolve(list)\n      }).catch((error:any) => {\n        console.log(error)\n        resolve(list)\n      })\n    })\n  }, [])\n  return {\n    getAptPoolDatas\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}