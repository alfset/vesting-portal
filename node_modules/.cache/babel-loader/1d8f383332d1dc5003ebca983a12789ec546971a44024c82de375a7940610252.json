{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.montgomery = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst modular_js_1 = require(\"./modular.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction validateOpts(curve) {\n  (0, utils_js_1.validateObject)(curve, {\n    a: 'bigint'\n  }, {\n    montgomeryBits: 'isSafeInteger',\n    nByteLength: 'isSafeInteger',\n    adjustScalarBytes: 'function',\n    domain: 'function',\n    powPminus2: 'function',\n    Gu: 'bigint'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...curve\n  });\n}\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nfunction montgomery(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    P\n  } = CURVE;\n  const modP = n => (0, modular_js_1.mod)(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || (bytes => bytes);\n  const powPminus2 = CURVE.powPminus2 || (x => (0, modular_js_1.pow)(x, P - BigInt(2), P));\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap, x_2, x_3) {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n  // Accepts 0 as well\n  function assertFieldElement(n) {\n    if (typeof n === 'bigint' && _0n <= n && n < P) return n;\n    throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n  }\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(pointU, scalar) {\n    const u = assertFieldElement(pointU);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = assertFieldElement(scalar);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = k >> t & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n  function encodeUCoordinate(u) {\n    return (0, utils_js_1.numberToBytesLE)(modP(u), montgomeryBytes);\n  }\n  function decodeUCoordinate(uEnc) {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    // This is very ugly way, but it works because fieldLen-1 is outside of bounds for X448, so this becomes NOOP\n    // fieldLen - scalaryBytes = 1 for X448 and = 0 for X25519\n    const u = (0, utils_js_1.ensureBytes)('u coordinate', uEnc, montgomeryBytes);\n    // u[fieldLen-1] crashes QuickJS (TypeError: out-of-bound numeric index)\n    if (fieldLen === montgomeryBytes) u[fieldLen - 1] &= 127; // 0b0111_1111\n    return (0, utils_js_1.bytesToNumberLE)(u);\n  }\n  function decodeScalar(n) {\n    const bytes = (0, utils_js_1.ensureBytes)('scalar', n);\n    if (bytes.length !== montgomeryBytes && bytes.length !== fieldLen) throw new Error(\"Expected \".concat(montgomeryBytes, \" or \").concat(fieldLen, \" bytes, got \").concat(bytes.length));\n    return (0, utils_js_1.bytesToNumberLE)(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar, u) {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar) {\n    return scalarMult(scalar, GuBytes);\n  }\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),\n    getPublicKey: privateKey => scalarMultBase(privateKey),\n    utils: {\n      randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength)\n    },\n    GuBytes: GuBytes\n  };\n}\nexports.montgomery = montgomery;","map":{"version":3,"names":["modular_js_1","require","utils_js_1","_0n","BigInt","_1n","validateOpts","curve","validateObject","a","montgomeryBits","nByteLength","adjustScalarBytes","domain","powPminus2","Gu","Object","freeze","montgomery","curveDef","CURVE","P","modP","n","mod","montgomeryBytes","Math","ceil","fieldLen","bytes","x","pow","cswap","swap","x_2","x_3","dummy","assertFieldElement","Error","a24","montgomeryLadder","pointU","scalar","u","k","x_1","z_2","z_3","sw","t","k_t","A","AA","B","BB","E","C","D","DA","CB","dacb","da_cb","z2","encodeUCoordinate","numberToBytesLE","decodeUCoordinate","uEnc","ensureBytes","bytesToNumberLE","decodeScalar","length","concat","scalarMult","_scalar","pu","GuBytes","scalarMultBase","getSharedSecret","privateKey","publicKey","getPublicKey","utils","randomPrivateKey","randomBytes","exports"],"sources":["../src/abstract/montgomery.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA;AACA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAEA,MAAME,GAAG,GAAGC,MAAM,CAAC,CAAC,CAAC;AACrB,MAAMC,GAAG,GAAGD,MAAM,CAAC,CAAC,CAAC;AAwBrB,SAASE,YAAYA,CAACC,KAAgB;EACpC,IAAAL,UAAA,CAAAM,cAAc,EACZD,KAAK,EACL;IACEE,CAAC,EAAE;GACJ,EACD;IACEC,cAAc,EAAE,eAAe;IAC/BC,WAAW,EAAE,eAAe;IAC5BC,iBAAiB,EAAE,UAAU;IAC7BC,MAAM,EAAE,UAAU;IAClBC,UAAU,EAAE,UAAU;IACtBC,EAAE,EAAE;GACL,CACF;EACD;EACA,OAAOC,MAAM,CAACC,MAAM,CAAC;IAAE,GAAGV;EAAK,CAAW,CAAC;AAC7C;AAEA;AACA;AACA,SAAgBW,UAAUA,CAACC,QAAmB;EAC5C,MAAMC,KAAK,GAAGd,YAAY,CAACa,QAAQ,CAAC;EACpC,MAAM;IAAEE;EAAC,CAAE,GAAGD,KAAK;EACnB,MAAME,IAAI,GAAIC,CAAS,IAAK,IAAAvB,YAAA,CAAAwB,GAAG,EAACD,CAAC,EAAEF,CAAC,CAAC;EACrC,MAAMX,cAAc,GAAGU,KAAK,CAACV,cAAc;EAC3C,MAAMe,eAAe,GAAGC,IAAI,CAACC,IAAI,CAACjB,cAAc,GAAG,CAAC,CAAC;EACrD,MAAMkB,QAAQ,GAAGR,KAAK,CAACT,WAAW;EAClC,MAAMC,iBAAiB,GAAGQ,KAAK,CAACR,iBAAiB,KAAMiB,KAAiB,IAAKA,KAAK,CAAC;EACnF,MAAMf,UAAU,GAAGM,KAAK,CAACN,UAAU,KAAMgB,CAAS,IAAK,IAAA9B,YAAA,CAAA+B,GAAG,EAACD,CAAC,EAAET,CAAC,GAAGjB,MAAM,CAAC,CAAC,CAAC,EAAEiB,CAAC,CAAC,CAAC;EAEhF;EACA;;;;;;;;;EASA,SAASW,KAAKA,CAACC,IAAY,EAAEC,GAAW,EAAEC,GAAW;IACnD,MAAMC,KAAK,GAAGd,IAAI,CAACW,IAAI,IAAIC,GAAG,GAAGC,GAAG,CAAC,CAAC;IACtCD,GAAG,GAAGZ,IAAI,CAACY,GAAG,GAAGE,KAAK,CAAC;IACvBD,GAAG,GAAGb,IAAI,CAACa,GAAG,GAAGC,KAAK,CAAC;IACvB,OAAO,CAACF,GAAG,EAAEC,GAAG,CAAC;EACnB;EAEA;EACA,SAASE,kBAAkBA,CAACd,CAAS;IACnC,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIpB,GAAG,IAAIoB,CAAC,IAAIA,CAAC,GAAGF,CAAC,EAAE,OAAOE,CAAC;IACxD,MAAM,IAAIe,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA;EACA;EACA,MAAMC,GAAG,GAAG,CAACnB,KAAK,CAACX,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC;EAC7C;;;;;;EAMA,SAASoC,gBAAgBA,CAACC,MAAc,EAAEC,MAAc;IACtD,MAAMC,CAAC,GAAGN,kBAAkB,CAACI,MAAM,CAAC;IACpC;IACA;IACA,MAAMG,CAAC,GAAGP,kBAAkB,CAACK,MAAM,CAAC;IACpC,MAAMG,GAAG,GAAGF,CAAC;IACb,IAAIT,GAAG,GAAG7B,GAAG;IACb,IAAIyC,GAAG,GAAG3C,GAAG;IACb,IAAIgC,GAAG,GAAGQ,CAAC;IACX,IAAII,GAAG,GAAG1C,GAAG;IACb,IAAI4B,IAAI,GAAG9B,GAAG;IACd,IAAI6C,EAAoB;IACxB,KAAK,IAAIC,CAAC,GAAG7C,MAAM,CAACM,cAAc,GAAG,CAAC,CAAC,EAAEuC,CAAC,IAAI9C,GAAG,EAAE8C,CAAC,EAAE,EAAE;MACtD,MAAMC,GAAG,GAAIN,CAAC,IAAIK,CAAC,GAAI5C,GAAG;MAC1B4B,IAAI,IAAIiB,GAAG;MACXF,EAAE,GAAGhB,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,CAAC;MAC1BD,GAAG,GAAGc,EAAE,CAAC,CAAC,CAAC;MACXb,GAAG,GAAGa,EAAE,CAAC,CAAC,CAAC;MACXA,EAAE,GAAGhB,KAAK,CAACC,IAAI,EAAEa,GAAG,EAAEC,GAAG,CAAC;MAC1BD,GAAG,GAAGE,EAAE,CAAC,CAAC,CAAC;MACXD,GAAG,GAAGC,EAAE,CAAC,CAAC,CAAC;MACXf,IAAI,GAAGiB,GAAG;MAEV,MAAMC,CAAC,GAAGjB,GAAG,GAAGY,GAAG;MACnB,MAAMM,EAAE,GAAG9B,IAAI,CAAC6B,CAAC,GAAGA,CAAC,CAAC;MACtB,MAAME,CAAC,GAAGnB,GAAG,GAAGY,GAAG;MACnB,MAAMQ,EAAE,GAAGhC,IAAI,CAAC+B,CAAC,GAAGA,CAAC,CAAC;MACtB,MAAME,CAAC,GAAGH,EAAE,GAAGE,EAAE;MACjB,MAAME,CAAC,GAAGrB,GAAG,GAAGY,GAAG;MACnB,MAAMU,CAAC,GAAGtB,GAAG,GAAGY,GAAG;MACnB,MAAMW,EAAE,GAAGpC,IAAI,CAACmC,CAAC,GAAGN,CAAC,CAAC;MACtB,MAAMQ,EAAE,GAAGrC,IAAI,CAACkC,CAAC,GAAGH,CAAC,CAAC;MACtB,MAAMO,IAAI,GAAGF,EAAE,GAAGC,EAAE;MACpB,MAAME,KAAK,GAAGH,EAAE,GAAGC,EAAE;MACrBxB,GAAG,GAAGb,IAAI,CAACsC,IAAI,GAAGA,IAAI,CAAC;MACvBb,GAAG,GAAGzB,IAAI,CAACuB,GAAG,GAAGvB,IAAI,CAACuC,KAAK,GAAGA,KAAK,CAAC,CAAC;MACrC3B,GAAG,GAAGZ,IAAI,CAAC8B,EAAE,GAAGE,EAAE,CAAC;MACnBR,GAAG,GAAGxB,IAAI,CAACiC,CAAC,IAAIH,EAAE,GAAG9B,IAAI,CAACiB,GAAG,GAAGgB,CAAC,CAAC,CAAC,CAAC;;IAEtC;IACAP,EAAE,GAAGhB,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,CAAC;IAC1BD,GAAG,GAAGc,EAAE,CAAC,CAAC,CAAC;IACXb,GAAG,GAAGa,EAAE,CAAC,CAAC,CAAC;IACX;IACAA,EAAE,GAAGhB,KAAK,CAACC,IAAI,EAAEa,GAAG,EAAEC,GAAG,CAAC;IAC1BD,GAAG,GAAGE,EAAE,CAAC,CAAC,CAAC;IACXD,GAAG,GAAGC,EAAE,CAAC,CAAC,CAAC;IACX;IACA,MAAMc,EAAE,GAAGhD,UAAU,CAACgC,GAAG,CAAC;IAC1B;IACA,OAAOxB,IAAI,CAACY,GAAG,GAAG4B,EAAE,CAAC;EACvB;EAEA,SAASC,iBAAiBA,CAACpB,CAAS;IAClC,OAAO,IAAAzC,UAAA,CAAA8D,eAAe,EAAC1C,IAAI,CAACqB,CAAC,CAAC,EAAElB,eAAe,CAAC;EAClD;EAEA,SAASwC,iBAAiBA,CAACC,IAAS;IAClC;IACA;IACA;IACA;IACA,MAAMvB,CAAC,GAAG,IAAAzC,UAAA,CAAAiE,WAAW,EAAC,cAAc,EAAED,IAAI,EAAEzC,eAAe,CAAC;IAC5D;IACA,IAAIG,QAAQ,KAAKH,eAAe,EAAEkB,CAAC,CAACf,QAAQ,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;IAC1D,OAAO,IAAA1B,UAAA,CAAAkE,eAAe,EAACzB,CAAC,CAAC;EAC3B;EACA,SAAS0B,YAAYA,CAAC9C,CAAM;IAC1B,MAAMM,KAAK,GAAG,IAAA3B,UAAA,CAAAiE,WAAW,EAAC,QAAQ,EAAE5C,CAAC,CAAC;IACtC,IAAIM,KAAK,CAACyC,MAAM,KAAK7C,eAAe,IAAII,KAAK,CAACyC,MAAM,KAAK1C,QAAQ,EAC/D,MAAM,IAAIU,KAAK,aAAAiC,MAAA,CAAa9C,eAAe,UAAA8C,MAAA,CAAO3C,QAAQ,kBAAA2C,MAAA,CAAe1C,KAAK,CAACyC,MAAM,CAAE,CAAC;IAC1F,OAAO,IAAApE,UAAA,CAAAkE,eAAe,EAACxD,iBAAiB,CAACiB,KAAK,CAAC,CAAC;EAClD;EACA,SAAS2C,UAAUA,CAAC9B,MAAW,EAAEC,CAAM;IACrC,MAAMF,MAAM,GAAGwB,iBAAiB,CAACtB,CAAC,CAAC;IACnC,MAAM8B,OAAO,GAAGJ,YAAY,CAAC3B,MAAM,CAAC;IACpC,MAAMgC,EAAE,GAAGlC,gBAAgB,CAACC,MAAM,EAAEgC,OAAO,CAAC;IAC5C;IACA;IACA,IAAIC,EAAE,KAAKvE,GAAG,EAAE,MAAM,IAAImC,KAAK,CAAC,wCAAwC,CAAC;IACzE,OAAOyB,iBAAiB,CAACW,EAAE,CAAC;EAC9B;EACA;EACA,MAAMC,OAAO,GAAGZ,iBAAiB,CAAC3C,KAAK,CAACL,EAAE,CAAC;EAC3C,SAAS6D,cAAcA,CAAClC,MAAW;IACjC,OAAO8B,UAAU,CAAC9B,MAAM,EAAEiC,OAAO,CAAC;EACpC;EAEA,OAAO;IACLH,UAAU;IACVI,cAAc;IACdC,eAAe,EAAEA,CAACC,UAAe,EAAEC,SAAc,KAAKP,UAAU,CAACM,UAAU,EAAEC,SAAS,CAAC;IACvFC,YAAY,EAAGF,UAAe,IAAiBF,cAAc,CAACE,UAAU,CAAC;IACzEG,KAAK,EAAE;MAAEC,gBAAgB,EAAEA,CAAA,KAAM9D,KAAK,CAAC+D,WAAY,CAAC/D,KAAK,CAACT,WAAW;IAAC,CAAE;IACxEgE,OAAO,EAAEA;GACV;AACH;AA1IAS,OAAA,CAAAlE,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}