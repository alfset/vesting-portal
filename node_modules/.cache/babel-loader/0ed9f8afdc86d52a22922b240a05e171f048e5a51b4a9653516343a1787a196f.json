{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.payment = payment;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Create a payment operation.\n *\n * @function\n * @alias Operation.payment\n * @see https://developers.stellar.org/docs/start/list-of-operations/#payment\n *\n * @param {object}  opts - Options object\n * @param {string}  opts.destination  - destination account ID\n * @param {Asset}   opts.asset        - asset to send\n * @param {string}  opts.amount       - amount to send\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)\n */\nfunction payment(opts) {\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  var attributes = {};\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _xdr2.default.PaymentOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","payment","_xdr","require","_xdr2","_interopRequireDefault","_decode_encode_muxed_account","obj","__esModule","default","opts","asset","Error","isValidAmount","amount","TypeError","constructAmountRequirementsError","attributes","destination","decodeAddressToMuxedAccount","e","toXDRObject","_toXDRAmount","paymentOp","PaymentOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/payment.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.payment = payment;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a payment operation.\n *\n * @function\n * @alias Operation.payment\n * @see https://developers.stellar.org/docs/start/list-of-operations/#payment\n *\n * @param {object}  opts - Options object\n * @param {string}  opts.destination  - destination account ID\n * @param {Asset}   opts.asset        - asset to send\n * @param {string}  opts.amount       - amount to send\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)\n */\nfunction payment(opts) {\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  var attributes = {};\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _xdr2.default.PaymentOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGA,OAAO;AAEzB,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,IAAII,4BAA4B,GAAGH,OAAO,CAAC,qCAAqC,CAAC;AAEjF,SAASE,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,OAAOA,CAACS,IAAI,EAAE;EACrB,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;EAClE;EACA,IAAI,CAAC,IAAI,CAACC,aAAa,CAACH,IAAI,CAACI,MAAM,CAAC,EAAE;IACpC,MAAM,IAAIC,SAAS,CAAC,IAAI,CAACC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;EACtE;EAEA,IAAIC,UAAU,GAAG,CAAC,CAAC;EACnB,IAAI;IACFA,UAAU,CAACC,WAAW,GAAG,CAAC,CAAC,EAAEZ,4BAA4B,CAACa,2BAA2B,EAAET,IAAI,CAACQ,WAAW,CAAC;EAC1G,CAAC,CAAC,OAAOE,CAAC,EAAE;IACV,MAAM,IAAIR,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEAK,UAAU,CAACN,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACU,WAAW,CAAC,CAAC;EAC3CJ,UAAU,CAACH,MAAM,GAAG,IAAI,CAACQ,YAAY,CAACZ,IAAI,CAACI,MAAM,CAAC;EAClD,IAAIS,SAAS,GAAG,IAAInB,KAAK,CAACK,OAAO,CAACe,SAAS,CAACP,UAAU,CAAC;EAEvD,IAAIQ,YAAY,GAAG,CAAC,CAAC;EACrBA,YAAY,CAACC,IAAI,GAAGtB,KAAK,CAACK,OAAO,CAACkB,aAAa,CAAC1B,OAAO,CAACsB,SAAS,CAAC;EAClE,IAAI,CAACK,gBAAgB,CAACH,YAAY,EAAEf,IAAI,CAAC;EAEzC,OAAO,IAAIN,KAAK,CAACK,OAAO,CAACoB,SAAS,CAACJ,YAAY,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}