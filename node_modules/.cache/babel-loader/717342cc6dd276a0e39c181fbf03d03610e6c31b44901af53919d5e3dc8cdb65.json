{"ast":null,"code":"const createHmac = require('create-hmac');\nconst ONE1 = Buffer.alloc(1, 1);\nconst ZERO1 = Buffer.alloc(1, 0);\n\n// https://tools.ietf.org/html/rfc6979#section-3.2\nfunction deterministicGenerateK(hash, x, checkSig, isPrivate, extraEntropy) {\n  // Step A, ignored as hash already provided\n  // Step B\n  // Step C\n  let k = Buffer.alloc(32, 0);\n  let v = Buffer.alloc(32, 1);\n\n  // Step D\n  k = createHmac('sha256', k).update(v).update(ZERO1).update(x).update(hash).update(extraEntropy || '').digest();\n\n  // Step E\n  v = createHmac('sha256', k).update(v).digest();\n\n  // Step F\n  k = createHmac('sha256', k).update(v).update(ONE1).update(x).update(hash).update(extraEntropy || '').digest();\n\n  // Step G\n  v = createHmac('sha256', k).update(v).digest();\n\n  // Step H1/H2a, ignored as tlen === qlen (256 bit)\n  // Step H2b\n  v = createHmac('sha256', k).update(v).digest();\n  let T = v;\n\n  // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA\n  while (!isPrivate(T) || !checkSig(T)) {\n    k = createHmac('sha256', k).update(v).update(ZERO1).digest();\n    v = createHmac('sha256', k).update(v).digest();\n\n    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)\n    // Step H2b again\n    v = createHmac('sha256', k).update(v).digest();\n    T = v;\n  }\n  return T;\n}\nmodule.exports = deterministicGenerateK;","map":{"version":3,"names":["createHmac","require","ONE1","Buffer","alloc","ZERO1","deterministicGenerateK","hash","x","checkSig","isPrivate","extraEntropy","k","v","update","digest","T","module","exports"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/tiny-secp256k1/rfc6979.js"],"sourcesContent":["const createHmac = require('create-hmac')\n\nconst ONE1 = Buffer.alloc(1, 1)\nconst ZERO1 = Buffer.alloc(1, 0)\n\n// https://tools.ietf.org/html/rfc6979#section-3.2\nfunction deterministicGenerateK (hash, x, checkSig, isPrivate, extraEntropy) {\n  // Step A, ignored as hash already provided\n  // Step B\n  // Step C\n  let k = Buffer.alloc(32, 0)\n  let v = Buffer.alloc(32, 1)\n\n  // Step D\n  k = createHmac('sha256', k)\n    .update(v)\n    .update(ZERO1)\n    .update(x)\n    .update(hash)\n    .update(extraEntropy || '')\n    .digest()\n\n  // Step E\n  v = createHmac('sha256', k).update(v).digest()\n\n  // Step F\n  k = createHmac('sha256', k)\n    .update(v)\n    .update(ONE1)\n    .update(x)\n    .update(hash)\n    .update(extraEntropy || '')\n    .digest()\n\n  // Step G\n  v = createHmac('sha256', k).update(v).digest()\n\n  // Step H1/H2a, ignored as tlen === qlen (256 bit)\n  // Step H2b\n  v = createHmac('sha256', k).update(v).digest()\n\n  let T = v\n\n  // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA\n  while (!isPrivate(T) || !checkSig(T)) {\n    k = createHmac('sha256', k)\n      .update(v)\n      .update(ZERO1)\n      .digest()\n\n    v = createHmac('sha256', k).update(v).digest()\n\n    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)\n    // Step H2b again\n    v = createHmac('sha256', k).update(v).digest()\n    T = v\n  }\n\n  return T\n}\n\nmodule.exports = deterministicGenerateK\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAC/B,MAAMC,KAAK,GAAGF,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;AAEhC;AACA,SAASE,sBAAsBA,CAAEC,IAAI,EAAEC,CAAC,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,YAAY,EAAE;EAC3E;EACA;EACA;EACA,IAAIC,CAAC,GAAGT,MAAM,CAACC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;EAC3B,IAAIS,CAAC,GAAGV,MAAM,CAACC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;;EAE3B;EACAQ,CAAC,GAAGZ,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CACxBE,MAAM,CAACD,CAAC,CAAC,CACTC,MAAM,CAACT,KAAK,CAAC,CACbS,MAAM,CAACN,CAAC,CAAC,CACTM,MAAM,CAACP,IAAI,CAAC,CACZO,MAAM,CAACH,YAAY,IAAI,EAAE,CAAC,CAC1BI,MAAM,CAAC,CAAC;;EAEX;EACAF,CAAC,GAAGb,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC;;EAE9C;EACAH,CAAC,GAAGZ,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CACxBE,MAAM,CAACD,CAAC,CAAC,CACTC,MAAM,CAACZ,IAAI,CAAC,CACZY,MAAM,CAACN,CAAC,CAAC,CACTM,MAAM,CAACP,IAAI,CAAC,CACZO,MAAM,CAACH,YAAY,IAAI,EAAE,CAAC,CAC1BI,MAAM,CAAC,CAAC;;EAEX;EACAF,CAAC,GAAGb,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC;;EAE9C;EACA;EACAF,CAAC,GAAGb,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC;EAE9C,IAAIC,CAAC,GAAGH,CAAC;;EAET;EACA,OAAO,CAACH,SAAS,CAACM,CAAC,CAAC,IAAI,CAACP,QAAQ,CAACO,CAAC,CAAC,EAAE;IACpCJ,CAAC,GAAGZ,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CACxBE,MAAM,CAACD,CAAC,CAAC,CACTC,MAAM,CAACT,KAAK,CAAC,CACbU,MAAM,CAAC,CAAC;IAEXF,CAAC,GAAGb,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC;;IAE9C;IACA;IACAF,CAAC,GAAGb,UAAU,CAAC,QAAQ,EAAEY,CAAC,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC;IAC9CC,CAAC,GAAGH,CAAC;EACP;EAEA,OAAOG,CAAC;AACV;AAEAC,MAAM,CAACC,OAAO,GAAGZ,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}