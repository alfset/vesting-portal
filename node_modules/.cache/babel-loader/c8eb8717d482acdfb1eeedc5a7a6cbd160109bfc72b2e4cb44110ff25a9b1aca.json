{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nimport { MsgSend, Coins,\n// MsgExecuteContract,\nFee, LCDClient, Coin\n// CreateTxOptions,\n} from '@terra-money/terra.js';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport _ from 'lodash';\nimport currency from './currency';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { ChainId } from '../../config/chainConfig/chainId';\nexport let AssetNativeDenomEnum = /*#__PURE__*/function (AssetNativeDenomEnum) {\n  AssetNativeDenomEnum[\"ukrw\"] = \"ukrw\";\n  AssetNativeDenomEnum[\"uusd\"] = \"uusd\";\n  AssetNativeDenomEnum[\"uluna\"] = \"uluna\";\n  AssetNativeDenomEnum[\"usdr\"] = \"usdr\";\n  AssetNativeDenomEnum[\"umnt\"] = \"umnt\";\n  return AssetNativeDenomEnum;\n}({});\nexport const terraExt = {\n  chainID: \"columbus-5\",\n  fcd: \"https://fcd.terra.dev\",\n  lcd: \"https://lcd.terra.dev\",\n  localterra: false,\n  mantle: \"https://mantle.terra.dev\",\n  name: \"mainnet\",\n  walletconnectID: 1,\n  queryTx: 'https://fcd.terra.dev/txs/'\n};\n\n// export const terraExt = {\n//   chainID: \"bombay-12\",\n//   fcd: \"https://bombay-fcd.terra.dev\",\n//   lcd: \"https://bombay-lcd.terra.dev\",\n//   localterra: false,\n//   mantle: \"https://bombay-mantle.terra.dev\",\n//   name: \"testnet\",\n//   walletconnectID: 0,\n//   queryTx: 'https://bombay-fcd.terra.dev/v1/tx/'\n// }\n\nconst isNativeTerra = str => str.startsWith('u') && currency.currencies.includes(str.slice(1).toUpperCase());\nexport function useTerraSend() {\n  const {\n    chainId\n  } = useActiveReact();\n  const [gasPricesFromServer, setGasPricesFromServer] = useState();\n  const getGasPricesFromServer = useCallback(async fcd => {\n    if (fcd && chainId === ChainId.TERRA) {\n      const {\n        data\n      } = await axios.get(terraExt.fcd + '/v1/txs/gas_prices', {\n        baseURL: fcd\n      });\n      // console.log(data)\n      setGasPricesFromServer(data);\n    }\n  }, [chainId]);\n  useEffect(() => {\n    getGasPricesFromServer(terraExt.fcd);\n    return () => {\n      getGasPricesFromServer();\n    };\n  }, [terraExt.fcd, chainId]);\n  const getTerraSendTax = async props => {\n    const {\n      denom,\n      amount,\n      feeDenom: _feeDenom\n    } = props;\n    if (terraExt && denom && amount) {\n      const lcd = new LCDClient({\n        chainID: terraExt.chainID,\n        URL: terraExt.lcd,\n        gasPrices: {\n          [_feeDenom]: gasPricesFromServer[_feeDenom]\n        }\n      });\n      // tax\n      // console.log(denom)\n      // console.log(isNativeTerra(denom))\n      return isNativeTerra(denom) ? lcd.utils.calculateTax(new Coin(denom, amount)) : new Coin(_feeDenom, 0);\n    }\n    return undefined;\n  };\n  const getTerraFeeList = async (address, toAddress, Unit, inputAmount) => {\n    if (terraExt && inputAmount && address && toAddress && Unit) {\n      let gas = 200000;\n      const tax = await getTerraSendTax({\n        denom: Unit,\n        amount: inputAmount,\n        feeDenom: Unit\n      });\n      // const tax = await getTerraSendTax({denom: Unit, amount: inputAmount, feeDenom: AssetNativeDenomEnum.uusd})\n      try {\n        const feeDenoms = [AssetNativeDenomEnum.uluna];\n        const msgs = new MsgSend(address, toAddress, {\n          [Unit]: inputAmount\n        });\n        // console.log(msgs)\n        const lcd = new LCDClient({\n          chainID: terraExt.chainID,\n          URL: terraExt.lcd,\n          gasPrices: gasPricesFromServer\n        });\n        // fee + tax\n        // console.log(address)\n        // console.log(msgs)\n        // console.log(feeDenoms)\n        // debugger\n        const unsignedTx = await lcd.tx.create(address, {\n          msgs: [msgs],\n          feeDenoms\n        });\n        gas = unsignedTx === null || unsignedTx === void 0 ? void 0 : unsignedTx.fee.gas;\n        console.log(unsignedTx);\n        // debugger\n      } catch (err) {\n        // gas is just default value\n        console.log('error');\n        console.log(err);\n      }\n      return _.map(AssetNativeDenomEnum, denom => {\n        const amount = new BigNumber(gasPricesFromServer[denom]).multipliedBy(gas).dp(0, BigNumber.ROUND_UP).toString(10);\n        const gasFee = new Coins({\n          [denom]: amount\n        });\n        const fee = new Fee(gas, gasFee);\n        return {\n          denom,\n          fee,\n          tax\n        };\n      });\n    }\n    return [];\n  };\n  return {\n    getTerraFeeList\n  };\n}\nexport function updateTerraHash(hash) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(resolve => {\n    const url = \"\".concat(terraExt.queryTx).concat(hash);\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json);\n      if (json) {\n        if (json.error || json.code) {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        } else {\n          data.msg = 'Success';\n          data.info = json;\n        }\n      } else {\n        data.msg = 'Null';\n        data.error = 'Query is empty!';\n      }\n      resolve(data);\n    });\n  });\n}\n\n// updateTerraHash('0D27A684885992D3F13BFB52B9DCF1D612C130001E5CD659A4E79A2BBC428A07').then(res => {\n//   console.log(res)\n// })","map":{"version":3,"names":["useState","useEffect","useCallback","MsgSend","Coins","Fee","LCDClient","Coin","axios","BigNumber","_","currency","useActiveReact","ChainId","AssetNativeDenomEnum","terraExt","chainID","fcd","lcd","localterra","mantle","name","walletconnectID","queryTx","isNativeTerra","str","startsWith","currencies","includes","slice","toUpperCase","useTerraSend","chainId","gasPricesFromServer","setGasPricesFromServer","getGasPricesFromServer","TERRA","data","get","baseURL","getTerraSendTax","props","denom","amount","feeDenom","_feeDenom","URL","gasPrices","utils","calculateTax","undefined","getTerraFeeList","address","toAddress","Unit","inputAmount","gas","tax","feeDenoms","uluna","msgs","unsignedTx","tx","create","fee","console","log","err","map","multipliedBy","dp","ROUND_UP","toString","gasFee","updateTerraHash","hash","msg","info","Promise","resolve","url","concat","fetch","then","res","json","error","code"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/terra/index.ts"],"sourcesContent":["import {useState, useEffect, useCallback} from 'react'\nimport {\n  MsgSend,\n  Coins,\n  // MsgExecuteContract,\n  Fee,\n  LCDClient,\n  Coin,\n  // CreateTxOptions,\n} from '@terra-money/terra.js'\nimport axios from 'axios'\nimport BigNumber from 'bignumber.js'\nimport _ from 'lodash'\nimport currency from './currency'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { ChainId } from '../../config/chainConfig/chainId'\n\n\nexport enum AssetNativeDenomEnum {\n  ukrw = 'ukrw',\n  uusd = 'uusd',\n  uluna = 'uluna',\n  usdr = 'usdr',\n  umnt = 'umnt',\n}\n\nexport const terraExt = {\n  chainID: \"columbus-5\",\n  fcd: \"https://fcd.terra.dev\",\n  lcd: \"https://lcd.terra.dev\",\n  localterra: false,\n  mantle: \"https://mantle.terra.dev\",\n  name: \"mainnet\",\n  walletconnectID: 1,\n  queryTx: 'https://fcd.terra.dev/txs/'\n}\n\n\n// export const terraExt = {\n//   chainID: \"bombay-12\",\n//   fcd: \"https://bombay-fcd.terra.dev\",\n//   lcd: \"https://bombay-lcd.terra.dev\",\n//   localterra: false,\n//   mantle: \"https://bombay-mantle.terra.dev\",\n//   name: \"testnet\",\n//   walletconnectID: 0,\n//   queryTx: 'https://bombay-fcd.terra.dev/v1/tx/'\n// }\n\nconst isNativeTerra = (str: string): boolean =>\n  str.startsWith('u') &&\n  currency.currencies.includes(str.slice(1).toUpperCase())\n\nexport function useTerraSend () {\n  const {chainId} = useActiveReact()\n  const [gasPricesFromServer, setGasPricesFromServer] = useState<any>()\n\n  const getGasPricesFromServer = useCallback(\n    async (fcd?:any): Promise<void> => {\n      if (fcd && chainId === ChainId.TERRA) {\n        const { data } = await axios.get(terraExt.fcd + '/v1/txs/gas_prices', {\n          baseURL: fcd,\n        })\n        // console.log(data)\n        setGasPricesFromServer(data)\n      }\n    }, [chainId])\n\n  useEffect(() => {\n    getGasPricesFromServer(terraExt.fcd)\n    return (): void => {\n      getGasPricesFromServer()\n    }\n  }, [terraExt.fcd, chainId])\n\n  const getTerraSendTax = async (props: {\n    denom: AssetNativeDenomEnum\n    amount: string\n    feeDenom: string\n  }): Promise<Coin | undefined> => {\n    const { denom, amount, feeDenom: _feeDenom } = props\n    if (terraExt && denom && amount) {\n      const lcd = new LCDClient({\n        chainID: terraExt.chainID,\n        URL: terraExt.lcd,\n        gasPrices: { [_feeDenom]: gasPricesFromServer[_feeDenom] },\n      })\n      // tax\n      // console.log(denom)\n      // console.log(isNativeTerra(denom))\n      return isNativeTerra(denom)\n        ? lcd.utils.calculateTax(new Coin(denom, amount))\n        : new Coin(_feeDenom, 0)\n    }\n    return undefined\n  }\n\n  const getTerraFeeList = async (\n    address:any,\n    toAddress:any,\n    Unit:any,\n    inputAmount:any\n  ): Promise<\n    {\n      denom: AssetNativeDenomEnum\n      fee?: Fee\n      tax?: any\n    }[]\n  > => {\n    if (terraExt && inputAmount && address && toAddress && Unit) {\n      let gas = 200000\n      const tax = await getTerraSendTax({denom: Unit, amount: inputAmount, feeDenom: Unit})\n      // const tax = await getTerraSendTax({denom: Unit, amount: inputAmount, feeDenom: AssetNativeDenomEnum.uusd})\n      try {\n        const feeDenoms = [AssetNativeDenomEnum.uluna]\n\n        const msgs = new MsgSend(\n          address,\n          toAddress,\n          { [Unit]: \tinputAmount }\n        )\n        // console.log(msgs)\n        const lcd = new LCDClient({\n          chainID: terraExt.chainID,\n          URL: terraExt.lcd,\n          gasPrices: gasPricesFromServer,\n        })\n        // fee + tax\n        // console.log(address)\n        // console.log(msgs)\n        // console.log(feeDenoms)\n        // debugger\n        const unsignedTx:any = await lcd.tx.create(address, {\n          msgs: [msgs],\n          feeDenoms,\n        })\n        gas = unsignedTx?.fee.gas\n        console.log(unsignedTx)\n        // debugger\n      } catch (err) {\n        // gas is just default value\n        console.log('error')\n        console.log(err)\n      }\n\n      return _.map(AssetNativeDenomEnum, (denom) => {\n        const amount = new BigNumber(gasPricesFromServer[denom])\n          .multipliedBy(gas)\n          .dp(0, BigNumber.ROUND_UP)\n          .toString(10)\n        const gasFee = new Coins({ [denom]: amount })\n        const fee = new Fee(gas, gasFee)\n        return {\n          denom,\n          fee,\n          tax\n        }\n      })\n    }\n    return []\n  }\n  return {\n    getTerraFeeList\n  }\n}\n\nexport function updateTerraHash (hash:any): Promise<any> {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    const url = `${terraExt.queryTx}${hash}`\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json)\n      if (json) {\n        if (json.error || json.code) {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Success'\n          data.info = json\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    })\n  })\n}\n\n// updateTerraHash('0D27A684885992D3F13BFB52B9DCF1D612C130001E5CD659A4E79A2BBC428A07').then(res => {\n//   console.log(res)\n// })"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}