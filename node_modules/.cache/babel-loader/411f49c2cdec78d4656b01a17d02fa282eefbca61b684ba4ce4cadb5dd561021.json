{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemoryKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n  constructor() {\n    super();\n    this.keys = {};\n  }\n  /**\n   * Stores a {@KeyPair} in in-memory storage item\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n  async setKey(networkId, accountId, keyPair) {\n    this.keys[\"\".concat(accountId, \":\").concat(networkId)] = keyPair.toString();\n  }\n  /**\n   * Gets a {@link KeyPair} from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n  async getKey(networkId, accountId) {\n    const value = this.keys[\"\".concat(accountId, \":\").concat(networkId)];\n    if (!value) {\n      return null;\n    }\n    return key_pair_1.KeyPair.fromString(value);\n  }\n  /**\n   * Removes a {@link KeyPair} from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n  async removeKey(networkId, accountId) {\n    delete this.keys[\"\".concat(accountId, \":\").concat(networkId)];\n  }\n  /**\n   * Removes all {@link KeyPairs} from in-memory storage\n   */\n  async clear() {\n    this.keys = {};\n  }\n  /**\n   * Get the network(s) from in-memory storage\n   * @returns {Promise<string[]>}\n   */\n  async getNetworks() {\n    const result = new Set();\n    Object.keys(this.keys).forEach(key => {\n      const parts = key.split(':');\n      result.add(parts[1]);\n    });\n    return Array.from(result.values());\n  }\n  /**\n   * Gets the account(s) from in-memory storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n  async getAccounts(networkId) {\n    const result = new Array();\n    Object.keys(this.keys).forEach(key => {\n      const parts = key.split(':');\n      if (parts[parts.length - 1] === networkId) {\n        result.push(parts.slice(0, parts.length - 1).join(':'));\n      }\n    });\n    return result;\n  }\n  /** @hidden */\n  toString() {\n    return 'InMemoryKeyStore';\n  }\n}\nexports.InMemoryKeyStore = InMemoryKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","InMemoryKeyStore","keystore_1","require","key_pair_1","KeyStore","constructor","keys","setKey","networkId","accountId","keyPair","concat","toString","getKey","KeyPair","fromString","removeKey","clear","getNetworks","result","Set","forEach","key","parts","split","add","Array","from","values","getAccounts","length","push","slice","join"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/near-api-js/lib/key_stores/in_memory_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemoryKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n    constructor() {\n        super();\n        this.keys = {};\n    }\n    /**\n     * Stores a {@KeyPair} in in-memory storage item\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n    }\n    /**\n     * Gets a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        const value = this.keys[`${accountId}:${networkId}`];\n        if (!value) {\n            return null;\n        }\n        return key_pair_1.KeyPair.fromString(value);\n    }\n    /**\n     * Removes a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        delete this.keys[`${accountId}:${networkId}`];\n    }\n    /**\n     * Removes all {@link KeyPairs} from in-memory storage\n     */\n    async clear() {\n        this.keys = {};\n    }\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            result.add(parts[1]);\n        });\n        return Array.from(result.values());\n    }\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Array();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            if (parts[parts.length - 1] === networkId) {\n                result.push(parts.slice(0, parts.length - 1).join(':'));\n            }\n        });\n        return result;\n    }\n    /** @hidden */\n    toString() {\n        return 'InMemoryKeyStore';\n    }\n}\nexports.InMemoryKeyStore = InMemoryKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}