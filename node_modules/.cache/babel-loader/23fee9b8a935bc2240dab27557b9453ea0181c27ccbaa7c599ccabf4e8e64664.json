{"ast":null,"code":"var _class;// eslint-disable-next-line @typescript-eslint/ban-types\nvar ObserveStatus=/*#__PURE__*/function(ObserveStatus){ObserveStatus[ObserveStatus[\"Pending\"]=0]=\"Pending\";ObserveStatus[ObserveStatus[\"Connect\"]=1]=\"Connect\";ObserveStatus[ObserveStatus[\"Disconnect\"]=2]=\"Disconnect\";ObserveStatus[ObserveStatus[\"NotSupport\"]=3]=\"NotSupport\";return ObserveStatus;}(ObserveStatus||{});export default class LazyloadService{static getInstance(){if(!this._instance){this._instance=new LazyloadService();}return this._instance;}// 创建元素观察者\nstatic createElementObserve(el){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const service=new LazyloadService();service.isRoot=false;if(el||el===null){service.connect(el,options);}return service;}static checkLoadedUrl(url){return this.loadedUrl.indexOf(url)>-1;}static addLoadedUrl(url){if(!this.checkLoadedUrl(url)){this.loadedUrl.push(url);}return url;}constructor(){this.observeData=void 0;this.waitCallbacks=void 0;this.status=void 0;this.isRoot=void 0;this.observeData={element:null,callbacks:[]};this.isRoot=true;this.waitCallbacks=[];this.status=ObserveStatus.Pending;}// 创建观察对象\ncreateObserve(element){let setOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const observeItem=this.observeData;const options={rootMargin:'50px',...setOptions};if(element){options.root=element;}let observe=null;if('IntersectionObserver'in window){const observeCallback=entries=>{var _observeItem$callback;if(observeItem&&((_observeItem$callback=observeItem.callbacks)===null||_observeItem$callback===void 0?void 0:_observeItem$callback.length)){for(const entry of entries){if(!entry.isIntersecting)continue;for(const item of observeItem.callbacks){if(item.element===entry.target){item.callback(entry,item.unsubscribe);break;}}}}};observe=new IntersectionObserver(observeCallback,options);}observeItem.observe=observe;return observe;}// 连接到对象\nconnect(el){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const observe=this.createObserve(el,options);if(observe){if(this.waitCallbacks.length){this.waitCallbacks.forEach(item=>{observe===null||observe===void 0?void 0:observe.observe(item.element);});}this.observeData.callbacks=this.waitCallbacks;this.waitCallbacks=[];this.status=ObserveStatus.Connect;}else{const call=()=>{//\n};this.waitCallbacks.forEach(item=>{const entry={isIntersecting:1};item.callback(entry,call);});this.waitCallbacks=[];this.status=ObserveStatus.NotSupport;}}// 断开连接\ndisconnect(){if(this.status==ObserveStatus.Connect){var _this$observeData$obs;(_this$observeData$obs=this.observeData.observe)===null||_this$observeData$obs===void 0?void 0:_this$observeData$obs.disconnect();this.observeData={element:null,callbacks:[]};this.waitCallbacks=[];this.status=ObserveStatus.Disconnect;}}// 订阅事件\n// eslint-disable-next-line @typescript-eslint/ban-types\nsubscribe(el,callback){let unsubscribe=()=>{//\n};if(this.isRoot&&this.status!=ObserveStatus.Connect){if(this.status===ObserveStatus.Pending||this.status===ObserveStatus.Disconnect){if(this.createObserve()){this.status=ObserveStatus.Connect;}else{this.status=ObserveStatus.NotSupport;}}// 处理不支持的情况\nif(this.status===ObserveStatus.NotSupport){const entry={isIntersecting:1};callback(entry,unsubscribe);}}unsubscribe=()=>this.unsubscribe(el);const observeItem=this.observeData;if(this.status==ObserveStatus.Connect){var _observeItem$observe,_observeItem$callback2;(_observeItem$observe=observeItem.observe)===null||_observeItem$observe===void 0?void 0:_observeItem$observe.observe(el);(_observeItem$callback2=observeItem.callbacks)===null||_observeItem$callback2===void 0?void 0:_observeItem$callback2.push({element:el,callback,unsubscribe});}else if(this.status==ObserveStatus.Pending){this.waitCallbacks.push({element:el,callback,unsubscribe});}else{console.warn('this observe is disconnect');}return unsubscribe;}// 取消订阅事件\nunsubscribe(el){let callbacks=this.observeData.callbacks||[];if(this.status==ObserveStatus.Pending){callbacks=this.waitCallbacks;}for(let i=callbacks.length-1;i>-1;i--){const item=callbacks[i];if(item.element===el){if(this.observeData.observe){this.observeData.observe.unobserve(el);}callbacks.splice(i,1);break;}}// 仅在全局模式下自动断开连接\nif(this.isRoot&&!callbacks.length){this.disconnect();}}}_class=LazyloadService;LazyloadService._instance=void 0;LazyloadService.loadedUrl=[];","map":{"version":3,"names":["ObserveStatus","LazyloadService","getInstance","_instance","createElementObserve","el","options","arguments","length","undefined","service","isRoot","connect","checkLoadedUrl","url","loadedUrl","indexOf","addLoadedUrl","push","constructor","observeData","waitCallbacks","status","element","callbacks","Pending","createObserve","setOptions","observeItem","rootMargin","root","observe","window","observeCallback","entries","_observeItem$callback","entry","isIntersecting","item","target","callback","unsubscribe","IntersectionObserver","forEach","Connect","call","NotSupport","disconnect","_this$observeData$obs","Disconnect","subscribe","_observeItem$observe","_observeItem$callback2","console","warn","i","unobserve","splice","_class"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/components/Lazyload/LazyloadService.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-types\ntype SubscribeCallback = (entry: IntersectionObserverEntry, unsubscribe: Function) => void;\n\ntype CallbackItem = {\n  element: HTMLElement;\n  callback: SubscribeCallback;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  unsubscribe: Function;\n}\n\ntype ObserveData = {\n  element: HTMLElement | null;\n  observe?: IntersectionObserver;\n  callbacks?: CallbackItem[];\n}\n\nenum ObserveStatus {\n  Pending,\n  Connect,\n  Disconnect,\n  NotSupport\n}\n\nexport default class LazyloadService {\n  static _instance: LazyloadService;\n\n  static getInstance() {\n    if (!this._instance) {\n      this._instance = new LazyloadService();\n    }\n    return this._instance;\n  }\n\n  // 创建元素观察者\n  static createElementObserve(el?: HTMLElement | null, options: IntersectionObserverInit = {}): LazyloadService {\n    const service = new LazyloadService();\n    service.isRoot = false;\n    if (el || el === null) {\n      service.connect(el, options);\n    }\n    return service;\n  }\n\n  static loadedUrl: string[] = [];\n  static checkLoadedUrl(url: string) {\n    return this.loadedUrl.indexOf(url) > -1;\n  }\n  static addLoadedUrl(url: string) {\n    if (!this.checkLoadedUrl(url)) {\n      this.loadedUrl.push(url);\n    }\n    return url;\n  }\n\n  observeData: ObserveData;\n  waitCallbacks: CallbackItem[];\n  status: ObserveStatus;\n  isRoot: boolean;\n\n  constructor() {\n    this.observeData = {\n      element: null,\n      callbacks: []\n    };\n    this.isRoot = true;\n    this.waitCallbacks = [];\n    this.status = ObserveStatus.Pending;\n  }\n\n  // 创建观察对象\n  createObserve(element?: HTMLElement | null, setOptions: IntersectionObserverInit = {}) {\n    const observeItem = this.observeData as ObserveData;\n    const options: any = { rootMargin: '50px', ...setOptions };\n    if (element) {\n      options.root = element;\n    }\n    let observe: any = null;\n    if ('IntersectionObserver' in window) {\n      const observeCallback = (entries: IntersectionObserverEntry[]) => {\n        if (observeItem && observeItem.callbacks?.length) {\n          for(const entry of entries) {\n            if (!entry.isIntersecting) continue;\n            for(const item of observeItem.callbacks) {\n              if (item.element === entry.target) {\n                item.callback(entry, item.unsubscribe);\n                break;\n              }\n            }\n          }\n        }\n      };\n      observe = new IntersectionObserver(observeCallback, options);\n    }\n    observeItem.observe = observe;\n    return observe;\n  }\n\n  // 连接到对象\n  connect(el: HTMLElement | null, options: IntersectionObserverInit = {}) {\n    const observe = this.createObserve(el, options);\n    if (observe) {\n      if (this.waitCallbacks.length) {\n        this.waitCallbacks.forEach((item) => {\n          observe?.observe(item.element);\n        });\n      }\n      this.observeData.callbacks = this.waitCallbacks;\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.Connect;\n    }\n    else {\n      const call = () => {\n        //\n      };\n      this.waitCallbacks.forEach((item) => {\n        const entry: any = { isIntersecting: 1 };\n        item.callback(entry, call);\n      });\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.NotSupport;\n    }\n  }\n\n  // 断开连接\n  disconnect() {\n    if (this.status == ObserveStatus.Connect) {\n      this.observeData.observe?.disconnect();\n      this.observeData = {\n        element: null,\n        callbacks: []\n      };\n      this.waitCallbacks = [];\n      this.status = ObserveStatus.Disconnect;\n    }\n  }\n\n  // 订阅事件\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  subscribe(el: HTMLElement, callback: SubscribeCallback): Function {\n    let unsubscribe = () => {\n      //\n    };\n    if (this.isRoot && this.status != ObserveStatus.Connect) {\n      if (\n        this.status === ObserveStatus.Pending ||\n        this.status === ObserveStatus.Disconnect\n      ) {\n        if (this.createObserve()) {\n          this.status = ObserveStatus.Connect;\n        }\n        else {\n          this.status = ObserveStatus.NotSupport;\n        }\n      }\n      // 处理不支持的情况\n      if (this.status === ObserveStatus.NotSupport) {\n        const entry: any = { isIntersecting: 1 };\n        callback(entry, unsubscribe);\n      }\n    }\n    unsubscribe = () => this.unsubscribe(el);\n    const observeItem = this.observeData;\n    if (this.status == ObserveStatus.Connect) {\n      observeItem.observe?.observe(el);\n      observeItem.callbacks?.push({\n        element: el, callback, unsubscribe\n      });\n    }\n    else if (this.status == ObserveStatus.Pending) {\n      this.waitCallbacks.push({\n        element: el, callback, unsubscribe\n      });\n    }\n    else {\n      console.warn('this observe is disconnect');\n    }\n    return unsubscribe;\n  }\n\n  // 取消订阅事件\n  unsubscribe(el: HTMLElement) {\n    let callbacks = this.observeData.callbacks || [];\n    if (this.status == ObserveStatus.Pending) {\n      callbacks = this.waitCallbacks;\n    }\n    for(let i=callbacks.length - 1; i>-1; i--) {\n      const item = callbacks[i];\n      if (item.element === el) {\n        if (this.observeData.observe) {\n          this.observeData.observe.unobserve(el);\n        }\n        callbacks.splice(i, 1);\n        break;\n      }\n    }\n    // 仅在全局模式下自动断开连接\n    if (this.isRoot && !callbacks.length) {\n      this.disconnect();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}