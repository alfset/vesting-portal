{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawbackClaimableBalance = clawbackClaimableBalance;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _claim_claimable_balance = require('./claim_claimable_balance');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Creates a clawback operation for a claimable balance.\n *\n * @function\n * @alias Operation.clawbackClaimableBalance\n * @param {object} opts - Options object\n * @param {string} opts.balanceId - The claimable balance ID to be clawed back.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackClaimableBalanceOp}\n *\n * @example\n * const op = Operation.clawbackClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-claimable-balance-operation\n */\nfunction clawbackClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  (0, _claim_claimable_balance.validateClaimableBalanceId)(opts.balanceId);\n  var attributes = {\n    balanceId: _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  };\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.clawbackClaimableBalance(new _xdr2.default.ClawbackClaimableBalanceOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","clawbackClaimableBalance","_xdr","require","_xdr2","_interopRequireDefault","_claim_claimable_balance","obj","__esModule","default","opts","arguments","length","undefined","validateClaimableBalanceId","balanceId","attributes","ClaimableBalanceId","fromXDR","opAttributes","body","OperationBody","ClawbackClaimableBalanceOp","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/clawback_claimable_balance.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawbackClaimableBalance = clawbackClaimableBalance;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _claim_claimable_balance = require('./claim_claimable_balance');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a clawback operation for a claimable balance.\n *\n * @function\n * @alias Operation.clawbackClaimableBalance\n * @param {object} opts - Options object\n * @param {string} opts.balanceId - The claimable balance ID to be clawed back.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackClaimableBalanceOp}\n *\n * @example\n * const op = Operation.clawbackClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-claimable-balance-operation\n */\nfunction clawbackClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  (0, _claim_claimable_balance.validateClaimableBalanceId)(opts.balanceId);\n\n  var attributes = {\n    balanceId: _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  };\n\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.clawbackClaimableBalance(new _xdr2.default.ClawbackClaimableBalanceOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB;AAE3D,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIC,KAAK,GAAGC,sBAAsB,CAACH,IAAI,CAAC;AAExC,IAAII,wBAAwB,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AAEnE,SAASE,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,wBAAwBA,CAAA,EAAG;EAClC,IAAIS,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEjF,CAAC,CAAC,EAAEL,wBAAwB,CAACQ,0BAA0B,EAAEJ,IAAI,CAACK,SAAS,CAAC;EAExE,IAAIC,UAAU,GAAG;IACfD,SAAS,EAAEX,KAAK,CAACK,OAAO,CAACQ,kBAAkB,CAACC,OAAO,CAACR,IAAI,CAACK,SAAS,EAAE,KAAK;EAC3E,CAAC;EAED,IAAII,YAAY,GAAG;IACjBC,IAAI,EAAEhB,KAAK,CAACK,OAAO,CAACY,aAAa,CAACpB,wBAAwB,CAAC,IAAIG,KAAK,CAACK,OAAO,CAACa,0BAA0B,CAACN,UAAU,CAAC;EACrH,CAAC;EACD,IAAI,CAACO,gBAAgB,CAACJ,YAAY,EAAET,IAAI,CAAC;EAEzC,OAAO,IAAIN,KAAK,CAACK,OAAO,CAACe,SAAS,CAACL,YAAY,CAAC;AAClD"},"metadata":{},"sourceType":"script","externalDependencies":[]}