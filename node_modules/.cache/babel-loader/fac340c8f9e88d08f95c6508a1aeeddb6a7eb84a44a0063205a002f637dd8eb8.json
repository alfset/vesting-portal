{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1Wallet = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a DirectSecp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signDirect(address, signDoc) {\n    const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n    if (address !== this.address) {\n      throw new Error(\"Address \".concat(address, \" not found in wallet\"));\n    }\n    const hashedMessage = (0, crypto_1.sha256)(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = (0, amino_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;","map":{"version":3,"names":["amino_1","require","crypto_1","encoding_1","signing_1","DirectSecp256k1Wallet","constructor","privkey","pubkey","prefix","fromKey","arguments","length","undefined","uncompressed","Secp256k1","makeKeypair","compressPubkey","address","toBech32","rawSecp256k1PubkeyToRawAddress","getAccounts","algo","signDirect","signDoc","signBytes","makeSignBytes","Error","concat","hashedMessage","sha256","signature","createSignature","signatureBytes","Uint8Array","r","s","stdSignature","encodeSecp256k1Signature","signed","exports"],"sources":["../src/directsecp256k1wallet.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AAIA,MAAAG,SAAA,GAAAH,OAAA;AAEA;;;;;AAKA,MAAaI,qBAAqB;EAgBhCC,YAAoBC,OAAmB,EAAEC,MAAkB,EAAEC,MAAc;IACzE,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAnBA;;;;;;EAMO,aAAaC,OAAOA,CAACH,OAAmB,EAAmB;IAAA,IAAjBE,MAAM,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;IAChE,MAAMG,YAAY,GAAG,CAAC,MAAMZ,QAAA,CAAAa,SAAS,CAACC,WAAW,CAACT,OAAO,CAAC,EAAEC,MAAM;IAClE,OAAO,IAAIH,qBAAqB,CAACE,OAAO,EAAEL,QAAA,CAAAa,SAAS,CAACE,cAAc,CAACH,YAAY,CAAC,EAAEL,MAAM,CAAC;EAC3F;EAYA,IAAYS,OAAOA,CAAA;IACjB,OAAO,IAAAf,UAAA,CAAAgB,QAAQ,EAAC,IAAI,CAACV,MAAM,EAAE,IAAAT,OAAA,CAAAoB,8BAA8B,EAAC,IAAI,CAACZ,MAAM,CAAC,CAAC;EAC3E;EAEO,MAAMa,WAAWA,CAAA;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WAAW;MACjBJ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBV,MAAM,EAAE,IAAI,CAACA;KACd,CACF;EACH;EAEO,MAAMe,UAAUA,CAACL,OAAe,EAAEM,OAAgB;IACvD,MAAMC,SAAS,GAAG,IAAArB,SAAA,CAAAsB,aAAa,EAACF,OAAO,CAAC;IACxC,IAAIN,OAAO,KAAK,IAAI,CAACA,OAAO,EAAE;MAC5B,MAAM,IAAIS,KAAK,YAAAC,MAAA,CAAYV,OAAO,yBAAsB,CAAC;;IAE3D,MAAMW,aAAa,GAAG,IAAA3B,QAAA,CAAA4B,MAAM,EAACL,SAAS,CAAC;IACvC,MAAMM,SAAS,GAAG,MAAM7B,QAAA,CAAAa,SAAS,CAACiB,eAAe,CAACH,aAAa,EAAE,IAAI,CAACtB,OAAO,CAAC;IAC9E,MAAM0B,cAAc,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAGH,SAAS,CAACI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGJ,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAMC,YAAY,GAAG,IAAArC,OAAA,CAAAsC,wBAAwB,EAAC,IAAI,CAAC9B,MAAM,EAAEyB,cAAc,CAAC;IAC1E,OAAO;MACLM,MAAM,EAAEf,OAAO;MACfO,SAAS,EAAEM;KACZ;EACH;;AAjDFG,OAAA,CAAAnC,qBAAA,GAAAA,qBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}