{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst crypto = require(\"./crypto\");\nconst bs58check = require('bs58check');\nconst ecc = require('tiny-secp256k1');\nconst typeforce = require('typeforce');\nconst wif = require('wif');\nconst UINT256_TYPE = typeforce.BufferN(32);\nconst NETWORK_TYPE = typeforce.compile({\n  wif: typeforce.UInt8,\n  bip32: {\n    public: typeforce.UInt32,\n    private: typeforce.UInt32\n  }\n});\nconst BITCOIN = {\n  messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n  bech32: 'bc',\n  bip32: {\n    public: 0x0488b21e,\n    private: 0x0488ade4\n  },\n  pubKeyHash: 0x00,\n  scriptHash: 0x05,\n  wif: 0x80\n};\nconst HIGHEST_BIT = 0x80000000;\nconst UINT31_MAX = Math.pow(2, 31) - 1;\nfunction BIP32Path(value) {\n  return typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/) !== null;\n}\nfunction UInt31(value) {\n  return typeforce.UInt32(value) && value <= UINT31_MAX;\n}\nclass BIP32 {\n  constructor(__D, __Q, chainCode, network) {\n    let __DEPTH = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let __INDEX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let __PARENT_FINGERPRINT = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0x00000000;\n    this.__D = __D;\n    this.__Q = __Q;\n    this.chainCode = chainCode;\n    this.network = network;\n    this.__DEPTH = __DEPTH;\n    this.__INDEX = __INDEX;\n    this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;\n    typeforce(NETWORK_TYPE, network);\n    this.lowR = false;\n  }\n  get depth() {\n    return this.__DEPTH;\n  }\n  get index() {\n    return this.__INDEX;\n  }\n  get parentFingerprint() {\n    return this.__PARENT_FINGERPRINT;\n  }\n  get publicKey() {\n    if (this.__Q === undefined) this.__Q = ecc.pointFromScalar(this.__D, true);\n    return this.__Q;\n  }\n  get privateKey() {\n    return this.__D;\n  }\n  get identifier() {\n    return crypto.hash160(this.publicKey);\n  }\n  get fingerprint() {\n    return this.identifier.slice(0, 4);\n  }\n  get compressed() {\n    return true;\n  }\n  // Private === not neutered\n  // Public === neutered\n  isNeutered() {\n    return this.__D === undefined;\n  }\n  neutered() {\n    return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);\n  }\n  toBase58() {\n    const network = this.network;\n    const version = !this.isNeutered() ? network.bip32.private : network.bip32.public;\n    const buffer = Buffer.allocUnsafe(78);\n    // 4 bytes: version bytes\n    buffer.writeUInt32BE(version, 0);\n    // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....\n    buffer.writeUInt8(this.depth, 4);\n    // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n    buffer.writeUInt32BE(this.parentFingerprint, 5);\n    // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n    // This is encoded in big endian. (0x00000000 if master key)\n    buffer.writeUInt32BE(this.index, 9);\n    // 32 bytes: the chain code\n    this.chainCode.copy(buffer, 13);\n    // 33 bytes: the public key or private key data\n    if (!this.isNeutered()) {\n      // 0x00 + k for private keys\n      buffer.writeUInt8(0, 45);\n      this.privateKey.copy(buffer, 46);\n      // 33 bytes: the public key\n    } else {\n      // X9.62 encoding for public keys\n      this.publicKey.copy(buffer, 45);\n    }\n    return bs58check.encode(buffer);\n  }\n  toWIF() {\n    if (!this.privateKey) throw new TypeError('Missing private key');\n    return wif.encode(this.network.wif, this.privateKey, true);\n  }\n  // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions\n  derive(index) {\n    typeforce(typeforce.UInt32, index);\n    const isHardened = index >= HIGHEST_BIT;\n    const data = Buffer.allocUnsafe(37);\n    // Hardened child\n    if (isHardened) {\n      if (this.isNeutered()) throw new TypeError('Missing private key for hardened child key');\n      // data = 0x00 || ser256(kpar) || ser32(index)\n      data[0] = 0x00;\n      this.privateKey.copy(data, 1);\n      data.writeUInt32BE(index, 33);\n      // Normal child\n    } else {\n      // data = serP(point(kpar)) || ser32(index)\n      //      = serP(Kpar) || ser32(index)\n      this.publicKey.copy(data, 0);\n      data.writeUInt32BE(index, 33);\n    }\n    const I = crypto.hmacSHA512(this.chainCode, data);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    // if parse256(IL) >= n, proceed with the next value for i\n    if (!ecc.isPrivate(IL)) return this.derive(index + 1);\n    // Private parent key -> private child key\n    let hd;\n    if (!this.isNeutered()) {\n      // ki = parse256(IL) + kpar (mod n)\n      const ki = ecc.privateAdd(this.privateKey, IL);\n      // In case ki == 0, proceed with the next value for i\n      if (ki == null) return this.derive(index + 1);\n      hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n      // Public parent key -> public child key\n    } else {\n      // Ki = point(parse256(IL)) + Kpar\n      //    = G*IL + Kpar\n      const Ki = ecc.pointAddScalar(this.publicKey, IL, true);\n      // In case Ki is the point at infinity, proceed with the next value for i\n      if (Ki === null) return this.derive(index + 1);\n      hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n    }\n    return hd;\n  }\n  deriveHardened(index) {\n    typeforce(UInt31, index);\n    // Only derives hardened private keys by default\n    return this.derive(index + HIGHEST_BIT);\n  }\n  derivePath(path) {\n    typeforce(BIP32Path, path);\n    let splitPath = path.split('/');\n    if (splitPath[0] === 'm') {\n      if (this.parentFingerprint) throw new TypeError('Expected master, got child');\n      splitPath = splitPath.slice(1);\n    }\n    return splitPath.reduce((prevHd, indexStr) => {\n      let index;\n      if (indexStr.slice(-1) === \"'\") {\n        index = parseInt(indexStr.slice(0, -1), 10);\n        return prevHd.deriveHardened(index);\n      } else {\n        index = parseInt(indexStr, 10);\n        return prevHd.derive(index);\n      }\n    }, this);\n  }\n  sign(hash, lowR) {\n    if (!this.privateKey) throw new Error('Missing private key');\n    if (lowR === undefined) lowR = this.lowR;\n    if (lowR === false) {\n      return ecc.sign(hash, this.privateKey);\n    } else {\n      let sig = ecc.sign(hash, this.privateKey);\n      const extraData = Buffer.alloc(32, 0);\n      let counter = 0;\n      // if first try is lowR, skip the loop\n      // for second try and on, add extra entropy counting up\n      while (sig[0] > 0x7f) {\n        counter++;\n        extraData.writeUIntLE(counter, 0, 6);\n        sig = ecc.signWithEntropy(hash, this.privateKey, extraData);\n      }\n      return sig;\n    }\n  }\n  verify(hash, signature) {\n    return ecc.verify(hash, this.publicKey, signature);\n  }\n}\nfunction fromBase58(inString, network) {\n  const buffer = bs58check.decode(inString);\n  if (buffer.length !== 78) throw new TypeError('Invalid buffer length');\n  network = network || BITCOIN;\n  // 4 bytes: version bytes\n  const version = buffer.readUInt32BE(0);\n  if (version !== network.bip32.private && version !== network.bip32.public) throw new TypeError('Invalid network version');\n  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...\n  const depth = buffer[4];\n  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n  const parentFingerprint = buffer.readUInt32BE(5);\n  if (depth === 0) {\n    if (parentFingerprint !== 0x00000000) throw new TypeError('Invalid parent fingerprint');\n  }\n  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n  // This is encoded in MSB order. (0x00000000 if master key)\n  const index = buffer.readUInt32BE(9);\n  if (depth === 0 && index !== 0) throw new TypeError('Invalid index');\n  // 32 bytes: the chain code\n  const chainCode = buffer.slice(13, 45);\n  let hd;\n  // 33 bytes: private key data (0x00 + k)\n  if (version === network.bip32.private) {\n    if (buffer.readUInt8(45) !== 0x00) throw new TypeError('Invalid private key');\n    const k = buffer.slice(46, 78);\n    hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);\n    // 33 bytes: public key data (0x02 + X or 0x03 + X)\n  } else {\n    const X = buffer.slice(45, 78);\n    hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);\n  }\n  return hd;\n}\nexports.fromBase58 = fromBase58;\nfunction fromPrivateKey(privateKey, chainCode, network) {\n  return fromPrivateKeyLocal(privateKey, chainCode, network);\n}\nexports.fromPrivateKey = fromPrivateKey;\nfunction fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {\n  typeforce({\n    privateKey: UINT256_TYPE,\n    chainCode: UINT256_TYPE\n  }, {\n    privateKey,\n    chainCode\n  });\n  network = network || BITCOIN;\n  if (!ecc.isPrivate(privateKey)) throw new TypeError('Private key not in range [1, n)');\n  return new BIP32(privateKey, undefined, chainCode, network, depth, index, parentFingerprint);\n}\nfunction fromPublicKey(publicKey, chainCode, network) {\n  return fromPublicKeyLocal(publicKey, chainCode, network);\n}\nexports.fromPublicKey = fromPublicKey;\nfunction fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {\n  typeforce({\n    publicKey: typeforce.BufferN(33),\n    chainCode: UINT256_TYPE\n  }, {\n    publicKey,\n    chainCode\n  });\n  network = network || BITCOIN;\n  // verify the X coordinate is a point on the curve\n  if (!ecc.isPoint(publicKey)) throw new TypeError('Point is not on the curve');\n  return new BIP32(undefined, publicKey, chainCode, network, depth, index, parentFingerprint);\n}\nfunction fromSeed(seed, network) {\n  typeforce(typeforce.Buffer, seed);\n  if (seed.length < 16) throw new TypeError('Seed should be at least 128 bits');\n  if (seed.length > 64) throw new TypeError('Seed should be at most 512 bits');\n  network = network || BITCOIN;\n  const I = crypto.hmacSHA512(Buffer.from('Bitcoin seed', 'utf8'), seed);\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return fromPrivateKey(IL, IR, network);\n}\nexports.fromSeed = fromSeed;","map":{"version":3,"names":["Object","defineProperty","exports","value","crypto","require","bs58check","ecc","typeforce","wif","UINT256_TYPE","BufferN","NETWORK_TYPE","compile","UInt8","bip32","public","UInt32","private","BITCOIN","messagePrefix","bech32","pubKeyHash","scriptHash","HIGHEST_BIT","UINT31_MAX","Math","pow","BIP32Path","String","match","UInt31","BIP32","constructor","__D","__Q","chainCode","network","__DEPTH","arguments","length","undefined","__INDEX","__PARENT_FINGERPRINT","lowR","depth","index","parentFingerprint","publicKey","pointFromScalar","privateKey","identifier","hash160","fingerprint","slice","compressed","isNeutered","neutered","fromPublicKeyLocal","toBase58","version","buffer","Buffer","allocUnsafe","writeUInt32BE","writeUInt8","copy","encode","toWIF","TypeError","derive","isHardened","data","I","hmacSHA512","IL","IR","isPrivate","hd","ki","privateAdd","fromPrivateKeyLocal","readUInt32BE","Ki","pointAddScalar","deriveHardened","derivePath","path","splitPath","split","reduce","prevHd","indexStr","parseInt","sign","hash","Error","sig","extraData","alloc","counter","writeUIntLE","signWithEntropy","verify","signature","fromBase58","inString","decode","readUInt8","k","X","fromPrivateKey","fromPublicKey","isPoint","fromSeed","seed","from"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip32/src/bip32.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto = require(\"./crypto\");\nconst bs58check = require('bs58check');\nconst ecc = require('tiny-secp256k1');\nconst typeforce = require('typeforce');\nconst wif = require('wif');\nconst UINT256_TYPE = typeforce.BufferN(32);\nconst NETWORK_TYPE = typeforce.compile({\n    wif: typeforce.UInt8,\n    bip32: {\n        public: typeforce.UInt32,\n        private: typeforce.UInt32,\n    },\n});\nconst BITCOIN = {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bech32: 'bc',\n    bip32: {\n        public: 0x0488b21e,\n        private: 0x0488ade4,\n    },\n    pubKeyHash: 0x00,\n    scriptHash: 0x05,\n    wif: 0x80,\n};\nconst HIGHEST_BIT = 0x80000000;\nconst UINT31_MAX = Math.pow(2, 31) - 1;\nfunction BIP32Path(value) {\n    return (typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/) !== null);\n}\nfunction UInt31(value) {\n    return typeforce.UInt32(value) && value <= UINT31_MAX;\n}\nclass BIP32 {\n    constructor(__D, __Q, chainCode, network, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0x00000000) {\n        this.__D = __D;\n        this.__Q = __Q;\n        this.chainCode = chainCode;\n        this.network = network;\n        this.__DEPTH = __DEPTH;\n        this.__INDEX = __INDEX;\n        this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;\n        typeforce(NETWORK_TYPE, network);\n        this.lowR = false;\n    }\n    get depth() {\n        return this.__DEPTH;\n    }\n    get index() {\n        return this.__INDEX;\n    }\n    get parentFingerprint() {\n        return this.__PARENT_FINGERPRINT;\n    }\n    get publicKey() {\n        if (this.__Q === undefined)\n            this.__Q = ecc.pointFromScalar(this.__D, true);\n        return this.__Q;\n    }\n    get privateKey() {\n        return this.__D;\n    }\n    get identifier() {\n        return crypto.hash160(this.publicKey);\n    }\n    get fingerprint() {\n        return this.identifier.slice(0, 4);\n    }\n    get compressed() {\n        return true;\n    }\n    // Private === not neutered\n    // Public === neutered\n    isNeutered() {\n        return this.__D === undefined;\n    }\n    neutered() {\n        return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);\n    }\n    toBase58() {\n        const network = this.network;\n        const version = !this.isNeutered()\n            ? network.bip32.private\n            : network.bip32.public;\n        const buffer = Buffer.allocUnsafe(78);\n        // 4 bytes: version bytes\n        buffer.writeUInt32BE(version, 0);\n        // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....\n        buffer.writeUInt8(this.depth, 4);\n        // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n        buffer.writeUInt32BE(this.parentFingerprint, 5);\n        // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n        // This is encoded in big endian. (0x00000000 if master key)\n        buffer.writeUInt32BE(this.index, 9);\n        // 32 bytes: the chain code\n        this.chainCode.copy(buffer, 13);\n        // 33 bytes: the public key or private key data\n        if (!this.isNeutered()) {\n            // 0x00 + k for private keys\n            buffer.writeUInt8(0, 45);\n            this.privateKey.copy(buffer, 46);\n            // 33 bytes: the public key\n        }\n        else {\n            // X9.62 encoding for public keys\n            this.publicKey.copy(buffer, 45);\n        }\n        return bs58check.encode(buffer);\n    }\n    toWIF() {\n        if (!this.privateKey)\n            throw new TypeError('Missing private key');\n        return wif.encode(this.network.wif, this.privateKey, true);\n    }\n    // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions\n    derive(index) {\n        typeforce(typeforce.UInt32, index);\n        const isHardened = index >= HIGHEST_BIT;\n        const data = Buffer.allocUnsafe(37);\n        // Hardened child\n        if (isHardened) {\n            if (this.isNeutered())\n                throw new TypeError('Missing private key for hardened child key');\n            // data = 0x00 || ser256(kpar) || ser32(index)\n            data[0] = 0x00;\n            this.privateKey.copy(data, 1);\n            data.writeUInt32BE(index, 33);\n            // Normal child\n        }\n        else {\n            // data = serP(point(kpar)) || ser32(index)\n            //      = serP(Kpar) || ser32(index)\n            this.publicKey.copy(data, 0);\n            data.writeUInt32BE(index, 33);\n        }\n        const I = crypto.hmacSHA512(this.chainCode, data);\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n        // if parse256(IL) >= n, proceed with the next value for i\n        if (!ecc.isPrivate(IL))\n            return this.derive(index + 1);\n        // Private parent key -> private child key\n        let hd;\n        if (!this.isNeutered()) {\n            // ki = parse256(IL) + kpar (mod n)\n            const ki = ecc.privateAdd(this.privateKey, IL);\n            // In case ki == 0, proceed with the next value for i\n            if (ki == null)\n                return this.derive(index + 1);\n            hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n            // Public parent key -> public child key\n        }\n        else {\n            // Ki = point(parse256(IL)) + Kpar\n            //    = G*IL + Kpar\n            const Ki = ecc.pointAddScalar(this.publicKey, IL, true);\n            // In case Ki is the point at infinity, proceed with the next value for i\n            if (Ki === null)\n                return this.derive(index + 1);\n            hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));\n        }\n        return hd;\n    }\n    deriveHardened(index) {\n        typeforce(UInt31, index);\n        // Only derives hardened private keys by default\n        return this.derive(index + HIGHEST_BIT);\n    }\n    derivePath(path) {\n        typeforce(BIP32Path, path);\n        let splitPath = path.split('/');\n        if (splitPath[0] === 'm') {\n            if (this.parentFingerprint)\n                throw new TypeError('Expected master, got child');\n            splitPath = splitPath.slice(1);\n        }\n        return splitPath.reduce((prevHd, indexStr) => {\n            let index;\n            if (indexStr.slice(-1) === `'`) {\n                index = parseInt(indexStr.slice(0, -1), 10);\n                return prevHd.deriveHardened(index);\n            }\n            else {\n                index = parseInt(indexStr, 10);\n                return prevHd.derive(index);\n            }\n        }, this);\n    }\n    sign(hash, lowR) {\n        if (!this.privateKey)\n            throw new Error('Missing private key');\n        if (lowR === undefined)\n            lowR = this.lowR;\n        if (lowR === false) {\n            return ecc.sign(hash, this.privateKey);\n        }\n        else {\n            let sig = ecc.sign(hash, this.privateKey);\n            const extraData = Buffer.alloc(32, 0);\n            let counter = 0;\n            // if first try is lowR, skip the loop\n            // for second try and on, add extra entropy counting up\n            while (sig[0] > 0x7f) {\n                counter++;\n                extraData.writeUIntLE(counter, 0, 6);\n                sig = ecc.signWithEntropy(hash, this.privateKey, extraData);\n            }\n            return sig;\n        }\n    }\n    verify(hash, signature) {\n        return ecc.verify(hash, this.publicKey, signature);\n    }\n}\nfunction fromBase58(inString, network) {\n    const buffer = bs58check.decode(inString);\n    if (buffer.length !== 78)\n        throw new TypeError('Invalid buffer length');\n    network = network || BITCOIN;\n    // 4 bytes: version bytes\n    const version = buffer.readUInt32BE(0);\n    if (version !== network.bip32.private && version !== network.bip32.public)\n        throw new TypeError('Invalid network version');\n    // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...\n    const depth = buffer[4];\n    // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n    const parentFingerprint = buffer.readUInt32BE(5);\n    if (depth === 0) {\n        if (parentFingerprint !== 0x00000000)\n            throw new TypeError('Invalid parent fingerprint');\n    }\n    // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n    // This is encoded in MSB order. (0x00000000 if master key)\n    const index = buffer.readUInt32BE(9);\n    if (depth === 0 && index !== 0)\n        throw new TypeError('Invalid index');\n    // 32 bytes: the chain code\n    const chainCode = buffer.slice(13, 45);\n    let hd;\n    // 33 bytes: private key data (0x00 + k)\n    if (version === network.bip32.private) {\n        if (buffer.readUInt8(45) !== 0x00)\n            throw new TypeError('Invalid private key');\n        const k = buffer.slice(46, 78);\n        hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);\n        // 33 bytes: public key data (0x02 + X or 0x03 + X)\n    }\n    else {\n        const X = buffer.slice(45, 78);\n        hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);\n    }\n    return hd;\n}\nexports.fromBase58 = fromBase58;\nfunction fromPrivateKey(privateKey, chainCode, network) {\n    return fromPrivateKeyLocal(privateKey, chainCode, network);\n}\nexports.fromPrivateKey = fromPrivateKey;\nfunction fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {\n    typeforce({\n        privateKey: UINT256_TYPE,\n        chainCode: UINT256_TYPE,\n    }, { privateKey, chainCode });\n    network = network || BITCOIN;\n    if (!ecc.isPrivate(privateKey))\n        throw new TypeError('Private key not in range [1, n)');\n    return new BIP32(privateKey, undefined, chainCode, network, depth, index, parentFingerprint);\n}\nfunction fromPublicKey(publicKey, chainCode, network) {\n    return fromPublicKeyLocal(publicKey, chainCode, network);\n}\nexports.fromPublicKey = fromPublicKey;\nfunction fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {\n    typeforce({\n        publicKey: typeforce.BufferN(33),\n        chainCode: UINT256_TYPE,\n    }, { publicKey, chainCode });\n    network = network || BITCOIN;\n    // verify the X coordinate is a point on the curve\n    if (!ecc.isPoint(publicKey))\n        throw new TypeError('Point is not on the curve');\n    return new BIP32(undefined, publicKey, chainCode, network, depth, index, parentFingerprint);\n}\nfunction fromSeed(seed, network) {\n    typeforce(typeforce.Buffer, seed);\n    if (seed.length < 16)\n        throw new TypeError('Seed should be at least 128 bits');\n    if (seed.length > 64)\n        throw new TypeError('Seed should be at most 512 bits');\n    network = network || BITCOIN;\n    const I = crypto.hmacSHA512(Buffer.from('Bitcoin seed', 'utf8'), seed);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return fromPrivateKey(IL, IR, network);\n}\nexports.fromSeed = fromSeed;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}