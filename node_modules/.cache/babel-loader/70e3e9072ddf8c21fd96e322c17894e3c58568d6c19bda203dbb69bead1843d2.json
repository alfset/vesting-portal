{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedTransaction, clearAllTransactions, finalizeTransaction, updateTransaction, updateUnderlyingStatus, noWalletTxList } from './actions';\nconst now = () => new Date().getTime();\nexport const initialState = {};\nexport default createReducer(initialState, builder => builder.addCase(addTransaction, (transactions, _ref) => {\n  var _transactions$chainId, _transactions$chainId2;\n  let {\n    payload: {\n      chainId,\n      from,\n      hash,\n      approval,\n      summary,\n      claim,\n      value,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    }\n  } = _ref;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if ((_transactions$chainId = transactions[chainId]) === null || _transactions$chainId === void 0 ? void 0 : _transactions$chainId[hash]) {\n    throw Error('Attempted to add existing transaction.');\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n  txs[hash] = {\n    hash,\n    approval,\n    summary,\n    claim,\n    from,\n    addedTime: now(),\n    value,\n    toChainId,\n    toAddress,\n    symbol,\n    version,\n    routerToken,\n    token,\n    logoUrl,\n    isLiquidity,\n    fromInfo,\n    toInfo\n  };\n  // console.log(txs)\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  transactions[chainId] = txs;\n}).addCase(clearAllTransactions, (transactions, _ref2) => {\n  let {\n    payload: {\n      chainId\n    }\n  } = _ref2;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (!transactions[chainId]) return;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  transactions[chainId] = {};\n}).addCase(checkedTransaction, (transactions, _ref3) => {\n  var _transactions$chainId3;\n  let {\n    payload: {\n      chainId,\n      hash,\n      blockNumber\n    }\n  } = _ref3;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n  if (!tx) {\n    return;\n  }\n  if (!tx.lastCheckedBlockNumber) {\n    tx.lastCheckedBlockNumber = blockNumber;\n  } else {\n    tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n  }\n}).addCase(finalizeTransaction, (transactions, _ref4) => {\n  var _transactions$chainId4;\n  let {\n    payload: {\n      hash,\n      chainId,\n      receipt\n    }\n  } = _ref4;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n  if (!tx) {\n    return;\n  }\n  tx.receipt = receipt;\n  tx.confirmedTime = now();\n}).addCase(updateTransaction, (transactions, _ref5) => {\n  var _transactions$chainId5;\n  let {\n    payload: {\n      hash,\n      chainId,\n      info\n    }\n  } = _ref5;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const tx = (_transactions$chainId5 = transactions[chainId]) === null || _transactions$chainId5 === void 0 ? void 0 : _transactions$chainId5[hash];\n  if (!tx) {\n    return;\n  }\n  tx.info = {\n    ...info\n    // bind: info?.bind,\n    // confirmations: info?.confirmations,\n    // destChainID: info?.destChainID,\n    // from: info?.from,\n    // historyType: info?.historyType,\n    // memo: info?.memo,\n    // pairid: info?.pairid,\n    // srcChainID: info?.srcChainID,\n    // status: info?.status,\n    // statusmsg: info?.statusmsg,\n    // swapheight: info?.swapheight,\n    // swapnonce: info?.swapnonce,\n    // swaptx: info?.swaptx,\n    // swaptype: info?.swaptype,\n    // swapvalue: info?.swapvalue,\n    // formatswapvalue: info?.formatswapvalue,\n    // timestamp: info?.timestamp,\n    // to: info?.to,\n    // txheight: info?.txheight,\n    // txid: info?.txid,\n    // txto: info?.txto,\n    // value: info?.value,\n    // time: info?.time,\n  };\n}).addCase(updateUnderlyingStatus, (transactions, _ref6) => {\n  var _transactions$chainId6;\n  let {\n    payload: {\n      hash,\n      chainId,\n      isReceiveAnyToken\n    }\n  } = _ref6;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const tx = (_transactions$chainId6 = transactions[chainId]) === null || _transactions$chainId6 === void 0 ? void 0 : _transactions$chainId6[hash];\n  if (!tx) {\n    return;\n  }\n  tx.isReceiveAnyToken = isReceiveAnyToken;\n}).addCase(noWalletTxList, (transactions, _ref7) => {\n  var _transactions$chainId7, _transactions$chainId8;\n  let {\n    payload: {\n      hash,\n      chainId,\n      summary,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    }\n  } = _ref7;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if ((_transactions$chainId7 = transactions[chainId]) === null || _transactions$chainId7 === void 0 ? void 0 : _transactions$chainId7[hash]) {\n    throw Error('Transaction already registered.');\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const txs = (_transactions$chainId8 = transactions[chainId]) !== null && _transactions$chainId8 !== void 0 ? _transactions$chainId8 : {};\n  txs[hash] = {\n    hash: hash,\n    addedTime: Date.now(),\n    summary,\n    toChainId,\n    toAddress,\n    symbol,\n    version,\n    routerToken,\n    token,\n    logoUrl,\n    isLiquidity,\n    fromInfo,\n    toInfo\n  };\n  // console.log(txs)\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  transactions[chainId] = txs;\n}));","map":{"version":3,"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","updateTransaction","updateUnderlyingStatus","noWalletTxList","now","Date","getTime","initialState","builder","addCase","transactions","_ref","_transactions$chainId","_transactions$chainId2","payload","chainId","from","hash","approval","summary","claim","value","toChainId","toAddress","symbol","version","routerToken","token","logoUrl","isLiquidity","fromInfo","toInfo","Error","txs","addedTime","_ref2","_ref3","_transactions$chainId3","blockNumber","tx","lastCheckedBlockNumber","Math","max","_ref4","_transactions$chainId4","receipt","confirmedTime","_ref5","_transactions$chainId5","info","_ref6","_transactions$chainId6","isReceiveAnyToken","_ref7","_transactions$chainId7","_transactions$chainId8"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/transactions/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n  updateTransaction,\n  updateUnderlyingStatus,\n  noWalletTxList\n} from './actions'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from?: string\n  value?: string\n  toChainId?: string\n  toAddress?: string\n  symbol?: string\n  version?: string\n  routerToken?: string\n  info?: any\n  token?: any\n  logoUrl?: any\n  isLiquidity?: any\n  isReceiveAnyToken?: any,\n  fromInfo?: any,\n  toInfo?: any,\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(addTransaction, (transactions, { payload: {\n      chainId,\n      from,\n      hash,\n      approval,\n      summary,\n      claim,\n      value,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.')\n      }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = {\n        hash,\n        approval,\n        summary,\n        claim,\n        from,\n        addedTime: now(),\n        value,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }\n      // console.log(txs)\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      transactions[chainId] = txs\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      if (!transactions[chainId]) return\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      transactions[chainId] = {}\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    })\n    .addCase(updateTransaction, (transactions, { payload: { hash, chainId, info } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.info = {\n        ...info\n        // bind: info?.bind,\n        // confirmations: info?.confirmations,\n        // destChainID: info?.destChainID,\n        // from: info?.from,\n        // historyType: info?.historyType,\n        // memo: info?.memo,\n        // pairid: info?.pairid,\n        // srcChainID: info?.srcChainID,\n        // status: info?.status,\n        // statusmsg: info?.statusmsg,\n        // swapheight: info?.swapheight,\n        // swapnonce: info?.swapnonce,\n        // swaptx: info?.swaptx,\n        // swaptype: info?.swaptype,\n        // swapvalue: info?.swapvalue,\n        // formatswapvalue: info?.formatswapvalue,\n        // timestamp: info?.timestamp,\n        // to: info?.to,\n        // txheight: info?.txheight,\n        // txid: info?.txid,\n        // txto: info?.txto,\n        // value: info?.value,\n        // time: info?.time,\n      }\n    })\n    .addCase(updateUnderlyingStatus, (transactions, { payload: { hash, chainId, isReceiveAnyToken } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.isReceiveAnyToken = isReceiveAnyToken\n    })\n    .addCase(noWalletTxList, (transactions, { payload: { \n      hash,\n      chainId,\n      summary,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n     } }) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Transaction already registered.')\n      }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = {\n        hash: hash,\n        addedTime: Date.now(),\n        summary,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }\n      // console.log(txs)\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      transactions[chainId] = txs\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}