{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateTime = exports.toSeconds = exports.fromSeconds = exports.toRfc3339WithNanoseconds = exports.fromRfc3339WithNanoseconds = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nfunction fromRfc3339WithNanoseconds(dateTimeString) {\n  const out = (0, encoding_1.fromRfc3339)(dateTimeString);\n  const nanosecondsMatch = dateTimeString.match(/\\.(\\d+)Z$/);\n  const nanoseconds = nanosecondsMatch ? nanosecondsMatch[1].slice(3) : \"\";\n  out.nanoseconds = parseInt(nanoseconds.padEnd(6, \"0\"), 10);\n  return out;\n}\nexports.fromRfc3339WithNanoseconds = fromRfc3339WithNanoseconds;\nfunction toRfc3339WithNanoseconds(dateTime) {\n  var _a, _b;\n  const millisecondIso = dateTime.toISOString();\n  const nanoseconds = (_b = (_a = dateTime.nanoseconds) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : \"\";\n  return \"\".concat(millisecondIso.slice(0, -1)).concat(nanoseconds.padStart(6, \"0\"), \"Z\");\n}\nexports.toRfc3339WithNanoseconds = toRfc3339WithNanoseconds;\nfunction fromSeconds(seconds) {\n  let nanos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const checkedNanos = new math_1.Uint32(nanos).toNumber();\n  if (checkedNanos > 999999999) {\n    throw new Error(\"Nano seconds must not exceed 999999999\");\n  }\n  const out = new Date(seconds * 1000 + Math.floor(checkedNanos / 1000000));\n  out.nanoseconds = checkedNanos % 1000000;\n  return out;\n}\nexports.fromSeconds = fromSeconds;\n/**\n * Calculates the UNIX timestamp in seconds as well as the nanoseconds after the given second.\n *\n * This is useful when dealing with external systems like the protobuf type\n * [.google.protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp)\n * or any other system that does not use millisecond precision.\n */\nfunction toSeconds(date) {\n  var _a;\n  return {\n    seconds: Math.floor(date.getTime() / 1000),\n    nanos: date.getTime() % 1000 * 1000000 + ((_a = date.nanoseconds) !== null && _a !== void 0 ? _a : 0)\n  };\n}\nexports.toSeconds = toSeconds;\n/** @deprecated Use fromRfc3339WithNanoseconds/toRfc3339WithNanoseconds instead */\nclass DateTime {\n  /** @deprecated Use fromRfc3339WithNanoseconds instead */\n  static decode(dateTimeString) {\n    return fromRfc3339WithNanoseconds(dateTimeString);\n  }\n  /** @deprecated Use toRfc3339WithNanoseconds instead */\n  static encode(dateTime) {\n    return toRfc3339WithNanoseconds(dateTime);\n  }\n}\nexports.DateTime = DateTime;","map":{"version":3,"names":["encoding_1","require","math_1","fromRfc3339WithNanoseconds","dateTimeString","out","fromRfc3339","nanosecondsMatch","match","nanoseconds","slice","parseInt","padEnd","exports","toRfc3339WithNanoseconds","dateTime","millisecondIso","toISOString","_b","_a","toString","concat","padStart","fromSeconds","seconds","nanos","arguments","length","undefined","checkedNanos","Uint32","toNumber","Error","Date","Math","floor","toSeconds","date","getTime","DateTime","decode","encode"],"sources":["../src/dates.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AAaA,SAAgBE,0BAA0BA,CAACC,cAAsB;EAC/D,MAAMC,GAAG,GAAwB,IAAAL,UAAA,CAAAM,WAAW,EAACF,cAAc,CAAC;EAC5D,MAAMG,gBAAgB,GAAGH,cAAc,CAACI,KAAK,CAAC,WAAW,CAAC;EAC1D,MAAMC,WAAW,GAAGF,gBAAgB,GAAGA,gBAAgB,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EACxEL,GAAG,CAACI,WAAW,GAAGE,QAAQ,CAACF,WAAW,CAACG,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;EAC1D,OAAOP,GAAG;AACZ;AANAQ,OAAA,CAAAV,0BAAA,GAAAA,0BAAA;AAQA,SAAgBW,wBAAwBA,CAACC,QAAqC;;EAC5E,MAAMC,cAAc,GAAGD,QAAQ,CAACE,WAAW,EAAE;EAC7C,MAAMR,WAAW,GAAG,CAAAS,EAAA,IAAAC,EAAA,GAAAJ,QAAQ,CAACN,WAAW,cAAAU,EAAA,uBAAAA,EAAA,CAAEC,QAAQ,EAAE,cAAAF,EAAA,cAAAA,EAAA,GAAI,EAAE;EAC1D,UAAAG,MAAA,CAAUL,cAAc,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAAW,MAAA,CAAGZ,WAAW,CAACa,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AACtE;AAJAT,OAAA,CAAAC,wBAAA,GAAAA,wBAAA;AAMA,SAAgBS,WAAWA,CAACC,OAAe,EAAW;EAAA,IAATC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACpD,MAAMG,YAAY,GAAG,IAAI3B,MAAA,CAAA4B,MAAM,CAACL,KAAK,CAAC,CAACM,QAAQ,EAAE;EACjD,IAAIF,YAAY,GAAG,SAAW,EAAE;IAC9B,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAAC;;EAE3D,MAAM3B,GAAG,GAAwB,IAAI4B,IAAI,CAACT,OAAO,GAAG,IAAI,GAAGU,IAAI,CAACC,KAAK,CAACN,YAAY,GAAG,OAAO,CAAC,CAAC;EAC9FxB,GAAG,CAACI,WAAW,GAAGoB,YAAY,GAAG,OAAO;EACxC,OAAOxB,GAAG;AACZ;AARAQ,OAAA,CAAAU,WAAA,GAAAA,WAAA;AAUA;;;;;;;AAOA,SAAgBa,SAASA,CAACC,IAAiC;;EACzD,OAAO;IACLb,OAAO,EAAEU,IAAI,CAACC,KAAK,CAACE,IAAI,CAACC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC1Cb,KAAK,EAAGY,IAAI,CAACC,OAAO,EAAE,GAAG,IAAI,GAAI,OAAO,IAAI,CAAAnB,EAAA,GAAAkB,IAAI,CAAC5B,WAAW,cAAAU,EAAA,cAAAA,EAAA,GAAI,CAAC;GAClE;AACH;AALAN,OAAA,CAAAuB,SAAA,GAAAA,SAAA;AAOA;AACA,MAAaG,QAAQ;EACnB;EACO,OAAOC,MAAMA,CAACpC,cAAsB;IACzC,OAAOD,0BAA0B,CAACC,cAAc,CAAC;EACnD;EAEA;EACO,OAAOqC,MAAMA,CAAC1B,QAAqC;IACxD,OAAOD,wBAAwB,CAACC,QAAQ,CAAC;EAC3C;;AATFF,OAAA,CAAA0B,QAAA,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}