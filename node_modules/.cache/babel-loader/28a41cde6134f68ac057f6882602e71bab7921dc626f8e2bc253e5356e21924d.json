{"ast":null,"code":"import { useCallback, useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport {\n// useFetchMergeTokenListCallback,\nuseFetchTokenListVersionCallback } from '../../hooks/useFetchListCallback';\n// import { useFetchListCallback, useFetchTokenListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval';\nimport config from '../../config';\nexport default function Updater() {\n  const {\n    chainId\n  } = useActiveReact();\n  const dispatch = useDispatch();\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId;\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID;\n    }\n    return undefined;\n  }, [chainId]);\n  const fetchTokenListVersion = useFetchTokenListVersionCallback();\n  const fetchTokenListsVersionCallback = useCallback(() => {\n    if (useChain) {\n      fetchTokenListVersion().catch(error => console.debug('interval list fetching error', error));\n    }\n  }, [fetchTokenListVersion, useChain]);\n\n  // 每 半 分钟获取所有列表，但仅在我们初始化库之后\n  useInterval(fetchTokenListsVersionCallback, 1000 * 30, false);\n  useEffect(() => {\n    fetchTokenListsVersionCallback();\n  }, [dispatch, fetchTokenListsVersionCallback, useChain]);\n  return null;\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useDispatch","useActiveReact","useFetchTokenListVersionCallback","useInterval","config","Updater","chainId","dispatch","useChain","getCurChainInfo","chainID","undefined","fetchTokenListVersion","fetchTokenListsVersionCallback","catch","error","console","debug"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/lists/updater.ts"],"sourcesContent":["\nimport { useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport {\n  // useFetchMergeTokenListCallback,\n  useFetchTokenListVersionCallback\n } from '../../hooks/useFetchListCallback'\n// import { useFetchListCallback, useFetchTokenListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\n\nimport { AppDispatch } from '../index'\n\nimport config from '../../config'\n\nexport default function Updater(): null {\n  const { chainId } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID\n    }\n    return undefined\n  }, [chainId])\n  \n  const fetchTokenListVersion = useFetchTokenListVersionCallback()\n\n  const fetchTokenListsVersionCallback = useCallback(() => {\n    if (useChain) {\n      fetchTokenListVersion().catch(error => console.debug('interval list fetching error', error))\n    }\n  }, [fetchTokenListVersion, useChain])\n\n  // 每 半 分钟获取所有列表，但仅在我们初始化库之后\n  useInterval(fetchTokenListsVersionCallback, 1000 * 30, false)\n\n  useEffect(() => {\n    fetchTokenListsVersionCallback()\n  }, [dispatch, fetchTokenListsVersionCallback, useChain])\n\n  return null\n}\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACvD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,cAAc,QAAQ,4BAA4B;AAC3D;AACE;AACAC,gCAAgC,QAC1B,kCAAkC;AAC1C;AACA,OAAOC,WAAW,MAAM,yBAAyB;AAIjD,OAAOC,MAAM,MAAM,cAAc;AAEjC,eAAe,SAASC,OAAOA,CAAA,EAAS;EACtC,MAAM;IAAEC;EAAQ,CAAC,GAAGL,cAAc,CAAC,CAAC;EACpC,MAAMM,QAAQ,GAAGP,WAAW,CAAc,CAAC;EAE3C,MAAMQ,QAAQ,GAAGT,OAAO,CAAC,MAAM;IAC7B,IAAIO,OAAO,EAAE;MACX,OAAOA,OAAO;IAChB,CAAC,MAAM,IAAIF,MAAM,CAACK,eAAe,CAACH,OAAO,CAAC,CAACI,OAAO,EAAE;MAClD,OAAON,MAAM,CAACK,eAAe,CAACH,OAAO,CAAC,CAACI,OAAO;IAChD;IACA,OAAOC,SAAS;EAClB,CAAC,EAAE,CAACL,OAAO,CAAC,CAAC;EAEb,MAAMM,qBAAqB,GAAGV,gCAAgC,CAAC,CAAC;EAEhE,MAAMW,8BAA8B,GAAGhB,WAAW,CAAC,MAAM;IACvD,IAAIW,QAAQ,EAAE;MACZI,qBAAqB,CAAC,CAAC,CAACE,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,KAAK,CAAC,CAAC;IAC9F;EACF,CAAC,EAAE,CAACH,qBAAqB,EAAEJ,QAAQ,CAAC,CAAC;;EAErC;EACAL,WAAW,CAACU,8BAA8B,EAAE,IAAI,GAAG,EAAE,EAAE,KAAK,CAAC;EAE7Df,SAAS,CAAC,MAAM;IACde,8BAA8B,CAAC,CAAC;EAClC,CAAC,EAAE,CAACN,QAAQ,EAAEM,8BAA8B,EAAEL,QAAQ,CAAC,CAAC;EAExD,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}