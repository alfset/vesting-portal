{"ast":null,"code":"import{Contract}from'@ethersproject/contracts';import{getAddress}from'@ethersproject/address';import{AddressZero}from'@ethersproject/constants';import{BigNumber}from'@ethersproject/bignumber';import config from'../config';// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value){try{return getAddress(value);}catch{return false;}}export function getEtherscanLink(chainId,data,type){switch(type){case'transaction':{const url=config.getCurChainInfo(chainId).lookHash+data;return url;}case'token':{const url=config.getCurChainInfo(chainId).lookAddr+data;return url;}case'block':{const url=config.getCurChainInfo(chainId).lookBlock+data;return url;}case'address':default:{const url=config.getCurChainInfo(chainId).lookAddr+data;return url;}}}// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address){let chars=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;// const parsed = isAddress(address)\nconst parsed=address;// if (!parsed) {\n//   throw Error(`Invalid 'address' parameter '${address}'.`)\n// }\nreturn\"\".concat(parsed.substring(0,chars+2),\"...\").concat(parsed.substring(42-chars));}export function shortenAddress1(address){let chars=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;return\"\".concat(address.substring(0,chars+2),\"...\").concat(address.substring(address.length-chars));}// add 10%\nexport function calculateGasMargin(value){return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));}// account is not optional\nexport function getSigner(library,account){return library.getSigner(account).connectUnchecked();}// account is optional\nexport function getProviderOrSigner(library,account){return account?getSigner(library,account):library;}// account is optional\nexport function getContract(address,ABI,library,account){if(!isAddress(address)||address===AddressZero){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return new Contract(address,ABI,getProviderOrSigner(library,account));}export function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&');// $& means the whole matched string\n}","map":{"version":3,"names":["Contract","getAddress","AddressZero","BigNumber","config","isAddress","value","getEtherscanLink","chainId","data","type","url","getCurChainInfo","lookHash","lookAddr","lookBlock","shortenAddress","address","chars","arguments","length","undefined","parsed","concat","substring","shortenAddress1","calculateGasMargin","mul","from","add","div","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","Error","escapeRegExp","string","replace"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/index.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport config from '../config'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nexport function getEtherscanLink(\n  chainId: any,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n\n  switch (type) {\n    case 'transaction': {\n      const url = config.getCurChainInfo(chainId).lookHash + data\n      return url\n    }\n    case 'token': {\n      const url = config.getCurChainInfo(chainId).lookAddr + data\n      return url\n    }\n    case 'block': {\n      const url = config.getCurChainInfo(chainId).lookBlock + data\n      return url\n    }\n    case 'address':\n    default: {\n      const url = config.getCurChainInfo(chainId).lookAddr + data\n      return url\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  // const parsed = isAddress(address)\n  const parsed = address\n  // if (!parsed) {\n  //   throw Error(`Invalid 'address' parameter '${address}'.`)\n  // }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\nexport function shortenAddress1(address: string, chars = 4): string {\n  return `${address.substring(0, chars + 2)}...${address.substring(address.length - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}