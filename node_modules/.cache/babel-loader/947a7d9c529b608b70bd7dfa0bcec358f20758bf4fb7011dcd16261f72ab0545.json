{"ast":null,"code":"import{useCallback,useEffect}from'react';import{useActiveReact}from'../../hooks/useActiveReact';import useInterval from'../../hooks/useInterval';import{useDispatch}from'react-redux';import{btcBalanceList}from'./actions';import{useLoginBtc,// useAptAllowance,\nuseBtcBalance}from'./index';export default function Updater(){const{chainId,account}=useActiveReact();const dispatch=useDispatch();// const {setAptAllowance} = useAptAllowance()\nconst{loginBtc}=useLoginBtc();const{getBtcBalance}=useBtcBalance();const getBalance=useCallback(()=>{getBtcBalance(chainId,account).then(res=>{var _res$chain_stats;dispatch(btcBalanceList({list:{NATIVE:res===null||res===void 0?void 0:(_res$chain_stats=res.chain_stats)===null||_res$chain_stats===void 0?void 0:_res$chain_stats.funded_txo_sum}}));});},[account,chainId,dispatch]);useEffect(()=>{getBalance();},[account,chainId,dispatch]);useInterval(getBalance,1000*5);const getAptosAddress=useCallback(()=>{// console.log(chainId)\nloginBtc(chainId);},[chainId]);useEffect(()=>{getAptosAddress();},[chainId]);return null;}","map":{"version":3,"names":["useCallback","useEffect","useActiveReact","useInterval","useDispatch","btcBalanceList","useLoginBtc","useBtcBalance","Updater","chainId","account","dispatch","loginBtc","getBtcBalance","getBalance","then","res","_res$chain_stats","list","NATIVE","chain_stats","funded_txo_sum","getAptosAddress"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/btc/updater.ts"],"sourcesContent":["import { useCallback, useEffect } from 'react'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport useInterval from '../../hooks/useInterval'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from '../../state'\nimport {btcBalanceList} from './actions'\n\nimport {\n  useLoginBtc,\n  // useAptAllowance,\n  useBtcBalance\n} from './index'\n\nexport default function Updater(): null {\n  const { chainId,account } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n  // const {setAptAllowance} = useAptAllowance()\n  const {loginBtc} = useLoginBtc()\n  const {getBtcBalance} = useBtcBalance()\n\n  const getBalance = useCallback(() => {\n    getBtcBalance(chainId, account).then((res:any) => {\n      dispatch(btcBalanceList({list: {NATIVE: res?.chain_stats?.funded_txo_sum}}))\n    })\n  }, [account, chainId, dispatch])\n\n  useEffect(() => {\n    getBalance()\n  }, [account, chainId, dispatch])\n\n  useInterval(getBalance, 1000 * 5)\n\n  const getAptosAddress = useCallback(() => {\n    // console.log(chainId)\n    loginBtc(chainId)\n  }, [chainId])\n\n  useEffect(() => {\n    getAptosAddress()\n  }, [chainId])\n\n  return null\n}"],"mappings":"AAAA,OAASA,WAAW,CAAEC,SAAS,KAAQ,OAAO,CAC9C,OAASC,cAAc,KAAQ,4BAA4B,CAC3D,MAAO,CAAAC,WAAW,KAAM,yBAAyB,CACjD,OAASC,WAAW,KAAQ,aAAa,CAEzC,OAAQC,cAAc,KAAO,WAAW,CAExC,OACEC,WAAW,CACX;AACAC,aAAa,KACR,SAAS,CAEhB,cAAe,SAAS,CAAAC,OAAOA,CAAA,CAAS,CACtC,KAAM,CAAEC,OAAO,CAACC,OAAQ,CAAC,CAAGR,cAAc,CAAC,CAAC,CAC5C,KAAM,CAAAS,QAAQ,CAAGP,WAAW,CAAc,CAAC,CAC3C;AACA,KAAM,CAACQ,QAAQ,CAAC,CAAGN,WAAW,CAAC,CAAC,CAChC,KAAM,CAACO,aAAa,CAAC,CAAGN,aAAa,CAAC,CAAC,CAEvC,KAAM,CAAAO,UAAU,CAAGd,WAAW,CAAC,IAAM,CACnCa,aAAa,CAACJ,OAAO,CAAEC,OAAO,CAAC,CAACK,IAAI,CAAEC,GAAO,EAAK,KAAAC,gBAAA,CAChDN,QAAQ,CAACN,cAAc,CAAC,CAACa,IAAI,CAAE,CAACC,MAAM,CAAEH,GAAG,SAAHA,GAAG,kBAAAC,gBAAA,CAAHD,GAAG,CAAEI,WAAW,UAAAH,gBAAA,iBAAhBA,gBAAA,CAAkBI,cAAc,CAAC,CAAC,CAAC,CAAC,CAC9E,CAAC,CAAC,CACJ,CAAC,CAAE,CAACX,OAAO,CAAED,OAAO,CAAEE,QAAQ,CAAC,CAAC,CAEhCV,SAAS,CAAC,IAAM,CACda,UAAU,CAAC,CAAC,CACd,CAAC,CAAE,CAACJ,OAAO,CAAED,OAAO,CAAEE,QAAQ,CAAC,CAAC,CAEhCR,WAAW,CAACW,UAAU,CAAE,IAAI,CAAG,CAAC,CAAC,CAEjC,KAAM,CAAAQ,eAAe,CAAGtB,WAAW,CAAC,IAAM,CACxC;AACAY,QAAQ,CAACH,OAAO,CAAC,CACnB,CAAC,CAAE,CAACA,OAAO,CAAC,CAAC,CAEbR,SAAS,CAAC,IAAM,CACdqB,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,CAACb,OAAO,CAAC,CAAC,CAEb,MAAO,KAAI,CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}