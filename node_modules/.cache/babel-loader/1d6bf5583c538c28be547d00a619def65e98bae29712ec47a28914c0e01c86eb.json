{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nexports.setTrustLineFlags = setTrustLineFlags;\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _keypair = require('../keypair');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Creates a trustline flag configuring operation.\n *\n * For the flags, set them to true to enable them and false to disable them. Any\n * unmodified operations will be marked `undefined` in the result.\n *\n * Note that you can only **clear** the clawbackEnabled flag set; it must be set\n * account-wide via operations.SetOptions (setting\n * xdr.AccountFlags.clawbackEnabled).\n *\n * @function\n * @alias Operation.setTrustLineFlags\n *\n * @param {object} opts - Options object\n * @param {string} opts.trustor     - the account whose trustline this is\n * @param {Asset}  opts.asset       - the asset on the trustline\n * @param {object} opts.flags       - the set of flags to modify\n *\n * @param {bool}   [opts.flags.authorized]  - authorize account to perform\n *     transactions with its credit\n * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize\n *     account to maintain and reduce liabilities for its credit\n * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on\n *     this trustlines from having clawbacks enabled (this flag can only be set\n *     to false!)\n * @param {string} [opts.source] - The source account for the operation.\n *                                 Defaults to the transaction's source account.\n *\n * @note You must include at least one flag.\n *\n * @return {xdr.SetTrustLineFlagsOp}\n *\n * @link xdr.AccountFlags\n * @link xdr.TrustLineFlags\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation\n * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options\n */\nfunction setTrustLineFlags() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (_typeof(opts.flags) !== 'object' || Object.keys(opts.flags).length === 0) {\n    throw new Error('opts.flags must be a map of boolean flags to modify');\n  }\n  var mapping = {\n    authorized: _xdr2.default.TrustLineFlags.authorizedFlag(),\n    authorizedToMaintainLiabilities: _xdr2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n    clawbackEnabled: _xdr2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n  };\n\n  /* eslint no-bitwise: \"off\" */\n  var clearFlag = 0;\n  var setFlag = 0;\n  Object.keys(opts.flags).forEach(function (flagName) {\n    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {\n      throw new Error('unsupported flag name specified: ' + flagName);\n    }\n    var flagValue = opts.flags[flagName];\n    var bit = mapping[flagName].value;\n    if (flagValue === true) {\n      setFlag |= bit;\n    } else if (flagValue === false) {\n      clearFlag |= bit;\n    }\n  });\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.clearFlags = clearFlag;\n  attributes.setFlags = setFlag;\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.setTrustLineFlags(new _xdr2.default.SetTrustLineFlagsOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","setTrustLineFlags","_xdr","require","_xdr2","_interopRequireDefault","_keypair","__esModule","default","opts","arguments","length","undefined","attributes","flags","keys","Error","mapping","authorized","TrustLineFlags","authorizedFlag","authorizedToMaintainLiabilities","authorizedToMaintainLiabilitiesFlag","clawbackEnabled","trustlineClawbackEnabledFlag","clearFlag","setFlag","forEach","flagName","hasOwnProperty","call","flagValue","bit","trustor","Keypair","fromPublicKey","xdrAccountId","asset","toXDRObject","clearFlags","setFlags","opAttributes","body","OperationBody","SetTrustLineFlagsOp","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/set_trustline_flags.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.setTrustLineFlags = setTrustLineFlags;\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _keypair = require('../keypair');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a trustline flag configuring operation.\n *\n * For the flags, set them to true to enable them and false to disable them. Any\n * unmodified operations will be marked `undefined` in the result.\n *\n * Note that you can only **clear** the clawbackEnabled flag set; it must be set\n * account-wide via operations.SetOptions (setting\n * xdr.AccountFlags.clawbackEnabled).\n *\n * @function\n * @alias Operation.setTrustLineFlags\n *\n * @param {object} opts - Options object\n * @param {string} opts.trustor     - the account whose trustline this is\n * @param {Asset}  opts.asset       - the asset on the trustline\n * @param {object} opts.flags       - the set of flags to modify\n *\n * @param {bool}   [opts.flags.authorized]  - authorize account to perform\n *     transactions with its credit\n * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize\n *     account to maintain and reduce liabilities for its credit\n * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on\n *     this trustlines from having clawbacks enabled (this flag can only be set\n *     to false!)\n * @param {string} [opts.source] - The source account for the operation.\n *                                 Defaults to the transaction's source account.\n *\n * @note You must include at least one flag.\n *\n * @return {xdr.SetTrustLineFlagsOp}\n *\n * @link xdr.AccountFlags\n * @link xdr.TrustLineFlags\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation\n * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options\n */\nfunction setTrustLineFlags() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var attributes = {};\n\n  if (_typeof(opts.flags) !== 'object' || Object.keys(opts.flags).length === 0) {\n    throw new Error('opts.flags must be a map of boolean flags to modify');\n  }\n\n  var mapping = {\n    authorized: _xdr2.default.TrustLineFlags.authorizedFlag(),\n    authorizedToMaintainLiabilities: _xdr2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n    clawbackEnabled: _xdr2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n  };\n\n  /* eslint no-bitwise: \"off\" */\n  var clearFlag = 0;\n  var setFlag = 0;\n\n  Object.keys(opts.flags).forEach(function (flagName) {\n    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {\n      throw new Error('unsupported flag name specified: ' + flagName);\n    }\n\n    var flagValue = opts.flags[flagName];\n    var bit = mapping[flagName].value;\n    if (flagValue === true) {\n      setFlag |= bit;\n    } else if (flagValue === false) {\n      clearFlag |= bit;\n    }\n  });\n\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.clearFlags = clearFlag;\n  attributes.setFlags = setFlag;\n\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.setTrustLineFlags(new _xdr2.default.SetTrustLineFlagsOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}