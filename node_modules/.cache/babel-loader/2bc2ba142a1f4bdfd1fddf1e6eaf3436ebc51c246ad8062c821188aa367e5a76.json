{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = exports.AuthClawbackEnabledFlag = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}(); /* eslint-disable no-bitwise */\n\nvar _jsXdr = require('js-xdr');\nvar _bignumber = require('bignumber.js');\nvar _bignumber2 = _interopRequireDefault(_bignumber);\nvar _trimEnd = require('lodash/trimEnd');\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\nvar _isUndefined = require('lodash/isUndefined');\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\nvar _isString = require('lodash/isString');\nvar _isString2 = _interopRequireDefault(_isString);\nvar _isNumber = require('lodash/isNumber');\nvar _isNumber2 = _interopRequireDefault(_isNumber);\nvar _isFinite = require('lodash/isFinite');\nvar _isFinite2 = _interopRequireDefault(_isFinite);\nvar _continued_fraction = require('./util/continued_fraction');\nvar _asset = require('./asset');\nvar _liquidity_pool_asset = require('./liquidity_pool_asset');\nvar _claimant = require('./claimant');\nvar _strkey = require('./strkey');\nvar _liquidity_pool_id = require('./liquidity_pool_id');\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _index = require('./operations/index');\nvar ops = _interopRequireWildcard(_index);\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing\n * account to give other accounts permission before they can hold the issuing\n * accountâ€™s credit.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing\n * account to revoke its credit held by other accounts.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the\n * authorization flags can be set and the account can never be deleted.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n\n/**\n * When set using `{@link Operation.setOptions}` option, then any trustlines\n * created by this account can have a ClawbackOp operation submitted for the\n * corresponding asset.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 1 << 3;\n\n/**\n * `Operation` class represents [operations](https://developers.stellar.org/docs/glossary/operations/) in Stellar network.\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPaymentStrictReceive}`\n * * `{@link Operation.pathPaymentStrictSend}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n * * `{@link Operation.createClaimableBalance}`\n * * `{@link Operation.claimClaimableBalance}`\n * * `{@link Operation.beginSponsoringFutureReserves}`\n * * `{@link Operation.endSponsoringFutureReserves}`\n * * `{@link Operation.revokeAccountSponsorship}`\n * * `{@link Operation.revokeTrustlineSponsorship}`\n * * `{@link Operation.revokeOfferSponsorship}`\n * * `{@link Operation.revokeDataSponsorship}`\n * * `{@link Operation.revokeClaimableBalanceSponsorship}`\n * * `{@link Operation.revokeLiquidityPoolSponsorship}`\n * * `{@link Operation.revokeSignerSponsorship}`\n * * `{@link Operation.clawback}`\n * * `{@link Operation.clawbackClaimableBalance}`\n * * `{@link Operation.setTrustLineFlags}`\n * * `{@link Operation.liquidityPoolDeposit}`\n * * `{@link Operation.liquidityPoolWithdraw}`\n *\n * @class Operation\n */\n\nvar Operation = exports.Operation = function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n  _createClass(Operation, null, [{\n    key: 'setSourceAccount',\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        try {\n          opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source);\n        } catch (e) {\n          throw new Error('Source address is invalid');\n        }\n      }\n    }\n\n    /**\n     * Deconstructs the raw XDR operation object into the structured object that\n     * was used to create the operation (i.e. the `opts` parameter to most ops).\n     *\n     * @param {xdr.Operation}   operation - An XDR Operation.\n     * @return {Operation}\n     */\n  }, {\n    key: 'fromXDRObject',\n    value: function fromXDRObject(operation) {\n      var result = {};\n      if (operation.sourceAccount()) {\n        result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount());\n      }\n      var attrs = operation.body().value();\n      var operationName = operation.body().switch().name;\n      switch (operationName) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n        case 'pathPaymentStrictReceive':\n          {\n            result.type = 'pathPaymentStrictReceive';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n            var path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n        case 'pathPaymentStrictSend':\n          {\n            result.type = 'pathPaymentStrictSend';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destMin = this._fromXDRAmount(attrs.destMin());\n            result.path = [];\n            var _path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(_path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(_path[pathKey]));\n            });\n            break;\n          }\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            switch (attrs.line().switch()) {\n              case _xdr2.default.AssetType.assetTypePoolShare():\n                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());\n                break;\n              default:\n                result.line = _asset.Asset.fromOperation(attrs.line());\n                break;\n            }\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _trimEnd2.default)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n        case 'setOptions':\n          {\n            result.type = 'setOptions';\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold();\n            // home_domain is checked by iscntrl in stellar-core\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              } else if (arm === 'ed25519SignedPayload') {\n                var signedPayload = attrs.signer().key().ed25519SignedPayload();\n                signer.ed25519SignedPayload = _strkey.StrKey.encodeSignedPayload(signedPayload.toXDR());\n              }\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs);\n            break;\n          }\n        case 'manageData':\n          {\n            result.type = 'manageData';\n            // manage_data.name is checked by iscntrl in stellar-core\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n        case 'createClaimableBalance':\n          {\n            result.type = 'createClaimableBalance';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.claimants = [];\n            attrs.claimants().forEach(function (claimant) {\n              result.claimants.push(_claimant.Claimant.fromXDR(claimant));\n            });\n            break;\n          }\n        case 'claimClaimableBalance':\n          {\n            result.type = 'claimClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'beginSponsoringFutureReserves':\n          {\n            result.type = 'beginSponsoringFutureReserves';\n            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());\n            break;\n          }\n        case 'endSponsoringFutureReserves':\n          {\n            result.type = 'endSponsoringFutureReserves';\n            break;\n          }\n        case 'revokeSponsorship':\n          {\n            extractRevokeSponshipDetails(attrs, result);\n            break;\n          }\n        case 'clawback':\n          {\n            result.type = 'clawback';\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            break;\n          }\n        case 'clawbackClaimableBalance':\n          {\n            result.type = 'clawbackClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'setTrustLineFlags':\n          {\n            result.type = 'setTrustLineFlags';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.trustor = accountIdtoAddress(attrs.trustor());\n\n            // Convert from the integer-bitwised flag into a sensible object that\n            // indicates true/false for each flag that's on/off.\n            var clears = attrs.clearFlags();\n            var sets = attrs.setFlags();\n            var mapping = {\n              authorized: _xdr2.default.TrustLineFlags.authorizedFlag(),\n              authorizedToMaintainLiabilities: _xdr2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n              clawbackEnabled: _xdr2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n            };\n            var getFlagValue = function getFlagValue(key) {\n              var bit = mapping[key].value;\n              if (sets & bit) {\n                return true;\n              }\n              if (clears & bit) {\n                return false;\n              }\n              return undefined;\n            };\n            result.flags = {};\n            Object.keys(mapping).forEach(function (flagName) {\n              result.flags[flagName] = getFlagValue(flagName);\n            });\n            break;\n          }\n        case 'liquidityPoolDeposit':\n          {\n            result.type = 'liquidityPoolDeposit';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());\n            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());\n            result.minPrice = this._fromXDRPrice(attrs.minPrice());\n            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());\n            break;\n          }\n        case 'liquidityPoolWithdraw':\n          {\n            result.type = 'liquidityPoolWithdraw';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());\n            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());\n            break;\n          }\n        default:\n          {\n            throw new Error('Unknown operation: ' + operationName);\n          }\n      }\n      return result;\n    }\n  }, {\n    key: 'isValidAmount',\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!(0, _isString2.default)(value)) {\n        return false;\n      }\n      var amount = void 0;\n      try {\n        amount = new _bignumber2.default(value);\n      } catch (e) {\n        return false;\n      }\n      if (\n      // == 0\n      !allowZero && amount.isZero() ||\n      // < 0\n      amount.isNegative() ||\n      // > Max value\n      amount.times(ONE).greaterThan(new _bignumber2.default(MAX_INT64).toString()) ||\n      // Decimal places (max 7)\n      amount.decimalPlaces() > 7 ||\n      // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: 'constructAmountRequirementsError',\n    value: function constructAmountRequirementsError(arg) {\n      return arg + ' argument must be of type String, represent a positive number and have at most 7 digits after the decimal';\n    }\n\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n  }, {\n    key: '_checkUnsignedIntValue',\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if ((0, _isUndefined2.default)(value)) {\n        return undefined;\n      }\n      if ((0, _isString2.default)(value)) {\n        value = parseFloat(value);\n      }\n      switch (true) {\n        case !(0, _isNumber2.default)(value) || !(0, _isFinite2.default)(value) || value % 1 !== 0:\n          throw new Error(name + ' value is invalid');\n        case value < 0:\n          throw new Error(name + ' value must be unsigned');\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n        default:\n          throw new Error(name + ' value is invalid');\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n  }, {\n    key: '_toXDRAmount',\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber2.default(value).mul(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n  }, {\n    key: '_fromXDRAmount',\n    value: function _fromXDRAmount(value) {\n      return new _bignumber2.default(value).div(ONE).toFixed(7);\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n  }, {\n    key: '_fromXDRPrice',\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber2.default(price.n());\n      return n.div(new _bignumber2.default(price.d())).toString();\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n  }, {\n    key: '_toXDRPrice',\n    value: function _toXDRPrice(price) {\n      var xdrObject = void 0;\n      if (price.n && price.d) {\n        xdrObject = new _xdr2.default.Price(price);\n      } else {\n        price = new _bignumber2.default(price);\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _xdr2.default.Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n      return xdrObject;\n    }\n  }]);\n  return Operation;\n}();\nfunction extractRevokeSponshipDetails(attrs, result) {\n  switch (attrs.switch().name) {\n    case 'revokeSponsorshipLedgerEntry':\n      {\n        var ledgerKey = attrs.ledgerKey();\n        switch (ledgerKey.switch().name) {\n          case _xdr2.default.LedgerEntryType.account().name:\n            {\n              result.type = 'revokeAccountSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.account().accountId());\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.trustline().name:\n            {\n              result.type = 'revokeTrustlineSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());\n              var xdrAsset = ledgerKey.trustLine().asset();\n              switch (xdrAsset.switch()) {\n                case _xdr2.default.AssetType.assetTypePoolShare():\n                  result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);\n                  break;\n                default:\n                  result.asset = _asset.Asset.fromOperation(xdrAsset);\n                  break;\n              }\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.offer().name:\n            {\n              result.type = 'revokeOfferSponsorship';\n              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());\n              result.offerId = ledgerKey.offer().offerId().toString();\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.data().name:\n            {\n              result.type = 'revokeDataSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.data().accountId());\n              result.name = ledgerKey.data().dataName().toString('ascii');\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.claimableBalance().name:\n            {\n              result.type = 'revokeClaimableBalanceSponsorship';\n              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.liquidityPool().name:\n            {\n              result.type = 'revokeLiquidityPoolSponsorship';\n              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');\n              break;\n            }\n          default:\n            {\n              throw new Error('Unknown ledgerKey: ' + attrs.switch().name);\n            }\n        }\n        break;\n      }\n    case 'revokeSponsorshipSigner':\n      {\n        result.type = 'revokeSignerSponsorship';\n        result.account = accountIdtoAddress(attrs.signer().accountId());\n        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());\n        break;\n      }\n    default:\n      {\n        throw new Error('Unknown revokeSponsorship: ' + attrs.switch().name);\n      }\n  }\n}\nfunction convertXDRSignerKeyToObject(signerKey) {\n  var attrs = {};\n  switch (signerKey.switch().name) {\n    case _xdr2.default.SignerKeyType.signerKeyTypeEd25519().name:\n      {\n        attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());\n        break;\n      }\n    case _xdr2.default.SignerKeyType.signerKeyTypePreAuthTx().name:\n      {\n        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');\n        break;\n      }\n    case _xdr2.default.SignerKeyType.signerKeyTypeHashX().name:\n      {\n        attrs.sha256Hash = signerKey.hashX().toString('hex');\n        break;\n      }\n    default:\n      {\n        throw new Error('Unknown signerKey: ' + signerKey.switch().name);\n      }\n  }\n  return attrs;\n}\nfunction accountIdtoAddress(accountId) {\n  return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n}\n\n// Attach all imported operations as static methods on the Operation class\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createClaimableBalance = ops.createClaimableBalance;\nOperation.claimClaimableBalance = ops.claimClaimableBalance;\nOperation.clawbackClaimableBalance = ops.clawbackClaimableBalance;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;\nOperation.pathPaymentStrictSend = ops.pathPaymentStrictSend;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\nOperation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;\nOperation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;\nOperation.revokeAccountSponsorship = ops.revokeAccountSponsorship;\nOperation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;\nOperation.revokeOfferSponsorship = ops.revokeOfferSponsorship;\nOperation.revokeDataSponsorship = ops.revokeDataSponsorship;\nOperation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;\nOperation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;\nOperation.revokeSignerSponsorship = ops.revokeSignerSponsorship;\nOperation.clawback = ops.clawback;\nOperation.setTrustLineFlags = ops.setTrustLineFlags;\nOperation.liquidityPoolDeposit = ops.liquidityPoolDeposit;\nOperation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;","map":{"version":3,"names":["Object","defineProperty","exports","value","Operation","AuthClawbackEnabledFlag","AuthImmutableFlag","AuthRevocableFlag","AuthRequiredFlag","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_jsXdr","require","_bignumber","_bignumber2","_interopRequireDefault","_trimEnd","_trimEnd2","_isUndefined","_isUndefined2","_isString","_isString2","_isNumber","_isNumber2","_isFinite","_isFinite2","_continued_fraction","_asset","_liquidity_pool_asset","_claimant","_strkey","_liquidity_pool_id","_xdr","_xdr2","_index","ops","_interopRequireWildcard","_decode_encode_muxed_account","obj","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","ONE","MAX_INT64","setSourceAccount","opAttributes","opts","source","sourceAccount","decodeAddressToMuxedAccount","e","Error","fromXDRObject","operation","result","encodeMuxedAccountToAddress","attrs","body","operationName","switch","name","type","destination","accountIdtoAddress","startingBalance","_fromXDRAmount","asset","Asset","fromOperation","amount","sendAsset","sendMax","destAsset","destAmount","path","keys","forEach","pathKey","push","sendAmount","destMin","_path","line","AssetType","assetTypePoolShare","LiquidityPoolAsset","limit","trustor","assetCode","toString","authorize","inflationDest","clearFlags","setFlags","masterWeight","lowThreshold","medThreshold","highThreshold","homeDomain","signer","arm","ed25519PublicKey","preAuthTx","sha256Hash","hashX","signedPayload","ed25519SignedPayload","StrKey","encodeSignedPayload","toXDR","weight","selling","buying","price","_fromXDRPrice","offerId","buyAmount","dataName","dataValue","bumpTo","claimants","claimant","Claimant","fromXDR","balanceId","sponsoredId","extractRevokeSponshipDetails","from","clears","sets","mapping","authorized","TrustLineFlags","authorizedFlag","authorizedToMaintainLiabilities","authorizedToMaintainLiabilitiesFlag","clawbackEnabled","trustlineClawbackEnabledFlag","getFlagValue","bit","flags","flagName","liquidityPoolId","maxAmountA","maxAmountB","minPrice","maxPrice","minAmountA","minAmountB","isValidAmount","allowZero","arguments","isZero","isNegative","times","greaterThan","decimalPlaces","isNaN","isFinite","constructAmountRequirementsError","arg","_checkUnsignedIntValue","isValidFunction","parseFloat","_toXDRAmount","mul","Hyper","fromString","div","toFixed","n","d","_toXDRPrice","xdrObject","Price","approx","best_r","parseInt","ledgerKey","LedgerEntryType","account","accountId","trustline","trustLine","xdrAsset","LiquidityPoolId","offer","seller","sellerId","data","claimableBalance","liquidityPool","convertXDRSignerKeyToObject","signerKey","SignerKeyType","signerKeyTypeEd25519","encodeEd25519PublicKey","ed25519","signerKeyTypePreAuthTx","signerKeyTypeHashX","accountMerge","allowTrust","bumpSequence","changeTrust","createAccount","createClaimableBalance","claimClaimableBalance","clawbackClaimableBalance","createPassiveSellOffer","inflation","manageData","manageSellOffer","manageBuyOffer","pathPaymentStrictReceive","pathPaymentStrictSend","payment","setOptions","beginSponsoringFutureReserves","endSponsoringFutureReserves","revokeAccountSponsorship","revokeTrustlineSponsorship","revokeOfferSponsorship","revokeDataSponsorship","revokeClaimableBalanceSponsorship","revokeLiquidityPoolSponsorship","revokeSignerSponsorship","clawback","setTrustLineFlags","liquidityPoolDeposit","liquidityPoolWithdraw"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operation.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = exports.AuthClawbackEnabledFlag = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-bitwise */\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _isFinite = require('lodash/isFinite');\n\nvar _isFinite2 = _interopRequireDefault(_isFinite);\n\nvar _continued_fraction = require('./util/continued_fraction');\n\nvar _asset = require('./asset');\n\nvar _liquidity_pool_asset = require('./liquidity_pool_asset');\n\nvar _claimant = require('./claimant');\n\nvar _strkey = require('./strkey');\n\nvar _liquidity_pool_id = require('./liquidity_pool_id');\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _index = require('./operations/index');\n\nvar ops = _interopRequireWildcard(_index);\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing\n * account to give other accounts permission before they can hold the issuing\n * accountâ€™s credit.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing\n * account to revoke its credit held by other accounts.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the\n * authorization flags can be set and the account can never be deleted.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n\n/**\n * When set using `{@link Operation.setOptions}` option, then any trustlines\n * created by this account can have a ClawbackOp operation submitted for the\n * corresponding asset.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 1 << 3;\n\n/**\n * `Operation` class represents [operations](https://developers.stellar.org/docs/glossary/operations/) in Stellar network.\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPaymentStrictReceive}`\n * * `{@link Operation.pathPaymentStrictSend}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n * * `{@link Operation.createClaimableBalance}`\n * * `{@link Operation.claimClaimableBalance}`\n * * `{@link Operation.beginSponsoringFutureReserves}`\n * * `{@link Operation.endSponsoringFutureReserves}`\n * * `{@link Operation.revokeAccountSponsorship}`\n * * `{@link Operation.revokeTrustlineSponsorship}`\n * * `{@link Operation.revokeOfferSponsorship}`\n * * `{@link Operation.revokeDataSponsorship}`\n * * `{@link Operation.revokeClaimableBalanceSponsorship}`\n * * `{@link Operation.revokeLiquidityPoolSponsorship}`\n * * `{@link Operation.revokeSignerSponsorship}`\n * * `{@link Operation.clawback}`\n * * `{@link Operation.clawbackClaimableBalance}`\n * * `{@link Operation.setTrustLineFlags}`\n * * `{@link Operation.liquidityPoolDeposit}`\n * * `{@link Operation.liquidityPoolWithdraw}`\n *\n * @class Operation\n */\n\nvar Operation = exports.Operation = function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n\n  _createClass(Operation, null, [{\n    key: 'setSourceAccount',\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        try {\n          opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source);\n        } catch (e) {\n          throw new Error('Source address is invalid');\n        }\n      }\n    }\n\n    /**\n     * Deconstructs the raw XDR operation object into the structured object that\n     * was used to create the operation (i.e. the `opts` parameter to most ops).\n     *\n     * @param {xdr.Operation}   operation - An XDR Operation.\n     * @return {Operation}\n     */\n\n  }, {\n    key: 'fromXDRObject',\n    value: function fromXDRObject(operation) {\n      var result = {};\n      if (operation.sourceAccount()) {\n        result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount());\n      }\n\n      var attrs = operation.body().value();\n      var operationName = operation.body().switch().name;\n\n      switch (operationName) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n        case 'pathPaymentStrictReceive':\n          {\n            result.type = 'pathPaymentStrictReceive';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n\n            var path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n        case 'pathPaymentStrictSend':\n          {\n            result.type = 'pathPaymentStrictSend';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destMin = this._fromXDRAmount(attrs.destMin());\n            result.path = [];\n\n            var _path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(_path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(_path[pathKey]));\n            });\n            break;\n          }\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            switch (attrs.line().switch()) {\n              case _xdr2.default.AssetType.assetTypePoolShare():\n                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());\n                break;\n              default:\n                result.line = _asset.Asset.fromOperation(attrs.line());\n                break;\n            }\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _trimEnd2.default)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n        case 'setOptions':\n          {\n            result.type = 'setOptions';\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold();\n            // home_domain is checked by iscntrl in stellar-core\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              } else if (arm === 'ed25519SignedPayload') {\n                var signedPayload = attrs.signer().key().ed25519SignedPayload();\n                signer.ed25519SignedPayload = _strkey.StrKey.encodeSignedPayload(signedPayload.toXDR());\n              }\n\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs);\n            break;\n          }\n        case 'manageData':\n          {\n            result.type = 'manageData';\n            // manage_data.name is checked by iscntrl in stellar-core\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n        case 'createClaimableBalance':\n          {\n            result.type = 'createClaimableBalance';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.claimants = [];\n            attrs.claimants().forEach(function (claimant) {\n              result.claimants.push(_claimant.Claimant.fromXDR(claimant));\n            });\n            break;\n          }\n        case 'claimClaimableBalance':\n          {\n            result.type = 'claimClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'beginSponsoringFutureReserves':\n          {\n            result.type = 'beginSponsoringFutureReserves';\n            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());\n            break;\n          }\n        case 'endSponsoringFutureReserves':\n          {\n            result.type = 'endSponsoringFutureReserves';\n            break;\n          }\n        case 'revokeSponsorship':\n          {\n            extractRevokeSponshipDetails(attrs, result);\n            break;\n          }\n        case 'clawback':\n          {\n            result.type = 'clawback';\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            break;\n          }\n        case 'clawbackClaimableBalance':\n          {\n            result.type = 'clawbackClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'setTrustLineFlags':\n          {\n            result.type = 'setTrustLineFlags';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.trustor = accountIdtoAddress(attrs.trustor());\n\n            // Convert from the integer-bitwised flag into a sensible object that\n            // indicates true/false for each flag that's on/off.\n            var clears = attrs.clearFlags();\n            var sets = attrs.setFlags();\n\n            var mapping = {\n              authorized: _xdr2.default.TrustLineFlags.authorizedFlag(),\n              authorizedToMaintainLiabilities: _xdr2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n              clawbackEnabled: _xdr2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n            };\n\n            var getFlagValue = function getFlagValue(key) {\n              var bit = mapping[key].value;\n              if (sets & bit) {\n                return true;\n              }\n              if (clears & bit) {\n                return false;\n              }\n              return undefined;\n            };\n\n            result.flags = {};\n            Object.keys(mapping).forEach(function (flagName) {\n              result.flags[flagName] = getFlagValue(flagName);\n            });\n\n            break;\n          }\n        case 'liquidityPoolDeposit':\n          {\n            result.type = 'liquidityPoolDeposit';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());\n            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());\n            result.minPrice = this._fromXDRPrice(attrs.minPrice());\n            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());\n            break;\n          }\n        case 'liquidityPoolWithdraw':\n          {\n            result.type = 'liquidityPoolWithdraw';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());\n            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());\n            break;\n          }\n        default:\n          {\n            throw new Error('Unknown operation: ' + operationName);\n          }\n      }\n      return result;\n    }\n  }, {\n    key: 'isValidAmount',\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!(0, _isString2.default)(value)) {\n        return false;\n      }\n\n      var amount = void 0;\n      try {\n        amount = new _bignumber2.default(value);\n      } catch (e) {\n        return false;\n      }\n\n      if (\n      // == 0\n      !allowZero && amount.isZero() ||\n      // < 0\n      amount.isNegative() ||\n      // > Max value\n      amount.times(ONE).greaterThan(new _bignumber2.default(MAX_INT64).toString()) ||\n      // Decimal places (max 7)\n      amount.decimalPlaces() > 7 ||\n      // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'constructAmountRequirementsError',\n    value: function constructAmountRequirementsError(arg) {\n      return arg + ' argument must be of type String, represent a positive number and have at most 7 digits after the decimal';\n    }\n\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n\n  }, {\n    key: '_checkUnsignedIntValue',\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if ((0, _isUndefined2.default)(value)) {\n        return undefined;\n      }\n\n      if ((0, _isString2.default)(value)) {\n        value = parseFloat(value);\n      }\n\n      switch (true) {\n        case !(0, _isNumber2.default)(value) || !(0, _isFinite2.default)(value) || value % 1 !== 0:\n          throw new Error(name + ' value is invalid');\n        case value < 0:\n          throw new Error(name + ' value must be unsigned');\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n        default:\n          throw new Error(name + ' value is invalid');\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n\n  }, {\n    key: '_toXDRAmount',\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber2.default(value).mul(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n\n  }, {\n    key: '_fromXDRAmount',\n    value: function _fromXDRAmount(value) {\n      return new _bignumber2.default(value).div(ONE).toFixed(7);\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n\n  }, {\n    key: '_fromXDRPrice',\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber2.default(price.n());\n      return n.div(new _bignumber2.default(price.d())).toString();\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n\n  }, {\n    key: '_toXDRPrice',\n    value: function _toXDRPrice(price) {\n      var xdrObject = void 0;\n      if (price.n && price.d) {\n        xdrObject = new _xdr2.default.Price(price);\n      } else {\n        price = new _bignumber2.default(price);\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _xdr2.default.Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n\n      return xdrObject;\n    }\n  }]);\n\n  return Operation;\n}();\n\nfunction extractRevokeSponshipDetails(attrs, result) {\n  switch (attrs.switch().name) {\n    case 'revokeSponsorshipLedgerEntry':\n      {\n        var ledgerKey = attrs.ledgerKey();\n        switch (ledgerKey.switch().name) {\n          case _xdr2.default.LedgerEntryType.account().name:\n            {\n              result.type = 'revokeAccountSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.account().accountId());\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.trustline().name:\n            {\n              result.type = 'revokeTrustlineSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());\n              var xdrAsset = ledgerKey.trustLine().asset();\n              switch (xdrAsset.switch()) {\n                case _xdr2.default.AssetType.assetTypePoolShare():\n                  result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);\n                  break;\n                default:\n                  result.asset = _asset.Asset.fromOperation(xdrAsset);\n                  break;\n              }\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.offer().name:\n            {\n              result.type = 'revokeOfferSponsorship';\n              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());\n              result.offerId = ledgerKey.offer().offerId().toString();\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.data().name:\n            {\n              result.type = 'revokeDataSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.data().accountId());\n              result.name = ledgerKey.data().dataName().toString('ascii');\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.claimableBalance().name:\n            {\n              result.type = 'revokeClaimableBalanceSponsorship';\n              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');\n              break;\n            }\n          case _xdr2.default.LedgerEntryType.liquidityPool().name:\n            {\n              result.type = 'revokeLiquidityPoolSponsorship';\n              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');\n              break;\n            }\n          default:\n            {\n              throw new Error('Unknown ledgerKey: ' + attrs.switch().name);\n            }\n        }\n        break;\n      }\n    case 'revokeSponsorshipSigner':\n      {\n        result.type = 'revokeSignerSponsorship';\n        result.account = accountIdtoAddress(attrs.signer().accountId());\n        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());\n        break;\n      }\n    default:\n      {\n        throw new Error('Unknown revokeSponsorship: ' + attrs.switch().name);\n      }\n  }\n}\n\nfunction convertXDRSignerKeyToObject(signerKey) {\n  var attrs = {};\n  switch (signerKey.switch().name) {\n    case _xdr2.default.SignerKeyType.signerKeyTypeEd25519().name:\n      {\n        attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());\n        break;\n      }\n    case _xdr2.default.SignerKeyType.signerKeyTypePreAuthTx().name:\n      {\n        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');\n        break;\n      }\n    case _xdr2.default.SignerKeyType.signerKeyTypeHashX().name:\n      {\n        attrs.sha256Hash = signerKey.hashX().toString('hex');\n        break;\n      }\n    default:\n      {\n        throw new Error('Unknown signerKey: ' + signerKey.switch().name);\n      }\n  }\n\n  return attrs;\n}\n\nfunction accountIdtoAddress(accountId) {\n  return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n}\n\n// Attach all imported operations as static methods on the Operation class\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createClaimableBalance = ops.createClaimableBalance;\nOperation.claimClaimableBalance = ops.claimClaimableBalance;\nOperation.clawbackClaimableBalance = ops.clawbackClaimableBalance;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;\nOperation.pathPaymentStrictSend = ops.pathPaymentStrictSend;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\nOperation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;\nOperation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;\nOperation.revokeAccountSponsorship = ops.revokeAccountSponsorship;\nOperation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;\nOperation.revokeOfferSponsorship = ops.revokeOfferSponsorship;\nOperation.revokeDataSponsorship = ops.revokeDataSponsorship;\nOperation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;\nOperation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;\nOperation.revokeSignerSponsorship = ops.revokeSignerSponsorship;\nOperation.clawback = ops.clawback;\nOperation.setTrustLineFlags = ops.setTrustLineFlags;\nOperation.liquidityPoolDeposit = ops.liquidityPoolDeposit;\nOperation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}