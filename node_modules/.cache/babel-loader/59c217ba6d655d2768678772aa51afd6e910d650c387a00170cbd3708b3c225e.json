{"ast":null,"code":"import { UserDenied } from '@terra-dev/wallet-types';\nimport { ChromeExtensionCreateTxFailed, ChromeExtensionTxFailed, ChromeExtensionUnspecifiedError } from './errors';\nimport { Extension } from '@terra-money/terra.js';\nfunction toExplicitError(error) {\n  if (error && 'code' in error) {\n    switch (error.code) {\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L182\n      case 1:\n        return new UserDenied();\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L137\n      case 2:\n        if (error.data) {\n          const {\n            txhash\n          } = error.data;\n          return new ChromeExtensionTxFailed(txhash, error.message);\n        } else {\n          return new ChromeExtensionTxFailed(undefined, error.message);\n        }\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L153\n      case 3:\n        return new ChromeExtensionCreateTxFailed(error.message);\n      default:\n        return new ChromeExtensionUnspecifiedError(error.message);\n    }\n  } else {\n    return new ChromeExtensionUnspecifiedError();\n  }\n}\nconst pool = new Map();\nexport function extensionFixer(identifier) {\n  if (pool.has(identifier)) {\n    return pool.get(identifier);\n  }\n  const extension = new Extension(identifier);\n  let _inTransactionProgress = false;\n  const postResolvers = new Map();\n  const signResolvers = new Map();\n  const infoResolvers = new Set();\n  const connectResolvers = new Set();\n  extension.on('onPost', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n    if (!postResolvers.has(payload.id)) {\n      return;\n    }\n    const [resolve, reject] = postResolvers.get(payload.id);\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({\n        name: 'onPost',\n        payload\n      });\n    }\n    postResolvers.delete(payload.id);\n    if (postResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n  extension.on('onSign', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n    if (!signResolvers.has(payload.id)) {\n      return;\n    }\n    const [resolve, reject] = signResolvers.get(payload.id);\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({\n        name: 'onSign',\n        payload\n      });\n    }\n    signResolvers.delete(payload.id);\n    if (signResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n  extension.on('onInfo', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n    for (const [resolve, reject] of infoResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n    infoResolvers.clear();\n  });\n  extension.on('onConnect', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n    for (const [resolve, reject] of connectResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n    connectResolvers.clear();\n  });\n  function post(data) {\n    return new Promise(function () {\n      _inTransactionProgress = true;\n      const id = extension.post({\n        ...data,\n        purgeQueue: true\n      });\n      for (var _len = arguments.length, resolver = new Array(_len), _key = 0; _key < _len; _key++) {\n        resolver[_key] = arguments[_key];\n      }\n      postResolvers.set(id, resolver);\n      setTimeout(() => {\n        if (postResolvers.has(id)) {\n          postResolvers.delete(id);\n          if (postResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n  function sign(data) {\n    return new Promise(function () {\n      _inTransactionProgress = true;\n      const id = extension.sign({\n        ...data,\n        purgeQueue: true\n      });\n      for (var _len2 = arguments.length, resolver = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        resolver[_key2] = arguments[_key2];\n      }\n      signResolvers.set(id, resolver);\n      setTimeout(() => {\n        if (signResolvers.has(id)) {\n          signResolvers.delete(id);\n          if (signResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n  function connect() {\n    return new Promise(function () {\n      for (var _len3 = arguments.length, resolver = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        resolver[_key3] = arguments[_key3];\n      }\n      connectResolvers.add(resolver);\n      extension.connect();\n    });\n  }\n  function info() {\n    return new Promise(function () {\n      for (var _len4 = arguments.length, resolver = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        resolver[_key4] = arguments[_key4];\n      }\n      infoResolvers.add(resolver);\n      extension.info();\n    });\n  }\n  //function isAvailable() {\n  //  return extension.isAvailable;\n  //}\n  function inTransactionProgress() {\n    return _inTransactionProgress;\n  }\n  const result = {\n    post,\n    sign,\n    connect,\n    info,\n    //isAvailable,\n    inTransactionProgress\n  };\n  pool.set(identifier, result);\n  return result;\n}","map":{"version":3,"names":["UserDenied","ChromeExtensionCreateTxFailed","ChromeExtensionTxFailed","ChromeExtensionUnspecifiedError","Extension","toExplicitError","error","code","data","txhash","message","undefined","pool","Map","extensionFixer","identifier","has","get","extension","_inTransactionProgress","postResolvers","signResolvers","infoResolvers","Set","connectResolvers","on","result","payload","id","resolve","reject","success","name","delete","size","clear","post","Promise","purgeQueue","_len","arguments","length","resolver","Array","_key","set","setTimeout","sign","_len2","_key2","connect","_len3","_key3","add","info","_len4","_key4","inTransactionProgress"],"sources":["../../../src/@terra-dev/chrome-extension/extensionFixer.ts"],"sourcesContent":["import { NetworkInfo, UserDenied } from '@terra-dev/wallet-types';\nimport {\n  ChromeExtensionCreateTxFailed,\n  ChromeExtensionTxFailed,\n  ChromeExtensionUnspecifiedError,\n} from './errors';\nimport { Extension } from '@terra-money/terra.js';\n\ntype ConnectResponse = { address?: string };\ntype PostResponse = any;\ntype SignResponse = any;\ntype InfoResponse = NetworkInfo;\n\nexport interface FixedExtension {\n  ///** @deprecated do not use extension.isAvailable just use window.isTerraExtensionAvailable... */\n  //isAvailable: () => boolean;\n  post: (data: object) => Promise<PostResponse>;\n  sign: (data: object) => Promise<SignResponse>;\n  info: () => Promise<InfoResponse>;\n  connect: () => Promise<ConnectResponse>;\n  inTransactionProgress: () => boolean;\n}\n\nfunction toExplicitError(error: any) {\n  if (error && 'code' in error) {\n    switch (error.code) {\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L182\n      case 1:\n        return new UserDenied();\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L137\n      case 2:\n        if (error.data) {\n          const { txhash } = error.data;\n          return new ChromeExtensionTxFailed(txhash, error.message);\n        } else {\n          return new ChromeExtensionTxFailed(undefined, error.message);\n        }\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L153\n      case 3:\n        return new ChromeExtensionCreateTxFailed(error.message);\n      default:\n        return new ChromeExtensionUnspecifiedError(error.message);\n    }\n  } else {\n    return new ChromeExtensionUnspecifiedError();\n  }\n}\n\nconst pool = new Map<string, FixedExtension>();\n\nexport function extensionFixer(identifier: string): FixedExtension {\n  if (pool.has(identifier)) {\n    return pool.get(identifier)!;\n  }\n\n  const extension = new Extension(identifier);\n\n  let _inTransactionProgress = false;\n\n  const postResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  const signResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  const infoResolvers = new Set<[(data: any) => void, (error: any) => void]>();\n\n  const connectResolvers = new Set<\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  extension.on('onPost', (result) => {\n    if (!result) return;\n\n    const { error, ...payload } = result;\n\n    if (!postResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = postResolvers.get(payload.id)!;\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({ name: 'onPost', payload });\n    }\n\n    postResolvers.delete(payload.id);\n\n    if (postResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n\n  extension.on('onSign', (result) => {\n    if (!result) return;\n\n    const { error, ...payload } = result;\n\n    if (!signResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = signResolvers.get(payload.id)!;\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({ name: 'onSign', payload });\n    }\n\n    signResolvers.delete(payload.id);\n\n    if (signResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n\n  extension.on('onInfo', (result) => {\n    if (!result) return;\n    const { error, ...payload } = result;\n\n    for (const [resolve, reject] of infoResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    infoResolvers.clear();\n  });\n\n  extension.on('onConnect', (result) => {\n    if (!result) return;\n    const { error, ...payload } = result;\n\n    for (const [resolve, reject] of connectResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    connectResolvers.clear();\n  });\n\n  function post(data: object) {\n    return new Promise<PostResponse>((...resolver) => {\n      _inTransactionProgress = true;\n\n      const id = extension.post({\n        ...(data as any),\n        purgeQueue: true,\n      });\n\n      postResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (postResolvers.has(id)) {\n          postResolvers.delete(id);\n\n          if (postResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function sign(data: object) {\n    return new Promise<SignResponse>((...resolver) => {\n      _inTransactionProgress = true;\n\n      const id = extension.sign({\n        ...(data as any),\n        purgeQueue: true,\n      });\n\n      signResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (signResolvers.has(id)) {\n          signResolvers.delete(id);\n\n          if (signResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function connect() {\n    return new Promise<ConnectResponse>((...resolver) => {\n      connectResolvers.add(resolver);\n      extension.connect();\n    });\n  }\n\n  function info() {\n    return new Promise<InfoResponse>((...resolver) => {\n      infoResolvers.add(resolver);\n      extension.info();\n    });\n  }\n\n  //function isAvailable() {\n  //  return extension.isAvailable;\n  //}\n\n  function inTransactionProgress() {\n    return _inTransactionProgress;\n  }\n\n  const result: FixedExtension = {\n    post,\n    sign,\n    connect,\n    info,\n    //isAvailable,\n    inTransactionProgress,\n  };\n\n  pool.set(identifier, result);\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}