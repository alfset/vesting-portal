{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: '',\n    decimals: undefined,\n    symbol: '',\n    name: '',\n    chainId: undefined\n  },\n  [Field.OUTPUT]: {\n    currencyId: '',\n    decimals: undefined,\n    symbol: '',\n    name: '',\n    chainId: undefined\n  },\n  recipient: null\n};\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, _ref) => {\n  let {\n    payload: {\n      typedValue,\n      recipient,\n      field,\n      inputCurrencyId,\n      outputCurrencyId,\n      decimals,\n      symbol,\n      name,\n      chainId\n    }\n  } = _ref;\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId,\n      decimals: decimals,\n      symbol: symbol,\n      name: name,\n      chainId: chainId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId,\n      decimals: decimals,\n      symbol: symbol,\n      name: name,\n      chainId: chainId\n    },\n    independentField: field,\n    typedValue: typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, _ref2) => {\n  let {\n    payload: {\n      currencyId,\n      field,\n      decimals,\n      symbol,\n      name,\n      chainId\n    }\n  } = _ref2;\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  if (currencyId === state[otherField].currencyId) {\n    // 我们需要交换顺序的情况\n    return {\n      ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId: currencyId,\n        decimals: decimals,\n        symbol: symbol,\n        name: name,\n        chainId: chainId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  } else {\n    // 正常的情况下\n    return {\n      ...state,\n      [field]: {\n        currencyId: currencyId,\n        decimals: decimals,\n        symbol: symbol,\n        name: name,\n        chainId: chainId\n      }\n    };\n  }\n}).addCase(switchCurrencies, state => {\n  return {\n    ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId,\n      decimals: state[Field.OUTPUT].decimals,\n      symbol: state[Field.OUTPUT].symbol,\n      name: state[Field.OUTPUT].name,\n      chainId: state[Field.OUTPUT].chainId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId,\n      decimals: state[Field.INPUT].decimals,\n      symbol: state[Field.INPUT].symbol,\n      name: state[Field.INPUT].name,\n      chainId: state[Field.INPUT].chainId\n    }\n  };\n}).addCase(typeInput, (state, _ref3) => {\n  let {\n    payload: {\n      field,\n      typedValue\n    }\n  } = _ref3;\n  // console.log(typedValue)\n  return {\n    ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, _ref4) => {\n  let {\n    payload: {\n      recipient\n    }\n  } = _ref4;\n  state.recipient = recipient;\n}));","map":{"version":3,"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","decimals","undefined","symbol","name","chainId","OUTPUT","recipient","builder","addCase","state","_ref","payload","field","inputCurrencyId","outputCurrencyId","_ref2","otherField","_ref3","_ref4"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/swap/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined\n    readonly decimals?: number | undefined\n    readonly symbol?: string | undefined\n    readonly name?: string | undefined\n    readonly chainId?:any\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined\n    readonly decimals?: number | undefined\n    readonly symbol?: string | undefined\n    readonly name?: string | undefined\n    readonly chainId?: any\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: '',\n    decimals: undefined,\n    symbol: '',\n    name: '',\n    chainId: undefined,\n  },\n  [Field.OUTPUT]: {\n    currencyId: '',\n    decimals: undefined,\n    symbol: '',\n    name: '',\n    chainId: undefined,\n  },\n  recipient: null\n}\n\nexport default createReducer<SwapState>(initialState, builder =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId, decimals, symbol, name, chainId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId,\n          },\n          independentField: field,\n          typedValue: typedValue,\n          recipient\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field, decimals, symbol, name, chainId } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // 我们需要交换顺序的情况\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: {\n            currencyId: currencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId\n          },\n          [otherField]: { currencyId: state[field].currencyId }\n        }\n      } else {\n        // 正常的情况下\n        return {\n          ...state,\n          [field]: {\n            currencyId: currencyId,\n            decimals: decimals,\n            symbol: symbol,\n            name: name,\n            chainId: chainId\n          }\n        }\n      }\n    })\n    .addCase(switchCurrencies, state => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: {\n          currencyId: state[Field.OUTPUT].currencyId,\n          decimals: state[Field.OUTPUT].decimals,\n          symbol: state[Field.OUTPUT].symbol,\n          name: state[Field.OUTPUT].name,\n          chainId: state[Field.OUTPUT].chainId\n        },\n        [Field.OUTPUT]: {\n          currencyId: state[Field.INPUT].currencyId,\n          decimals: state[Field.INPUT].decimals,\n          symbol: state[Field.INPUT].symbol,\n          name: state[Field.INPUT].name,\n          chainId: state[Field.INPUT].chainId\n        }\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      // console.log(typedValue)\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}