{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport useInterval from '../../hooks/useInterval';\nimport { trxAddress } from './actions';\n\n// import config from '../../config'\nimport { ChainId } from '../../config/chainConfig/chainId';\nlet onlyone = 0;\nexport default function Updater() {\n  var _window6;\n  const {\n    chainId\n  } = useActiveReact();\n  const dispatch = useDispatch();\n  const getTrxAddress = useCallback(() => {\n    if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId) && window.tronWeb) {\n      var _window, _window$tronWeb;\n      if ((_window = window) === null || _window === void 0 ? void 0 : (_window$tronWeb = _window.tronWeb) === null || _window$tronWeb === void 0 ? void 0 : _window$tronWeb.address) {\n        if (ChainId.TRX_TEST === chainId) {\n          var _window2, _window2$tronWeb, _window2$tronWeb$full, _window3, _window3$tronWeb, _window3$tronWeb$full;\n          if (((_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$tronWeb = _window2.tronWeb) === null || _window2$tronWeb === void 0 ? void 0 : (_window2$tronWeb$full = _window2$tronWeb.fullNode) === null || _window2$tronWeb$full === void 0 ? void 0 : _window2$tronWeb$full.host.indexOf('shasta')) === -1 && !onlyone && ((_window3 = window) === null || _window3 === void 0 ? void 0 : (_window3$tronWeb = _window3.tronWeb) === null || _window3$tronWeb === void 0 ? void 0 : (_window3$tronWeb$full = _window3$tronWeb.fullNode) === null || _window3$tronWeb$full === void 0 ? void 0 : _window3$tronWeb$full.ready)) {\n            onlyone = 1;\n            // alert('Please switch to Shasta Network.')\n            dispatch(trxAddress({\n              address: ''\n            }));\n          } else {\n            dispatch(trxAddress({\n              address: window.tronWeb.defaultAddress.base58\n            }));\n          }\n        } else {\n          var _window4, _window4$tronWeb, _window4$tronWeb$full, _window5, _window5$tronWeb, _window5$tronWeb$full;\n          if (((_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$tronWeb = _window4.tronWeb) === null || _window4$tronWeb === void 0 ? void 0 : (_window4$tronWeb$full = _window4$tronWeb.fullNode) === null || _window4$tronWeb$full === void 0 ? void 0 : _window4$tronWeb$full.host.indexOf('api.trongrid.io')) === -1 && !onlyone && ((_window5 = window) === null || _window5 === void 0 ? void 0 : (_window5$tronWeb = _window5.tronWeb) === null || _window5$tronWeb === void 0 ? void 0 : (_window5$tronWeb$full = _window5$tronWeb.fullNode) === null || _window5$tronWeb$full === void 0 ? void 0 : _window5$tronWeb$full.ready)) {\n            onlyone = 1;\n            // alert('Please switch to Main Network.')\n            dispatch(trxAddress({\n              address: ''\n            }));\n          } else {\n            dispatch(trxAddress({\n              address: window.tronWeb.defaultAddress.base58\n            }));\n          }\n        }\n      } else {\n        dispatch(trxAddress({\n          address: ''\n        }));\n      }\n    }\n  }, [(_window6 = window) === null || _window6 === void 0 ? void 0 : _window6.tronWeb, chainId]);\n  useInterval(getTrxAddress, 1000 * 3);\n  return null;\n}","map":{"version":3,"names":["useCallback","useDispatch","useActiveReact","useInterval","trxAddress","ChainId","onlyone","Updater","_window6","chainId","dispatch","getTrxAddress","TRX","TRX_TEST","includes","window","tronWeb","_window","_window$tronWeb","address","_window2","_window2$tronWeb","_window2$tronWeb$full","_window3","_window3$tronWeb","_window3$tronWeb$full","fullNode","host","indexOf","ready","defaultAddress","base58","_window4","_window4$tronWeb","_window4$tronWeb$full","_window5","_window5$tronWeb","_window5$tronWeb$full"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/trx/updater.ts"],"sourcesContent":["\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport useInterval from '../../hooks/useInterval'\n\nimport { AppDispatch } from '../../state'\n\nimport {trxAddress} from './actions'\n\n// import config from '../../config'\nimport { ChainId } from '../../config/chainConfig/chainId'\nlet onlyone = 0\nexport default function Updater(): null {\n  const { chainId } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n  \n  const getTrxAddress = useCallback(() => {\n    if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId) && window.tronWeb) {\n      if (window?.tronWeb?.address) {\n        if (ChainId.TRX_TEST === chainId) {\n          if (window?.tronWeb?.fullNode?.host.indexOf('shasta') === -1 && !onlyone && window?.tronWeb?.fullNode?.ready) {\n            onlyone = 1\n            // alert('Please switch to Shasta Network.')\n            dispatch(trxAddress({address: ''}))\n          } else {\n            dispatch(trxAddress({address: window.tronWeb.defaultAddress.base58}))\n          }\n        } else {\n          if (window?.tronWeb?.fullNode?.host.indexOf('api.trongrid.io') === -1 && !onlyone && window?.tronWeb?.fullNode?.ready) {\n            onlyone = 1\n            // alert('Please switch to Main Network.')\n            dispatch(trxAddress({address: ''}))\n          } else {\n            dispatch(trxAddress({address: window.tronWeb.defaultAddress.base58}))\n          }\n        }\n      } else {\n        dispatch(trxAddress({address: ''}))\n      }\n    }\n  }, [window?.tronWeb, chainId])\n\n  useInterval(getTrxAddress, 1000 * 3)\n\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}