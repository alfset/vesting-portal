{"ast":null,"code":"// import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { addTransaction, updateUnderlyingStatus, noWalletTxList } from './actions';\nimport config from '../../config';\nimport { useIsGnosisSafeWallet } from '../wallet/hooks';\n// 可以接受ether库事务响应并将其添加到事务列表的助手\nexport function useTransactionAdder() {\n  const {\n    chainId,\n    account\n  } = useActiveReact();\n  const dispatch = useDispatch();\n  const {\n    isGnosisSafeWallet\n  } = useIsGnosisSafeWallet();\n  return useCallback(function (response) {\n    let {\n      summary,\n      approval,\n      claim,\n      value,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // console.log(account, chainId, isGnosisSafeWallet)\n    if (!account) return;\n    if (!chainId) return;\n    if (isGnosisSafeWallet) return;\n    const {\n      hash\n    } = response;\n    // console.log(hash)\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n    dispatch(addTransaction({\n      hash,\n      from: account,\n      chainId,\n      approval,\n      summary,\n      claim,\n      value,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    }));\n  }, [dispatch, chainId, account, isGnosisSafeWallet]);\n}\n\n// 返回当前链的所有事务\nexport function useAllTransactions() {\n  var _state$chainId;\n  const {\n    chainId\n  } = useActiveReact();\n  const state = useSelector(state => state.transactions);\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\nexport function useIsTransactionPending(transactionHash) {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * 返回事务是否发生在最后一天(86400秒* 1000毫秒/秒)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n}\n\n// 返回令牌是否有未决的审批事务\nexport function useHasPendingApproval(tokenAddress, spender) {\n  const allTransactions = useAllTransactions();\n  // console.log(allTransactions)\n  return useMemo(() => (typeof tokenAddress === 'string' || typeof tokenAddress === 'number') && typeof spender === 'string' && Object.keys(allTransactions).some(hash => {\n    const tx = allTransactions[hash];\n    if (!tx) return false;\n    if (tx.receipt) {\n      return false;\n    } else {\n      const approval = tx.approval;\n      if (!approval) return false;\n      return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n    }\n  }), [allTransactions, spender, tokenAddress]);\n}\n\n// 注意提交索赔\n// 如果没有加载，返回null;如果没有找到，返回undefined\nexport function useUserHasSubmittedClaim(account) {\n  const allTransactions = useAllTransactions();\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find(hash => {\n      const tx = allTransactions[hash];\n      return tx.claim && tx.claim.recipient === account;\n    });\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\n  }, [account, allTransactions]);\n  return {\n    claimSubmitted: Boolean(claimTxn),\n    claimTxn\n  };\n}\nexport function useHashSwapInfo(hash) {\n  return new Promise(resolve => {\n    const url = \"\".concat(config.bridgeApi, \"/v2/history/details/latest?params=\").concat(hash);\n    axios.get(url).then(res => {\n      const {\n        status,\n        data\n      } = res;\n      if (status === 200) {\n        resolve(data);\n      } else {\n        resolve('');\n      }\n    }).catch(err => {\n      console.log(err);\n      resolve('');\n    });\n  });\n}\nexport function useUpdateUnderlyingStatus() {\n  const dispatch = useDispatch();\n  // const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const setUnderlyingStatus = useCallback((chainId, hash, isReceiveAnyToken) => {\n    // console.log(chainId, hash, isReceiveAnyToken)\n    dispatch(updateUnderlyingStatus({\n      chainId,\n      hash,\n      isReceiveAnyToken\n    }));\n  }, [dispatch]);\n  return {\n    setUnderlyingStatus\n  };\n}\nexport function useAddNoWalletTx() {\n  const dispatch = useDispatch();\n  const {\n    chainId\n  } = useActiveReact();\n  // const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const setAddNoWalletTx = useCallback(function (response) {\n    let {\n      summary,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // console.log(chainId, hash, isReceiveAnyToken)\n    // dispatch(noWalletTxList({chainId, hash, version}))\n    const {\n      hash\n    } = response;\n\n    // console.log(hash)\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n    dispatch(noWalletTxList({\n      hash,\n      chainId,\n      summary,\n      toChainId,\n      toAddress,\n      symbol,\n      version,\n      routerToken,\n      token,\n      logoUrl,\n      isLiquidity,\n      fromInfo,\n      toInfo\n    }));\n  }, [dispatch]);\n  return {\n    setAddNoWalletTx\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","axios","useActiveReact","addTransaction","updateUnderlyingStatus","noWalletTxList","config","useIsGnosisSafeWallet","useTransactionAdder","chainId","account","dispatch","isGnosisSafeWallet","response","summary","approval","claim","value","toChainId","toAddress","symbol","version","routerToken","token","logoUrl","isLiquidity","fromInfo","toInfo","arguments","length","undefined","hash","Error","from","useAllTransactions","_state$chainId","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","claimSubmitted","Boolean","useHashSwapInfo","Promise","resolve","url","concat","bridgeApi","get","then","res","status","data","catch","err","console","log","useUpdateUnderlyingStatus","setUnderlyingStatus","isReceiveAnyToken","useAddNoWalletTx","setAddNoWalletTx"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/transactions/hooks.tsx"],"sourcesContent":["// import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport axios from 'axios'\n\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction, updateUnderlyingStatus, noWalletTxList } from './actions'\nimport { TransactionDetails } from './reducer'\n\nimport config from '../../config'\n\nimport {useIsGnosisSafeWallet} from '../wallet/hooks'\n\ninterface TransactionResponse {\n  hash: string\n}\n\n// 可以接受ether库事务响应并将其添加到事务列表的助手\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: {\n    summary?: string;\n    approval?: { tokenAddress: string; spender: string };\n    claim?: { recipient: string };\n    value?: any;\n    toChainId?: any;\n    toAddress?: any;\n    symbol?: any;\n    version?: any;\n    routerToken?: any;\n    token?: any;\n    logoUrl?: any;\n    isLiquidity?: any;\n    fromInfo?: any;\n    toInfo?: any;\n  }\n) => void {\n  const { chainId, account } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n  const {isGnosisSafeWallet} = useIsGnosisSafeWallet()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        approval,\n        claim,\n        value,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }: {\n        summary?: string;\n        claim?: { recipient: string };\n        approval?: { tokenAddress: string; spender: string },\n        value?: any,\n        toChainId?: any,\n        toAddress?: any,\n        symbol?: any,\n        version?: any,\n        routerToken?: any,\n        token?: any,\n        logoUrl?: any,\n        isLiquidity?: any,\n        fromInfo?: any,\n        toInfo?: any,\n      } = {}\n    ) => {\n      // console.log(account, chainId, isGnosisSafeWallet)\n      if (!account) return\n      if (!chainId) return\n      if (isGnosisSafeWallet) return\n      \n      const { hash } = response\n      // console.log(hash)\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({\n        hash,\n        from: account,\n        chainId,\n        approval,\n        summary,\n        claim,\n        value,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }))\n    },\n    [dispatch, chainId, account, isGnosisSafeWallet]\n  )\n}\n\n// 返回当前链的所有事务\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveReact()\n\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * 返回事务是否发生在最后一天(86400秒* 1000毫秒/秒)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// 返回令牌是否有未决的审批事务\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  // console.log(allTransactions)\n  return useMemo(\n    () =>\n      (typeof tokenAddress === 'string' || typeof tokenAddress === 'number') &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some(hash => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          const approval = tx.approval\n          if (!approval) return false\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n\n// 注意提交索赔\n// 如果没有加载，返回null;如果没有找到，返回undefined\nexport function useUserHasSubmittedClaim(\n  account?: string\n): { claimSubmitted: boolean; claimTxn: TransactionDetails | undefined } {\n  const allTransactions = useAllTransactions()\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find(hash => {\n      const tx = allTransactions[hash]\n      return tx.claim && tx.claim.recipient === account\n    })\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined\n  }, [account, allTransactions])\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn }\n}\n\nexport function useHashSwapInfo (hash:any) {\n  return new Promise(resolve => {\n    const url = `${config.bridgeApi}/v2/history/details/latest?params=${hash}`\n    axios.get(url).then(res => {\n      const {status, data} = res\n      if (status === 200) {\n        resolve(data)\n      } else {\n        resolve('')\n      }\n    }).catch((err) => {\n      console.log(err)\n      resolve('')\n    })\n  })\n}\n\nexport function useUpdateUnderlyingStatus(): {setUnderlyingStatus?: (chainId: any, hash: string, isReceiveAnyToken: any) => void} {\n  const dispatch = useDispatch<AppDispatch>()\n  // const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const setUnderlyingStatus = useCallback(\n    (chainId: any, hash: string, isReceiveAnyToken: any) => {\n      // console.log(chainId, hash, isReceiveAnyToken)\n      dispatch(updateUnderlyingStatus({chainId, hash, isReceiveAnyToken}))\n    },\n    [dispatch]\n  )\n\n  return {\n    setUnderlyingStatus\n  }\n}\n\nexport function useAddNoWalletTx(): any {\n  const dispatch = useDispatch<AppDispatch>()\n  const { chainId } = useActiveReact()\n  // const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const setAddNoWalletTx = useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }: {\n        summary?: string;\n        toChainId?: any,\n        toAddress?: any,\n        symbol?: any,\n        version?: any,\n        routerToken?: any,\n        token?: any,\n        logoUrl?: any,\n        isLiquidity?: any,\n        fromInfo?: any,\n        toInfo?: any,\n      } = {}\n    ) => {\n      // console.log(chainId, hash, isReceiveAnyToken)\n      // dispatch(noWalletTxList({chainId, hash, version}))\n      const { hash } = response\n      \n      // console.log(hash)\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(noWalletTxList({\n        hash,\n        chainId,\n        summary,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }))\n    },\n    [dispatch]\n  )\n\n  return {\n    setAddNoWalletTx\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}