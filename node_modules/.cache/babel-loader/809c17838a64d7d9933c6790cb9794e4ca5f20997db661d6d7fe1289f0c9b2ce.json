{"ast":null,"code":"import{updateTerraHash}from'../terra';import{updateNasHash}from'../nas';import{updateNearHash}from'../near';import{updateXlmHash}from'../stellar';import{getTRXTxnsStatus}from'../trx';import{getADATxnsStatus}from'../cardano';import{getFLOWTxnsStatus}from'../flow';import{getSolTxnsStatus}from'../solana';import{getAptTxnsStatus}from'../apt';import{getBtcHash}from'../btc';import{getAtomTxnsStatus}from'../atom';import{ChainId}from'../../config/chainConfig/chainId';export function getHashInfo(hash,chainId){return new Promise(resolve=>{if([ChainId.TERRA].includes(chainId)){updateTerraHash(hash).then(res=>{resolve(res);});}else if([ChainId.NAS].includes(chainId)){updateNasHash(hash).then(res=>{resolve(res);});}else if([ChainId.NEAR,ChainId.NEAR_TEST].includes(chainId)){updateNearHash(hash,chainId).then(res=>{resolve(res);});}else if([ChainId.XLM,ChainId.XLM_TEST].includes(chainId)){updateXlmHash(hash,chainId).then(res=>{resolve(res);});}else if([ChainId.TRX,ChainId.TRX_TEST].includes(chainId)){getTRXTxnsStatus(hash).then(res=>{resolve(res);});}else if([ChainId.ADA,ChainId.ADA_TEST].includes(chainId)){getADATxnsStatus(hash,chainId).then(res=>{resolve(res);});}else if([ChainId.FLOW,ChainId.FLOW_TEST].includes(chainId)){getFLOWTxnsStatus(hash,chainId).then(res=>{resolve(res);});}else if([ChainId.SOL,ChainId.SOL_TEST].includes(chainId)){getSolTxnsStatus(hash,chainId).then(res=>{resolve(res);});}else if([ChainId.APT,ChainId.APT_TEST].includes(chainId)){getAptTxnsStatus(hash,chainId).then(res=>{resolve(res);});}else if([ChainId.BTC,ChainId.BTC_TEST].includes(chainId)){getBtcHash(hash,chainId).then(res=>{resolve(res);});}else if([ChainId.ATOM_SEI,ChainId.ATOM_SEI_TEST,ChainId.ATOM_DCORE,ChainId.ATOM_DCORE_TEST].includes(chainId)){getAtomTxnsStatus(hash,chainId).then(res=>{resolve(res);});}});}","map":{"version":3,"names":["updateTerraHash","updateNasHash","updateNearHash","updateXlmHash","getTRXTxnsStatus","getADATxnsStatus","getFLOWTxnsStatus","getSolTxnsStatus","getAptTxnsStatus","getBtcHash","getAtomTxnsStatus","ChainId","getHashInfo","hash","chainId","Promise","resolve","TERRA","includes","then","res","NAS","NEAR","NEAR_TEST","XLM","XLM_TEST","TRX","TRX_TEST","ADA","ADA_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","APT","APT_TEST","BTC","BTC_TEST","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/getHash/index.ts"],"sourcesContent":["import {updateTerraHash} from '../terra'\nimport {updateNasHash} from '../nas'\nimport {updateNearHash} from '../near'\nimport {updateXlmHash} from '../stellar'\nimport {getTRXTxnsStatus} from '../trx'\nimport {getADATxnsStatus} from '../cardano'\nimport {getFLOWTxnsStatus} from '../flow'\nimport {getSolTxnsStatus} from '../solana'\nimport {getAptTxnsStatus} from '../apt'\nimport {getBtcHash} from '../btc'\nimport {getAtomTxnsStatus} from '../atom'\n\nimport { ChainId } from '../../config/chainConfig/chainId'\n\nexport function getHashInfo(hash: any, chainId: any) {\n  return new Promise(resolve => {\n    if ([ChainId.TERRA].includes(chainId)) {\n      updateTerraHash(hash).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.NAS].includes(chainId)) {\n      updateNasHash(hash).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(chainId)) {\n      updateNearHash(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(chainId)) {\n      updateXlmHash(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(chainId)) {\n      getTRXTxnsStatus(hash).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(chainId)) {\n      getADATxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      getFLOWTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(chainId)) {\n      getSolTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(chainId)) {\n      getAptTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(chainId)) {\n      getBtcHash(hash, chainId).then(res => {\n        resolve(res)\n      })\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n      getAtomTxnsStatus(hash, chainId).then(res => {\n        resolve(res)\n      })\n    }\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}