{"ast":null,"code":"import _taggedTemplateLiteral from\"/workspace/Planq-Dapps/vesting-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React from'react';import styled from'styled-components';import{escapeRegExp}from'../../utils';const StyledInput=styled.input(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  width: 100%;\\n  position: relative;\\n  font-weight: 500;\\n  outline: none;\\n  border: none;\\n  flex: 1 1 auto;\\n  background-color: \",\";\\n  font-size: \",\";\\n  text-align: \",\";\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding: 0px;\\n  -webkit-appearance: textfield;\\n  height: 70px;\\n  background: none;\\n  border-bottom: 0.0625rem solid \",\";\\n  margin-right: 1.875rem;\\n\\n  ::-webkit-search-decoration {\\n    -webkit-appearance: none;\\n  }\\n\\n  [type='number'] {\\n    -moz-appearance: textfield;\\n  }\\n\\n  ::-webkit-outer-spin-button,\\n  ::-webkit-inner-spin-button {\\n    -webkit-appearance: none;\\n  }\\n\\n  ::placeholder {\\n    // color: \",\";\\n    color:#DADADA;\\n  }\\n  \",\";\\n  &.error {\\n    color: \",\";\\n  }\\n\"])),_ref=>{let{error,theme}=_ref;return error?'rgb(255, 104, 113)':theme.textColorBold;},_ref2=>{let{theme}=_ref2;return theme.bg1;},_ref3=>{let{fontSize}=_ref3;return fontSize!==null&&fontSize!==void 0?fontSize:'44px';},_ref4=>{let{align}=_ref4;return align&&align;},_ref5=>{let{theme}=_ref5;return theme.inputBorder;},_ref6=>{let{theme}=_ref6;return theme.text4;},_ref7=>{let{theme}=_ref7;return theme.mediaWidth.upToLarge(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    width: 100%;\\n    margin-right: 0;\\n    height: 50px;\\n    font-size: 24px;\\n  \"])));},_ref8=>{let{theme}=_ref8;return theme.red1;});const inputRegex=RegExp(\"^\\\\d*(?:\\\\\\\\[.])?\\\\d*$\");// match escaped \".\" characters via in a non-capturing group\nexport const Input=React.memo(function InnerInput(_ref9){let{value,onUserInput,placeholder,...rest}=_ref9;const enforcer=nextUserInput=>{if(nextUserInput===''||inputRegex.test(escapeRegExp(nextUserInput))){onUserInput(nextUserInput);}};return/*#__PURE__*/React.createElement(StyledInput,Object.assign({},rest,{value:value,onChange:event=>{// replace commas with periods, because uniswap exclusively uses period as the decimal separator\nenforcer(event.target.value.replace(/,/g,''));}// universal input options\n,inputMode:\"decimal\",title:\"Token Amount\",autoComplete:\"off\",autoCorrect:\"off\"// text-specific options\n,type:\"text\",pattern:\"^[0-9]*[.,]?[0-9]*$\",placeholder:placeholder||'0.0',minLength:1,maxLength:79,spellCheck:\"false\"}));});export default Input;// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group","map":{"version":3,"names":["React","styled","escapeRegExp","StyledInput","input","_templateObject","_taggedTemplateLiteral","_ref","error","theme","textColorBold","_ref2","bg1","_ref3","fontSize","_ref4","align","_ref5","inputBorder","_ref6","text4","_ref7","mediaWidth","upToLarge","_templateObject2","_ref8","red1","inputRegex","RegExp","Input","memo","InnerInput","_ref9","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","createElement","Object","assign","onChange","event","target","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/components/NumericalInput/index.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? 'rgb(255, 104, 113)' : theme.textColorBold)};\n  width: 100%;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: ${({ fontSize }) => fontSize ?? '44px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n  height: 70px;\n  background: none;\n  border-bottom: 0.0625rem solid ${({ theme }) => theme.inputBorder};\n  margin-right: 1.875rem;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    // color: ${({ theme }) => theme.text4};\n    color:#DADADA;\n  }\n  ${({ theme }) => theme.mediaWidth.upToLarge`\n    width: 100%;\n    margin-right: 0;\n    height: 50px;\n    font-size: 24px;\n  `};\n  &.error {\n    color: ${({ theme }) => theme.red1};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={event => {\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, ''))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title=\"Token Amount\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"],"mappings":"iNAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,OAASC,YAAY,KAAQ,aAAa,CAE1C,KAAM,CAAAC,WAAW,CAAGF,MAAM,CAACG,KAAK,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,wwBACrBC,IAAA,MAAC,CAAEC,KAAK,CAAEC,KAAM,CAAC,CAAAF,IAAA,OAAM,CAAAC,KAAK,CAAG,oBAAoB,CAAGC,KAAK,CAACC,aAAa,EAAC,CAO/DC,KAAA,MAAC,CAAEF,KAAM,CAAC,CAAAE,KAAA,OAAK,CAAAF,KAAK,CAACG,GAAG,GAC/BC,KAAA,MAAC,CAAEC,QAAS,CAAC,CAAAD,KAAA,OAAK,CAAAC,QAAQ,SAARA,QAAQ,UAARA,QAAQ,CAAI,MAAM,GACnCC,KAAA,MAAC,CAAEC,KAAM,CAAC,CAAAD,KAAA,OAAK,CAAAC,KAAK,EAAIA,KAAK,GAQVC,KAAA,MAAC,CAAER,KAAM,CAAC,CAAAQ,KAAA,OAAK,CAAAR,KAAK,CAACS,WAAW,GAiBnDC,KAAA,MAAC,CAAEV,KAAM,CAAC,CAAAU,KAAA,OAAK,CAAAV,KAAK,CAACW,KAAK,GAGtCC,KAAA,MAAC,CAAEZ,KAAM,CAAC,CAAAY,KAAA,OAAK,CAAAZ,KAAK,CAACa,UAAU,CAACC,SAAS,CAAAC,gBAAA,GAAAA,gBAAA,CAAAlB,sBAAA,+FAK1C,CAEUmB,KAAA,MAAC,CAAEhB,KAAM,CAAC,CAAAgB,KAAA,OAAK,CAAAhB,KAAK,CAACiB,IAAI,GAErC,CAED,KAAM,CAAAC,UAAU,CAAGC,MAAM,yBAAyB,CAAC,CAAC;AAEpD,MAAO,MAAM,CAAAC,KAAK,CAAG7B,KAAK,CAAC8B,IAAI,CAAC,QAAS,CAAAC,UAAUA,CAAAC,KAAA,CAWqB,IAXpB,CAClDC,KAAK,CACLC,WAAW,CACXC,WAAW,CACX,GAAGC,IAOgE,CAAC,CAAAJ,KAAA,CACpE,KAAM,CAAAK,QAAQ,CAAIC,aAAqB,EAAK,CAC1C,GAAIA,aAAa,GAAK,EAAE,EAAIX,UAAU,CAACY,IAAI,CAACrC,YAAY,CAACoC,aAAa,CAAC,CAAC,CAAE,CACxEJ,WAAW,CAACI,aAAa,CAAC,CAC5B,CACF,CAAC,CAED,mBACEtC,KAAA,CAAAwC,aAAA,CAACrC,WAAW,CAAAsC,MAAA,CAAAC,MAAA,IACNN,IAAI,EACRH,KAAK,CAAEA,KAAM,CACbU,QAAQ,CAAEC,KAAK,EAAI,CACjB;AACAP,QAAQ,CAACO,KAAK,CAACC,MAAM,CAACZ,KAAK,CAACa,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAAC,CAChD,CACA;AAAA,CACAC,SAAS,CAAC,SAAS,CACnBC,KAAK,CAAC,cAAc,CACpBC,YAAY,CAAC,KAAK,CAClBC,WAAW,CAAC,KACZ;AAAA,CACAC,IAAI,CAAC,MAAM,CACXC,OAAO,CAAC,qBAAqB,CAC7BjB,WAAW,CAAEA,WAAW,EAAI,KAAM,CAClCkB,SAAS,CAAE,CAAE,CACbC,SAAS,CAAE,EAAG,CACdC,UAAU,CAAC,OAAO,EACnB,CAAC,CAEN,CAAC,CAAC,CAEF,cAAe,CAAA1B,KAAK,CAEpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}