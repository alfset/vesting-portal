{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { BigAmount } from \"../../utils/formatBignumber\";\nimport { ChainId } from \"../../config/chainConfig/chainId\";\nimport { adaAddress } from './actions';\n\n// import * as typhonjs from '@stricahq/typhonjs'\n// export const CardanoWasm = () => { // 路由懒加载\n//   return () => Promise.resolve(require(`@emurgo/cardano-serialization-lib-nodejs`).default)\n// }\n// const CardanoWasm = require('@emurgo/cardano-serialization-lib-nodejs')\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import CardanoWasm from \"@emurgo/cardano-serialization-lib-asmjs\"\n// import CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// const CardanoWasm = require('@dcspark/cardano-multiplatform-lib-browser')\n// console.log(typhonjs)\n// console.log(CardanoWasm)\n\nexport function useAdaAddress() {\n  const account = useSelector(state => state.ada.adaAddress);\n  return {\n    adaAddress: account\n  };\n}\nexport async function eternlLogin() {\n  try {\n    const api = await window.cardano.eternl.enable();\n    window.lucid.selectWallet(api);\n    localStorage.setItem(\"lucid\", \"true\");\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function useAdaLogin() {\n  // const api = await window.cardano.eternl.enable();\n  // window.lucid.selectWallet(api);\n  const {\n    chainId\n  } = useActiveReact();\n  const dispatch = useDispatch();\n  return useCallback(() => {\n    var _window, _window2, _window2$cardano, _window3, _window4, _window4$lucid, _window5, _window6, _window6$lucid;\n    const adaWallet = ((_window = window) === null || _window === void 0 ? void 0 : _window.cardano) && ((_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$cardano = _window2.cardano) === null || _window2$cardano === void 0 ? void 0 : _window2$cardano.eternl);\n    if (((_window3 = window) === null || _window3 === void 0 ? void 0 : _window3.lucid) && ((_window4 = window) === null || _window4 === void 0 ? void 0 : (_window4$lucid = _window4.lucid) === null || _window4$lucid === void 0 ? void 0 : _window4$lucid.wallet) === undefined) {\n      eternlLogin();\n      return;\n    }\n    if (adaWallet && (adaWallet === null || adaWallet === void 0 ? void 0 : adaWallet.enable) && ((_window5 = window) === null || _window5 === void 0 ? void 0 : _window5.lucid) && ((_window6 = window) === null || _window6 === void 0 ? void 0 : (_window6$lucid = _window6.lucid) === null || _window6$lucid === void 0 ? void 0 : _window6$lucid.wallet)) {\n      if (ChainId.ADA_TEST === chainId || ChainId.ADA === chainId) {\n        window.lucid.wallet.getUtxos().then(e => {\n          if (e && e.length > 0) {\n            dispatch(adaAddress({\n              address: e[0].address\n            }));\n          }\n        });\n      } else {\n        alert('Network Error.');\n      }\n    } else {\n      if (confirm('Please connect Eternl or install Eternl.') === true) {\n        // window.open('https://namiwallet.io/')\n        window.open('https://eternl.io/');\n      }\n    }\n  }, []);\n}\nexport function useAdaBalance() {\n  const adaBalanceList = useSelector(state => state.ada.adaBalanceList);\n  return {\n    adaBalanceList\n    // getAdaTokenBalance\n  };\n}\n\nexport function getADATxnsStatus(txid, chainId) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(resolve => {\n    const query = \"{\\n      transactions(where: { hash: { _eq: \\\"\".concat(txid, \"\\\"}}) {\\n        block {number epochNo slotNo}\\n        hash metadata{key value}\\n        inputs{\\n          tokens{\\n            asset{\\n              assetId\\n              assetName\\n            }\\n            quantity\\n          }\\n          value\\n        }\\n        outputs(order_by:{index:asc}){\\n          address\\n          index\\n          tokens{\\n            asset{\\n              assetId\\n              assetName\\n            }\\n            quantity\\n          }\\n          value\\n        }\\n        validContract\\n      }\\n    }\");\n    let url = 'https://graphql-api.mainnet.dandelion.link/';\n    if (chainId === 'ADA_TEST') {\n      url = 'https://graphql-api.testnet.dandelion.link/';\n    }\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    }).then(res => res.json()).then(json => {\n      // console.log(json)\n      // console.log(json.data)\n      // console.log(json.data.transactions)\n      // console.log(JSON.stringify(json.data.transactions))\n      // console.log(json)\n      if (json && json.data && json.data.transactions && json.data.transactions.length > 0) {\n        if (!json.data.transactions[0].outputs) {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        } else {\n          data.msg = 'Success';\n          data.info = json.data.transactions[0];\n        }\n      } else {\n        data.msg = 'Null';\n        data.error = 'Query is empty!';\n      }\n      resolve(data);\n    }).catch(err => {\n      data.error = 'Query is empty!';\n      console.log(err);\n      resolve(data);\n    });\n  });\n}\nconst baseValue = 2;\nexport function useAdaCrossChain(routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, useToChainId) {\n  var _window7, _window8, _window8$cardano;\n  const {\n    account\n  } = useActiveReact();\n  const {\n    t\n  } = useTranslation();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const {\n    adaBalanceList\n  } = useAdaBalance();\n  const adaWallet = ((_window7 = window) === null || _window7 === void 0 ? void 0 : _window7.cardano) && ((_window8 = window) === null || _window8 === void 0 ? void 0 : (_window8$cardano = _window8.cardano) === null || _window8$cardano === void 0 ? void 0 : _window8$cardano.eternl);\n  const addTransaction = useTransactionAdder();\n  const inputValue = (selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'NATIVE' ? Number(typedValue) + baseValue : typedValue;\n  const inputAmount = useMemo(() => tryParseAmount3(inputValue + '', selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [inputValue, selectCurrency]);\n  const useBalance = useMemo(() => {\n    if ((selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) && adaBalanceList) {\n      const dec = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals;\n      if ((selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'NATIVE' && adaBalanceList['NATIVE']) {\n        return BigAmount.format(dec, adaBalanceList['NATIVE']);\n      } else if ((selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'TOKEN' && adaBalanceList[selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address]) {\n        console.log(adaBalanceList);\n        return BigAmount.format(dec, adaBalanceList[selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address]);\n      }\n    }\n    return '';\n  }, [adaBalanceList, selectCurrency]);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && useBalance && Number(useBalance === null || useBalance === void 0 ? void 0 : useBalance.toExact()) >= Number(inputValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    if (!account || ![ChainId.ADA, ChainId.ADA_TEST].includes(chainId) || !routerToken || !adaWallet || !useToChainId) return {};\n    return {\n      balance: useBalance,\n      execute: async () => {\n        // let txResult:any = ''\n        console.log(adaWallet);\n        try {\n          // const MetaDatum: any = {\n          //   \"bind\": receiveAddress,\n          //   \"toChainId\": useToChainId + ''\n          // }\n          // const auxDataCbor = typhonjs.utils\n          // .createAuxiliaryDataCbor({\n          //   metadata: [\n          //     {\n          //       label: 123,\n          //       data: MetaDatum,\n          //     },\n          //   ],\n          // })\n          // .toString(\"hex\");\n          let tx = undefined;\n          if ((selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.tokenType) === 'NATIVE') {\n            tx = await window.lucid.newTx().payToContract(routerToken, {\n              inline: window.lucid.data.to(BigInt(0))\n            }, {\n              lovelace: BigInt(inputAmount)\n            }).attachMetadata(123, {\n              \"bind\": receiveAddress,\n              \"toChainId\": useToChainId + ''\n            }).complete();\n          } else {\n            const tokenArr = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address.split('.');\n            const tokenObj = {};\n            // const decimals = selectCurrency.decimals;\n            tokenObj[tokenArr[0] + tokenArr[1]] = BigInt(inputAmount);\n            tx = await window.lucid.newTx().payToContract(routerToken, {\n              inline: window.lucid.data.to(BigInt(0))\n            }, tokenObj).attachMetadata(123, {\n              \"bind\": receiveAddress,\n              \"toChainId\": useToChainId + ''\n            }).complete();\n          }\n          const signedTx = await tx.sign().complete();\n          const txHash = await signedTx.submit();\n          const txResult = {\n            data: {\n              transactionId: txHash\n            },\n            status: true\n          };\n          // const txResult = await adaWallet.paymentTransaction({\n          //   auxiliaryDataCbor: auxDataCbor,\n          //   outputs: [...outputs], \n          // });\n          console.log(txResult);\n          if (txResult === null || txResult === void 0 ? void 0 : txResult.status) {\n            var _txResult$data;\n            const txReceipt = {\n              hash: txResult === null || txResult === void 0 ? void 0 : (_txResult$data = txResult.data) === null || _txResult$data === void 0 ? void 0 : _txResult$data.transactionId\n            };\n            console.log(txReceipt);\n            if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n              const data = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                routerToken: routerToken\n              };\n              addTransaction(txReceipt, {\n                summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                version: destConfig.type,\n                routerToken: routerToken,\n                token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n                logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n                isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                  name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                  decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                  address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n                },\n                toInfo: {\n                  symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                  name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                  decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                  address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n                }\n              });\n              recordsTxns(data);\n              onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n            }\n          } else {\n            // onChangeViewErrorTip('Txns failure.', true)\n            onChangeViewErrorTip(JSON.stringify(txResult), true);\n          }\n        } catch (error) {\n          console.log(error);\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, useBalance, adaWallet, useToChainId]);\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useTranslation","useActiveReact","tryParseAmount3","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","BigAmount","ChainId","adaAddress","useAdaAddress","account","state","ada","eternlLogin","api","window","cardano","eternl","enable","lucid","selectWallet","localStorage","setItem","error","console","log","useAdaLogin","chainId","dispatch","_window","_window2","_window2$cardano","_window3","_window4","_window4$lucid","_window5","_window6","_window6$lucid","adaWallet","wallet","undefined","ADA_TEST","ADA","getUtxos","then","e","length","address","alert","confirm","open","useAdaBalance","adaBalanceList","getADATxnsStatus","txid","data","msg","info","Promise","resolve","query","concat","url","fetch","method","headers","body","JSON","stringify","res","json","transactions","outputs","catch","err","baseValue","useAdaCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","_window7","_window8","_window8$cardano","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","inputValue","tokenType","Number","inputAmount","decimals","useBalance","dec","format","sufficientBalance","toExact","includes","balance","execute","tx","newTx","payToContract","inline","to","BigInt","lovelace","attachMetadata","complete","tokenArr","split","tokenObj","signedTx","sign","txHash","submit","txResult","transactionId","status","_txResult$data","txReceipt","hash","value","formatvalue","symbol","version","type","pairid","summary","toChainId","toAddress","indexOf","toLowerCase","token","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/cardano/index.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport { AppState, AppDispatch } from '../../state'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { recordsTxns } from '../../utils/bridge/register'\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { BigAmount } from \"../../utils/formatBignumber\"\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n\nimport { adaAddress } from './actions'\n\n// import * as typhonjs from '@stricahq/typhonjs'\n// export const CardanoWasm = () => { // 路由懒加载\n//   return () => Promise.resolve(require(`@emurgo/cardano-serialization-lib-nodejs`).default)\n// }\n// const CardanoWasm = require('@emurgo/cardano-serialization-lib-nodejs')\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import CardanoWasm from \"@emurgo/cardano-serialization-lib-asmjs\"\n// import CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// import * as CardanoWasm from '@dcspark/cardano-multiplatform-lib-browser'\n// const CardanoWasm = require('@dcspark/cardano-multiplatform-lib-browser')\n// console.log(typhonjs)\n// console.log(CardanoWasm)\n\nexport function useAdaAddress() {\n  const account: any = useSelector<AppState, AppState['ada']>(state => state.ada.adaAddress)\n  return {\n    adaAddress: account\n  }\n}\n\nexport async function eternlLogin() {\n  try {\n    const api = await window.cardano.eternl.enable();\n    window.lucid.selectWallet(api);\n    localStorage.setItem(\"lucid\", \"true\");\n  } catch (error) {\n    console.log(error)\n  }\n  \n}\n\nexport function useAdaLogin() {\n  // const api = await window.cardano.eternl.enable();\n  // window.lucid.selectWallet(api);\n  const { chainId } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => {\n    const adaWallet =  window?.cardano && window?.cardano?.eternl\n\n    if(window?.lucid && window?.lucid?.wallet === undefined) {\n      eternlLogin();\n      return;\n    }\n\n    if (adaWallet && adaWallet?.enable && window?.lucid && window?.lucid?.wallet) {\n      \n      if (\n        (ChainId.ADA_TEST === chainId) || (ChainId.ADA === chainId)\n      ) {\n        window.lucid.wallet.getUtxos().then((e: any) => {\n          if (e && e.length > 0) {\n            dispatch(adaAddress({ address: e[0].address }))\n          }\n        })\n      } else {\n        alert('Network Error.')\n      }\n\n    } else {\n      if (confirm('Please connect Eternl or install Eternl.') === true) {\n        // window.open('https://namiwallet.io/')\n        window.open('https://eternl.io/')\n      }\n    }\n  }, [])\n}\n\nexport function useAdaBalance() {\n  const adaBalanceList: any = useSelector<AppState, AppState['ada']>(state => state.ada.adaBalanceList)\n\n  return {\n    adaBalanceList\n    // getAdaTokenBalance\n  }\n}\n\nexport function getADATxnsStatus(txid: string, chainId: any) {\n  const data: any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    const query = `{\n      transactions(where: { hash: { _eq: \"${txid}\"}}) {\n        block {number epochNo slotNo}\n        hash metadata{key value}\n        inputs{\n          tokens{\n            asset{\n              assetId\n              assetName\n            }\n            quantity\n          }\n          value\n        }\n        outputs(order_by:{index:asc}){\n          address\n          index\n          tokens{\n            asset{\n              assetId\n              assetName\n            }\n            quantity\n          }\n          value\n        }\n        validContract\n      }\n    }`\n    let url = 'https://graphql-api.mainnet.dandelion.link/'\n    if (chainId === 'ADA_TEST') {\n      url = 'https://graphql-api.testnet.dandelion.link/'\n    }\n    fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query }),\n    }).then(res => res.json()).then(json => {\n      // console.log(json)\n      // console.log(json.data)\n      // console.log(json.data.transactions)\n      // console.log(JSON.stringify(json.data.transactions))\n      // console.log(json)\n      if (json && json.data && json.data.transactions && json.data.transactions.length > 0) {\n        if (!json.data.transactions[0].outputs) {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Success'\n          data.info = json.data.transactions[0]\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      data.error = 'Query is empty!'\n      console.log(err)\n      resolve(data)\n    })\n  })\n}\n\nconst baseValue = 2\n\nexport function useAdaCrossChain(\n  routerToken: any,\n  inputToken: any,\n  chainId: any,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: any,\n  typedValue: any,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account } = useActiveReact()\n  const { t } = useTranslation()\n  const { onChangeViewDtil } = useTxnsDtilOpen()\n  const { onChangeViewErrorTip } = useTxnsErrorTipOpen()\n\n  const { adaBalanceList } = useAdaBalance()\n\n  const adaWallet = window?.cardano && window?.cardano?.eternl\n  const addTransaction = useTransactionAdder()\n\n  const inputValue = selectCurrency?.tokenType === 'NATIVE' ? Number(typedValue) + baseValue : typedValue\n\n  const inputAmount = useMemo(() => tryParseAmount3(inputValue + '', selectCurrency?.decimals), [inputValue, selectCurrency])\n\n  const useBalance = useMemo(() => {\n    if (selectCurrency?.tokenType && adaBalanceList) {\n      const dec = selectCurrency?.decimals\n      if (selectCurrency?.tokenType === 'NATIVE' && adaBalanceList['NATIVE']) {\n        return BigAmount.format(dec, adaBalanceList['NATIVE'])\n      } else if (selectCurrency?.tokenType === 'TOKEN' && adaBalanceList[selectCurrency?.address]) {\n        console.log(adaBalanceList)\n        return BigAmount.format(dec, adaBalanceList[selectCurrency?.address])\n      }\n    }\n    return ''\n  }, [adaBalanceList, selectCurrency])\n  let sufficientBalance: any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && useBalance && (Number(useBalance?.toExact()) >= Number(inputValue))\n  } catch (error) {\n    console.log(error)\n  }\n  return useMemo(() => {\n    if (!account || ![ChainId.ADA, ChainId.ADA_TEST].includes(chainId) || !routerToken || !adaWallet || !useToChainId) return {}\n    return {\n      balance: useBalance,\n      execute: async () => {\n        // let txResult:any = ''\n        console.log(adaWallet)\n\n        try {\n          // const MetaDatum: any = {\n          //   \"bind\": receiveAddress,\n          //   \"toChainId\": useToChainId + ''\n          // }\n          // const auxDataCbor = typhonjs.utils\n          // .createAuxiliaryDataCbor({\n          //   metadata: [\n          //     {\n          //       label: 123,\n          //       data: MetaDatum,\n          //     },\n          //   ],\n          // })\n          // .toString(\"hex\");\n          let tx = undefined;\n          if (selectCurrency?.tokenType === 'NATIVE') {\n            tx = await window.lucid.newTx().payToContract(\n              routerToken,\n              {\n                inline: window.lucid.data.to(BigInt(0)),\n              },\n              { lovelace: BigInt(inputAmount) })\n              .attachMetadata(123, {\n                \"bind\": receiveAddress,\n                \"toChainId\": useToChainId + ''\n              })\n              .complete();\n          } else {\n            const tokenArr = selectCurrency?.address.split('.');\n            const tokenObj: any = {};\n            // const decimals = selectCurrency.decimals;\n            tokenObj[tokenArr[0] + tokenArr[1]] = BigInt(inputAmount);\n            tx = await window.lucid.newTx().payToContract(\n              routerToken,\n              {\n                inline: window.lucid.data.to(BigInt(0)),\n              },\n              tokenObj)\n              .attachMetadata(123, {\n                \"bind\": receiveAddress,\n                \"toChainId\": useToChainId + ''\n              })\n              .complete();\n          }\n\n          const signedTx = await tx.sign().complete();\n          const txHash = await signedTx.submit();\n          const txResult = {\n            data: {\n              transactionId: txHash\n            },\n            status: true,\n          }\n          // const txResult = await adaWallet.paymentTransaction({\n          //   auxiliaryDataCbor: auxDataCbor,\n          //   outputs: [...outputs], \n          // });\n          console.log(txResult)\n          if (txResult?.status) {\n            const txReceipt: any = { hash: txResult?.data?.transactionId }\n            console.log(txReceipt)\n            if (txReceipt?.hash) {\n              const data: any = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency?.symbol,\n                routerToken: routerToken\n              }\n              addTransaction(txReceipt, {\n                summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                routerToken: routerToken,\n                token: selectCurrency?.address,\n                logoUrl: selectCurrency?.logoUrl,\n                isLiquidity: destConfig?.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency?.symbol,\n                  name: selectCurrency?.name,\n                  decimals: selectCurrency?.decimals,\n                  address: selectCurrency?.address,\n                },\n                toInfo: {\n                  symbol: destConfig?.symbol,\n                  name: destConfig?.name,\n                  decimals: destConfig?.decimals,\n                  address: destConfig?.address,\n                },\n              })\n              recordsTxns(data)\n              onChangeViewDtil(txReceipt?.hash, true)\n            }\n          } else {\n            // onChangeViewErrorTip('Txns failure.', true)\n            onChangeViewErrorTip(JSON.stringify(txResult), true)\n          }\n        } catch (error) {\n          console.log(error);\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', { symbol: selectCurrency?.symbol })\n    }\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, useBalance, adaWallet, useToChainId])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}