{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/workspace/Planq-Dapps/vesting-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\nvar _templateObject, _templateObject2;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base64 = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = function (struct) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  const paddingRequired = (_a = options.paddingRequired) !== null && _a !== void 0 ? _a : false;\n  const characterSet = (_b = options.characterSet) !== null && _b !== void 0 ? _b : 'base64';\n  let letters;\n  if (characterSet === 'base64') {\n    letters = String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral([\"[A-Za-z0-9+/]\"], [\"[A-Za-z0-9+\\\\/]\"])));\n  } else {\n    (0, assert_1.assert)(characterSet === 'base64url');\n    letters = String.raw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"[-_A-Za-z0-9]\"])));\n  }\n  let re;\n  if (paddingRequired) {\n    re = new RegExp(\"^(?:\".concat(letters, \"{4})*(?:\").concat(letters, \"{3}=|\").concat(letters, \"{2}==)?$\"), 'u');\n  } else {\n    re = new RegExp(\"^(?:\".concat(letters, \"{4})*(?:\").concat(letters, \"{2,3}|\").concat(letters, \"{3}=|\").concat(letters, \"{2}==)?$\"), 'u');\n  }\n  return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;","map":{"version":3,"names":["superstruct_1","require","assert_1","base64","struct","options","arguments","length","undefined","paddingRequired","_a","characterSet","_b","letters","String","raw","_templateObject","_taggedTemplateLiteral","assert","_templateObject2","re","RegExp","concat","pattern","exports"],"sources":["../src/base64.ts"],"sourcesContent":["import { pattern, Struct } from 'superstruct';\n\nimport { assert } from './assert';\n\nexport type Base64Options = {\n  /**\n   * Is the `=` padding at the end required or not.\n   *\n   * @default false\n   */\n  // Padding is optional in RFC 4648, that's why the default value is false\n  paddingRequired?: boolean;\n  /**\n   * Which character set should be used.\n   * The sets are based on {@link https://datatracker.ietf.org/doc/html/rfc4648 RFC 4648}.\n   *\n   * @default 'base64'\n   */\n  characterSet?: 'base64' | 'base64url';\n};\n\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nexport const base64 = <T extends string, S>(\n  struct: Struct<T, S>,\n  options: Base64Options = {},\n) => {\n  const paddingRequired = options.paddingRequired ?? false;\n  const characterSet = options.characterSet ?? 'base64';\n\n  let letters: string;\n  if (characterSet === 'base64') {\n    letters = String.raw`[A-Za-z0-9+\\/]`;\n  } else {\n    assert(characterSet === 'base64url');\n    letters = String.raw`[-_A-Za-z0-9]`;\n  }\n\n  let re: RegExp;\n  if (paddingRequired) {\n    re = new RegExp(\n      `^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`,\n      'u',\n    );\n  } else {\n    re = new RegExp(\n      `^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`,\n      'u',\n    );\n  }\n\n  return pattern(struct, re);\n};\n"],"mappings":";;;;;;;;AAAA,MAAAA,aAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAmBA;;;;;;;AAOO,MAAME,MAAM,GAAG,SAAAA,CACpBC,MAAoB,EAElB;EAAA,IADFC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,EAAE;;EAE3B,MAAMG,eAAe,GAAG,CAAAC,EAAA,GAAAL,OAAO,CAACI,eAAe,cAAAC,EAAA,cAAAA,EAAA,GAAI,KAAK;EACxD,MAAMC,YAAY,GAAG,CAAAC,EAAA,GAAAP,OAAO,CAACM,YAAY,cAAAC,EAAA,cAAAA,EAAA,GAAI,QAAQ;EAErD,IAAIC,OAAe;EACnB,IAAIF,YAAY,KAAK,QAAQ,EAAE;IAC7BE,OAAO,GAAGC,MAAM,CAACC,GAAG,CAAAC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,0CAAgB;GACrC,MAAM;IACL,IAAAf,QAAA,CAAAgB,MAAM,EAACP,YAAY,KAAK,WAAW,CAAC;IACpCE,OAAO,GAAGC,MAAM,CAACC,GAAG,CAAAI,gBAAA,KAAAA,gBAAA,GAAAF,sBAAA,qBAAe;;EAGrC,IAAIG,EAAU;EACd,IAAIX,eAAe,EAAE;IACnBW,EAAE,GAAG,IAAIC,MAAM,QAAAC,MAAA,CACNT,OAAO,cAAAS,MAAA,CAAWT,OAAO,WAAAS,MAAA,CAAQT,OAAO,eAC/C,GAAG,CACJ;GACF,MAAM;IACLO,EAAE,GAAG,IAAIC,MAAM,QAAAC,MAAA,CACNT,OAAO,cAAAS,MAAA,CAAWT,OAAO,YAAAS,MAAA,CAAST,OAAO,WAAAS,MAAA,CAAQT,OAAO,eAC/D,GAAG,CACJ;;EAGH,OAAO,IAAAb,aAAA,CAAAuB,OAAO,EAACnB,MAAM,EAAEgB,EAAE,CAAC;AAC5B,CAAC;AA7BYI,OAAA,CAAArB,MAAM,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}