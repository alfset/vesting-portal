{"ast":null,"code":"import invariant from 'tiny-invariant';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport JSBI from 'jsbi';\nimport { Fraction, Rounding, parseBigintIsh } from './fraction';\nexport let SolidityType = /*#__PURE__*/function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n  return SolidityType;\n}({});\nexport const ZERO = JSBI.BigInt(0);\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n};\nexport function validateSolidityTypeInstance(value, solidityType) {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), \"\".concat(value, \" is not a \").concat(solidityType, \".\"));\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), \"\".concat(value, \" is not a \").concat(solidityType, \".\"));\n}\nconst Big = toFormat(_Big);\nconst TEN = JSBI.BigInt(10);\nexport class BigAmount extends Fraction {\n  static format(decimals, amount) {\n    return new BigAmount(decimals, amount);\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(decimals, amount) {\n    const parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(decimals)));\n    this.decimals = void 0;\n    this.amount = void 0;\n    this.decimals = decimals;\n    this.amount = amount;\n  }\n  get raw() {\n    return this.numerator;\n  }\n  getAmount() {\n    return this.amount;\n  }\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    let\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_DOWN;\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.decimals;\n    let\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_DOWN;\n    invariant(decimalPlaces <= this.decimals, 'DECIMALS');\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  toExact() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      groupSeparator: ''\n    };\n    Big.DP = this.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}","map":{"version":3,"names":["invariant","_Big","toFormat","JSBI","Fraction","Rounding","parseBigintIsh","SolidityType","ZERO","BigInt","SOLIDITY_TYPE_MAXIMA","uint8","uint256","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","concat","lessThanOrEqual","Big","TEN","BigAmount","format","decimals","amount","constructor","parsedAmount","exponentiate","raw","numerator","getAmount","toSignificant","significantDigits","arguments","length","undefined","rounding","ROUND_DOWN","toFixed","decimalPlaces","toExact","groupSeparator","DP","toString","div","denominator"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/formatBignumber/index.ts"],"sourcesContent":["import invariant from 'tiny-invariant'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport JSBI from 'jsbi'\nimport {\n  Fraction,\n  BigintIsh,\n  Rounding,\n  parseBigintIsh\n} from './fraction'\n\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\nexport const ZERO = JSBI.BigInt(0)\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\nconst Big = toFormat(_Big)\n\nconst TEN = JSBI.BigInt(10)\n\nexport class BigAmount extends Fraction {\n  public readonly decimals: number\n  public readonly amount: BigintIsh\n\n  public static format(decimals: number, amount:BigintIsh): BigAmount {\n    return new BigAmount(decimals, amount)\n  }\n  \n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(decimals: number, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(decimals)))\n    this.decimals = decimals\n    this.amount = amount\n  }\n\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n  public getAmount(): BigintIsh {\n    return this.amount\n  }\n\n  public toSignificant(\n    significantDigits = 6,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.decimals,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}