{"ast":null,"code":"// import { useEffect, useMemo, useState, useCallback } from 'react'\nimport{useMemo,useState,useCallback}from'react';import nebulas from'nebulas';import{useDispatch// useSelector\n}from'react-redux';import{nonevmAddress}from'../hooks/actions';// import { tryParseAmount3 } from '../../state/swap/hooks'\nimport{tryParseAmount3}from'../../state/swap/hooks';import{useTxnsDtilOpen}from'../../state/application/hooks';import{useActiveReact}from'../../hooks/useActiveReact';import{useTranslation}from'react-i18next';import axios from'axios';// import qs from 'qs'\nimport{useTransactionAdder}from'../../state/transactions/hooks';import useInterval from'../../hooks/useInterval';import{recordsTxns}from'../../utils/bridge/register';import config from'../../config';import NebPay from'nebpay.js';import{BigNumber}from'ethers';import{ChainId}from'../../config/chainConfig/chainId';import{BigAmount}from'../../utils/formatBignumber';import{isAddress}from'../../utils/isAddress';// const NAS_URL = 'https://testnet.nebulas.io'\nconst NAS_URL='https://mainnet.nebulas.io';export const toNasBasic=value=>{const baseDecimals=18;const baseAmount=BigNumber.from(10).pow(BigNumber.from(baseDecimals));const stringAmount=baseAmount.mul(value);return stringAmount.toString();};export const isExtWalletInstall=()=>{return'NasExtWallet'in window;};export function useNasLogin(){const dispatch=useDispatch();const loginNas=useCallback(async(chainId,type)=>{var _window;// console.log(window?.NasExtWallet)\nif((_window=window)===null||_window===void 0?void 0:_window.NasExtWallet){var _window2;(_window2=window)===null||_window2===void 0?void 0:_window2.NasExtWallet.getUserAddress(res=>{console.log(res);if(res){dispatch(nonevmAddress({chainId,account:res}));}else{dispatch(nonevmAddress({chainId,account:''}));}});}else if(!type){if(confirm('Please install NasExtWallet Wallet.')===true){window.open('https://chrome.google.com/webstore/detail/nasextwallet/gehjkhmhclgnkkhpfamakecfgakkfkco?hl=en');}}},[]);return{loginNas};}export const useCurrentAddress=()=>{// const { chainId } = useActiveReact()\nconst[address,setAddress]=useState('');const getUserAddress=useCallback(()=>{if(isExtWalletInstall()&&!address){// console.log(NasExtWallet)\nNasExtWallet.getUserAddress(addr=>{setAddress(addr);// console.log('user nas address: ' + address + Date.now())\n});}},[address]);getUserAddress();return useMemo(()=>{return address;},[address]);};export function useNasTokenBalance(){const address=useCurrentAddress();const{chainId}=useActiveReact();const neb=new nebulas.Neb();const getNasTokenBalance=useCallback(async _ref=>{let{account,token}=_ref;if(![ChainId.NAS].includes(chainId)||!account||!token)return;return new Promise(async(resolve,reject)=>{const useAccount=account?account:address;try{if(!isAddress(useAccount,chainId)||!token){resolve('');}const tx=await neb.api.call({chainID:1,from:useAccount,to:token,value:0,gasPrice:'20000000000',gasLimit:'8000000',contract:{function:'balanceOf',args:JSON.stringify([useAccount])}});const result=JSON.parse(tx.result);resolve(result);}catch(err){console.error(err);reject(err);}});},[address]);return{getNasTokenBalance};}export const useCurrentWNASBalance=token=>{const[balance,setBalance]=useState();const{chainId}=useActiveReact();const address=useCurrentAddress();const neb=new nebulas.Neb();neb.setRequest(new nebulas.HttpRequest(NAS_URL));const getWNASBalance=useCallback(async()=>{if(![ChainId.NAS].includes(chainId))return;try{if(!isAddress(address,chainId)||!isAddress(token,chainId)){return false;}const tx=await neb.api.call({chainID:1,from:address,to:token,value:0,gasPrice:'20000000000',gasLimit:'8000000',contract:{function:'balanceOf',args:JSON.stringify([address])}});const result=JSON.parse(tx.result);setBalance(result);return result;}catch(err){console.error(err);}},[address,token]);useInterval(getWNASBalance,1000*10);return{getWNASBalance,balance,// balanceBig: balance ? new Fraction(JSBI.BigInt(balance), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))) : undefined\nbalanceBig:balance?BigAmount.format(18,balance):undefined};};export const useCurrentNasBalance=()=>{const{chainId}=useActiveReact();const address=useCurrentAddress();const getNasBalance=useCallback(async()=>{if(![ChainId.NAS].includes(chainId))return;if(isAddress(address,chainId)&&chainId===ChainId.NAS){var _state$data;// const state = await neb.api.getAccountState(address)\nconst state=await axios.post(\"\".concat(NAS_URL,\"/v1/user/accountstate\"),{address});// console.log(state)\nreturn state===null||state===void 0?void 0:(_state$data=state.data)===null||_state$data===void 0?void 0:_state$data.result.balance;}// setBalance('')\n},[address,chainId]);return{getNasBalance};};export let WrapType=/*#__PURE__*/function(WrapType){WrapType[WrapType[\"NOT_APPLICABLE\"]=0]=\"NOT_APPLICABLE\";WrapType[WrapType[\"WRAP\"]=1]=\"WRAP\";WrapType[WrapType[\"UNWRAP\"]=2]=\"UNWRAP\";WrapType[WrapType[\"NOCONNECT\"]=3]=\"NOCONNECT\";return WrapType;}({});// const NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\nfunction sendNasTx(token,DepositAddress,inputAmount,recipient){return new Promise(resolve=>{const callFunction='transfer';const depositAddress=DepositAddress;const callArgs=JSON.stringify([depositAddress,inputAmount,recipient]);const nebPay=new NebPay();nebPay.call(token,0,callFunction,callArgs,{extension:{openExtension:true},gasPrice:'20000000000',gasLimit:'8000000',// debug: true,\nlistener:(serialNumber,resp)=>{try{console.log('bridgeNas resp');console.log(resp);console.log(serialNumber);resolve({hash:resp.txhash});}catch(err){// reject(err)\nconsole.log(err);resolve('');}}});});}export function useNebBridgeCallback(_ref2){let{inputCurrency,typedValue,DepositAddress,chainId,selectChain,recipient,pairid,isLiquidity,destConfig}=_ref2;const{t}=useTranslation();const{balanceBig:balance}=useCurrentWNASBalance(inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.address);const address=useCurrentAddress();const{onChangeViewDtil}=useTxnsDtilOpen();const addTransaction=useTransactionAdder();// console.log(balance)\nconst inputAmount=useMemo(()=>inputCurrency?tryParseAmount3(typedValue,inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.decimals):undefined,[inputCurrency,typedValue]);return useMemo(()=>{if(balance&&typedValue&&recipient&&DepositAddress){const sufficientBalance=inputCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);const inputError=sufficientBalance?undefined:t('Insufficient',{symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol});return{inputError,wrapType:WrapType.WRAP,execute:typedValue?async()=>{sendNasTx(inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.address,DepositAddress,inputAmount,recipient).then(txData=>{if(txData.hash){const data={hash:txData.hash,chainId:chainId,selectChain:selectChain,account:address,value:inputAmount,formatvalue:typedValue,to:recipient,symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,version:'swapin',pairid:pairid};addTransaction(txData,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(config.getBaseCoin(inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,chainId)),value:typedValue,toChainId:selectChain,toAddress:recipient,symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,version:'swapin',routerToken:'',token:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.address,logoUrl:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.logoUrl,isLiquidity:isLiquidity,fromInfo:{symbol:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.symbol,name:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.name,decimals:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.decimals,address:inputCurrency===null||inputCurrency===void 0?void 0:inputCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txData===null||txData===void 0?void 0:txData.hash,true);}});}:undefined};}return{inputError:'',wrapType:WrapType.NOCONNECT};},[balance,typedValue,address,DepositAddress,selectChain,pairid,inputCurrency,chainId,inputAmount,recipient,destConfig]);}export function updateNasHash(hash){const data={msg:'Error',info:''};return new Promise(resolve=>{fetch(\"https://data.nebulas.io/api/tx/\".concat(hash)).then(res=>res.json()).then(json=>{console.log(json);if(json){if(json.msg!==\"success\"){data.msg='Failure';data.error='Txns is failure!';}else{data.msg='Success';data.info=json;}}else{data.msg='Null';data.error='Query is empty!';}resolve(data);}).catch(err=>{console.log(err.toString());data.error='Query is empty!';resolve(data);});// const url = `https://data.nebulas.io/api/tx/${hash}`\n// axios.get(url).then(res => {\n//   const {status, data} = res\n//   if (status === 200) {\n//     resolve(data)\n//   } else {\n//     resolve('')\n//   }\n// }).catch((err) => {\n//   console.log(err)\n//   resolve('')\n// })\n});}","map":{"version":3,"names":["useMemo","useState","useCallback","nebulas","useDispatch","nonevmAddress","tryParseAmount3","useTxnsDtilOpen","useActiveReact","useTranslation","axios","useTransactionAdder","useInterval","recordsTxns","config","NebPay","BigNumber","ChainId","BigAmount","isAddress","NAS_URL","toNasBasic","value","baseDecimals","baseAmount","from","pow","stringAmount","mul","toString","isExtWalletInstall","window","useNasLogin","dispatch","loginNas","chainId","type","_window","NasExtWallet","_window2","getUserAddress","res","console","log","account","confirm","open","useCurrentAddress","address","setAddress","addr","useNasTokenBalance","neb","Neb","getNasTokenBalance","_ref","token","NAS","includes","Promise","resolve","reject","useAccount","tx","api","call","chainID","to","gasPrice","gasLimit","contract","function","args","JSON","stringify","result","parse","err","error","useCurrentWNASBalance","balance","setBalance","setRequest","HttpRequest","getWNASBalance","balanceBig","format","undefined","useCurrentNasBalance","getNasBalance","_state$data","state","post","concat","data","WrapType","sendNasTx","DepositAddress","inputAmount","recipient","callFunction","depositAddress","callArgs","nebPay","extension","openExtension","listener","serialNumber","resp","hash","txhash","useNebBridgeCallback","_ref2","inputCurrency","typedValue","selectChain","pairid","isLiquidity","destConfig","t","onChangeViewDtil","addTransaction","decimals","sufficientBalance","Number","toExact","inputError","symbol","wrapType","WRAP","execute","then","txData","formatvalue","version","summary","getBaseCoin","toChainId","toAddress","routerToken","logoUrl","fromInfo","name","toInfo","NOCONNECT","updateNasHash","msg","info","fetch","json","catch"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/nas/index.ts"],"sourcesContent":["// import { useEffect, useMemo, useState, useCallback } from 'react'\nimport {  useMemo, useState, useCallback } from 'react'\nimport nebulas from 'nebulas'\nimport {\n  useDispatch,\n  // useSelector\n} from 'react-redux'\nimport {\n  // AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\n// import { tryParseAmount3 } from '../../state/swap/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {useTxnsDtilOpen} from '../../state/application/hooks'\nimport {useActiveReact} from '../../hooks/useActiveReact'\nimport { useTranslation } from 'react-i18next'\nimport axios from 'axios'\n// import qs from 'qs'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport useInterval from '../../hooks/useInterval'\nimport {recordsTxns} from '../../utils/bridge/register'\n\nimport config from '../../config'\nimport NebPay from 'nebpay.js'\nimport { BigNumber } from 'ethers'\n\nimport { ChainId } from '../../config/chainConfig/chainId'\nimport { BigAmount } from '../../utils/formatBignumber'\nimport { isAddress } from '../../utils/isAddress'\n\n// const NAS_URL = 'https://testnet.nebulas.io'\nconst NAS_URL = 'https://mainnet.nebulas.io'\n\nexport const toNasBasic = (value: string) => {\n  const baseDecimals = 18\n  const baseAmount = BigNumber.from(10).pow(BigNumber.from(baseDecimals))\n\n  const stringAmount = baseAmount.mul(value)\n  return stringAmount.toString()\n}\n\n\nexport const isExtWalletInstall = () => {\n  return 'NasExtWallet' in window\n}\n\nexport function useNasLogin () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginNas = useCallback(async(chainId:any, type?:any) => {\n    // console.log(window?.NasExtWallet)\n    if (window?.NasExtWallet) {\n      window?.NasExtWallet.getUserAddress((res:any) => {\n        console.log(res)\n        if (res) {\n          dispatch(nonevmAddress({chainId, account: res}))\n        } else {\n          dispatch(nonevmAddress({chainId, account: ''}))\n        }\n      })\n    } else if (!type) {\n      if (confirm('Please install NasExtWallet Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/nasextwallet/gehjkhmhclgnkkhpfamakecfgakkfkco?hl=en')\n      }\n    }\n  }, [])\n\n  return {\n    loginNas\n  }\n}\n\nexport const useCurrentAddress = () => {\n  // const { chainId } = useActiveReact()\n  const [address, setAddress] = useState<string>('')\n\n  const getUserAddress = useCallback(() => {\n    if (isExtWalletInstall() && !address) {\n      // console.log(NasExtWallet)\n      NasExtWallet.getUserAddress((addr: string) => {\n        setAddress(addr)\n        // console.log('user nas address: ' + address + Date.now())\n      })\n    }\n  }, [address])\n\n  getUserAddress()\n\n  return useMemo(() => {\n    return address\n  }, [address])\n}\n\nexport function useNasTokenBalance () {\n  const address = useCurrentAddress()\n  const { chainId } = useActiveReact()\n  const neb:any = new nebulas.Neb()\n  const getNasTokenBalance = useCallback(async ({account, token}: any) => {\n    if (![ChainId.NAS].includes(chainId) || !account || !token) return\n    return new Promise(async(resolve, reject) => {\n      const useAccount = account ? account : address\n      try {\n        if (!isAddress(useAccount, chainId) || !token) {\n          resolve('')\n        }\n        const tx = await neb.api.call({\n          chainID: 1,\n          from: useAccount,\n          to: token,\n          value: 0,\n          gasPrice: '20000000000',\n          gasLimit: '8000000',\n          contract: {\n            function: 'balanceOf',\n            args: JSON.stringify([useAccount])\n          }\n        })\n  \n        const result = JSON.parse(tx.result)\n        resolve(result)\n      } catch (err) {\n        console.error(err)\n        reject(err)\n      }\n    })\n  }, [address])\n  return {\n    getNasTokenBalance\n  }\n}\n\nexport const useCurrentWNASBalance = (token?:any) => {\n  const [balance, setBalance] = useState<string>()\n  const { chainId } = useActiveReact()\n  const address = useCurrentAddress()\n  const neb:any = new nebulas.Neb()\n  neb.setRequest(new nebulas.HttpRequest(NAS_URL))\n\n  const getWNASBalance = useCallback(async () => {\n    if (![ChainId.NAS].includes(chainId)) return\n    try {\n      if (!isAddress(address, chainId) || !isAddress(token, chainId)) {\n        return false\n      }\n      const tx = await neb.api.call({\n        chainID: 1,\n        from: address,\n        to: token,\n        value: 0,\n        gasPrice: '20000000000',\n        gasLimit: '8000000',\n        contract: {\n          function: 'balanceOf',\n          args: JSON.stringify([address])\n        }\n      })\n\n      const result = JSON.parse(tx.result)\n      setBalance(result)\n      return result\n    } catch (err) {\n      console.error(err)\n    }\n  }, [address, token])\n\n  useInterval(getWNASBalance, 1000 * 10)\n\n  return {\n    getWNASBalance,\n    balance,\n    // balanceBig: balance ? new Fraction(JSBI.BigInt(balance), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))) : undefined\n    balanceBig: balance ? BigAmount.format(18, balance) : undefined\n  }\n}\n\nexport const useCurrentNasBalance = () => {\n  const { chainId } = useActiveReact()\n  const address = useCurrentAddress()\n  \n  const getNasBalance = useCallback(async () => {\n    if (![ChainId.NAS].includes(chainId)) return\n    if (isAddress(address, chainId) && chainId === ChainId.NAS) {\n      // const state = await neb.api.getAccountState(address)\n      const state:any = await axios.post(`${NAS_URL}/v1/user/accountstate`, {address})\n      // console.log(state)\n      return state?.data?.result.balance\n    }\n    // setBalance('')\n  }, [address, chainId])\n\n  return {\n    getNasBalance,\n  }\n}\n\ninterface UseBridgeCallbackInterface {\n  inputCurrency: any | undefined\n  typedValue: string | undefined\n  DepositAddress: string | undefined\n  chainId: string\n  selectChain: string\n  recipient: string\n  pairid: string\n  isLiquidity:any\n  destConfig:any\n}\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n  NOCONNECT\n}\n\n// const NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n\nfunction sendNasTx (token:any, DepositAddress:any,inputAmount:any,recipient:any) {\n  return new Promise(resolve => {\n    const callFunction = 'transfer'\n    const depositAddress = DepositAddress\n    const callArgs = JSON.stringify([depositAddress, inputAmount, recipient])\n    const nebPay = new NebPay()\n    nebPay.call(token, 0, callFunction, callArgs, {\n      extension: {\n        openExtension: true\n      },\n      gasPrice: '20000000000',\n      gasLimit: '8000000',\n      // debug: true,\n      listener: (serialNumber: string, resp: any) => {\n        try {\n          console.log('bridgeNas resp')\n          console.log(resp)\n          console.log(serialNumber)\n          resolve({hash: resp.txhash})\n        } catch (err) {\n          // reject(err)\n          console.log(err)\n          resolve('')\n        }\n      }\n    })\n  })\n}\n\nexport function useNebBridgeCallback({\n  inputCurrency,\n  typedValue,\n  DepositAddress,\n  chainId,\n  selectChain,\n  recipient,\n  pairid,\n  isLiquidity,\n  destConfig\n}: UseBridgeCallbackInterface): {\n  wrapType?: WrapType\n  inputError?: string\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { t } = useTranslation()\n  const { balanceBig:balance } = useCurrentWNASBalance(inputCurrency?.address)\n  const address = useCurrentAddress()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const addTransaction = useTransactionAdder()\n\n  // console.log(balance)\n  const inputAmount = useMemo(() => inputCurrency ? tryParseAmount3(typedValue, inputCurrency?.decimals) : undefined, [inputCurrency, typedValue])\n  return useMemo(() => {\n    if (balance && typedValue && recipient && DepositAddress) {\n      const sufficientBalance = inputCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n\n      const inputError = sufficientBalance ? undefined : t('Insufficient', { symbol: inputCurrency?.symbol })\n\n      return {\n        inputError,\n        wrapType: WrapType.WRAP,\n        execute: typedValue\n          ? async () => {\n            sendNasTx(inputCurrency?.address,DepositAddress,inputAmount, recipient).then((txData:any) => {\n              if (txData.hash) {\n                const data:any = {\n                  hash: txData.hash,\n                  chainId: chainId,\n                  selectChain: selectChain,\n                  account: address,\n                  value: inputAmount,\n                  formatvalue: typedValue,\n                  to: recipient,\n                  symbol: inputCurrency?.symbol,\n                  version: 'swapin',\n                  pairid: pairid,\n                }\n                addTransaction(txData, {\n                  summary: `Cross bridge ${typedValue} ${config.getBaseCoin(inputCurrency?.symbol, chainId)}`,\n                  value: typedValue,\n                  toChainId: selectChain,\n                  toAddress: recipient,\n                  symbol: inputCurrency?.symbol,\n                  version: 'swapin',\n                  routerToken: '',\n                  token: inputCurrency?.address,\n                  logoUrl: inputCurrency?.logoUrl,\n                  isLiquidity: isLiquidity,\n                  fromInfo: {\n                    symbol: inputCurrency?.symbol,\n                    name: inputCurrency?.name,\n                    decimals: inputCurrency?.decimals,\n                    address: inputCurrency?.address,\n                  },\n                  toInfo: {\n                    symbol: destConfig?.symbol,\n                    name: destConfig?.name,\n                    decimals: destConfig?.decimals,\n                    address: destConfig?.address,\n                  },\n                })\n                recordsTxns(data)\n                onChangeViewDtil(txData?.hash, true)\n              }\n            })\n          }\n          : undefined\n      }\n    }\n\n    return {\n      inputError: '',\n      wrapType: WrapType.NOCONNECT\n    }\n  }, [balance, typedValue, address, DepositAddress, selectChain, pairid, inputCurrency, chainId,inputAmount, recipient, destConfig])\n}\n\n\nexport function updateNasHash (hash:any): Promise<any> {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    fetch(`https://data.nebulas.io/api/tx/${hash}`).then(res => res.json()).then(json => {\n      console.log(json)\n      if (json) {\n        if (json.msg !== \"success\") {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Success'\n          data.info = json\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      console.log(err.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    })\n    // const url = `https://data.nebulas.io/api/tx/${hash}`\n    // axios.get(url).then(res => {\n    //   const {status, data} = res\n    //   if (status === 200) {\n    //     resolve(data)\n    //   } else {\n    //     resolve('')\n    //   }\n    // }).catch((err) => {\n    //   console.log(err)\n    //   resolve('')\n    // })\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}