{"ast":null,"code":"import { clearStoredSession, getStoredSession, storeSession } from './storage';\nexport function connectIfSessionExists() {\n  const storedSession = getStoredSession();\n  if (!!storedSession) {\n    return connect(storedSession);\n  }\n  return null;\n}\nexport function connect(options) {\n  storeSession(options);\n  function disconnect() {\n    clearStoredSession();\n  }\n  return {\n    ...options,\n    disconnect\n  };\n}","map":{"version":3,"names":["clearStoredSession","getStoredSession","storeSession","connectIfSessionExists","storedSession","connect","options","disconnect"],"sources":["../../../src/@terra-dev/readonly-wallet/connect.ts"],"sourcesContent":["import { clearStoredSession, getStoredSession, storeSession } from './storage';\nimport { ReadonlyWalletSession } from './types';\n\nexport interface ReadonlyWalletController extends ReadonlyWalletSession {\n  disconnect: () => void;\n}\n\nexport interface ReadonlyWalletOptions extends ReadonlyWalletSession {}\n\nexport function connectIfSessionExists(): ReadonlyWalletController | null {\n  const storedSession = getStoredSession();\n\n  if (!!storedSession) {\n    return connect(storedSession);\n  }\n\n  return null;\n}\n\nexport function connect(\n  options: ReadonlyWalletOptions,\n): ReadonlyWalletController {\n  storeSession(options);\n\n  function disconnect() {\n    clearStoredSession();\n  }\n\n  return {\n    ...options,\n    disconnect,\n  };\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,gBAAgB,EAAEC,YAAY,QAAQ,WAAW;AAS9E,OAAM,SAAUC,sBAAsBA,CAAA;EACpC,MAAMC,aAAa,GAAGH,gBAAgB,EAAE;EAExC,IAAI,CAAC,CAACG,aAAa,EAAE;IACnB,OAAOC,OAAO,CAACD,aAAa,CAAC;;EAG/B,OAAO,IAAI;AACb;AAEA,OAAM,SAAUC,OAAOA,CACrBC,OAA8B;EAE9BJ,YAAY,CAACI,OAAO,CAAC;EAErB,SAASC,UAAUA,CAAA;IACjBP,kBAAkB,EAAE;EACtB;EAEA,OAAO;IACL,GAAGM,OAAO;IACVC;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}