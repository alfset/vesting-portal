{"ast":null,"code":"var _config$chainID;import{Web3Provider}from'@ethersproject/providers';import{InjectedConnector}from'@web3-react/injected-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{WalletLinkConnector}from'@web3-react/walletlink-connector';import{BscConnector}from'@binance-chain/bsc-connector';import{CloverConnector}from'@clover-network/clover-connector';import{NetworkConnector}from'./NetworkConnector';import{XdefiConnector}from'./xdefi';import{BitKeepConnector}from'./bitkeep';import{SafeAppConnector}from'./gnosis-safe';import{TallyConnector}from'./tally';import{spportChainArr as sc}from'../config/chainConfig';import config from'../config';const NETWORK_URL=config.nodeRpc;export const NETWORK_CHAIN_ID=(_config$chainID=config.chainID)!==null&&_config$chainID!==void 0?_config$chainID:1;const spportChain={};const spportChainArr=[];for(const chainID in config.chainInfo){var _config$chainInfo$cha;// for (const chainID of spportChainArr) {\nif(isNaN(Number(chainID)))continue;if(chainID&&((_config$chainInfo$cha=config.chainInfo[chainID])===null||_config$chainInfo$cha===void 0?void 0:_config$chainInfo$cha.nodeRpc)){// spportChainArr.push(Number(chainID))\nspportChain[chainID]=config.chainInfo[chainID].nodeRpc;}}// const sc1:any = sc\nfor(const c of sc){if(isNaN(Number(c)))continue;spportChainArr.push(Number(c));}// spportChainArr.push(Number(NETWORK_CHAIN_ID))\n// spportChain[NETWORK_CHAIN_ID] = config.chainInfo[NETWORK_CHAIN_ID].nodeRpc\n// console.log(spportChainArr)\nif(typeof NETWORK_URL==='undefined'){throw new Error(\"REACT_APP_NETWORK_URL must be a defined environment variable\");}// console.log(spportChainArr)\n// mainnet only\n// export const walletconnect = new WalletConnectConnector({\n//   supportedChainIds: [...spportChainArr],\n//   rpc: {\n//     ...spportChain\n//   },\n//   chainId: NETWORK_CHAIN_ID\n// })\nexport const walletoptions={supportedChainIds:[...spportChainArr],rpc:{...spportChain},qrcode:true};export const walletconnect=new WalletConnectConnector(walletoptions);export const network=new NetworkConnector({// urls: { [NETWORK_CHAIN_ID]: NETWORK_URL }\ndefaultChainId:NETWORK_CHAIN_ID,urls:{...spportChain}});let networkLibrary;export function getNetworkLibrary(){var _networkLibrary;return networkLibrary=(_networkLibrary=networkLibrary)!==null&&_networkLibrary!==void 0?_networkLibrary:new Web3Provider(network.provider);}export const injected=new InjectedConnector({supportedChainIds:[...spportChainArr]});export const walletlink=new WalletLinkConnector({url:spportChain[NETWORK_CHAIN_ID],appName:'DeltaSwap',appLogoUrl:'https://assets.coingecko.com/coins/images/12242/small/deltaswap.jpg',supportedChainIds:[...spportChainArr]});export const bsc=new BscConnector({supportedChainIds:[...spportChainArr]});export const xdefi=new XdefiConnector({supportedChainIds:[...spportChainArr]});export const bitkeep=new BitKeepConnector({supportedChainIds:[...spportChainArr]});export const clover=new CloverConnector({supportedChainIds:[...spportChainArr]});export const tally=new TallyConnector({supportedChainIds:[...spportChainArr]});export const gnosissafe=new SafeAppConnector();","map":{"version":3,"names":["Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","BscConnector","CloverConnector","NetworkConnector","XdefiConnector","BitKeepConnector","SafeAppConnector","TallyConnector","spportChainArr","sc","config","NETWORK_URL","nodeRpc","NETWORK_CHAIN_ID","_config$chainID","chainID","spportChain","chainInfo","_config$chainInfo$cha","isNaN","Number","c","push","Error","walletoptions","supportedChainIds","rpc","qrcode","walletconnect","network","defaultChainId","urls","networkLibrary","getNetworkLibrary","_networkLibrary","provider","injected","walletlink","url","appName","appLogoUrl","bsc","xdefi","bitkeep","clover","tally","gnosissafe"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/connectors/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport {WalletConnectConnector, WalletConnectConnectorArguments} from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport {BscConnector} from '@binance-chain/bsc-connector'\nimport {CloverConnector} from '@clover-network/clover-connector'\nimport { NetworkConnector } from './NetworkConnector'\nimport {XdefiConnector} from './xdefi'\nimport {BitKeepConnector} from './bitkeep'\nimport {SafeAppConnector} from './gnosis-safe'\nimport {TallyConnector} from './tally'\n\nimport {spportChainArr as sc} from '../config/chainConfig'\nimport config from '../config'\n\nconst NETWORK_URL = config.nodeRpc\n\nexport const NETWORK_CHAIN_ID: number = config.chainID ?? 1\n\nconst spportChain:any = {}\nconst spportChainArr:any = []\nfor (const chainID in config.chainInfo) {\n// for (const chainID of spportChainArr) {\n  if (isNaN(Number(chainID))) continue\n  if (chainID && config.chainInfo[chainID]?.nodeRpc) {\n    // spportChainArr.push(Number(chainID))\n    spportChain[chainID] = config.chainInfo[chainID].nodeRpc\n  }\n}\n// const sc1:any = sc\nfor (const c of sc) {\n  if (isNaN(Number(c))) continue\n  spportChainArr.push(Number(c))\n}\n// spportChainArr.push(Number(NETWORK_CHAIN_ID))\n// spportChain[NETWORK_CHAIN_ID] = config.chainInfo[NETWORK_CHAIN_ID].nodeRpc\n// console.log(spportChainArr)\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\n}\n// console.log(spportChainArr)\n// mainnet only\n// export const walletconnect = new WalletConnectConnector({\n//   supportedChainIds: [...spportChainArr],\n//   rpc: {\n//     ...spportChain\n//   },\n//   chainId: NETWORK_CHAIN_ID\n// })\n\nexport const walletoptions = {\n  supportedChainIds: [...spportChainArr],\n  rpc: { ...spportChain },\n  qrcode: true,\n} as WalletConnectConnectorArguments\nexport const walletconnect = new WalletConnectConnector(walletoptions)\n\nexport const network = new NetworkConnector({\n  // urls: { [NETWORK_CHAIN_ID]: NETWORK_URL }\n  defaultChainId: NETWORK_CHAIN_ID,\n  urls: { ...spportChain }\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [...spportChainArr]\n})\n\n\nexport const walletlink = new WalletLinkConnector({\n  url: spportChain[NETWORK_CHAIN_ID],\n  appName: 'DeltaSwap',\n  appLogoUrl: 'https://assets.coingecko.com/coins/images/12242/small/deltaswap.jpg',\n  supportedChainIds: [...spportChainArr]\n})\n\n\nexport const bsc = new BscConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const xdefi = new XdefiConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const bitkeep = new BitKeepConnector({\n  supportedChainIds: [...spportChainArr],\n})\n\nexport const clover =  new CloverConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const tally =  new TallyConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const gnosissafe =  new SafeAppConnector()"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}