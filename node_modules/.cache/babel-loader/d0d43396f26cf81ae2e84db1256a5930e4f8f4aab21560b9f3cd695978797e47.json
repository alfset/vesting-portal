{"ast":null,"code":"import { AccAddress } from '@terra-money/terra.js';\nimport { useMemo } from 'react';\nimport { ConnectType, WalletStatus } from './types';\nimport { useWallet } from './useWallet';\nexport function useConnectedWallet() {\n  const {\n    status,\n    network,\n    wallets,\n    post,\n    sign\n  } = useWallet();\n  const value = useMemo(() => {\n    try {\n      if (status === WalletStatus.WALLET_CONNECTED && wallets.length > 0 && AccAddress.validate(wallets[0].terraAddress)) {\n        const {\n          terraAddress,\n          connectType,\n          design\n        } = wallets[0];\n        return {\n          network,\n          terraAddress: terraAddress,\n          walletAddress: terraAddress,\n          design,\n          post: tx => {\n            return post(tx, {\n              terraAddress\n            });\n          },\n          sign: tx => {\n            return sign(tx, {\n              terraAddress\n            });\n          },\n          availablePost: connectType === ConnectType.WEB_CONNECT || connectType === ConnectType.CHROME_EXTENSION || connectType === ConnectType.WALLETCONNECT,\n          availableSign: connectType === ConnectType.CHROME_EXTENSION,\n          connectType\n        };\n      } else {\n        return undefined;\n      }\n    } catch (_a) {\n      return undefined;\n    }\n  }, [network, post, sign, status, wallets]);\n  return value;\n}","map":{"version":3,"names":["AccAddress","useMemo","ConnectType","WalletStatus","useWallet","useConnectedWallet","status","network","wallets","post","sign","value","WALLET_CONNECTED","length","validate","terraAddress","connectType","design","walletAddress","tx","availablePost","WEB_CONNECT","CHROME_EXTENSION","WALLETCONNECT","availableSign","undefined","_a"],"sources":["../../../src/@terra-dev/use-wallet/useConnectedWallet.ts"],"sourcesContent":["import { NetworkInfo, SignResult } from '@terra-dev/wallet-types';\nimport { AccAddress, CreateTxOptions } from '@terra-money/terra.js';\nimport { useMemo } from 'react';\nimport { TxResult } from './tx';\nimport { ConnectType, WalletStatus } from './types';\nimport { useWallet } from './useWallet';\n\ntype HumanAddr = string & { __type: 'HumanAddr' };\n\nexport interface ConnectedWallet {\n  network: NetworkInfo;\n  terraAddress: HumanAddr;\n  walletAddress: HumanAddr;\n  design?: string;\n  post: (tx: CreateTxOptions) => Promise<TxResult>;\n  sign: (tx: CreateTxOptions) => Promise<SignResult>;\n  availablePost: boolean;\n  availableSign: boolean;\n  connectType: ConnectType;\n}\n\nexport function useConnectedWallet(): ConnectedWallet | undefined {\n  const { status, network, wallets, post, sign } = useWallet();\n\n  const value = useMemo<ConnectedWallet | undefined>(() => {\n    try {\n      if (\n        status === WalletStatus.WALLET_CONNECTED &&\n        wallets.length > 0 &&\n        AccAddress.validate(wallets[0].terraAddress)\n      ) {\n        const { terraAddress, connectType, design } = wallets[0];\n\n        return {\n          network,\n          terraAddress: terraAddress as HumanAddr,\n          walletAddress: terraAddress as HumanAddr,\n          design,\n          post: (tx: CreateTxOptions) => {\n            return post(tx, { terraAddress });\n          },\n          sign: (tx: CreateTxOptions) => {\n            return sign(tx, { terraAddress });\n          },\n          availablePost:\n            connectType === ConnectType.WEB_CONNECT ||\n            connectType === ConnectType.CHROME_EXTENSION ||\n            connectType === ConnectType.WALLETCONNECT,\n          availableSign: connectType === ConnectType.CHROME_EXTENSION,\n          connectType,\n        };\n      } else {\n        return undefined;\n      }\n    } catch {\n      return undefined;\n    }\n  }, [network, post, sign, status, wallets]);\n\n  return value;\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAyB,uBAAuB;AACnE,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,WAAW,EAAEC,YAAY,QAAQ,SAAS;AACnD,SAASC,SAAS,QAAQ,aAAa;AAgBvC,OAAM,SAAUC,kBAAkBA,CAAA;EAChC,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,IAAI;IAAEC;EAAI,CAAE,GAAGN,SAAS,EAAE;EAE5D,MAAMO,KAAK,GAAGV,OAAO,CAA8B,MAAK;IACtD,IAAI;MACF,IACEK,MAAM,KAAKH,YAAY,CAACS,gBAAgB,IACxCJ,OAAO,CAACK,MAAM,GAAG,CAAC,IAClBb,UAAU,CAACc,QAAQ,CAACN,OAAO,CAAC,CAAC,CAAC,CAACO,YAAY,CAAC,EAC5C;QACA,MAAM;UAAEA,YAAY;UAAEC,WAAW;UAAEC;QAAM,CAAE,GAAGT,OAAO,CAAC,CAAC,CAAC;QAExD,OAAO;UACLD,OAAO;UACPQ,YAAY,EAAEA,YAAyB;UACvCG,aAAa,EAAEH,YAAyB;UACxCE,MAAM;UACNR,IAAI,EAAGU,EAAmB,IAAI;YAC5B,OAAOV,IAAI,CAACU,EAAE,EAAE;cAAEJ;YAAY,CAAE,CAAC;UACnC,CAAC;UACDL,IAAI,EAAGS,EAAmB,IAAI;YAC5B,OAAOT,IAAI,CAACS,EAAE,EAAE;cAAEJ;YAAY,CAAE,CAAC;UACnC,CAAC;UACDK,aAAa,EACXJ,WAAW,KAAKd,WAAW,CAACmB,WAAW,IACvCL,WAAW,KAAKd,WAAW,CAACoB,gBAAgB,IAC5CN,WAAW,KAAKd,WAAW,CAACqB,aAAa;UAC3CC,aAAa,EAAER,WAAW,KAAKd,WAAW,CAACoB,gBAAgB;UAC3DN;SACD;OACF,MAAM;QACL,OAAOS,SAAS;;KAEnB,CAAC,OAAAC,EAAA,EAAM;MACN,OAAOD,SAAS;;EAEpB,CAAC,EAAE,CAAClB,OAAO,EAAEE,IAAI,EAAEC,IAAI,EAAEJ,MAAM,EAAEE,OAAO,CAAC,CAAC;EAE1C,OAAOG,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}