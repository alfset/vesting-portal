{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concat = void 0;\nconst xstream_1 = require(\"xstream\");\n/**\n * An implementation of concat that buffers all source stream events\n *\n * Marble diagram:\n *\n * ```text\n * --1--2---3---4-|\n * -a--b-c--d-|\n * --------X---------Y---------Z-\n *           concat\n * --1--2---3---4-abcdXY-------Z-\n * ```\n *\n * This is inspired by RxJS's concat as documented at http://rxmarbles.com/#concat and behaves\n * differently than xstream's concat as discussed in https://github.com/staltz/xstream/issues/170.\n *\n */\nfunction concat() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n  const subscriptions = new Array();\n  const queues = new Array(); // one queue per stream\n  const completedStreams = new Set();\n  let activeStreamIndex = 0;\n  function reset() {\n    while (subscriptions.length > 0) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const subscription = subscriptions.shift();\n      subscription.unsubscribe();\n    }\n    queues.length = 0;\n    completedStreams.clear();\n    activeStreamIndex = 0;\n  }\n  const producer = {\n    start: listener => {\n      streams.forEach(_ => queues.push([]));\n      function emitAllQueuesEvents(streamIndex) {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const element = queues[streamIndex].shift();\n          if (element === undefined) {\n            return;\n          }\n          listener.next(element);\n        }\n      }\n      function isDone() {\n        return activeStreamIndex >= streams.length;\n      }\n      if (isDone()) {\n        listener.complete();\n        return;\n      }\n      streams.forEach((stream, index) => {\n        subscriptions.push(stream.subscribe({\n          next: value => {\n            if (index === activeStreamIndex) {\n              listener.next(value);\n            } else {\n              queues[index].push(value);\n            }\n          },\n          complete: () => {\n            completedStreams.add(index);\n            while (completedStreams.has(activeStreamIndex)) {\n              // this stream completed: emit all and move on\n              emitAllQueuesEvents(activeStreamIndex);\n              activeStreamIndex++;\n            }\n            if (isDone()) {\n              listener.complete();\n            } else {\n              // now active stream can have some events queued but did not yet complete\n              emitAllQueuesEvents(activeStreamIndex);\n            }\n          },\n          error: error => {\n            listener.error(error);\n            reset();\n          }\n        }));\n      });\n    },\n    stop: () => {\n      reset();\n    }\n  };\n  return xstream_1.Stream.create(producer);\n}\nexports.concat = concat;","map":{"version":3,"names":["xstream_1","require","concat","_len","arguments","length","streams","Array","_key","subscriptions","queues","completedStreams","Set","activeStreamIndex","reset","subscription","shift","unsubscribe","clear","producer","start","listener","forEach","_","push","emitAllQueuesEvents","streamIndex","element","undefined","next","isDone","complete","stream","index","subscribe","value","add","has","error","stop","Stream","create","exports"],"sources":["../src/concat.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAEA;;;;;;;;;;;;;;;;;AAiBA,SAAgBC,MAAMA,CAAA,EAAgC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAzBC,OAAyB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAzBF,OAAyB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACpD,MAAMC,aAAa,GAAG,IAAIF,KAAK,EAAgB;EAC/C,MAAMG,MAAM,GAAG,IAAIH,KAAK,EAAO,CAAC,CAAC;EACjC,MAAMI,gBAAgB,GAAG,IAAIC,GAAG,EAAU;EAC1C,IAAIC,iBAAiB,GAAG,CAAC;EAEzB,SAASC,KAAKA,CAAA;IACZ,OAAOL,aAAa,CAACJ,MAAM,GAAG,CAAC,EAAE;MAC/B;MACA,MAAMU,YAAY,GAAGN,aAAa,CAACO,KAAK,EAAG;MAC3CD,YAAY,CAACE,WAAW,EAAE;;IAG5BP,MAAM,CAACL,MAAM,GAAG,CAAC;IACjBM,gBAAgB,CAACO,KAAK,EAAE;IACxBL,iBAAiB,GAAG,CAAC;EACvB;EAEA,MAAMM,QAAQ,GAAgB;IAC5BC,KAAK,EAAGC,QAAQ,IAAI;MAClBf,OAAO,CAACgB,OAAO,CAAEC,CAAC,IAAKb,MAAM,CAACc,IAAI,CAAC,EAAE,CAAC,CAAC;MAEvC,SAASC,mBAAmBA,CAACC,WAAmB;QAC9C;QACA,OAAO,IAAI,EAAE;UACX,MAAMC,OAAO,GAAGjB,MAAM,CAACgB,WAAW,CAAC,CAACV,KAAK,EAAE;UAC3C,IAAIW,OAAO,KAAKC,SAAS,EAAE;YACzB;;UAEFP,QAAQ,CAACQ,IAAI,CAACF,OAAO,CAAC;;MAE1B;MAEA,SAASG,MAAMA,CAAA;QACb,OAAOjB,iBAAiB,IAAIP,OAAO,CAACD,MAAM;MAC5C;MAEA,IAAIyB,MAAM,EAAE,EAAE;QACZT,QAAQ,CAACU,QAAQ,EAAE;QACnB;;MAGFzB,OAAO,CAACgB,OAAO,CAAC,CAACU,MAAM,EAAEC,KAAK,KAAI;QAChCxB,aAAa,CAACe,IAAI,CAChBQ,MAAM,CAACE,SAAS,CAAC;UACfL,IAAI,EAAGM,KAAK,IAAI;YACd,IAAIF,KAAK,KAAKpB,iBAAiB,EAAE;cAC/BQ,QAAQ,CAACQ,IAAI,CAACM,KAAK,CAAC;aACrB,MAAM;cACLzB,MAAM,CAACuB,KAAK,CAAC,CAACT,IAAI,CAACW,KAAK,CAAC;;UAE7B,CAAC;UACDJ,QAAQ,EAAEA,CAAA,KAAK;YACbpB,gBAAgB,CAACyB,GAAG,CAACH,KAAK,CAAC;YAE3B,OAAOtB,gBAAgB,CAAC0B,GAAG,CAACxB,iBAAiB,CAAC,EAAE;cAC9C;cACAY,mBAAmB,CAACZ,iBAAiB,CAAC;cACtCA,iBAAiB,EAAE;;YAGrB,IAAIiB,MAAM,EAAE,EAAE;cACZT,QAAQ,CAACU,QAAQ,EAAE;aACpB,MAAM;cACL;cACAN,mBAAmB,CAACZ,iBAAiB,CAAC;;UAE1C,CAAC;UACDyB,KAAK,EAAGA,KAAK,IAAI;YACfjB,QAAQ,CAACiB,KAAK,CAACA,KAAK,CAAC;YACrBxB,KAAK,EAAE;UACT;SACD,CAAC,CACH;MACH,CAAC,CAAC;IACJ,CAAC;IACDyB,IAAI,EAAEA,CAAA,KAAK;MACTzB,KAAK,EAAE;IACT;GACD;EAED,OAAOd,SAAA,CAAAwC,MAAM,CAACC,MAAM,CAACtB,QAAQ,CAAC;AAChC;AAlFAuB,OAAA,CAAAxC,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}