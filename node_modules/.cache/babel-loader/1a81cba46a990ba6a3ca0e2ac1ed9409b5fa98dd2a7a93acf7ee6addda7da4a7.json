{"ast":null,"code":"import{useCallback,useEffect,useMemo,useState}from\"react\";import{useTranslation}from'react-i18next';import{useDispatch,useSelector}from'react-redux';import{nonevmAddress}from'../hooks/actions';import{useActiveReact}from'../../hooks/useActiveReact';// import {VALID_BALANCE} from '../../config/constant'\nimport{// useDarkModeManager,\n// useExpertModeManager,\n// useInterfaceModeManager,\nuseInterfaceBalanceValidManager// useUserTransactionTTL,\n// useUserSlippageTolerance\n}from'../../state/user/hooks';import{BigAmount}from'../../utils/formatBignumber';import{recordsTxns}from'../../utils/bridge/register';import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';import{tryParseAmount3}from'../../state/swap/hooks';import{ChainId}from\"../../config/chainConfig/chainId\";import config from'../../config';import{getP2PInfo}from'../../utils/bridge/register';import{createAddress}from'../../utils/isAddress/BTC';import{setLocalConfig}from'../../utils/tools/tools';import{CROSSCHAINBRIDGE}from'../../utils/bridge/type';import{isAddress}from\"../../utils/isAddress\";export function useLoginBtc(){const dispatch=useDispatch();const loginBtc=useCallback(async chainId=>{// console.log(chainId)\nconsole.log(window.bitcoin);if(window.bitcoin){if(window.bitcoin.enable){window.bitcoin.enable().then(res=>{var _res$;console.log(res);// window.bitcoin.request({\n//   method: 'wallet_getAddresses',\n//   params: []\n// }).then((res:any) => {\n//   console.log(res)\n// }).catch((error:any) => {\n//   console.log(error)\n// })\n// window.bitcoin.request({\n//   method: 'wallet_getConnectedNetwork',\n//   params: []\n// }).then((res:any) => {\n//   console.log(res)\n// }).catch((error:any) => {\n//   console.log(error)\n// })\n// window.bitcoin.request({\n//   method: 'wallet_signMessage',\n//   params: []\n// }).then((res:any) => {\n//   console.log(res)\n// }).catch((error:any) => {\n//   console.log(error)\n// })\n// window.bitcoin.getAccount().then((res:any) => {\n//   console.log(res)\n//   dispatch(nonevmAddress({chainId, account: res.address}))\n// }).catch((error:any) => {\n//   console.log(error)\n//   dispatch(nonevmAddress({chainId, account: ''}))\n// })\n// window.providerManager.getProviderFor('BTC').getMethod('wallet.getAddresses')().then((res:any) => {\n//   console.log(res)\n// }).catch((error:any) => {\n//   console.log(error)\n// })\ndispatch(nonevmAddress({chainId,account:res===null||res===void 0?void 0:(_res$=res[0])===null||_res$===void 0?void 0:_res$.address}));}).catch(error=>{console.log(error);dispatch(nonevmAddress({chainId,account:''}));});}else if(window.bitcoin.getAccount){// window.bitcoin.getAccount().then((res:any) => {\n//   console.log(res)\n//   dispatch(nonevmAddress({chainId, account: res.address}))\n// }).catch((error:any) => {\n//   console.log(error)\n//   dispatch(nonevmAddress({chainId, account: ''}))\n// })\ndispatch(nonevmAddress({chainId,account:''}));}}else{if(confirm('Please install Bitcoin Wallet.')===true){window.open('https://mathwallet.org/bitcoin-wallet');}}},[]);return{loginBtc};}export function useBtcBalance(){const btcBalanceList=useSelector(state=>state.btc.btcBalanceList);const getBtcBalance=useCallback(async function(chainId,address){// console.log(chainId, address, token)\n// console.log(!isAddress(address, chainId),address,chainId)\nif(!isAddress(address,chainId)||![ChainId.BTC,ChainId.BTC_TEST].includes(chainId)){return null;}const rpc=config.chainInfo[chainId].nodeRpc;// const url = `${rpc}address/${address}/utxo`\nconst url=\"\".concat(rpc,\"/address/\").concat(address);// const options = {\n//   \"method\": \"gethistory\",\n//   \"params\": [\"BLOCK\", [address]]\n// }\nconst result=await fetch(url).then(response=>response.json()).catch(err=>console.error(err));// console.log(result)\nreturn result;},[]);return{getBtcBalance,btcBalanceList// getAptosTokenBalance,\n};}export function getBtcHash(hash,chainId){const data={msg:'Error',info:''};return new Promise(resolve=>{// const url = 'https://rpc.testnet.near.org'\nconst rpc=config.chainInfo[chainId].nodeRpc;const url=\"\".concat(rpc,\"/tx/\").concat(hash);// window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\nfetch(url).then(res=>res.json()).then(json=>{console.log(json);if(json){if(json.status.confirmed===true){data.msg='Success';data.info=json;}else if(json.status.confirmed===false){data.msg='Null';data.error='Query is empty!';}else{data.msg='Failure';data.error='Txns is failure!';}}else{data.msg='Null';data.error='Query is empty!';}resolve(data);}).catch(err=>{console.log(err.toString());data.error='Query is empty!';resolve(data);});});}export function useBtcCrossChain(routerToken,inputToken,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,useToChainId){const{account,chainId}=useActiveReact();const{btcBalanceList}=useBtcBalance();const{t}=useTranslation();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const addTransaction=useTransactionAdder();const[userInterfaceBalanceValid]=useInterfaceBalanceValidManager();const[p2pAddress,setP2pAddress]=useState('');const inputAmount=useMemo(()=>tryParseAmount3(typedValue,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[typedValue,selectCurrency]);const balance=useMemo(()=>{const token=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address;if(token){if(btcBalanceList===null||btcBalanceList===void 0?void 0:btcBalanceList.NATIVE){return BigAmount.format(8,btcBalanceList===null||btcBalanceList===void 0?void 0:btcBalanceList.NATIVE);}return BigAmount.format(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,'0');}return undefined;},[selectCurrency,btcBalanceList]);const onCreateP2pAddress=useCallback(()=>{setP2pAddress('');if(receiveAddress&&selectCurrency&&destConfig&&selectChain&&(destConfig===null||destConfig===void 0?void 0:destConfig.type)==='swapin'){getP2PInfo(receiveAddress,selectChain,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address).then(res=>{// console.log(res)\n// console.log(selectCurrency)\nif(res===null||res===void 0?void 0:res.p2pAddress){const localAddress=createAddress(receiveAddress,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,destConfig===null||destConfig===void 0?void 0:destConfig.DepositAddress);if((res===null||res===void 0?void 0:res.p2pAddress)===localAddress&&isAddress(localAddress,chainId)){// console.log(localAddress)\nsetP2pAddress(localAddress);setLocalConfig(receiveAddress,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,selectChain,CROSSCHAINBRIDGE,{p2pAddress:localAddress});}}});}},[receiveAddress,selectCurrency,destConfig,selectChain,chainId]);useEffect(()=>{onCreateP2pAddress();},[receiveAddress,selectCurrency,destConfig,selectChain,chainId]);// console.log(balance)\nlet sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);}catch(error){console.log(error);}return useMemo(()=>{// console.log(sufficientBalance)\n// console.log(balance ? balance?.toExact() : '')\n// console.log(typedValue)\nif(!account||!chainId||!selectCurrency||!receiveAddress&&(destConfig===null||destConfig===void 0?void 0:destConfig.type)!=='swapin'||!p2pAddress&&(destConfig===null||destConfig===void 0?void 0:destConfig.type)==='swapin')return{};return{balance:balance,execute:(sufficientBalance||!userInterfaceBalanceValid)&&inputAmount?async()=>{// const transactionParams = [{to: routerToken, value: inputAmount, memo: receiveAddress + ':' + selectChain}]\nconst transactionParams=[routerToken,inputAmount,receiveAddress+':'+useToChainId];console.log(transactionParams);try{var _ref,_ref$bitcoin;const txResult=await((_ref=window)===null||_ref===void 0?void 0:(_ref$bitcoin=_ref.bitcoin)===null||_ref$bitcoin===void 0?void 0:_ref$bitcoin.request({// method: 'wallet_sendTransaction',\n// method: 'wallet_signMessage',\nmethod:'wallet_signPSBT',params:transactionParams}));// .then((res:any) => {\n//   console.log(res)\n// }).catch((error:any) => {\n//   console.log(error)\n// })\nconsole.log(txResult);const txReceipt=(txResult===null||txResult===void 0?void 0:txResult.txHash)?{hash:txResult===null||txResult===void 0?void 0:txResult.txHash}:{};// resolve({hash: txResult?.hash})\nif(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig===null||destConfig===void 0?void 0:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}}catch(error){// reject(error)\nconsole.error(error);onChangeViewErrorTip('Txns failure.',true);}}:undefined,inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,account,balance,p2pAddress,useToChainId,userInterfaceBalanceValid]);}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","useTranslation","useDispatch","useSelector","nonevmAddress","useActiveReact","useInterfaceBalanceValidManager","BigAmount","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","tryParseAmount3","ChainId","config","getP2PInfo","createAddress","setLocalConfig","CROSSCHAINBRIDGE","isAddress","useLoginBtc","dispatch","loginBtc","chainId","console","log","window","bitcoin","enable","then","res","_res$","account","address","catch","error","getAccount","confirm","open","useBtcBalance","btcBalanceList","state","btc","getBtcBalance","BTC","BTC_TEST","includes","rpc","chainInfo","nodeRpc","url","concat","result","fetch","response","json","err","getBtcHash","hash","data","msg","info","Promise","resolve","status","confirmed","toString","useBtcCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","userInterfaceBalanceValid","p2pAddress","setP2pAddress","inputAmount","decimals","balance","token","NATIVE","format","undefined","onCreateP2pAddress","type","symbol","localAddress","DepositAddress","sufficientBalance","Number","toExact","execute","transactionParams","_ref","_ref$bitcoin","txResult","request","method","params","txReceipt","txHash","value","formatvalue","to","version","pairid","summary","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/btc/index.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\n// import {VALID_BALANCE} from '../../config/constant'\nimport {\n  // useDarkModeManager,\n  // useExpertModeManager,\n  // useInterfaceModeManager,\n  useInterfaceBalanceValidManager\n  // useUserTransactionTTL,\n  // useUserSlippageTolerance\n} from '../../state/user/hooks'\n\nimport {BigAmount} from '../../utils/formatBignumber'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\nimport config from '../../config'\n\nimport {getP2PInfo} from '../../utils/bridge/register'\nimport { createAddress } from '../../utils/isAddress/BTC'\nimport {setLocalConfig} from '../../utils/tools/tools'\nimport {CROSSCHAINBRIDGE} from '../../utils/bridge/type'\n\nimport { isAddress } from \"../../utils/isAddress\"\n\nexport function useLoginBtc() {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginBtc = useCallback(async(chainId) => {\n    // console.log(chainId)\n    console.log(window.bitcoin)\n    if (window.bitcoin) {\n      if (window.bitcoin.enable) {\n        window.bitcoin.enable().then((res:any) => {\n          console.log(res)\n          // window.bitcoin.request({\n          //   method: 'wallet_getAddresses',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.request({\n          //   method: 'wallet_getConnectedNetwork',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.request({\n          //   method: 'wallet_signMessage',\n          //   params: []\n          // }).then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          // window.bitcoin.getAccount().then((res:any) => {\n          //   console.log(res)\n          //   dispatch(nonevmAddress({chainId, account: res.address}))\n          // }).catch((error:any) => {\n          //   console.log(error)\n          //   dispatch(nonevmAddress({chainId, account: ''}))\n          // })\n          // window.providerManager.getProviderFor('BTC').getMethod('wallet.getAddresses')().then((res:any) => {\n          //   console.log(res)\n          // }).catch((error:any) => {\n          //   console.log(error)\n          // })\n          dispatch(nonevmAddress({chainId, account: res?.[0]?.address}))\n        }).catch((error:any) => {\n          console.log(error)\n          dispatch(nonevmAddress({chainId, account: ''}))\n        })\n      } else if (window.bitcoin.getAccount) {\n        // window.bitcoin.getAccount().then((res:any) => {\n        //   console.log(res)\n        //   dispatch(nonevmAddress({chainId, account: res.address}))\n        // }).catch((error:any) => {\n        //   console.log(error)\n        //   dispatch(nonevmAddress({chainId, account: ''}))\n        // })\n        dispatch(nonevmAddress({chainId, account: ''}))\n      }\n    } else {\n      if (confirm('Please install Bitcoin Wallet.') === true) {\n        window.open('https://mathwallet.org/bitcoin-wallet')\n      }\n    }\n  }, [])\n\n  return {\n    loginBtc\n  }\n}\n\nexport function useBtcBalance () {\n\n  const btcBalanceList:any = useSelector<AppState, AppState['btc']>(state => state.btc.btcBalanceList)\n  const getBtcBalance = useCallback(async function (chainId:any, address: any) {\n    // console.log(chainId, address, token)\n    // console.log(!isAddress(address, chainId),address,chainId)\n    if (!isAddress(address, chainId) || ![ChainId.BTC, ChainId.BTC_TEST].includes(chainId)) { return null }\n    const rpc = config.chainInfo[chainId].nodeRpc\n    // const url = `${rpc}address/${address}/utxo`\n    const url = `${rpc}/address/${address}`\n    // const options = {\n    //   \"method\": \"gethistory\",\n    //   \"params\": [\"BLOCK\", [address]]\n    // }\n    const result = await fetch(url)\n      .then((response) => response.json())\n      .catch(err => console.error(err));\n      // console.log(result)\n    return result;\n  }, [])\n\n  return {\n    getBtcBalance,\n    btcBalanceList\n    // getAptosTokenBalance,\n  }\n}\n\nexport function getBtcHash (hash:any, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const rpc = config.chainInfo[chainId].nodeRpc\n    const url = `${rpc}/tx/${hash}`\n      // window?.tronWeb?.trx.getTransaction(txid).then((res:any) => {\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json)\n      if (json) {\n        if (json.status.confirmed === true) {\n          data.msg = 'Success'\n          data.info = json\n        } else if (json.status.confirmed === false) {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        } else {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      console.log(err.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    })\n  })\n}\n\nexport function useBtcCrossChain (\n  routerToken: string | null | undefined,\n  inputToken: string | null | undefined,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: any,\n  typedValue: any,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {btcBalanceList} = useBtcBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n  const [userInterfaceBalanceValid] = useInterfaceBalanceValidManager()\n\n  const [p2pAddress, setP2pAddress] = useState<any>('')\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (btcBalanceList?.NATIVE) {\n        return BigAmount.format(8, btcBalanceList?.NATIVE)\n      }\n      return BigAmount.format(selectCurrency?.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, btcBalanceList])\n\n  const onCreateP2pAddress = useCallback(() => {\n    setP2pAddress('')\n    if (receiveAddress && selectCurrency && destConfig && selectChain && destConfig?.type === 'swapin') {\n      getP2PInfo(receiveAddress, selectChain, selectCurrency?.symbol, selectCurrency?.address).then((res:any) => {\n        // console.log(res)\n        // console.log(selectCurrency)\n        if (res?.p2pAddress) {\n          const localAddress = createAddress(receiveAddress, selectCurrency?.symbol, destConfig?.DepositAddress)\n          if (res?.p2pAddress === localAddress && isAddress(localAddress, chainId)) {\n            // console.log(localAddress)\n            setP2pAddress(localAddress)\n            setLocalConfig(receiveAddress, selectCurrency?.address, selectChain, CROSSCHAINBRIDGE, {p2pAddress: localAddress})\n          }\n        }\n      })\n    }\n  }, [receiveAddress, selectCurrency, destConfig, selectChain, chainId])\n\n  useEffect(() => {\n    onCreateP2pAddress()\n  }, [receiveAddress, selectCurrency, destConfig, selectChain, chainId])\n\n  // console.log(balance)\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n\n  return useMemo(() => {\n    // console.log(sufficientBalance)\n    // console.log(balance ? balance?.toExact() : '')\n    // console.log(typedValue)\n    if (\n      !account\n      || !chainId\n      || !selectCurrency\n      || (!receiveAddress && destConfig?.type !== 'swapin')\n      || (!p2pAddress && destConfig?.type === 'swapin')\n    ) return {}\n    return {\n      balance: balance,\n      execute: (sufficientBalance || !userInterfaceBalanceValid) && inputAmount\n      ? async () => {\n        // const transactionParams = [{to: routerToken, value: inputAmount, memo: receiveAddress + ':' + selectChain}]\n        const transactionParams = [routerToken, inputAmount, receiveAddress + ':' + useToChainId]\n        console.log(transactionParams)\n        try {\n          const txResult:any = await (window as any)?.bitcoin?.request({\n              // method: 'wallet_sendTransaction',\n              // method: 'wallet_signMessage',\n              method: 'wallet_signPSBT',\n              params: transactionParams\n            })\n            // .then((res:any) => {\n            //   console.log(res)\n            // }).catch((error:any) => {\n            //   console.log(error)\n            // })\n          console.log(txResult)\n          const txReceipt:any = txResult?.txHash ? {hash: txResult?.txHash} : {}\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig?.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (error) {\n          // reject(error)\n          console.error(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      } : undefined,\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, p2pAddress, useToChainId, userInterfaceBalanceValid])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}