{"ast":null,"code":"// import { useCallback, useEffect } from 'react'\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\n\n// import {updateTerraHash} from '../../hooks/terra'\n// import {updateNasHash} from '../../hooks/nas'\n\nimport { getHashInfo } from '../../nonevm/getHash';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction, updateTransaction } from './actions';\nimport { useHashSwapInfo } from './hooks';\nimport useInterval from '../../hooks/useInterval';\n\n// import {TERRA_MAIN_CHAINID} from '../../config/chainConfig/terra'\n// import {NAS_MAIN_CHAINID} from '../../config/chainConfig/nas'\n\nimport { END_STATUS } from '../../config/status';\nexport function shouldCheck(lastBlockNumber,\n// eslint-disable-next-line @typescript-eslint/ban-types\ntx) {\n  if (tx.info && END_STATUS.includes(tx.info.status)) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\nexport default function Updater() {\n  var _state$chainId;\n  const {\n    library\n  } = useActiveWeb3React();\n  const {\n    chainId\n  } = useActiveReact();\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.transactions);\n  const transactions = chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n  const updateNonEVMTxns = useCallback(() => {\n    // console.log(chainId)\n    // console.log(transactions)\n    if (!chainId || Object.keys(transactions).length <= 0) return;\n    if (isNaN(chainId)) {\n      Object.keys(transactions).filter(hash => {\n        const tx = transactions[hash];\n        if (tx.info && END_STATUS.includes(tx.info.status)) return false;\n        return true;\n      }).forEach(hash => {\n        var _tx$info, _tx$receipt;\n        // console.log(hash)\n        const tx = transactions[hash];\n        if (!tx.receipt) {\n          getHashInfo(hash, chainId).then(receipt => {\n            // console.log(receipt)\n            if (receipt.msg === 'Success' || receipt.msg === 'Failure') {\n              dispatch(finalizeTransaction({\n                chainId,\n                hash,\n                receipt: {\n                  blockHash: '',\n                  blockNumber: receipt.height,\n                  contractAddress: '',\n                  from: tx.from,\n                  status: receipt.msg === 'Success' ? 1 : 0,\n                  to: tx.toAddress,\n                  transactionHash: hash,\n                  transactionIndex: ''\n                }\n              }));\n              if (!(tx === null || tx === void 0 ? void 0 : tx.version)) {\n                var _transactions$hash;\n                addPopup({\n                  txn: {\n                    hash,\n                    success: receipt.msg === 'Success' ? true : false,\n                    summary: (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary\n                  }\n                }, hash);\n              }\n            }\n          });\n        } else if (!(tx.info && END_STATUS.includes(tx === null || tx === void 0 ? void 0 : (_tx$info = tx.info) === null || _tx$info === void 0 ? void 0 : _tx$info.status)) && (tx.receipt.status === 1 || typeof ((_tx$receipt = tx.receipt) === null || _tx$receipt === void 0 ? void 0 : _tx$receipt.status) === 'undefined') && (tx === null || tx === void 0 ? void 0 : tx.version)) {\n          useHashSwapInfo(hash).then(receipt => {\n            if (receipt && receipt.msg === 'Success' && receipt.info) {\n              dispatch(updateTransaction({\n                chainId,\n                hash,\n                info: {\n                  ...receipt.info\n                }\n              }));\n            }\n          });\n        }\n      });\n    } else {\n      if (!chainId || !library || !lastBlockNumber || isNaN(chainId)) return;\n      Object.keys(transactions).filter(hash => shouldCheck(lastBlockNumber, transactions[hash])).forEach(hash => {\n        var _tx$info2, _tx$receipt2;\n        const tx = transactions[hash];\n        if (!tx.receipt) {\n          library.getTransactionReceipt(hash).then(receipt => {\n            if (receipt) {\n              dispatch(finalizeTransaction({\n                chainId,\n                hash,\n                receipt: {\n                  blockHash: receipt.blockHash,\n                  blockNumber: receipt.blockNumber,\n                  contractAddress: receipt.contractAddress,\n                  from: receipt.from,\n                  status: receipt.status,\n                  to: receipt.to,\n                  transactionHash: receipt.transactionHash,\n                  transactionIndex: receipt.transactionIndex\n                }\n              }));\n              if (!(tx === null || tx === void 0 ? void 0 : tx.version)) {\n                var _transactions$hash2;\n                addPopup({\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: (_transactions$hash2 = transactions[hash]) === null || _transactions$hash2 === void 0 ? void 0 : _transactions$hash2.summary\n                  }\n                }, hash);\n              }\n            } else {\n              dispatch(checkedTransaction({\n                chainId,\n                hash,\n                blockNumber: lastBlockNumber\n              }));\n            }\n          }).catch(error => {\n            console.error(\"failed to check transaction hash: \".concat(hash), error);\n          });\n        } else if (!(tx.info && END_STATUS.includes(tx === null || tx === void 0 ? void 0 : (_tx$info2 = tx.info) === null || _tx$info2 === void 0 ? void 0 : _tx$info2.status)) && (tx.receipt.status === 1 || typeof ((_tx$receipt2 = tx.receipt) === null || _tx$receipt2 === void 0 ? void 0 : _tx$receipt2.status) === 'undefined') && (tx === null || tx === void 0 ? void 0 : tx.version)) {\n          useHashSwapInfo(hash).then(receipt => {\n            if (receipt && receipt.msg === 'Success' && receipt.info) {\n              dispatch(updateTransaction({\n                chainId,\n                hash,\n                info: {\n                  ...receipt.info\n                }\n              }));\n            }\n          });\n        }\n      });\n    }\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup]);\n  useInterval(updateNonEVMTxns, 1000 * 10);\n  return null;\n}","map":{"version":3,"names":["useCallback","useDispatch","useSelector","useActiveWeb3React","getHashInfo","useActiveReact","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","updateTransaction","useHashSwapInfo","useInterval","END_STATUS","shouldCheck","lastBlockNumber","tx","info","includes","status","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","_state$chainId","library","chainId","dispatch","state","transactions","addPopup","updateNonEVMTxns","Object","keys","length","isNaN","filter","hash","forEach","_tx$info","_tx$receipt","receipt","then","msg","blockHash","blockNumber","height","contractAddress","from","to","toAddress","transactionHash","transactionIndex","version","_transactions$hash","txn","success","summary","_tx$info2","_tx$receipt2","getTransactionReceipt","_transactions$hash2","catch","error","console","concat"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/transactions/updater.tsx"],"sourcesContent":["// import { useCallback, useEffect } from 'react'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\n\n// import {updateTerraHash} from '../../hooks/terra'\n// import {updateNasHash} from '../../hooks/nas'\n\nimport {getHashInfo} from '../../nonevm/getHash'\n\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { useAddPopup, useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { checkedTransaction, finalizeTransaction, updateTransaction } from './actions'\nimport {useHashSwapInfo} from './hooks'\n\nimport useInterval from '../../hooks/useInterval'\n\n// import {TERRA_MAIN_CHAINID} from '../../config/chainConfig/terra'\n// import {NAS_MAIN_CHAINID} from '../../config/chainConfig/nas'\n\nimport {END_STATUS} from '../../config/status'\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number; info?:any }\n): boolean {\n  if (tx.info && END_STATUS.includes(tx.info.status)) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  } else {\n    // otherwise every block\n    return true\n  }\n}\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const { chainId } = useActiveReact()\n\n  const lastBlockNumber = useBlockNumber()\n\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const transactions = chainId ? state[chainId] ?? {} : {}\n\n  // show popup on confirm\n  const addPopup = useAddPopup()\n\n  const updateNonEVMTxns = useCallback(() => {\n    // console.log(chainId)\n    // console.log(transactions)\n    if (!chainId || Object.keys(transactions).length <= 0) return\n    if (isNaN(chainId)) {\n      Object.keys(transactions)\n      .filter(hash => {\n        const tx = transactions[hash]\n        if (tx.info && END_STATUS.includes(tx.info.status)) return false\n        return true\n      })\n      .forEach(hash => {\n        // console.log(hash)\n        const tx = transactions[hash]\n        if (!tx.receipt) {\n          getHashInfo(hash, chainId).then((receipt:any) => {\n            // console.log(receipt)\n            if (receipt.msg === 'Success' || receipt.msg === 'Failure') {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: '',\n                    blockNumber: receipt.height,\n                    contractAddress: '',\n                    from: tx.from,\n                    status: receipt.msg === 'Success' ? 1 : 0,\n                    to: tx.toAddress,\n                    transactionHash: hash,\n                    transactionIndex: ''\n                  }\n                })\n              )\n              if (!tx?.version) {\n                addPopup(\n                  {\n                    txn: {\n                      hash,\n                      success: receipt.msg === 'Success' ? true : false,\n                      summary: transactions[hash]?.summary\n                    }\n                  },\n                  hash\n                )\n              }\n            }\n          })\n        } else if (\n          !(tx.info && END_STATUS.includes(tx?.info?.status))\n          && (tx.receipt.status === 1 || typeof tx.receipt?.status === 'undefined')\n          && tx?.version\n        )  {\n          useHashSwapInfo(hash).then((receipt:any) => {\n            if (receipt && receipt.msg === 'Success' && receipt.info) {\n              dispatch(\n                updateTransaction({\n                  chainId,\n                  hash,\n                  info: {\n                    ...receipt.info\n                  }\n                })\n              )\n            }\n          })\n        }\n      })\n    \n    } else {\n      if (!chainId || !library || !lastBlockNumber || isNaN(chainId)) return\n      Object.keys(transactions)\n        .filter(hash => shouldCheck(lastBlockNumber, transactions[hash]))\n        .forEach(hash => {\n          const tx = transactions[hash]\n          if (!tx.receipt) {\n            library\n              .getTransactionReceipt(hash)\n              .then(receipt => {\n                if (receipt) {\n                  dispatch(\n                    finalizeTransaction({\n                      chainId,\n                      hash,\n                      receipt: {\n                        blockHash: receipt.blockHash,\n                        blockNumber: receipt.blockNumber,\n                        contractAddress: receipt.contractAddress,\n                        from: receipt.from,\n                        status: receipt.status,\n                        to: receipt.to,\n                        transactionHash: receipt.transactionHash,\n                        transactionIndex: receipt.transactionIndex\n                      }\n                    })\n                  )\n                  if (!tx?.version) {\n                    addPopup(\n                      {\n                        txn: {\n                          hash,\n                          success: receipt.status === 1,\n                          summary: transactions[hash]?.summary\n                        }\n                      },\n                      hash\n                    )\n                  }\n                } else {\n                  dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\n                }\n              })\n              .catch(error => {\n                console.error(`failed to check transaction hash: ${hash}`, error)\n              })\n          } else if (\n            !(tx.info && END_STATUS.includes(tx?.info?.status))\n            && (tx.receipt.status === 1 || typeof tx.receipt?.status === 'undefined')\n            && tx?.version\n          )  {\n            useHashSwapInfo(hash).then((receipt:any) => {\n              if (receipt && receipt.msg === 'Success' && receipt.info) {\n                dispatch(\n                  updateTransaction({\n                    chainId,\n                    hash,\n                    info: {\n                      ...receipt.info\n                    }\n                  })\n                )\n              }\n            })\n          }\n        })\n    }\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup])\n\n  useInterval(updateNonEVMTxns, 1000 * 10)\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}