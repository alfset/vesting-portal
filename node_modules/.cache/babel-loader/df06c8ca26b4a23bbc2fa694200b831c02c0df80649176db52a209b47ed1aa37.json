{"ast":null,"code":"import{configureStore,getDefaultMiddleware}from'@reduxjs/toolkit';import{save,load}from'redux-localstorage-simple';import application from'./application/reducer';import{updateVersion}from'./global/actions';import user from'./user/reducer';import transactions from'./transactions/reducer';import swap from'./swap/reducer';import lists from'./lists/reducer';import burn from'./burn/reducer';import nft from'./nft/reducer';import multicall from'./multicall/reducer';import pools from'./pools/reducer';import wallet from'./wallet/reducer';import rpc from'./rpc/reducer';// import xlm from '../nonevm/stellar/reducer'\n// import trx from '../nonevm/trx/reducer'\nimport nonevm from'../nonevm';const PERSISTED_KEYS=['user','transactions','lists','rpc','pools','nft'];const store=configureStore({reducer:{application,user,transactions,swap,burn,nft,multicall,lists,pools,wallet,rpc,// xlm,\n// trx\n...nonevm},middleware:[...getDefaultMiddleware({thunk:false}),save({states:PERSISTED_KEYS,namespace:'multichain'})],preloadedState:load({states:PERSISTED_KEYS,namespace:'multichain'})});store.dispatch(updateVersion());export default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","lists","burn","nft","multicall","pools","wallet","rpc","nonevm","PERSISTED_KEYS","store","reducer","middleware","thunk","states","namespace","preloadedState","dispatch"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport nft from './nft/reducer'\nimport multicall from './multicall/reducer'\nimport pools from './pools/reducer'\nimport wallet from './wallet/reducer'\nimport rpc from './rpc/reducer'\n\n// import xlm from '../nonevm/stellar/reducer'\n// import trx from '../nonevm/trx/reducer'\nimport nonevm from '../nonevm'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists', 'rpc', 'pools', 'nft']\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    burn,\n    nft,\n    multicall,\n    lists,\n    pools,\n    wallet,\n    rpc,\n    // xlm,\n    // trx\n    ...nonevm\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS, namespace: 'multichain' })],\n  preloadedState: load({ states: PERSISTED_KEYS, namespace: 'multichain' })\n})\n\nstore.dispatch(updateVersion())\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"],"mappings":"AAAA,OAASA,cAAc,CAAEC,oBAAoB,KAAQ,kBAAkB,CACvE,OAASC,IAAI,CAAEC,IAAI,KAAQ,2BAA2B,CAEtD,MAAO,CAAAC,WAAW,KAAM,uBAAuB,CAC/C,OAASC,aAAa,KAAQ,kBAAkB,CAChD,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,YAAY,KAAM,wBAAwB,CACjD,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CACnC,MAAO,CAAAC,IAAI,KAAM,gBAAgB,CACjC,MAAO,CAAAC,GAAG,KAAM,eAAe,CAC/B,MAAO,CAAAC,SAAS,KAAM,qBAAqB,CAC3C,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CACnC,MAAO,CAAAC,MAAM,KAAM,kBAAkB,CACrC,MAAO,CAAAC,GAAG,KAAM,eAAe,CAE/B;AACA;AACA,MAAO,CAAAC,MAAM,KAAM,WAAW,CAE9B,KAAM,CAAAC,cAAwB,CAAG,CAAC,MAAM,CAAE,cAAc,CAAE,OAAO,CAAE,KAAK,CAAE,OAAO,CAAE,KAAK,CAAC,CAEzF,KAAM,CAAAC,KAAK,CAAGlB,cAAc,CAAC,CAC3BmB,OAAO,CAAE,CACPf,WAAW,CACXE,IAAI,CACJC,YAAY,CACZC,IAAI,CACJE,IAAI,CACJC,GAAG,CACHC,SAAS,CACTH,KAAK,CACLI,KAAK,CACLC,MAAM,CACNC,GAAG,CACH;AACA;AACA,GAAGC,MACL,CAAC,CACDI,UAAU,CAAE,CAAC,GAAGnB,oBAAoB,CAAC,CAAEoB,KAAK,CAAE,KAAM,CAAC,CAAC,CAAEnB,IAAI,CAAC,CAAEoB,MAAM,CAAEL,cAAc,CAAEM,SAAS,CAAE,YAAa,CAAC,CAAC,CAAC,CAClHC,cAAc,CAAErB,IAAI,CAAC,CAAEmB,MAAM,CAAEL,cAAc,CAAEM,SAAS,CAAE,YAAa,CAAC,CAC1E,CAAC,CAAC,CAEFL,KAAK,CAACO,QAAQ,CAACpB,aAAa,CAAC,CAAC,CAAC,CAE/B,cAAe,CAAAa,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}