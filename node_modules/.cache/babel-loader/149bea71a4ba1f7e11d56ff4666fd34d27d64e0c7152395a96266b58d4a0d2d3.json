{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { DEFAULT_LIST_OF_LISTS, DEFAULT_TOKEN_LIST_URL } from '../../constants/lists';\n// import { updateVersion } from '../global/actions'\nimport { mergeTokenList, userSelectCurrency, updateTokenlistTime } from './actions';\n\n// import config from '../../config'\n\n// type ListState = ListsState['byUrl'][string]\n\n// const NEW_LIST_STATE: ListState = {\n//   error: null,\n//   current: null,\n//   loadingRequestId: null,\n//   pendingUpdate: null\n// }\n// type Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\nconst initialState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  // byUrl: {\n  //   ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n  //     memo[listUrl] = NEW_LIST_STATE\n  //     return memo\n  //   }, {})\n  // },\n  selectedListUrl: DEFAULT_TOKEN_LIST_URL,\n  mergeTokenList: {},\n  updateTokenlistTime: '',\n  userSelectCurrency: {}\n};\nexport default createReducer(initialState, builder => builder.addCase(updateTokenlistTime, (state, _ref) => {\n  let {\n    payload: {}\n  } = _ref;\n  state.updateTokenlistTime = Date.now();\n}).addCase(mergeTokenList, (state, _ref2) => {\n  let {\n    payload: {\n      chainId,\n      tokenList,\n      version\n    }\n  } = _ref2;\n  // console.log(state)\n  if (state && state.mergeTokenList) {\n    // console.log(111)\n    // state.mergeTokenList[chainId] = {tokenList, timestamp: Date.now()}\n    state.mergeTokenList = {\n      // ...(state.mergeTokenList ? state.mergeTokenList : {}),\n      [chainId]: {\n        tokenList,\n        timestamp: Date.now(),\n        version\n      }\n    };\n    // console.log(state.mergeTokenList)\n  } else {\n    // console.log(222)\n    state.mergeTokenList = {\n      [chainId]: {\n        tokenList,\n        timestamp: Date.now(),\n        version\n      }\n    };\n  }\n}).addCase(userSelectCurrency, (state, _ref3) => {\n  let {\n    payload: {\n      chainId,\n      token,\n      toChainId,\n      tokenKey\n    }\n  } = _ref3;\n  // console.log(state)\n  if (chainId) {\n    if (!state.userSelectCurrency) state.userSelectCurrency = {};\n    if (!state.userSelectCurrency[chainId]) state.userSelectCurrency[chainId] = {\n      token: '',\n      toChainId: '',\n      tokenKey: ''\n    };\n    // console.log(state.userSelectCurrency[chainId])\n    // console.log(token)\n    // console.log(toChainId)\n    if (token) {\n      state.userSelectCurrency[chainId].token = token;\n    }\n    if (toChainId) {\n      state.userSelectCurrency[chainId].toChainId = toChainId;\n    }\n    if (tokenKey) {\n      state.userSelectCurrency[chainId].tokenKey = tokenKey;\n    }\n  }\n})\n// .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n//   state.byUrl[url] = {\n//     current: null,\n//     pendingUpdate: null,\n//     ...state.byUrl[url],\n//     loadingRequestId: requestId,\n//     error: null\n//   }\n// })\n// .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n// .addCase(fetchTokenList.fulfilled, (state, { payload: { tokenList, url } }) => {\n//   if (tokenList && tokenList.tokens && tokenList.tokens.length > 0) {\n//     // tokenList.tokens.unshift(...config.tokenList.tokens)\n//     const tlArr:Array<string> = []\n//     for (const obj of tokenList.tokens) {\n//       if (!tlArr.includes(obj.address)) {\n//         tlArr.push(obj.address)\n//       }\n//     }\n//     for (const obj of config.tokenList.tokens) {\n//       if (!tlArr.includes(obj.address)) {\n//         tokenList.tokens.unshift(obj)\n//       }\n//     }\n//   } else {\n//     tokenList = config.tokenList\n//   }\n//   // console.log(tokenList)\n//   state.byUrl[url] = {\n//     ...state.byUrl[url],\n//     loadingRequestId: null,\n//     error: null,\n//     current: tokenList,\n//     pendingUpdate: null\n//   }\n// })\n// .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n// .addCase(fetchTokenList.rejected, (state, { payload: { url } }) => {\n//   state.byUrl[url] = {\n//     ...state.byUrl[url],\n//     loadingRequestId: null,\n//     error: null,\n//     current: config.tokenList,\n//     pendingUpdate: null\n//   }\n// })\n// .addCase(selectList, (state, { payload: url }) => {\n//   state.selectedListUrl = url\n//   // automatically adds list\n//   if (!state.byUrl[url]) {\n//     state.byUrl[url] = NEW_LIST_STATE\n//   }\n// })\n// .addCase(addList, (state, { payload: url }) => {\n//   if (!state.byUrl[url]) {\n//     state.byUrl[url] = NEW_LIST_STATE\n//   }\n// })\n// .addCase(removeList, (state, { payload: url }) => {\n//   if (state.byUrl[url]) {\n//     delete state.byUrl[url]\n//   }\n//   if (state.selectedListUrl === url) {\n//     state.selectedListUrl = url === DEFAULT_TOKEN_LIST_URL ? Object.keys(state.byUrl)[0] : DEFAULT_TOKEN_LIST_URL\n//   }\n// })\n// .addCase(acceptListUpdate, (state, { payload: url }) => {\n//   if (!state.byUrl[url]?.pendingUpdate) {\n//     throw new Error('accept list update called without pending update')\n//   }\n//   state.byUrl[url] = {\n//     ...state.byUrl[url],\n//     pendingUpdate: null,\n//     current: state.byUrl[url].pendingUpdate\n//   }\n// })\n// .addCase(updateVersion, state => {\n//   // 从localStorage加载的状态，但从未初始化新列表\n//   if (!state.lastInitializedDefaultListOfLists) {\n//     state.byUrl = initialState.byUrl\n//     state.selectedListUrl = DEFAULT_TOKEN_LIST_URL\n//   } else if (state.lastInitializedDefaultListOfLists) {\n//     const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n//       (s, l) => s.add(l),\n//       new Set()\n//     )\n//     const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n//     DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n//       if (!lastInitializedSet.has(listUrl)) {\n//         state.byUrl[listUrl] = NEW_LIST_STATE\n//       }\n//     })\n\n//     state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n//       if (!newListOfListsSet.has(listUrl)) {\n//         delete state.byUrl[listUrl]\n//       }\n//     })\n//   }\n\n//   state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n\n//   if (!state.selectedListUrl) {\n//     state.selectedListUrl = DEFAULT_TOKEN_LIST_URL\n//     if (!state.byUrl[DEFAULT_TOKEN_LIST_URL]) {\n//       state.byUrl[DEFAULT_TOKEN_LIST_URL] = NEW_LIST_STATE\n//     }\n//   }\n// })\n);","map":{"version":3,"names":["createReducer","DEFAULT_LIST_OF_LISTS","DEFAULT_TOKEN_LIST_URL","mergeTokenList","userSelectCurrency","updateTokenlistTime","initialState","lastInitializedDefaultListOfLists","selectedListUrl","builder","addCase","state","_ref","payload","Date","now","_ref2","chainId","tokenList","version","timestamp","_ref3","token","toChainId","tokenKey"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/lists/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { DEFAULT_LIST_OF_LISTS, DEFAULT_TOKEN_LIST_URL } from '../../constants/lists'\n// import { updateVersion } from '../global/actions'\nimport { mergeTokenList, userSelectCurrency,updateTokenlistTime } from './actions'\n\n// import config from '../../config'\n\nexport interface ListsState {\n  // readonly byUrl: {\n  //   readonly [url: string]: {\n  //     readonly current: TokenList | null\n  //     readonly pendingUpdate: TokenList | null\n  //     readonly loadingRequestId: string | null\n  //     readonly error: string | null\n  //   }\n  // }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n  readonly selectedListUrl: string | undefined\n  readonly mergeTokenList: any\n  readonly updateTokenlistTime: any\n  readonly userSelectCurrency: {\n    readonly [chainId: string]: {\n      readonly token: string | null\n      readonly toChainId: string | null\n      readonly tokenKey: string | null\n    }\n  }\n}\n\n// type ListState = ListsState['byUrl'][string]\n\n// const NEW_LIST_STATE: ListState = {\n//   error: null,\n//   current: null,\n//   loadingRequestId: null,\n//   pendingUpdate: null\n// }\n\n// type Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  // byUrl: {\n  //   ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n  //     memo[listUrl] = NEW_LIST_STATE\n  //     return memo\n  //   }, {})\n  // },\n  selectedListUrl: DEFAULT_TOKEN_LIST_URL,\n  mergeTokenList: {},\n  updateTokenlistTime: '',\n  userSelectCurrency: {},\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(updateTokenlistTime, (state, { payload: {  } }) => {\n      state.updateTokenlistTime = Date.now()\n    })\n    .addCase(mergeTokenList, (state, { payload: { chainId, tokenList, version } }) => {\n      // console.log(state)\n      if (state && state.mergeTokenList) {\n        // console.log(111)\n        // state.mergeTokenList[chainId] = {tokenList, timestamp: Date.now()}\n        state.mergeTokenList = {\n          // ...(state.mergeTokenList ? state.mergeTokenList : {}),\n          [chainId]: {tokenList, timestamp: Date.now(), version}\n        }\n        // console.log(state.mergeTokenList)\n      } else {\n        // console.log(222)\n        state.mergeTokenList = {\n          [chainId]: {tokenList, timestamp: Date.now(), version}\n        }\n      }\n    })\n    .addCase(userSelectCurrency, (state, { payload: { chainId, token, toChainId, tokenKey } }) => {\n      // console.log(state)\n      if (chainId) {\n        if (!state.userSelectCurrency) state.userSelectCurrency = {}\n        if (!state.userSelectCurrency[chainId]) state.userSelectCurrency[chainId] = {\n          token: '',\n          toChainId: '',\n          tokenKey: '',\n        }\n        // console.log(state.userSelectCurrency[chainId])\n        // console.log(token)\n        // console.log(toChainId)\n        if (token) {\n          state.userSelectCurrency[chainId].token = token\n        }\n        if (toChainId) {\n          state.userSelectCurrency[chainId].toChainId = toChainId\n        }\n        if (tokenKey) {\n          state.userSelectCurrency[chainId].tokenKey = tokenKey\n        }\n      }\n    })\n    // .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n    //   state.byUrl[url] = {\n    //     current: null,\n    //     pendingUpdate: null,\n    //     ...state.byUrl[url],\n    //     loadingRequestId: requestId,\n    //     error: null\n    //   }\n    // })\n    // .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n    // .addCase(fetchTokenList.fulfilled, (state, { payload: { tokenList, url } }) => {\n    //   if (tokenList && tokenList.tokens && tokenList.tokens.length > 0) {\n    //     // tokenList.tokens.unshift(...config.tokenList.tokens)\n    //     const tlArr:Array<string> = []\n    //     for (const obj of tokenList.tokens) {\n    //       if (!tlArr.includes(obj.address)) {\n    //         tlArr.push(obj.address)\n    //       }\n    //     }\n    //     for (const obj of config.tokenList.tokens) {\n    //       if (!tlArr.includes(obj.address)) {\n    //         tokenList.tokens.unshift(obj)\n    //       }\n    //     }\n    //   } else {\n    //     tokenList = config.tokenList\n    //   }\n    //   // console.log(tokenList)\n    //   state.byUrl[url] = {\n    //     ...state.byUrl[url],\n    //     loadingRequestId: null,\n    //     error: null,\n    //     current: tokenList,\n    //     pendingUpdate: null\n    //   }\n    // })\n    // .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n    // .addCase(fetchTokenList.rejected, (state, { payload: { url } }) => {\n    //   state.byUrl[url] = {\n    //     ...state.byUrl[url],\n    //     loadingRequestId: null,\n    //     error: null,\n    //     current: config.tokenList,\n    //     pendingUpdate: null\n    //   }\n    // })\n    // .addCase(selectList, (state, { payload: url }) => {\n    //   state.selectedListUrl = url\n    //   // automatically adds list\n    //   if (!state.byUrl[url]) {\n    //     state.byUrl[url] = NEW_LIST_STATE\n    //   }\n    // })\n    // .addCase(addList, (state, { payload: url }) => {\n    //   if (!state.byUrl[url]) {\n    //     state.byUrl[url] = NEW_LIST_STATE\n    //   }\n    // })\n    // .addCase(removeList, (state, { payload: url }) => {\n    //   if (state.byUrl[url]) {\n    //     delete state.byUrl[url]\n    //   }\n    //   if (state.selectedListUrl === url) {\n    //     state.selectedListUrl = url === DEFAULT_TOKEN_LIST_URL ? Object.keys(state.byUrl)[0] : DEFAULT_TOKEN_LIST_URL\n    //   }\n    // })\n    // .addCase(acceptListUpdate, (state, { payload: url }) => {\n    //   if (!state.byUrl[url]?.pendingUpdate) {\n    //     throw new Error('accept list update called without pending update')\n    //   }\n    //   state.byUrl[url] = {\n    //     ...state.byUrl[url],\n    //     pendingUpdate: null,\n    //     current: state.byUrl[url].pendingUpdate\n    //   }\n    // })\n    // .addCase(updateVersion, state => {\n    //   // 从localStorage加载的状态，但从未初始化新列表\n    //   if (!state.lastInitializedDefaultListOfLists) {\n    //     state.byUrl = initialState.byUrl\n    //     state.selectedListUrl = DEFAULT_TOKEN_LIST_URL\n    //   } else if (state.lastInitializedDefaultListOfLists) {\n    //     const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n    //       (s, l) => s.add(l),\n    //       new Set()\n    //     )\n    //     const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n    //     DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n    //       if (!lastInitializedSet.has(listUrl)) {\n    //         state.byUrl[listUrl] = NEW_LIST_STATE\n    //       }\n    //     })\n\n    //     state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n    //       if (!newListOfListsSet.has(listUrl)) {\n    //         delete state.byUrl[listUrl]\n    //       }\n    //     })\n    //   }\n\n    //   state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n\n    //   if (!state.selectedListUrl) {\n    //     state.selectedListUrl = DEFAULT_TOKEN_LIST_URL\n    //     if (!state.byUrl[DEFAULT_TOKEN_LIST_URL]) {\n    //       state.byUrl[DEFAULT_TOKEN_LIST_URL] = NEW_LIST_STATE\n    //     }\n    //   }\n    // })\n)\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,uBAAuB;AACrF;AACA,SAASC,cAAc,EAAEC,kBAAkB,EAACC,mBAAmB,QAAQ,WAAW;;AAElF;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAMC,YAAwB,GAAG;EAC/BC,iCAAiC,EAAEN,qBAAqB;EACxD;EACA;EACA;EACA;EACA;EACA;EACAO,eAAe,EAAEN,sBAAsB;EACvCC,cAAc,EAAE,CAAC,CAAC;EAClBE,mBAAmB,EAAE,EAAE;EACvBD,kBAAkB,EAAE,CAAC;AACvB,CAAC;AAED,eAAeJ,aAAa,CAACM,YAAY,EAAEG,OAAO,IAChDA,OAAO,CACJC,OAAO,CAACL,mBAAmB,EAAE,CAACM,KAAK,EAAAC,IAAA,KAAwB;EAAA,IAAtB;IAAEC,OAAO,EAAE,CAAG;EAAE,CAAC,GAAAD,IAAA;EACrDD,KAAK,CAACN,mBAAmB,GAAGS,IAAI,CAACC,GAAG,CAAC,CAAC;AACxC,CAAC,CAAC,CACDL,OAAO,CAACP,cAAc,EAAE,CAACQ,KAAK,EAAAK,KAAA,KAAmD;EAAA,IAAjD;IAAEH,OAAO,EAAE;MAAEI,OAAO;MAAEC,SAAS;MAAEC;IAAQ;EAAE,CAAC,GAAAH,KAAA;EAC3E;EACA,IAAIL,KAAK,IAAIA,KAAK,CAACR,cAAc,EAAE;IACjC;IACA;IACAQ,KAAK,CAACR,cAAc,GAAG;MACrB;MACA,CAACc,OAAO,GAAG;QAACC,SAAS;QAAEE,SAAS,EAAEN,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEI;MAAO;IACvD,CAAC;IACD;EACF,CAAC,MAAM;IACL;IACAR,KAAK,CAACR,cAAc,GAAG;MACrB,CAACc,OAAO,GAAG;QAACC,SAAS;QAAEE,SAAS,EAAEN,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEI;MAAO;IACvD,CAAC;EACH;AACF,CAAC,CAAC,CACDT,OAAO,CAACN,kBAAkB,EAAE,CAACO,KAAK,EAAAU,KAAA,KAA2D;EAAA,IAAzD;IAAER,OAAO,EAAE;MAAEI,OAAO;MAAEK,KAAK;MAAEC,SAAS;MAAEC;IAAS;EAAE,CAAC,GAAAH,KAAA;EACvF;EACA,IAAIJ,OAAO,EAAE;IACX,IAAI,CAACN,KAAK,CAACP,kBAAkB,EAAEO,KAAK,CAACP,kBAAkB,GAAG,CAAC,CAAC;IAC5D,IAAI,CAACO,KAAK,CAACP,kBAAkB,CAACa,OAAO,CAAC,EAAEN,KAAK,CAACP,kBAAkB,CAACa,OAAO,CAAC,GAAG;MAC1EK,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;IACZ,CAAC;IACD;IACA;IACA;IACA,IAAIF,KAAK,EAAE;MACTX,KAAK,CAACP,kBAAkB,CAACa,OAAO,CAAC,CAACK,KAAK,GAAGA,KAAK;IACjD;IACA,IAAIC,SAAS,EAAE;MACbZ,KAAK,CAACP,kBAAkB,CAACa,OAAO,CAAC,CAACM,SAAS,GAAGA,SAAS;IACzD;IACA,IAAIC,QAAQ,EAAE;MACZb,KAAK,CAACP,kBAAkB,CAACa,OAAO,CAAC,CAACO,QAAQ,GAAGA,QAAQ;IACvD;EACF;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}