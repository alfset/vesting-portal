{"ast":null,"code":"import React, { useRef, useState } from 'react';\nimport { useIsomorphicLayoutEffect } from '@reach/utils';\nimport { createPortal } from 'react-dom';\n\n/**\r\n * Welcome to @reach/portal!\r\n *\r\n * Creates and appends a DOM node to the end of `document.body` and renders a\r\n * React tree into it. Useful for rendering a natural React element hierarchy\r\n * with a different DOM hierarchy to prevent parent styles from clipping or\r\n * hiding content (for popovers, dropdowns, and modals).\r\n *\r\n * @see Docs   https://reacttraining.com/reach-ui/portal\r\n * @see Source https://github.com/reach/reach-ui/tree/main/packages/portal\r\n * @see React  https://reactjs.org/docs/portals.html\r\n */\n/**\r\n * Portal\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/portal#portal\r\n */\n\nvar Portal = function Portal(_ref) {\n  var children = _ref.children,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? \"reach-portal\" : _ref$type;\n  var mountNode = useRef(null);\n  var portalNode = useRef(null);\n  var _useState = useState(),\n    forceUpdate = _useState[1];\n  useIsomorphicLayoutEffect(function () {\n    // This ref may be null when a hot-loader replaces components on the page\n    if (!mountNode.current) return; // It's possible that the content of the portal has, itself, been portaled.\n    // In that case, it's important to append to the correct document element.\n\n    var ownerDocument = mountNode.current.ownerDocument;\n    portalNode.current = ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.createElement(type);\n    ownerDocument.body.appendChild(portalNode.current);\n    forceUpdate({});\n    return function () {\n      if (portalNode.current && portalNode.current.ownerDocument) {\n        portalNode.current.ownerDocument.body.removeChild(portalNode.current);\n      }\n    };\n  }, [type]);\n  return portalNode.current ? /*#__PURE__*/createPortal(children, portalNode.current) : /*#__PURE__*/React.createElement(\"span\", {\n    ref: mountNode\n  });\n};\nif (process.env.NODE_ENV !== \"production\") {\n  Portal.displayName = \"Portal\";\n}\nexport default Portal;","map":{"version":3,"names":["Portal","_ref","children","type","_ref$type","mountNode","useRef","portalNode","useState","forceUpdate","_useState","useIsomorphicLayoutEffect","current","ownerDocument","createElement","body","appendChild","removeChild","createPortal","React","ref","process","env","NODE_ENV","displayName"],"sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/portal!\n *\n * Creates and appends a DOM node to the end of `document.body` and renders a\n * React tree into it. Useful for rendering a natural React element hierarchy\n * with a different DOM hierarchy to prevent parent styles from clipping or\n * hiding content (for popovers, dropdowns, and modals).\n *\n * @see Docs   https://reacttraining.com/reach-ui/portal\n * @see Source https://github.com/reach/reach-ui/tree/main/packages/portal\n * @see React  https://reactjs.org/docs/portals.html\n */\n\nimport React, { useRef, useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@reach/utils\";\nimport { createPortal } from \"react-dom\";\n\n/**\n * Portal\n *\n * @see Docs https://reacttraining.com/reach-ui/portal#portal\n */\nconst Portal: React.FC<PortalProps> = ({ children, type = \"reach-portal\" }) => {\n  let mountNode = useRef<HTMLDivElement | null>(null);\n  let portalNode = useRef<HTMLElement | null>(null);\n  let [, forceUpdate] = useState();\n\n  useIsomorphicLayoutEffect(() => {\n    // This ref may be null when a hot-loader replaces components on the page\n    if (!mountNode.current) return;\n    // It's possible that the content of the portal has, itself, been portaled.\n    // In that case, it's important to append to the correct document element.\n    const ownerDocument = mountNode.current!.ownerDocument;\n    portalNode.current = ownerDocument?.createElement(type)!;\n    ownerDocument!.body.appendChild(portalNode.current);\n    forceUpdate({});\n    return () => {\n      if (portalNode.current && portalNode.current.ownerDocument) {\n        portalNode.current.ownerDocument.body.removeChild(portalNode.current);\n      }\n    };\n  }, [type]);\n\n  return portalNode.current ? (\n    createPortal(children, portalNode.current)\n  ) : (\n    <span ref={mountNode} />\n  );\n};\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/portal#portal-props\n */\nexport type PortalProps = {\n  /**\n   * Regular React children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/portal#portal-children\n   */\n  children: React.ReactNode;\n  /**\n   * The DOM element type to render.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/portal#portal-type\n   */\n  type?: string;\n};\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}\n\nexport default Portal;\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AAiBA;;;;;;IAKMA,MAAM,GAA0B,SAAhCA,MAAgCA,CAAAC,IAAA;MAAGC,QAAA,GAAAD,IAAA,CAAAC,QAAA;qBAAUC,IAAA;IAAAA,IAAA,GAAAC,SAAA,cAAO,iBAAAA,SAAA;EACxD,IAAIC,SAAS,GAAGC,MAAM,CAAwB,IAAxB,CAAtB;EACA,IAAIC,UAAU,GAAGD,MAAM,CAAqB,IAArB,CAAvB;kBACsBE,QAAQ;IAAvBC,WAAA,GAAAC,SAAA;EAEPC,yBAAyB,CAAC;IACxB;IACA,IAAI,CAACN,SAAS,CAACO,OAAf,EAAwB;IAExB;;IACA,IAAMC,aAAa,GAAGR,SAAS,CAACO,OAAV,CAAmBC,aAAzC;IACAN,UAAU,CAACK,OAAX,GAAqBC,aAArB,aAAqBA,aAArB,uBAAqBA,aAAa,CAAEC,aAAf,CAA6BX,IAA7B,CAArB;IACAU,aAAc,CAACE,IAAf,CAAoBC,WAApB,CAAgCT,UAAU,CAACK,OAA3C;IACAH,WAAW,CAAC,EAAD,CAAX;IACA,OAAO;MACL,IAAIF,UAAU,CAACK,OAAX,IAAsBL,UAAU,CAACK,OAAX,CAAmBC,aAA7C,EAA4D;QAC1DN,UAAU,CAACK,OAAX,CAAmBC,aAAnB,CAAiCE,IAAjC,CAAsCE,WAAtC,CAAkDV,UAAU,CAACK,OAA7D;MACD;IACF,CAJD;EAKD,CAdwB,EActB,CAACT,IAAD,CAdsB,CAAzB;EAgBA,OAAOI,UAAU,CAACK,OAAX,gBACLM,YAAY,CAAChB,QAAD,EAAWK,UAAU,CAACK,OAAtB,CADP,gBAGLO,KAAA,CAAAL,aAAA;IAAMM,GAAG,EAAEf;GAAX,CAHF;AAKD;AAoBD,IAAAgB,OAAA,CAAAC,GAAA,CAAAC,QAAA,mBAAa;EACXvB,MAAM,CAACwB,WAAP,GAAqB,QAArB;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}