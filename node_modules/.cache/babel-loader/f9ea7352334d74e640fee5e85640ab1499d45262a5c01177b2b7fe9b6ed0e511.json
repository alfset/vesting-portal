{"ast":null,"code":"import { useConnectedWallet } from '@terra-money/wallet-provider';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useETHBalances } from '../state/wallet/hooks';\nimport { useUserSelectChainId } from '../state/user/hooks';\nimport useInterval from './useInterval';\nimport useTerraBalance, { useTerraBaseBalance } from './useTerraBalance';\nimport { useCurrentNasBalance, useNasTokenBalance } from '../nonevm/nas';\nimport { useNearBalance } from '../nonevm/near';\nimport { useTrxBalance } from '../nonevm/trx';\nimport { useXlmBalance } from '../nonevm/stellar';\nimport { useAdaBalance } from '../nonevm/cardano';\nimport { useFlowBalance } from '../nonevm/flow';\nimport { useSolBalance } from '../nonevm/solana';\nimport { useAptosBalance } from '../nonevm/apt';\nimport { useBtcBalance } from '../nonevm/btc';\nimport { useAtomBalance } from '../nonevm/atom';\nimport { useCurrencyBalance1 } from '../state/wallet/hooks';\nimport { useActiveReact } from './useActiveReact';\nimport { ChainId } from '../config/chainConfig/chainId';\nimport { BigAmount } from '../utils/formatBignumber';\nimport { tryParseAmount3 } from '../state/swap/hooks';\nimport config from '../config';\nexport function useTokensBalance(token, dec, selectChainId) {\n  const {\n    account\n  } = useActiveReact();\n  const connectedWallet = useConnectedWallet();\n  const {\n    getTerraBalances\n  } = useTerraBalance();\n  const {\n    getNearTokenBalance\n  } = useNearBalance();\n  const {\n    getNasTokenBalance\n  } = useNasTokenBalance();\n  const {\n    getTrxTokenBalance\n  } = useTrxBalance();\n  const {\n    getAllBalance\n  } = useXlmBalance();\n  const {\n    adaBalanceList\n  } = useAdaBalance();\n  const {\n    flowBalanceList\n  } = useFlowBalance();\n  const {\n    getSolTokenBalance,\n    getSolBalance\n  } = useSolBalance();\n  const {\n    aptBalanceList\n  } = useAptosBalance();\n  const {\n    btcBalanceList\n  } = useBtcBalance();\n  const {\n    atomBalanceList\n  } = useAtomBalance();\n  const savedBalance = useRef();\n  const evmBalance = useCurrencyBalance1(account, token, dec, selectChainId);\n  const fetchBalance = useCallback(() => {\n    // console.log([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId))\n    if (token) {\n      var _config$chainInfo, _config$chainInfo$sel;\n      if ([ChainId.TERRA].includes(selectChainId) && (connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.walletAddress)) {\n        getTerraBalances({\n          terraWhiteList: [{\n            token: token\n          }],\n          account: connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.walletAddress\n        }).then(res => {\n          const bl = res[token] && (dec || dec === 0) ? BigAmount.format(dec, res[token]) : undefined;\n          savedBalance.current = bl;\n        });\n      } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(selectChainId)) {\n        getNearTokenBalance({\n          token\n        }).then(res => {\n          const bl = res && (dec || dec === 0) ? BigAmount.format(dec, res) : undefined;\n          savedBalance.current = bl;\n        });\n      } else if ([ChainId.NAS].includes(selectChainId)) {\n        getNasTokenBalance({\n          account: '',\n          token\n        }).then(res => {\n          const bl = res && (dec || dec === 0) ? BigAmount.format(dec, res) : undefined;\n          savedBalance.current = bl;\n        }).catch(() => {\n          savedBalance.current = '';\n        });\n      } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId)) {\n        getTrxTokenBalance({\n          token\n        }).then(res => {\n          var _res$constant_result;\n          // console.log(token)\n          // console.log(res)\n          const bl = '0x' + (res === null || res === void 0 ? void 0 : (_res$constant_result = res.constant_result) === null || _res$constant_result === void 0 ? void 0 : _res$constant_result[0]);\n          savedBalance.current = bl && (dec || dec === 0) ? BigAmount.format(dec, bl) : undefined;\n        });\n      } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(selectChainId)) {\n        // console.log(selectChainId)\n        getAllBalance(selectChainId).then(res => {\n          // console.log(res)\n          if (res === null || res === void 0 ? void 0 : res.balances) {\n            var _res$token;\n            if (res === null || res === void 0 ? void 0 : (_res$token = res[token]) === null || _res$token === void 0 ? void 0 : _res$token.balance) {\n              var _res$token2;\n              // const dec = 7\n              const blvalue = tryParseAmount3(res === null || res === void 0 ? void 0 : (_res$token2 = res[token]) === null || _res$token2 === void 0 ? void 0 : _res$token2.balance, dec);\n              const bl = res ? BigAmount.format(dec, blvalue) : undefined;\n              savedBalance.current = bl;\n            }\n          }\n        });\n      } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(selectChainId)) {\n        if (adaBalanceList === null || adaBalanceList === void 0 ? void 0 : adaBalanceList[token]) {\n          const bl = BigAmount.format(dec, adaBalanceList === null || adaBalanceList === void 0 ? void 0 : adaBalanceList[token]);\n          savedBalance.current = bl;\n        }\n      } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(selectChainId)) {\n        if (flowBalanceList === null || flowBalanceList === void 0 ? void 0 : flowBalanceList[token]) {\n          const bl = BigAmount.format(dec, flowBalanceList === null || flowBalanceList === void 0 ? void 0 : flowBalanceList[token]);\n          savedBalance.current = bl;\n        }\n      } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(selectChainId)) {\n        // console.log(token)\n        if (token === 'native') {\n          getSolBalance({\n            chainId: selectChainId,\n            account: account\n          }).then(res => {\n            var _res$result;\n            // console.log(res)\n            if (res === null || res === void 0 ? void 0 : (_res$result = res.result) === null || _res$result === void 0 ? void 0 : _res$result.value) {\n              var _res$result2;\n              const bl = BigAmount.format(dec, res === null || res === void 0 ? void 0 : (_res$result2 = res.result) === null || _res$result2 === void 0 ? void 0 : _res$result2.value);\n              savedBalance.current = bl;\n            }\n          });\n        } else {\n          getSolTokenBalance({\n            chainId: selectChainId,\n            account: account,\n            token\n          }).then(res => {\n            var _res$result3, _res$result3$value;\n            // console.log(res)\n            if (res === null || res === void 0 ? void 0 : (_res$result3 = res.result) === null || _res$result3 === void 0 ? void 0 : (_res$result3$value = _res$result3.value) === null || _res$result3$value === void 0 ? void 0 : _res$result3$value.amount) {\n              var _res$result4, _res$result4$value;\n              const bl = BigAmount.format(dec, res === null || res === void 0 ? void 0 : (_res$result4 = res.result) === null || _res$result4 === void 0 ? void 0 : (_res$result4$value = _res$result4.value) === null || _res$result4$value === void 0 ? void 0 : _res$result4$value.amount);\n              savedBalance.current = bl;\n            }\n          });\n        }\n      } else if ([ChainId.APT, ChainId.APT_TEST].includes(selectChainId)) {\n        // console.log(account)\n        if (aptBalanceList === null || aptBalanceList === void 0 ? void 0 : aptBalanceList[token]) {\n          var _aptBalanceList$token;\n          const bl = BigAmount.format(dec, aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$token = aptBalanceList[token]) === null || _aptBalanceList$token === void 0 ? void 0 : _aptBalanceList$token.balance);\n          savedBalance.current = bl;\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0');\n          savedBalance.current = bl;\n        }\n      } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(selectChainId) && (config === null || config === void 0 ? void 0 : (_config$chainInfo = config.chainInfo) === null || _config$chainInfo === void 0 ? void 0 : (_config$chainInfo$sel = _config$chainInfo[selectChainId]) === null || _config$chainInfo$sel === void 0 ? void 0 : _config$chainInfo$sel.chainType) !== 'NOWALLET') {\n        // console.log(account)\n        if (btcBalanceList === null || btcBalanceList === void 0 ? void 0 : btcBalanceList.NATIVE) {\n          const bl = BigAmount.format(dec, btcBalanceList === null || btcBalanceList === void 0 ? void 0 : btcBalanceList.NATIVE);\n          savedBalance.current = bl;\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0');\n          savedBalance.current = bl;\n        }\n      } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(selectChainId)) {\n        // console.log(account)\n        if (atomBalanceList === null || atomBalanceList === void 0 ? void 0 : atomBalanceList[token]) {\n          var _atomBalanceList$toke;\n          const bl = BigAmount.format(dec, atomBalanceList === null || atomBalanceList === void 0 ? void 0 : (_atomBalanceList$toke = atomBalanceList[token]) === null || _atomBalanceList$toke === void 0 ? void 0 : _atomBalanceList$toke.balance);\n          savedBalance.current = bl;\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0');\n          savedBalance.current = bl;\n        }\n      } else {\n        // console.log('evmBalance', evmBalance ? evmBalance.toExact() : '')\n        savedBalance.current = evmBalance;\n      }\n    } else {\n      savedBalance.current = '';\n      // setBalance('')\n    }\n  }, [token, connectedWallet, selectChainId, adaBalanceList, flowBalanceList, evmBalance, account, aptBalanceList, btcBalanceList, atomBalanceList]);\n  useInterval(fetchBalance, 1000 * 10, false);\n  useEffect(() => {\n    savedBalance.current = '';\n    fetchBalance();\n  }, [fetchBalance, token, account]);\n  return useMemo(() => {\n    // console.log(savedBalance)\n    return savedBalance.current;\n  }, [savedBalance.current, selectChainId, token, account]);\n}\nexport function useBaseBalances(uncheckedAddresses) {\n  var _useETHBalances;\n  const {\n    selectNetworkInfo\n  } = useUserSelectChainId();\n  const userEthBalance = (_useETHBalances = useETHBalances(uncheckedAddresses && !(selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.label) ? [uncheckedAddresses] : [])) === null || _useETHBalances === void 0 ? void 0 : _useETHBalances[uncheckedAddresses !== null && uncheckedAddresses !== void 0 ? uncheckedAddresses : ''];\n  // const userEthBalance = useETHBalances((uncheckedAddresses) ? [uncheckedAddresses] : [])?.[uncheckedAddresses ?? '']\n  const {\n    getTerraBaseBalances\n  } = useTerraBaseBalance();\n  const {\n    getNasBalance\n  } = useCurrentNasBalance();\n  const {\n    getNearBalance\n  } = useNearBalance();\n  const {\n    getTrxBalance\n  } = useTrxBalance();\n  const {\n    getAllBalance\n  } = useXlmBalance();\n  const {\n    adaBalanceList\n  } = useAdaBalance();\n  const {\n    flowBalanceList\n  } = useFlowBalance();\n  const {\n    getSolBalance\n  } = useSolBalance();\n  const {\n    aptBalanceList\n  } = useAptosBalance();\n  const {\n    btcBalanceList\n  } = useBtcBalance();\n  const {\n    atomBalanceList\n  } = useAtomBalance();\n  const selectChainId = selectNetworkInfo === null || selectNetworkInfo === void 0 ? void 0 : selectNetworkInfo.label;\n  const [balance, setBalance] = useState();\n  const fetchBalancesCallback = useCallback(() => {\n    var _config$chainInfo2, _config$chainInfo2$se;\n    if (selectChainId === ChainId.TERRA) {\n      getTerraBaseBalances().then(res => {\n        const bl = (res === null || res === void 0 ? void 0 : res.uluna) ? BigAmount.format(6, res === null || res === void 0 ? void 0 : res.uluna) : undefined;\n        setBalance(bl);\n      });\n    } else if (selectChainId === ChainId.NAS) {\n      getNasBalance().then(res => {\n        // console.log(res)\n        const bl = res ? BigAmount.format(18, res) : undefined;\n        setBalance(bl);\n      });\n    } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(selectChainId)) {\n      getNearBalance().then(res => {\n        const bl = (res === null || res === void 0 ? void 0 : res.total) ? BigAmount.format(24, res === null || res === void 0 ? void 0 : res.total) : undefined;\n        setBalance(bl);\n      });\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId)) {\n      getTrxBalance({}).then(res => {\n        // console.log(res)\n        const bl = res || res === 0 ? BigAmount.format(6, res) : undefined;\n        setBalance(bl);\n      });\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(selectChainId)) {\n      // console.log(selectChainId)\n      getAllBalance(selectChainId, uncheckedAddresses).then(res => {\n        var _res$native;\n        // console.log(res)\n        if (res === null || res === void 0 ? void 0 : (_res$native = res['native']) === null || _res$native === void 0 ? void 0 : _res$native.balance) {\n          var _res$native2;\n          const dec = 7;\n          const blvalue = tryParseAmount3(res === null || res === void 0 ? void 0 : (_res$native2 = res['native']) === null || _res$native2 === void 0 ? void 0 : _res$native2.balance, dec);\n          const bl = res ? BigAmount.format(dec, blvalue) : undefined;\n          setBalance(bl);\n        }\n      });\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(selectChainId)) {\n      if (adaBalanceList === null || adaBalanceList === void 0 ? void 0 : adaBalanceList['NATIVE']) {\n        const bl = BigAmount.format(6, adaBalanceList === null || adaBalanceList === void 0 ? void 0 : adaBalanceList['NATIVE']);\n        setBalance(bl);\n      }\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(selectChainId)) {\n      if (flowBalanceList === null || flowBalanceList === void 0 ? void 0 : flowBalanceList['NATIVE']) {\n        const bl = BigAmount.format(8, flowBalanceList === null || flowBalanceList === void 0 ? void 0 : flowBalanceList['NATIVE']);\n        setBalance(bl);\n      }\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(selectChainId)) {\n      getSolBalance({\n        chainId: selectChainId,\n        account: uncheckedAddresses\n      }).then(res => {\n        var _res$result5;\n        if (res === null || res === void 0 ? void 0 : (_res$result5 = res.result) === null || _res$result5 === void 0 ? void 0 : _res$result5.value) {\n          var _res$result6;\n          const bl = BigAmount.format(9, res === null || res === void 0 ? void 0 : (_res$result6 = res.result) === null || _res$result6 === void 0 ? void 0 : _res$result6.value);\n          setBalance(bl);\n        } else {\n          setBalance('');\n        }\n        // console.log(res)\n      });\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(selectChainId)) {\n      const nativetoken = '0x1::aptos_coin::AptosCoin';\n      // console.log(aptBalanceList)\n      if (aptBalanceList === null || aptBalanceList === void 0 ? void 0 : aptBalanceList[nativetoken]) {\n        var _aptBalanceList$nativ;\n        const bl = BigAmount.format(8, aptBalanceList === null || aptBalanceList === void 0 ? void 0 : (_aptBalanceList$nativ = aptBalanceList[nativetoken]) === null || _aptBalanceList$nativ === void 0 ? void 0 : _aptBalanceList$nativ.balance);\n        setBalance(bl);\n      } else {\n        const bl = BigAmount.format(8, '0');\n        setBalance(bl);\n      }\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(selectChainId) && (config === null || config === void 0 ? void 0 : (_config$chainInfo2 = config.chainInfo) === null || _config$chainInfo2 === void 0 ? void 0 : (_config$chainInfo2$se = _config$chainInfo2[selectChainId]) === null || _config$chainInfo2$se === void 0 ? void 0 : _config$chainInfo2$se.chainType) !== 'NOWALLET') {\n      // console.log(btcBalanceList)\n      if (btcBalanceList === null || btcBalanceList === void 0 ? void 0 : btcBalanceList.NATIVE) {\n        const bl = BigAmount.format(8, btcBalanceList === null || btcBalanceList === void 0 ? void 0 : btcBalanceList.NATIVE);\n        setBalance(bl);\n      } else {\n        const bl = BigAmount.format(8, '0');\n        setBalance(bl);\n      }\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(selectChainId)) {\n      var _atomBalanceList$NATI;\n      // console.log(btcBalanceList)\n      if (atomBalanceList === null || atomBalanceList === void 0 ? void 0 : (_atomBalanceList$NATI = atomBalanceList.NATIVE) === null || _atomBalanceList$NATI === void 0 ? void 0 : _atomBalanceList$NATI.balance) {\n        var _atomBalanceList$NATI2;\n        const bl = BigAmount.format(6, atomBalanceList === null || atomBalanceList === void 0 ? void 0 : (_atomBalanceList$NATI2 = atomBalanceList.NATIVE) === null || _atomBalanceList$NATI2 === void 0 ? void 0 : _atomBalanceList$NATI2.balance);\n        setBalance(bl);\n      } else {\n        const bl = BigAmount.format(6, '0');\n        setBalance(bl);\n      }\n    }\n  }, [uncheckedAddresses, selectChainId, getAllBalance, adaBalanceList, flowBalanceList, aptBalanceList, btcBalanceList, atomBalanceList]);\n  useEffect(() => {\n    fetchBalancesCallback();\n  }, [fetchBalancesCallback]);\n  useInterval(fetchBalancesCallback, 1000 * 10);\n  return useMemo(() => {\n    // console.log(userEthBalance)\n    if (!selectChainId) {\n      return userEthBalance;\n    } else if (balance) {\n      return balance;\n    }\n    return undefined;\n  }, [balance, userEthBalance]);\n}","map":{"version":3,"names":["useConnectedWallet","useCallback","useEffect","useMemo","useRef","useState","useETHBalances","useUserSelectChainId","useInterval","useTerraBalance","useTerraBaseBalance","useCurrentNasBalance","useNasTokenBalance","useNearBalance","useTrxBalance","useXlmBalance","useAdaBalance","useFlowBalance","useSolBalance","useAptosBalance","useBtcBalance","useAtomBalance","useCurrencyBalance1","useActiveReact","ChainId","BigAmount","tryParseAmount3","config","useTokensBalance","token","dec","selectChainId","account","connectedWallet","getTerraBalances","getNearTokenBalance","getNasTokenBalance","getTrxTokenBalance","getAllBalance","adaBalanceList","flowBalanceList","getSolTokenBalance","getSolBalance","aptBalanceList","btcBalanceList","atomBalanceList","savedBalance","evmBalance","fetchBalance","_config$chainInfo","_config$chainInfo$sel","TERRA","includes","walletAddress","terraWhiteList","then","res","bl","format","undefined","current","NEAR","NEAR_TEST","NAS","catch","TRX","TRX_TEST","_res$constant_result","constant_result","XLM","XLM_TEST","balances","_res$token","balance","_res$token2","blvalue","ADA","ADA_TEST","FLOW","FLOW_TEST","SOL","SOL_TEST","chainId","_res$result","result","value","_res$result2","_res$result3","_res$result3$value","amount","_res$result4","_res$result4$value","APT","APT_TEST","_aptBalanceList$token","BTC","BTC_TEST","chainInfo","chainType","NATIVE","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","_atomBalanceList$toke","useBaseBalances","uncheckedAddresses","_useETHBalances","selectNetworkInfo","userEthBalance","label","getTerraBaseBalances","getNasBalance","getNearBalance","getTrxBalance","setBalance","fetchBalancesCallback","_config$chainInfo2","_config$chainInfo2$se","uluna","total","_res$native","_res$native2","_res$result5","_res$result6","nativetoken","_aptBalanceList$nativ","_atomBalanceList$NATI","_atomBalanceList$NATI2"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useAllBalances.ts"],"sourcesContent":["import { useConnectedWallet } from '@terra-money/wallet-provider'\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useETHBalances } from '../state/wallet/hooks'\nimport { useUserSelectChainId } from '../state/user/hooks'\nimport useInterval from './useInterval'\nimport useTerraBalance, {useTerraBaseBalance} from './useTerraBalance'\nimport { useCurrentNasBalance, useNasTokenBalance } from '../nonevm/nas'\nimport { useNearBalance } from '../nonevm/near'\nimport { useTrxBalance } from '../nonevm/trx'\nimport {useXlmBalance} from '../nonevm/stellar'\nimport {useAdaBalance} from '../nonevm/cardano'\nimport {useFlowBalance} from '../nonevm/flow'\nimport {useSolBalance} from '../nonevm/solana'\nimport {useAptosBalance} from '../nonevm/apt'\nimport {useBtcBalance} from '../nonevm/btc'\nimport {useAtomBalance} from '../nonevm/atom'\n\n\nimport {useCurrencyBalance1} from '../state/wallet/hooks'\nimport {useActiveReact} from './useActiveReact'\n\nimport { ChainId } from '../config/chainConfig/chainId'\nimport { BigAmount } from '../utils/formatBignumber'\nimport { tryParseAmount3 } from '../state/swap/hooks'\n\nimport config from '../config'\n\nexport function useTokensBalance (token:any, dec:any, selectChainId:any) {\n  const {account} = useActiveReact()\n  const connectedWallet = useConnectedWallet()\n  const {getTerraBalances} = useTerraBalance()\n\n  const { getNearTokenBalance } = useNearBalance()\n\n  const {getNasTokenBalance} = useNasTokenBalance()\n  \n  const {getTrxTokenBalance} = useTrxBalance()\n\n  const {getAllBalance} = useXlmBalance()\n\n  const {adaBalanceList} = useAdaBalance()\n  const {flowBalanceList} = useFlowBalance()\n  const {getSolTokenBalance, getSolBalance} = useSolBalance()\n  const {aptBalanceList} = useAptosBalance()\n  const {btcBalanceList} = useBtcBalance()\n  const {atomBalanceList} = useAtomBalance()\n\n  const savedBalance = useRef<any>()\n\n  const evmBalance = useCurrencyBalance1(account, token, dec, selectChainId)\n\n  const fetchBalance = useCallback(() => {\n    // console.log([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId))\n    if (token) {\n      if ([ChainId.TERRA].includes(selectChainId) && connectedWallet?.walletAddress) {\n        getTerraBalances({\n          terraWhiteList: [{\n            token: token\n          }],\n          account: connectedWallet?.walletAddress\n        }).then(res => {\n          const bl = res[token] && (dec || dec === 0) ? BigAmount.format(dec, res[token]) : undefined\n          savedBalance.current = bl\n        })\n      } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(selectChainId)) {\n        getNearTokenBalance({token}).then(res => {\n          const bl = res && (dec || dec === 0) ? BigAmount.format(dec, res) : undefined\n          savedBalance.current = bl\n        })\n      } else if ([ChainId.NAS].includes(selectChainId)) {\n        getNasTokenBalance({\n          account: '',\n          token\n        }).then((res:any) => {\n          const bl = res && (dec || dec === 0) ? BigAmount.format(dec, res) : undefined\n          savedBalance.current = bl\n        }).catch(() => {\n          savedBalance.current = ''\n        })\n      } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId)) {\n        getTrxTokenBalance({token}).then((res:any) => {\n          // console.log(token)\n          // console.log(res)\n          const bl:any = '0x' + res?.constant_result?.[0]\n          savedBalance.current = bl && (dec || dec === 0) ? BigAmount.format(dec, bl) : undefined\n        })\n      } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(selectChainId)) {\n        // console.log(selectChainId)\n        getAllBalance(selectChainId).then((res:any) => {\n          // console.log(res)\n          if (res?.balances) {\n            if (res?.[token]?.balance) {\n              // const dec = 7\n              const blvalue = tryParseAmount3(res?.[token]?.balance, dec)\n              const bl = res ? BigAmount.format(dec, blvalue) : undefined\n              savedBalance.current = bl\n            }\n          }\n        })\n      } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(selectChainId)) {\n        if (adaBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, adaBalanceList?.[token])\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(selectChainId)) {\n        if (flowBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, flowBalanceList?.[token])\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(selectChainId)) {\n        // console.log(token)\n        if (token === 'native') {\n          getSolBalance({chainId: selectChainId, account: account}).then((res:any) => {\n            // console.log(res)\n            if (res?.result?.value) {\n              const bl = BigAmount.format(dec, res?.result?.value)\n              savedBalance.current = bl\n            }\n          })\n        } else {\n          getSolTokenBalance({chainId: selectChainId, account: account, token}).then((res:any) => {\n            // console.log(res)\n            if (res?.result?.value?.amount) {\n              const bl = BigAmount.format(dec, res?.result?.value?.amount)\n              savedBalance.current = bl\n            }\n          })\n        }\n      } else if ([ChainId.APT, ChainId.APT_TEST].includes(selectChainId)) {\n        // console.log(account)\n        if (aptBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, aptBalanceList?.[token]?.balance)\n          savedBalance.current = bl\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0')\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(selectChainId) && config?.chainInfo?.[selectChainId]?.chainType !== 'NOWALLET') {\n        // console.log(account)\n        if (btcBalanceList?.NATIVE) {\n          const bl = BigAmount.format(dec, btcBalanceList?.NATIVE)\n          savedBalance.current = bl\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0')\n          savedBalance.current = bl\n        }\n      } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(selectChainId)) {\n        // console.log(account)\n        if (atomBalanceList?.[token]) {\n          const bl = BigAmount.format(dec, atomBalanceList?.[token]?.balance)\n          savedBalance.current = bl\n        } else if (dec) {\n          const bl = BigAmount.format(dec, '0')\n          savedBalance.current = bl\n        }\n      } else {\n        // console.log('evmBalance', evmBalance ? evmBalance.toExact() : '')\n        savedBalance.current = evmBalance\n      }\n    } else {\n      savedBalance.current = ''\n      // setBalance('')\n    }\n  }, [token, connectedWallet, selectChainId, adaBalanceList, flowBalanceList, evmBalance, account, aptBalanceList, btcBalanceList, atomBalanceList])\n\n  useInterval(fetchBalance, 1000 * 10, false)\n\n  useEffect(() => {\n    \n    savedBalance.current = ''\n    fetchBalance()\n  }, [fetchBalance, token, account])\n\n  return useMemo(() => {\n    // console.log(savedBalance)\n    return savedBalance.current\n  }, [savedBalance.current, selectChainId, token, account])\n}\n\n\nexport function useBaseBalances (\n  uncheckedAddresses?: string | null | undefined\n) {\n  const {selectNetworkInfo} = useUserSelectChainId()\n  const userEthBalance = useETHBalances((uncheckedAddresses && !selectNetworkInfo?.label) ? [uncheckedAddresses] : [])?.[uncheckedAddresses ?? '']\n  // const userEthBalance = useETHBalances((uncheckedAddresses) ? [uncheckedAddresses] : [])?.[uncheckedAddresses ?? '']\n  const {getTerraBaseBalances} = useTerraBaseBalance()\n  const { getNasBalance } = useCurrentNasBalance()\n  const { getNearBalance } = useNearBalance()\n  const {getTrxBalance} = useTrxBalance()\n  const {getAllBalance} = useXlmBalance()\n  const {adaBalanceList} = useAdaBalance()\n  const {flowBalanceList} = useFlowBalance()\n  const {getSolBalance} = useSolBalance()\n  const {aptBalanceList} = useAptosBalance()\n  const {btcBalanceList} = useBtcBalance()\n  const {atomBalanceList} = useAtomBalance()\n  \n\n  const selectChainId = selectNetworkInfo?.label\n\n  const [balance, setBalance] = useState<any>()\n  const fetchBalancesCallback = useCallback(() => {\n    if (selectChainId === ChainId.TERRA) {\n      getTerraBaseBalances().then(res => {\n        const bl = res?.uluna ? BigAmount.format(6, res?.uluna) : undefined\n        setBalance(bl)\n      })\n    } else if (selectChainId === ChainId.NAS) {\n      getNasBalance().then(res => {\n        // console.log(res)\n        const bl = res ? BigAmount.format(18, res) : undefined\n        setBalance(bl)\n      })\n    } else if ([ChainId.NEAR, ChainId.NEAR_TEST].includes(selectChainId)) {\n      getNearBalance().then(res => {\n        const bl = res?.total ? BigAmount.format(24, res?.total) : undefined\n        setBalance(bl)\n      })\n    } else if ([ChainId.TRX, ChainId.TRX_TEST].includes(selectChainId)) {\n      getTrxBalance({}).then((res:any) => {\n        // console.log(res)\n        const bl = res || res === 0 ? BigAmount.format(6, res) : undefined\n        setBalance(bl)\n      })\n    } else if ([ChainId.XLM, ChainId.XLM_TEST].includes(selectChainId)) {\n      // console.log(selectChainId)\n      getAllBalance(selectChainId, uncheckedAddresses).then((res:any) => {\n        // console.log(res)\n        if (res?.['native']?.balance) {\n          const dec = 7\n          const blvalue = tryParseAmount3(res?.['native']?.balance, dec)\n          const bl = res ? BigAmount.format(dec, blvalue) : undefined\n          setBalance(bl)\n        }\n      })\n    } else if ([ChainId.ADA, ChainId.ADA_TEST].includes(selectChainId)) {\n\n      if (adaBalanceList?.['NATIVE']) {\n        const bl = BigAmount.format(6, adaBalanceList?.['NATIVE'])\n        setBalance(bl)\n      }\n    } else if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(selectChainId)) {\n      if (flowBalanceList?.['NATIVE']) {\n        const bl = BigAmount.format(8, flowBalanceList?.['NATIVE'])\n        setBalance(bl)\n      }\n    } else if ([ChainId.SOL, ChainId.SOL_TEST].includes(selectChainId)) {\n      getSolBalance({chainId: selectChainId, account: uncheckedAddresses}).then((res:any) => {\n        if (res?.result?.value) {\n          const bl = BigAmount.format(9, res?.result?.value)\n          setBalance(bl)\n        } else {\n          setBalance('')\n        }\n        // console.log(res)\n      })\n    } else if ([ChainId.APT, ChainId.APT_TEST].includes(selectChainId)) {\n      const nativetoken = '0x1::aptos_coin::AptosCoin'\n      // console.log(aptBalanceList)\n      if (aptBalanceList?.[nativetoken]) {\n        const bl = BigAmount.format(8, aptBalanceList?.[nativetoken]?.balance)\n        setBalance(bl)\n      } else {\n        const bl = BigAmount.format(8, '0')\n        setBalance(bl)\n      }\n    } else if ([ChainId.BTC, ChainId.BTC_TEST].includes(selectChainId) && config?.chainInfo?.[selectChainId]?.chainType !== 'NOWALLET') {\n      // console.log(btcBalanceList)\n      if (btcBalanceList?.NATIVE) {\n        const bl = BigAmount.format(8, btcBalanceList?.NATIVE)\n        setBalance(bl)\n      } else {\n        const bl = BigAmount.format(8, '0')\n        setBalance(bl)\n      }\n    } else if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(selectChainId)) {\n      // console.log(btcBalanceList)\n      if (atomBalanceList?.NATIVE?.balance) {\n        const bl = BigAmount.format(6, atomBalanceList?.NATIVE?.balance)\n        setBalance(bl)\n      } else {\n        const bl = BigAmount.format(6, '0')\n        setBalance(bl)\n      }\n    }\n  }, [uncheckedAddresses, selectChainId, getAllBalance, adaBalanceList, flowBalanceList,aptBalanceList, btcBalanceList, atomBalanceList])\n\n  useEffect(() => {\n    fetchBalancesCallback()\n  }, [fetchBalancesCallback])\n\n  useInterval(fetchBalancesCallback, 1000 * 10)\n\n  return useMemo(() => {\n    // console.log(userEthBalance)\n    if (!selectChainId) {\n      return userEthBalance\n    } else if (balance) {\n      return balance\n    }\n    return undefined\n  }, [balance, userEthBalance])\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,8BAA8B;AAEjE,SAASC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACzE,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,oBAAoB,QAAQ,qBAAqB;AAC1D,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,eAAe,IAAGC,mBAAmB,QAAO,mBAAmB;AACtE,SAASC,oBAAoB,EAAEC,kBAAkB,QAAQ,eAAe;AACxE,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAAQC,aAAa,QAAO,mBAAmB;AAC/C,SAAQC,aAAa,QAAO,mBAAmB;AAC/C,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,aAAa,QAAO,kBAAkB;AAC9C,SAAQC,eAAe,QAAO,eAAe;AAC7C,SAAQC,aAAa,QAAO,eAAe;AAC3C,SAAQC,cAAc,QAAO,gBAAgB;AAG7C,SAAQC,mBAAmB,QAAO,uBAAuB;AACzD,SAAQC,cAAc,QAAO,kBAAkB;AAE/C,SAASC,OAAO,QAAQ,+BAA+B;AACvD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,eAAe,QAAQ,qBAAqB;AAErD,OAAOC,MAAM,MAAM,WAAW;AAE9B,OAAO,SAASC,gBAAgBA,CAAEC,KAAS,EAAEC,GAAO,EAAEC,aAAiB,EAAE;EACvE,MAAM;IAACC;EAAO,CAAC,GAAGT,cAAc,CAAC,CAAC;EAClC,MAAMU,eAAe,GAAGjC,kBAAkB,CAAC,CAAC;EAC5C,MAAM;IAACkC;EAAgB,CAAC,GAAGzB,eAAe,CAAC,CAAC;EAE5C,MAAM;IAAE0B;EAAoB,CAAC,GAAGtB,cAAc,CAAC,CAAC;EAEhD,MAAM;IAACuB;EAAkB,CAAC,GAAGxB,kBAAkB,CAAC,CAAC;EAEjD,MAAM;IAACyB;EAAkB,CAAC,GAAGvB,aAAa,CAAC,CAAC;EAE5C,MAAM;IAACwB;EAAa,CAAC,GAAGvB,aAAa,CAAC,CAAC;EAEvC,MAAM;IAACwB;EAAc,CAAC,GAAGvB,aAAa,CAAC,CAAC;EACxC,MAAM;IAACwB;EAAe,CAAC,GAAGvB,cAAc,CAAC,CAAC;EAC1C,MAAM;IAACwB,kBAAkB;IAAEC;EAAa,CAAC,GAAGxB,aAAa,CAAC,CAAC;EAC3D,MAAM;IAACyB;EAAc,CAAC,GAAGxB,eAAe,CAAC,CAAC;EAC1C,MAAM;IAACyB;EAAc,CAAC,GAAGxB,aAAa,CAAC,CAAC;EACxC,MAAM;IAACyB;EAAe,CAAC,GAAGxB,cAAc,CAAC,CAAC;EAE1C,MAAMyB,YAAY,GAAG1C,MAAM,CAAM,CAAC;EAElC,MAAM2C,UAAU,GAAGzB,mBAAmB,CAACU,OAAO,EAAEH,KAAK,EAAEC,GAAG,EAAEC,aAAa,CAAC;EAE1E,MAAMiB,YAAY,GAAG/C,WAAW,CAAC,MAAM;IACrC;IACA,IAAI4B,KAAK,EAAE;MAAA,IAAAoB,iBAAA,EAAAC,qBAAA;MACT,IAAI,CAAC1B,OAAO,CAAC2B,KAAK,CAAC,CAACC,QAAQ,CAACrB,aAAa,CAAC,KAAIE,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEoB,aAAa,GAAE;QAC7EnB,gBAAgB,CAAC;UACfoB,cAAc,EAAE,CAAC;YACfzB,KAAK,EAAEA;UACT,CAAC,CAAC;UACFG,OAAO,EAAEC,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEoB;QAC5B,CAAC,CAAC,CAACE,IAAI,CAACC,GAAG,IAAI;UACb,MAAMC,EAAE,GAAGD,GAAG,CAAC3B,KAAK,CAAC,KAAKC,GAAG,IAAIA,GAAG,KAAK,CAAC,CAAC,GAAGL,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE0B,GAAG,CAAC3B,KAAK,CAAC,CAAC,GAAG8B,SAAS;UAC3Fb,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACqC,IAAI,EAAErC,OAAO,CAACsC,SAAS,CAAC,CAACV,QAAQ,CAACrB,aAAa,CAAC,EAAE;QACpEI,mBAAmB,CAAC;UAACN;QAAK,CAAC,CAAC,CAAC0B,IAAI,CAACC,GAAG,IAAI;UACvC,MAAMC,EAAE,GAAGD,GAAG,KAAK1B,GAAG,IAAIA,GAAG,KAAK,CAAC,CAAC,GAAGL,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE0B,GAAG,CAAC,GAAGG,SAAS;UAC7Eb,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACuC,GAAG,CAAC,CAACX,QAAQ,CAACrB,aAAa,CAAC,EAAE;QAChDK,kBAAkB,CAAC;UACjBJ,OAAO,EAAE,EAAE;UACXH;QACF,CAAC,CAAC,CAAC0B,IAAI,CAAEC,GAAO,IAAK;UACnB,MAAMC,EAAE,GAAGD,GAAG,KAAK1B,GAAG,IAAIA,GAAG,KAAK,CAAC,CAAC,GAAGL,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE0B,GAAG,CAAC,GAAGG,SAAS;UAC7Eb,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B,CAAC,CAAC,CAACO,KAAK,CAAC,MAAM;UACblB,YAAY,CAACc,OAAO,GAAG,EAAE;QAC3B,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACpC,OAAO,CAACyC,GAAG,EAAEzC,OAAO,CAAC0C,QAAQ,CAAC,CAACd,QAAQ,CAACrB,aAAa,CAAC,EAAE;QAClEM,kBAAkB,CAAC;UAACR;QAAK,CAAC,CAAC,CAAC0B,IAAI,CAAEC,GAAO,IAAK;UAAA,IAAAW,oBAAA;UAC5C;UACA;UACA,MAAMV,EAAM,GAAG,IAAI,IAAGD,GAAG,aAAHA,GAAG,wBAAAW,oBAAA,GAAHX,GAAG,CAAEY,eAAe,cAAAD,oBAAA,uBAApBA,oBAAA,CAAuB,CAAC,CAAC;UAC/CrB,YAAY,CAACc,OAAO,GAAGH,EAAE,KAAK3B,GAAG,IAAIA,GAAG,KAAK,CAAC,CAAC,GAAGL,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE2B,EAAE,CAAC,GAAGE,SAAS;QACzF,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACnC,OAAO,CAAC6C,GAAG,EAAE7C,OAAO,CAAC8C,QAAQ,CAAC,CAAClB,QAAQ,CAACrB,aAAa,CAAC,EAAE;QAClE;QACAO,aAAa,CAACP,aAAa,CAAC,CAACwB,IAAI,CAAEC,GAAO,IAAK;UAC7C;UACA,IAAIA,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEe,QAAQ,EAAE;YAAA,IAAAC,UAAA;YACjB,IAAIhB,GAAG,aAAHA,GAAG,wBAAAgB,UAAA,GAAHhB,GAAG,CAAG3B,KAAK,CAAC,cAAA2C,UAAA,uBAAZA,UAAA,CAAcC,OAAO,EAAE;cAAA,IAAAC,WAAA;cACzB;cACA,MAAMC,OAAO,GAAGjD,eAAe,CAAC8B,GAAG,aAAHA,GAAG,wBAAAkB,WAAA,GAAHlB,GAAG,CAAG3B,KAAK,CAAC,cAAA6C,WAAA,uBAAZA,WAAA,CAAcD,OAAO,EAAE3C,GAAG,CAAC;cAC3D,MAAM2B,EAAE,GAAGD,GAAG,GAAG/B,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE6C,OAAO,CAAC,GAAGhB,SAAS;cAC3Db,YAAY,CAACc,OAAO,GAAGH,EAAE;YAC3B;UACF;QACF,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACoD,GAAG,EAAEpD,OAAO,CAACqD,QAAQ,CAAC,CAACzB,QAAQ,CAACrB,aAAa,CAAC,EAAE;QAClE,IAAIQ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAGV,KAAK,CAAC,EAAE;UAC3B,MAAM4B,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAES,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAGV,KAAK,CAAC,CAAC;UACzDiB,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B;MACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACsD,IAAI,EAAEtD,OAAO,CAACuD,SAAS,CAAC,CAAC3B,QAAQ,CAACrB,aAAa,CAAC,EAAE;QACpE,IAAIS,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAGX,KAAK,CAAC,EAAE;UAC5B,MAAM4B,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAEU,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAGX,KAAK,CAAC,CAAC;UAC1DiB,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B;MACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACwD,GAAG,EAAExD,OAAO,CAACyD,QAAQ,CAAC,CAAC7B,QAAQ,CAACrB,aAAa,CAAC,EAAE;QAClE;QACA,IAAIF,KAAK,KAAK,QAAQ,EAAE;UACtBa,aAAa,CAAC;YAACwC,OAAO,EAAEnD,aAAa;YAAEC,OAAO,EAAEA;UAAO,CAAC,CAAC,CAACuB,IAAI,CAAEC,GAAO,IAAK;YAAA,IAAA2B,WAAA;YAC1E;YACA,IAAI3B,GAAG,aAAHA,GAAG,wBAAA2B,WAAA,GAAH3B,GAAG,CAAE4B,MAAM,cAAAD,WAAA,uBAAXA,WAAA,CAAaE,KAAK,EAAE;cAAA,IAAAC,YAAA;cACtB,MAAM7B,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE0B,GAAG,aAAHA,GAAG,wBAAA8B,YAAA,GAAH9B,GAAG,CAAE4B,MAAM,cAAAE,YAAA,uBAAXA,YAAA,CAAaD,KAAK,CAAC;cACpDvC,YAAY,CAACc,OAAO,GAAGH,EAAE;YAC3B;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLhB,kBAAkB,CAAC;YAACyC,OAAO,EAAEnD,aAAa;YAAEC,OAAO,EAAEA,OAAO;YAAEH;UAAK,CAAC,CAAC,CAAC0B,IAAI,CAAEC,GAAO,IAAK;YAAA,IAAA+B,YAAA,EAAAC,kBAAA;YACtF;YACA,IAAIhC,GAAG,aAAHA,GAAG,wBAAA+B,YAAA,GAAH/B,GAAG,CAAE4B,MAAM,cAAAG,YAAA,wBAAAC,kBAAA,GAAXD,YAAA,CAAaF,KAAK,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBC,MAAM,EAAE;cAAA,IAAAC,YAAA,EAAAC,kBAAA;cAC9B,MAAMlC,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE0B,GAAG,aAAHA,GAAG,wBAAAkC,YAAA,GAAHlC,GAAG,CAAE4B,MAAM,cAAAM,YAAA,wBAAAC,kBAAA,GAAXD,YAAA,CAAaL,KAAK,cAAAM,kBAAA,uBAAlBA,kBAAA,CAAoBF,MAAM,CAAC;cAC5D3C,YAAY,CAACc,OAAO,GAAGH,EAAE;YAC3B;UACF,CAAC,CAAC;QACJ;MACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACoE,GAAG,EAAEpE,OAAO,CAACqE,QAAQ,CAAC,CAACzC,QAAQ,CAACrB,aAAa,CAAC,EAAE;QAClE;QACA,IAAIY,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAGd,KAAK,CAAC,EAAE;UAAA,IAAAiE,qBAAA;UAC3B,MAAMrC,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAEa,cAAc,aAAdA,cAAc,wBAAAmD,qBAAA,GAAdnD,cAAc,CAAGd,KAAK,CAAC,cAAAiE,qBAAA,uBAAvBA,qBAAA,CAAyBrB,OAAO,CAAC;UAClE3B,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B,CAAC,MAAM,IAAI3B,GAAG,EAAE;UACd,MAAM2B,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE,GAAG,CAAC;UACrCgB,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B;MACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACuE,GAAG,EAAEvE,OAAO,CAACwE,QAAQ,CAAC,CAAC5C,QAAQ,CAACrB,aAAa,CAAC,IAAI,CAAAJ,MAAM,aAANA,MAAM,wBAAAsB,iBAAA,GAANtB,MAAM,CAAEsE,SAAS,cAAAhD,iBAAA,wBAAAC,qBAAA,GAAjBD,iBAAA,CAAoBlB,aAAa,CAAC,cAAAmB,qBAAA,uBAAlCA,qBAAA,CAAoCgD,SAAS,MAAK,UAAU,EAAE;QAClI;QACA,IAAItD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEuD,MAAM,EAAE;UAC1B,MAAM1C,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAEc,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEuD,MAAM,CAAC;UACxDrD,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B,CAAC,MAAM,IAAI3B,GAAG,EAAE;UACd,MAAM2B,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE,GAAG,CAAC;UACrCgB,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B;MACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAAC4E,QAAQ,EAAE5E,OAAO,CAAC6E,aAAa,EAAE7E,OAAO,CAAC8E,UAAU,EAAE9E,OAAO,CAAC+E,eAAe,CAAC,CAACnD,QAAQ,CAACrB,aAAa,CAAC,EAAE;QACzH;QACA,IAAIc,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAGhB,KAAK,CAAC,EAAE;UAAA,IAAA2E,qBAAA;UAC5B,MAAM/C,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAEe,eAAe,aAAfA,eAAe,wBAAA2D,qBAAA,GAAf3D,eAAe,CAAGhB,KAAK,CAAC,cAAA2E,qBAAA,uBAAxBA,qBAAA,CAA0B/B,OAAO,CAAC;UACnE3B,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B,CAAC,MAAM,IAAI3B,GAAG,EAAE;UACd,MAAM2B,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE,GAAG,CAAC;UACrCgB,YAAY,CAACc,OAAO,GAAGH,EAAE;QAC3B;MACF,CAAC,MAAM;QACL;QACAX,YAAY,CAACc,OAAO,GAAGb,UAAU;MACnC;IACF,CAAC,MAAM;MACLD,YAAY,CAACc,OAAO,GAAG,EAAE;MACzB;IACF;EACF,CAAC,EAAE,CAAC/B,KAAK,EAAEI,eAAe,EAAEF,aAAa,EAAEQ,cAAc,EAAEC,eAAe,EAAEO,UAAU,EAAEf,OAAO,EAAEW,cAAc,EAAEC,cAAc,EAAEC,eAAe,CAAC,CAAC;EAElJrC,WAAW,CAACwC,YAAY,EAAE,IAAI,GAAG,EAAE,EAAE,KAAK,CAAC;EAE3C9C,SAAS,CAAC,MAAM;IAEd4C,YAAY,CAACc,OAAO,GAAG,EAAE;IACzBZ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,YAAY,EAAEnB,KAAK,EAAEG,OAAO,CAAC,CAAC;EAElC,OAAO7B,OAAO,CAAC,MAAM;IACnB;IACA,OAAO2C,YAAY,CAACc,OAAO;EAC7B,CAAC,EAAE,CAACd,YAAY,CAACc,OAAO,EAAE7B,aAAa,EAAEF,KAAK,EAAEG,OAAO,CAAC,CAAC;AAC3D;AAGA,OAAO,SAASyE,eAAeA,CAC7BC,kBAA8C,EAC9C;EAAA,IAAAC,eAAA;EACA,MAAM;IAACC;EAAiB,CAAC,GAAGrG,oBAAoB,CAAC,CAAC;EAClD,MAAMsG,cAAc,IAAAF,eAAA,GAAGrG,cAAc,CAAEoG,kBAAkB,IAAI,EAACE,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEE,KAAK,IAAI,CAACJ,kBAAkB,CAAC,GAAG,EAAE,CAAC,cAAAC,eAAA,uBAA7FA,eAAA,CAAgGD,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAI,EAAE,CAAC;EAChJ;EACA,MAAM;IAACK;EAAoB,CAAC,GAAGrG,mBAAmB,CAAC,CAAC;EACpD,MAAM;IAAEsG;EAAc,CAAC,GAAGrG,oBAAoB,CAAC,CAAC;EAChD,MAAM;IAAEsG;EAAe,CAAC,GAAGpG,cAAc,CAAC,CAAC;EAC3C,MAAM;IAACqG;EAAa,CAAC,GAAGpG,aAAa,CAAC,CAAC;EACvC,MAAM;IAACwB;EAAa,CAAC,GAAGvB,aAAa,CAAC,CAAC;EACvC,MAAM;IAACwB;EAAc,CAAC,GAAGvB,aAAa,CAAC,CAAC;EACxC,MAAM;IAACwB;EAAe,CAAC,GAAGvB,cAAc,CAAC,CAAC;EAC1C,MAAM;IAACyB;EAAa,CAAC,GAAGxB,aAAa,CAAC,CAAC;EACvC,MAAM;IAACyB;EAAc,CAAC,GAAGxB,eAAe,CAAC,CAAC;EAC1C,MAAM;IAACyB;EAAc,CAAC,GAAGxB,aAAa,CAAC,CAAC;EACxC,MAAM;IAACyB;EAAe,CAAC,GAAGxB,cAAc,CAAC,CAAC;EAG1C,MAAMU,aAAa,GAAG6E,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEE,KAAK;EAE9C,MAAM,CAACrC,OAAO,EAAE0C,UAAU,CAAC,GAAG9G,QAAQ,CAAM,CAAC;EAC7C,MAAM+G,qBAAqB,GAAGnH,WAAW,CAAC,MAAM;IAAA,IAAAoH,kBAAA,EAAAC,qBAAA;IAC9C,IAAIvF,aAAa,KAAKP,OAAO,CAAC2B,KAAK,EAAE;MACnC4D,oBAAoB,CAAC,CAAC,CAACxD,IAAI,CAACC,GAAG,IAAI;QACjC,MAAMC,EAAE,GAAG,CAAAD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE+D,KAAK,IAAG9F,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAEF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE+D,KAAK,CAAC,GAAG5D,SAAS;QACnEwD,UAAU,CAAC1D,EAAE,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI1B,aAAa,KAAKP,OAAO,CAACuC,GAAG,EAAE;MACxCiD,aAAa,CAAC,CAAC,CAACzD,IAAI,CAACC,GAAG,IAAI;QAC1B;QACA,MAAMC,EAAE,GAAGD,GAAG,GAAG/B,SAAS,CAACiC,MAAM,CAAC,EAAE,EAAEF,GAAG,CAAC,GAAGG,SAAS;QACtDwD,UAAU,CAAC1D,EAAE,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACqC,IAAI,EAAErC,OAAO,CAACsC,SAAS,CAAC,CAACV,QAAQ,CAACrB,aAAa,CAAC,EAAE;MACpEkF,cAAc,CAAC,CAAC,CAAC1D,IAAI,CAACC,GAAG,IAAI;QAC3B,MAAMC,EAAE,GAAG,CAAAD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEgE,KAAK,IAAG/F,SAAS,CAACiC,MAAM,CAAC,EAAE,EAAEF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEgE,KAAK,CAAC,GAAG7D,SAAS;QACpEwD,UAAU,CAAC1D,EAAE,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACyC,GAAG,EAAEzC,OAAO,CAAC0C,QAAQ,CAAC,CAACd,QAAQ,CAACrB,aAAa,CAAC,EAAE;MAClEmF,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC3D,IAAI,CAAEC,GAAO,IAAK;QAClC;QACA,MAAMC,EAAE,GAAGD,GAAG,IAAIA,GAAG,KAAK,CAAC,GAAG/B,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAEF,GAAG,CAAC,GAAGG,SAAS;QAClEwD,UAAU,CAAC1D,EAAE,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAACjC,OAAO,CAAC6C,GAAG,EAAE7C,OAAO,CAAC8C,QAAQ,CAAC,CAAClB,QAAQ,CAACrB,aAAa,CAAC,EAAE;MAClE;MACAO,aAAa,CAACP,aAAa,EAAE2E,kBAAkB,CAAC,CAACnD,IAAI,CAAEC,GAAO,IAAK;QAAA,IAAAiE,WAAA;QACjE;QACA,IAAIjE,GAAG,aAAHA,GAAG,wBAAAiE,WAAA,GAAHjE,GAAG,CAAG,QAAQ,CAAC,cAAAiE,WAAA,uBAAfA,WAAA,CAAiBhD,OAAO,EAAE;UAAA,IAAAiD,YAAA;UAC5B,MAAM5F,GAAG,GAAG,CAAC;UACb,MAAM6C,OAAO,GAAGjD,eAAe,CAAC8B,GAAG,aAAHA,GAAG,wBAAAkE,YAAA,GAAHlE,GAAG,CAAG,QAAQ,CAAC,cAAAkE,YAAA,uBAAfA,YAAA,CAAiBjD,OAAO,EAAE3C,GAAG,CAAC;UAC9D,MAAM2B,EAAE,GAAGD,GAAG,GAAG/B,SAAS,CAACiC,MAAM,CAAC5B,GAAG,EAAE6C,OAAO,CAAC,GAAGhB,SAAS;UAC3DwD,UAAU,CAAC1D,EAAE,CAAC;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACoD,GAAG,EAAEpD,OAAO,CAACqD,QAAQ,CAAC,CAACzB,QAAQ,CAACrB,aAAa,CAAC,EAAE;MAElE,IAAIQ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAG,QAAQ,CAAC,EAAE;QAC9B,MAAMkB,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAEnB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAG,QAAQ,CAAC,CAAC;QAC1D4E,UAAU,CAAC1D,EAAE,CAAC;MAChB;IACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACsD,IAAI,EAAEtD,OAAO,CAACuD,SAAS,CAAC,CAAC3B,QAAQ,CAACrB,aAAa,CAAC,EAAE;MACpE,IAAIS,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAG,QAAQ,CAAC,EAAE;QAC/B,MAAMiB,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAElB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAG,QAAQ,CAAC,CAAC;QAC3D2E,UAAU,CAAC1D,EAAE,CAAC;MAChB;IACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACwD,GAAG,EAAExD,OAAO,CAACyD,QAAQ,CAAC,CAAC7B,QAAQ,CAACrB,aAAa,CAAC,EAAE;MAClEW,aAAa,CAAC;QAACwC,OAAO,EAAEnD,aAAa;QAAEC,OAAO,EAAE0E;MAAkB,CAAC,CAAC,CAACnD,IAAI,CAAEC,GAAO,IAAK;QAAA,IAAAmE,YAAA;QACrF,IAAInE,GAAG,aAAHA,GAAG,wBAAAmE,YAAA,GAAHnE,GAAG,CAAE4B,MAAM,cAAAuC,YAAA,uBAAXA,YAAA,CAAatC,KAAK,EAAE;UAAA,IAAAuC,YAAA;UACtB,MAAMnE,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAEF,GAAG,aAAHA,GAAG,wBAAAoE,YAAA,GAAHpE,GAAG,CAAE4B,MAAM,cAAAwC,YAAA,uBAAXA,YAAA,CAAavC,KAAK,CAAC;UAClD8B,UAAU,CAAC1D,EAAE,CAAC;QAChB,CAAC,MAAM;UACL0D,UAAU,CAAC,EAAE,CAAC;QAChB;QACA;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAAC3F,OAAO,CAACoE,GAAG,EAAEpE,OAAO,CAACqE,QAAQ,CAAC,CAACzC,QAAQ,CAACrB,aAAa,CAAC,EAAE;MAClE,MAAM8F,WAAW,GAAG,4BAA4B;MAChD;MACA,IAAIlF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAGkF,WAAW,CAAC,EAAE;QAAA,IAAAC,qBAAA;QACjC,MAAMrE,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAEf,cAAc,aAAdA,cAAc,wBAAAmF,qBAAA,GAAdnF,cAAc,CAAGkF,WAAW,CAAC,cAAAC,qBAAA,uBAA7BA,qBAAA,CAA+BrD,OAAO,CAAC;QACtE0C,UAAU,CAAC1D,EAAE,CAAC;MAChB,CAAC,MAAM;QACL,MAAMA,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;QACnCyD,UAAU,CAAC1D,EAAE,CAAC;MAChB;IACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAACuE,GAAG,EAAEvE,OAAO,CAACwE,QAAQ,CAAC,CAAC5C,QAAQ,CAACrB,aAAa,CAAC,IAAI,CAAAJ,MAAM,aAANA,MAAM,wBAAA0F,kBAAA,GAAN1F,MAAM,CAAEsE,SAAS,cAAAoB,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAoBtF,aAAa,CAAC,cAAAuF,qBAAA,uBAAlCA,qBAAA,CAAoCpB,SAAS,MAAK,UAAU,EAAE;MAClI;MACA,IAAItD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEuD,MAAM,EAAE;QAC1B,MAAM1C,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAEd,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEuD,MAAM,CAAC;QACtDgB,UAAU,CAAC1D,EAAE,CAAC;MAChB,CAAC,MAAM;QACL,MAAMA,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;QACnCyD,UAAU,CAAC1D,EAAE,CAAC;MAChB;IACF,CAAC,MAAM,IAAI,CAACjC,OAAO,CAAC4E,QAAQ,EAAE5E,OAAO,CAAC6E,aAAa,EAAE7E,OAAO,CAAC8E,UAAU,EAAE9E,OAAO,CAAC+E,eAAe,CAAC,CAACnD,QAAQ,CAACrB,aAAa,CAAC,EAAE;MAAA,IAAAgG,qBAAA;MACzH;MACA,IAAIlF,eAAe,aAAfA,eAAe,wBAAAkF,qBAAA,GAAflF,eAAe,CAAEsD,MAAM,cAAA4B,qBAAA,uBAAvBA,qBAAA,CAAyBtD,OAAO,EAAE;QAAA,IAAAuD,sBAAA;QACpC,MAAMvE,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAEb,eAAe,aAAfA,eAAe,wBAAAmF,sBAAA,GAAfnF,eAAe,CAAEsD,MAAM,cAAA6B,sBAAA,uBAAvBA,sBAAA,CAAyBvD,OAAO,CAAC;QAChE0C,UAAU,CAAC1D,EAAE,CAAC;MAChB,CAAC,MAAM;QACL,MAAMA,EAAE,GAAGhC,SAAS,CAACiC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;QACnCyD,UAAU,CAAC1D,EAAE,CAAC;MAChB;IACF;EACF,CAAC,EAAE,CAACiD,kBAAkB,EAAE3E,aAAa,EAAEO,aAAa,EAAEC,cAAc,EAAEC,eAAe,EAACG,cAAc,EAAEC,cAAc,EAAEC,eAAe,CAAC,CAAC;EAEvI3C,SAAS,CAAC,MAAM;IACdkH,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACA,qBAAqB,CAAC,CAAC;EAE3B5G,WAAW,CAAC4G,qBAAqB,EAAE,IAAI,GAAG,EAAE,CAAC;EAE7C,OAAOjH,OAAO,CAAC,MAAM;IACnB;IACA,IAAI,CAAC4B,aAAa,EAAE;MAClB,OAAO8E,cAAc;IACvB,CAAC,MAAM,IAAIpC,OAAO,EAAE;MAClB,OAAOA,OAAO;IAChB;IACA,OAAOd,SAAS;EAClB,CAAC,EAAE,CAACc,OAAO,EAAEoC,cAAc,CAAC,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}