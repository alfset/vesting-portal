{"ast":null,"code":"// import { useEffect, useMemo, useState, useCallback } from 'react'\nimport { useMemo, useState, useCallback } from 'react';\nimport nebulas from 'nebulas';\nimport { useDispatch\n// useSelector\n} from 'react-redux';\nimport { nonevmAddress } from '../hooks/actions';\n// import { tryParseAmount3 } from '../../state/swap/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { useTxnsDtilOpen } from '../../state/application/hooks';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { useTranslation } from 'react-i18next';\nimport axios from 'axios';\n// import qs from 'qs'\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport useInterval from '../../hooks/useInterval';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport config from '../../config';\nimport NebPay from 'nebpay.js';\nimport { BigNumber } from 'ethers';\nimport { ChainId } from '../../config/chainConfig/chainId';\nimport { BigAmount } from '../../utils/formatBignumber';\nimport { isAddress } from '../../utils/isAddress';\n\n// const NAS_URL = 'https://testnet.nebulas.io'\nconst NAS_URL = 'https://mainnet.nebulas.io';\nexport const toNasBasic = value => {\n  const baseDecimals = 18;\n  const baseAmount = BigNumber.from(10).pow(BigNumber.from(baseDecimals));\n  const stringAmount = baseAmount.mul(value);\n  return stringAmount.toString();\n};\nexport const isExtWalletInstall = () => {\n  return 'NasExtWallet' in window;\n};\nexport function useNasLogin() {\n  const dispatch = useDispatch();\n  const loginNas = useCallback(async (chainId, type) => {\n    var _window;\n    // console.log(window?.NasExtWallet)\n    if ((_window = window) === null || _window === void 0 ? void 0 : _window.NasExtWallet) {\n      var _window2;\n      (_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.NasExtWallet.getUserAddress(res => {\n        console.log(res);\n        if (res) {\n          dispatch(nonevmAddress({\n            chainId,\n            account: res\n          }));\n        } else {\n          dispatch(nonevmAddress({\n            chainId,\n            account: ''\n          }));\n        }\n      });\n    } else if (!type) {\n      if (confirm('Please install NasExtWallet Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/nasextwallet/gehjkhmhclgnkkhpfamakecfgakkfkco?hl=en');\n      }\n    }\n  }, []);\n  return {\n    loginNas\n  };\n}\nexport const useCurrentAddress = () => {\n  // const { chainId } = useActiveReact()\n  const [address, setAddress] = useState('');\n  const getUserAddress = useCallback(() => {\n    if (isExtWalletInstall() && !address) {\n      // console.log(NasExtWallet)\n      NasExtWallet.getUserAddress(addr => {\n        setAddress(addr);\n        // console.log('user nas address: ' + address + Date.now())\n      });\n    }\n  }, [address]);\n  getUserAddress();\n  return useMemo(() => {\n    return address;\n  }, [address]);\n};\nexport function useNasTokenBalance() {\n  const address = useCurrentAddress();\n  const {\n    chainId\n  } = useActiveReact();\n  const neb = new nebulas.Neb();\n  const getNasTokenBalance = useCallback(async _ref => {\n    let {\n      account,\n      token\n    } = _ref;\n    if (![ChainId.NAS].includes(chainId) || !account || !token) return;\n    return new Promise(async (resolve, reject) => {\n      const useAccount = account ? account : address;\n      try {\n        if (!isAddress(useAccount, chainId) || !token) {\n          resolve('');\n        }\n        const tx = await neb.api.call({\n          chainID: 1,\n          from: useAccount,\n          to: token,\n          value: 0,\n          gasPrice: '20000000000',\n          gasLimit: '8000000',\n          contract: {\n            function: 'balanceOf',\n            args: JSON.stringify([useAccount])\n          }\n        });\n        const result = JSON.parse(tx.result);\n        resolve(result);\n      } catch (err) {\n        console.error(err);\n        reject(err);\n      }\n    });\n  }, [address]);\n  return {\n    getNasTokenBalance\n  };\n}\nexport const useCurrentWNASBalance = token => {\n  const [balance, setBalance] = useState();\n  const {\n    chainId\n  } = useActiveReact();\n  const address = useCurrentAddress();\n  const neb = new nebulas.Neb();\n  neb.setRequest(new nebulas.HttpRequest(NAS_URL));\n  const getWNASBalance = useCallback(async () => {\n    if (![ChainId.NAS].includes(chainId)) return;\n    try {\n      if (!isAddress(address, chainId) || !isAddress(token, chainId)) {\n        return false;\n      }\n      const tx = await neb.api.call({\n        chainID: 1,\n        from: address,\n        to: token,\n        value: 0,\n        gasPrice: '20000000000',\n        gasLimit: '8000000',\n        contract: {\n          function: 'balanceOf',\n          args: JSON.stringify([address])\n        }\n      });\n      const result = JSON.parse(tx.result);\n      setBalance(result);\n      return result;\n    } catch (err) {\n      console.error(err);\n    }\n  }, [address, token]);\n  useInterval(getWNASBalance, 1000 * 10);\n  return {\n    getWNASBalance,\n    balance,\n    // balanceBig: balance ? new Fraction(JSBI.BigInt(balance), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))) : undefined\n    balanceBig: balance ? BigAmount.format(18, balance) : undefined\n  };\n};\nexport const useCurrentNasBalance = () => {\n  const {\n    chainId\n  } = useActiveReact();\n  const address = useCurrentAddress();\n  const getNasBalance = useCallback(async () => {\n    if (![ChainId.NAS].includes(chainId)) return;\n    if (isAddress(address, chainId) && chainId === ChainId.NAS) {\n      var _state$data;\n      // const state = await neb.api.getAccountState(address)\n      const state = await axios.post(\"\".concat(NAS_URL, \"/v1/user/accountstate\"), {\n        address\n      });\n      // console.log(state)\n      return state === null || state === void 0 ? void 0 : (_state$data = state.data) === null || _state$data === void 0 ? void 0 : _state$data.result.balance;\n    }\n    // setBalance('')\n  }, [address, chainId]);\n  return {\n    getNasBalance\n  };\n};\nexport let WrapType = /*#__PURE__*/function (WrapType) {\n  WrapType[WrapType[\"NOT_APPLICABLE\"] = 0] = \"NOT_APPLICABLE\";\n  WrapType[WrapType[\"WRAP\"] = 1] = \"WRAP\";\n  WrapType[WrapType[\"UNWRAP\"] = 2] = \"UNWRAP\";\n  WrapType[WrapType[\"NOCONNECT\"] = 3] = \"NOCONNECT\";\n  return WrapType;\n}({});\n\n// const NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n\nfunction sendNasTx(token, DepositAddress, inputAmount, recipient) {\n  return new Promise(resolve => {\n    const callFunction = 'transfer';\n    const depositAddress = DepositAddress;\n    const callArgs = JSON.stringify([depositAddress, inputAmount, recipient]);\n    const nebPay = new NebPay();\n    nebPay.call(token, 0, callFunction, callArgs, {\n      extension: {\n        openExtension: true\n      },\n      gasPrice: '20000000000',\n      gasLimit: '8000000',\n      // debug: true,\n      listener: (serialNumber, resp) => {\n        try {\n          console.log('bridgeNas resp');\n          console.log(resp);\n          console.log(serialNumber);\n          resolve({\n            hash: resp.txhash\n          });\n        } catch (err) {\n          // reject(err)\n          console.log(err);\n          resolve('');\n        }\n      }\n    });\n  });\n}\nexport function useNebBridgeCallback(_ref2) {\n  let {\n    inputCurrency,\n    typedValue,\n    DepositAddress,\n    chainId,\n    selectChain,\n    recipient,\n    pairid,\n    isLiquidity,\n    destConfig\n  } = _ref2;\n  const {\n    t\n  } = useTranslation();\n  const {\n    balanceBig: balance\n  } = useCurrentWNASBalance(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address);\n  const address = useCurrentAddress();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const addTransaction = useTransactionAdder();\n\n  // console.log(balance)\n  const inputAmount = useMemo(() => inputCurrency ? tryParseAmount3(typedValue, inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals) : undefined, [inputCurrency, typedValue]);\n  return useMemo(() => {\n    if (balance && typedValue && recipient && DepositAddress) {\n      const sufficientBalance = inputCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(typedValue);\n      const inputError = sufficientBalance ? undefined : t('Insufficient', {\n        symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol\n      });\n      return {\n        inputError,\n        wrapType: WrapType.WRAP,\n        execute: typedValue ? async () => {\n          sendNasTx(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address, DepositAddress, inputAmount, recipient).then(txData => {\n            if (txData.hash) {\n              const data = {\n                hash: txData.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: address,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: recipient,\n                symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                version: 'swapin',\n                pairid: pairid\n              };\n              addTransaction(txData, {\n                summary: \"Cross bridge \".concat(typedValue, \" \").concat(config.getBaseCoin(inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol, chainId)),\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: recipient,\n                symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                version: 'swapin',\n                routerToken: '',\n                token: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address,\n                logoUrl: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.logoUrl,\n                isLiquidity: isLiquidity,\n                fromInfo: {\n                  symbol: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.symbol,\n                  name: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.name,\n                  decimals: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.decimals,\n                  address: inputCurrency === null || inputCurrency === void 0 ? void 0 : inputCurrency.address\n                },\n                toInfo: {\n                  symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                  name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                  decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                  address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n                }\n              });\n              recordsTxns(data);\n              onChangeViewDtil(txData === null || txData === void 0 ? void 0 : txData.hash, true);\n            }\n          });\n        } : undefined\n      };\n    }\n    return {\n      inputError: '',\n      wrapType: WrapType.NOCONNECT\n    };\n  }, [balance, typedValue, address, DepositAddress, selectChain, pairid, inputCurrency, chainId, inputAmount, recipient, destConfig]);\n}\nexport function updateNasHash(hash) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(resolve => {\n    fetch(\"https://data.nebulas.io/api/tx/\".concat(hash)).then(res => res.json()).then(json => {\n      console.log(json);\n      if (json) {\n        if (json.msg !== \"success\") {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        } else {\n          data.msg = 'Success';\n          data.info = json;\n        }\n      } else {\n        data.msg = 'Null';\n        data.error = 'Query is empty!';\n      }\n      resolve(data);\n    }).catch(err => {\n      console.log(err.toString());\n      data.error = 'Query is empty!';\n      resolve(data);\n    });\n    // const url = `https://data.nebulas.io/api/tx/${hash}`\n    // axios.get(url).then(res => {\n    //   const {status, data} = res\n    //   if (status === 200) {\n    //     resolve(data)\n    //   } else {\n    //     resolve('')\n    //   }\n    // }).catch((err) => {\n    //   console.log(err)\n    //   resolve('')\n    // })\n  });\n}","map":{"version":3,"names":["useMemo","useState","useCallback","nebulas","useDispatch","nonevmAddress","tryParseAmount3","useTxnsDtilOpen","useActiveReact","useTranslation","axios","useTransactionAdder","useInterval","recordsTxns","config","NebPay","BigNumber","ChainId","BigAmount","isAddress","NAS_URL","toNasBasic","value","baseDecimals","baseAmount","from","pow","stringAmount","mul","toString","isExtWalletInstall","window","useNasLogin","dispatch","loginNas","chainId","type","_window","NasExtWallet","_window2","getUserAddress","res","console","log","account","confirm","open","useCurrentAddress","address","setAddress","addr","useNasTokenBalance","neb","Neb","getNasTokenBalance","_ref","token","NAS","includes","Promise","resolve","reject","useAccount","tx","api","call","chainID","to","gasPrice","gasLimit","contract","function","args","JSON","stringify","result","parse","err","error","useCurrentWNASBalance","balance","setBalance","setRequest","HttpRequest","getWNASBalance","balanceBig","format","undefined","useCurrentNasBalance","getNasBalance","_state$data","state","post","concat","data","WrapType","sendNasTx","DepositAddress","inputAmount","recipient","callFunction","depositAddress","callArgs","nebPay","extension","openExtension","listener","serialNumber","resp","hash","txhash","useNebBridgeCallback","_ref2","inputCurrency","typedValue","selectChain","pairid","isLiquidity","destConfig","t","onChangeViewDtil","addTransaction","decimals","sufficientBalance","Number","toExact","inputError","symbol","wrapType","WRAP","execute","then","txData","formatvalue","version","summary","getBaseCoin","toChainId","toAddress","routerToken","logoUrl","fromInfo","name","toInfo","NOCONNECT","updateNasHash","msg","info","fetch","json","catch"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/nas/index.ts"],"sourcesContent":["// import { useEffect, useMemo, useState, useCallback } from 'react'\nimport {  useMemo, useState, useCallback } from 'react'\nimport nebulas from 'nebulas'\nimport {\n  useDispatch,\n  // useSelector\n} from 'react-redux'\nimport {\n  // AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\n// import { tryParseAmount3 } from '../../state/swap/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {useTxnsDtilOpen} from '../../state/application/hooks'\nimport {useActiveReact} from '../../hooks/useActiveReact'\nimport { useTranslation } from 'react-i18next'\nimport axios from 'axios'\n// import qs from 'qs'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport useInterval from '../../hooks/useInterval'\nimport {recordsTxns} from '../../utils/bridge/register'\n\nimport config from '../../config'\nimport NebPay from 'nebpay.js'\nimport { BigNumber } from 'ethers'\n\nimport { ChainId } from '../../config/chainConfig/chainId'\nimport { BigAmount } from '../../utils/formatBignumber'\nimport { isAddress } from '../../utils/isAddress'\n\n// const NAS_URL = 'https://testnet.nebulas.io'\nconst NAS_URL = 'https://mainnet.nebulas.io'\n\nexport const toNasBasic = (value: string) => {\n  const baseDecimals = 18\n  const baseAmount = BigNumber.from(10).pow(BigNumber.from(baseDecimals))\n\n  const stringAmount = baseAmount.mul(value)\n  return stringAmount.toString()\n}\n\n\nexport const isExtWalletInstall = () => {\n  return 'NasExtWallet' in window\n}\n\nexport function useNasLogin () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginNas = useCallback(async(chainId:any, type?:any) => {\n    // console.log(window?.NasExtWallet)\n    if (window?.NasExtWallet) {\n      window?.NasExtWallet.getUserAddress((res:any) => {\n        console.log(res)\n        if (res) {\n          dispatch(nonevmAddress({chainId, account: res}))\n        } else {\n          dispatch(nonevmAddress({chainId, account: ''}))\n        }\n      })\n    } else if (!type) {\n      if (confirm('Please install NasExtWallet Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/nasextwallet/gehjkhmhclgnkkhpfamakecfgakkfkco?hl=en')\n      }\n    }\n  }, [])\n\n  return {\n    loginNas\n  }\n}\n\nexport const useCurrentAddress = () => {\n  // const { chainId } = useActiveReact()\n  const [address, setAddress] = useState<string>('')\n\n  const getUserAddress = useCallback(() => {\n    if (isExtWalletInstall() && !address) {\n      // console.log(NasExtWallet)\n      NasExtWallet.getUserAddress((addr: string) => {\n        setAddress(addr)\n        // console.log('user nas address: ' + address + Date.now())\n      })\n    }\n  }, [address])\n\n  getUserAddress()\n\n  return useMemo(() => {\n    return address\n  }, [address])\n}\n\nexport function useNasTokenBalance () {\n  const address = useCurrentAddress()\n  const { chainId } = useActiveReact()\n  const neb:any = new nebulas.Neb()\n  const getNasTokenBalance = useCallback(async ({account, token}: any) => {\n    if (![ChainId.NAS].includes(chainId) || !account || !token) return\n    return new Promise(async(resolve, reject) => {\n      const useAccount = account ? account : address\n      try {\n        if (!isAddress(useAccount, chainId) || !token) {\n          resolve('')\n        }\n        const tx = await neb.api.call({\n          chainID: 1,\n          from: useAccount,\n          to: token,\n          value: 0,\n          gasPrice: '20000000000',\n          gasLimit: '8000000',\n          contract: {\n            function: 'balanceOf',\n            args: JSON.stringify([useAccount])\n          }\n        })\n  \n        const result = JSON.parse(tx.result)\n        resolve(result)\n      } catch (err) {\n        console.error(err)\n        reject(err)\n      }\n    })\n  }, [address])\n  return {\n    getNasTokenBalance\n  }\n}\n\nexport const useCurrentWNASBalance = (token?:any) => {\n  const [balance, setBalance] = useState<string>()\n  const { chainId } = useActiveReact()\n  const address = useCurrentAddress()\n  const neb:any = new nebulas.Neb()\n  neb.setRequest(new nebulas.HttpRequest(NAS_URL))\n\n  const getWNASBalance = useCallback(async () => {\n    if (![ChainId.NAS].includes(chainId)) return\n    try {\n      if (!isAddress(address, chainId) || !isAddress(token, chainId)) {\n        return false\n      }\n      const tx = await neb.api.call({\n        chainID: 1,\n        from: address,\n        to: token,\n        value: 0,\n        gasPrice: '20000000000',\n        gasLimit: '8000000',\n        contract: {\n          function: 'balanceOf',\n          args: JSON.stringify([address])\n        }\n      })\n\n      const result = JSON.parse(tx.result)\n      setBalance(result)\n      return result\n    } catch (err) {\n      console.error(err)\n    }\n  }, [address, token])\n\n  useInterval(getWNASBalance, 1000 * 10)\n\n  return {\n    getWNASBalance,\n    balance,\n    // balanceBig: balance ? new Fraction(JSBI.BigInt(balance), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))) : undefined\n    balanceBig: balance ? BigAmount.format(18, balance) : undefined\n  }\n}\n\nexport const useCurrentNasBalance = () => {\n  const { chainId } = useActiveReact()\n  const address = useCurrentAddress()\n  \n  const getNasBalance = useCallback(async () => {\n    if (![ChainId.NAS].includes(chainId)) return\n    if (isAddress(address, chainId) && chainId === ChainId.NAS) {\n      // const state = await neb.api.getAccountState(address)\n      const state:any = await axios.post(`${NAS_URL}/v1/user/accountstate`, {address})\n      // console.log(state)\n      return state?.data?.result.balance\n    }\n    // setBalance('')\n  }, [address, chainId])\n\n  return {\n    getNasBalance,\n  }\n}\n\ninterface UseBridgeCallbackInterface {\n  inputCurrency: any | undefined\n  typedValue: string | undefined\n  DepositAddress: string | undefined\n  chainId: string\n  selectChain: string\n  recipient: string\n  pairid: string\n  isLiquidity:any\n  destConfig:any\n}\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n  NOCONNECT\n}\n\n// const NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n\nfunction sendNasTx (token:any, DepositAddress:any,inputAmount:any,recipient:any) {\n  return new Promise(resolve => {\n    const callFunction = 'transfer'\n    const depositAddress = DepositAddress\n    const callArgs = JSON.stringify([depositAddress, inputAmount, recipient])\n    const nebPay = new NebPay()\n    nebPay.call(token, 0, callFunction, callArgs, {\n      extension: {\n        openExtension: true\n      },\n      gasPrice: '20000000000',\n      gasLimit: '8000000',\n      // debug: true,\n      listener: (serialNumber: string, resp: any) => {\n        try {\n          console.log('bridgeNas resp')\n          console.log(resp)\n          console.log(serialNumber)\n          resolve({hash: resp.txhash})\n        } catch (err) {\n          // reject(err)\n          console.log(err)\n          resolve('')\n        }\n      }\n    })\n  })\n}\n\nexport function useNebBridgeCallback({\n  inputCurrency,\n  typedValue,\n  DepositAddress,\n  chainId,\n  selectChain,\n  recipient,\n  pairid,\n  isLiquidity,\n  destConfig\n}: UseBridgeCallbackInterface): {\n  wrapType?: WrapType\n  inputError?: string\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { t } = useTranslation()\n  const { balanceBig:balance } = useCurrentWNASBalance(inputCurrency?.address)\n  const address = useCurrentAddress()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const addTransaction = useTransactionAdder()\n\n  // console.log(balance)\n  const inputAmount = useMemo(() => inputCurrency ? tryParseAmount3(typedValue, inputCurrency?.decimals) : undefined, [inputCurrency, typedValue])\n  return useMemo(() => {\n    if (balance && typedValue && recipient && DepositAddress) {\n      const sufficientBalance = inputCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n\n      const inputError = sufficientBalance ? undefined : t('Insufficient', { symbol: inputCurrency?.symbol })\n\n      return {\n        inputError,\n        wrapType: WrapType.WRAP,\n        execute: typedValue\n          ? async () => {\n            sendNasTx(inputCurrency?.address,DepositAddress,inputAmount, recipient).then((txData:any) => {\n              if (txData.hash) {\n                const data:any = {\n                  hash: txData.hash,\n                  chainId: chainId,\n                  selectChain: selectChain,\n                  account: address,\n                  value: inputAmount,\n                  formatvalue: typedValue,\n                  to: recipient,\n                  symbol: inputCurrency?.symbol,\n                  version: 'swapin',\n                  pairid: pairid,\n                }\n                addTransaction(txData, {\n                  summary: `Cross bridge ${typedValue} ${config.getBaseCoin(inputCurrency?.symbol, chainId)}`,\n                  value: typedValue,\n                  toChainId: selectChain,\n                  toAddress: recipient,\n                  symbol: inputCurrency?.symbol,\n                  version: 'swapin',\n                  routerToken: '',\n                  token: inputCurrency?.address,\n                  logoUrl: inputCurrency?.logoUrl,\n                  isLiquidity: isLiquidity,\n                  fromInfo: {\n                    symbol: inputCurrency?.symbol,\n                    name: inputCurrency?.name,\n                    decimals: inputCurrency?.decimals,\n                    address: inputCurrency?.address,\n                  },\n                  toInfo: {\n                    symbol: destConfig?.symbol,\n                    name: destConfig?.name,\n                    decimals: destConfig?.decimals,\n                    address: destConfig?.address,\n                  },\n                })\n                recordsTxns(data)\n                onChangeViewDtil(txData?.hash, true)\n              }\n            })\n          }\n          : undefined\n      }\n    }\n\n    return {\n      inputError: '',\n      wrapType: WrapType.NOCONNECT\n    }\n  }, [balance, typedValue, address, DepositAddress, selectChain, pairid, inputCurrency, chainId,inputAmount, recipient, destConfig])\n}\n\n\nexport function updateNasHash (hash:any): Promise<any> {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    fetch(`https://data.nebulas.io/api/tx/${hash}`).then(res => res.json()).then(json => {\n      console.log(json)\n      if (json) {\n        if (json.msg !== \"success\") {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else {\n          data.msg = 'Success'\n          data.info = json\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      console.log(err.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    })\n    // const url = `https://data.nebulas.io/api/tx/${hash}`\n    // axios.get(url).then(res => {\n    //   const {status, data} = res\n    //   if (status === 200) {\n    //     resolve(data)\n    //   } else {\n    //     resolve('')\n    //   }\n    // }).catch((err) => {\n    //   console.log(err)\n    //   resolve('')\n    // })\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}