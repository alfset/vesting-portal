{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = includeIoMixin;\nvar _extend = require('lodash/extend');\nvar _extend2 = _interopRequireDefault(_extend);\nvar _isFunction = require('lodash/isFunction');\nvar _isFunction2 = _interopRequireDefault(_isFunction);\nvar _cursor = require('./cursor');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// TODO: build a system to grow a buffer as we write to it\nvar BUFFER_SIZE = Math.pow(2, 16);\nvar staticMethods = {\n  toXDR: function toXDR(val) {\n    var cursor = new _cursor.Cursor(BUFFER_SIZE);\n    this.write(val, cursor);\n    var bytesWritten = cursor.tell();\n    cursor.rewind();\n    return cursor.slice(bytesWritten).buffer();\n  },\n  fromXDR: function fromXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n    var buffer = void 0;\n    switch (format) {\n      case 'raw':\n        buffer = input;\n        break;\n      case 'hex':\n        buffer = Buffer.from(input, 'hex');\n        break;\n      case 'base64':\n        buffer = Buffer.from(input, 'base64');\n        break;\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n    var cursor = new _cursor.Cursor(buffer);\n    var result = this.read(cursor);\n\n    // TODO: error out if the entire buffer isn't consumed\n\n    return result;\n  },\n  validateXDR: function validateXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n};\nvar instanceMethods = {\n  toXDR: function toXDR() {\n    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'raw';\n    var buffer = this.constructor.toXDR(this);\n    switch (format) {\n      case 'raw':\n        return buffer;\n      case 'hex':\n        return buffer.toString('hex');\n      case 'base64':\n        return buffer.toString('base64');\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n  }\n};\nfunction includeIoMixin(obj) {\n  (0, _extend2.default)(obj, staticMethods);\n  if ((0, _isFunction2.default)(obj)) {\n    (0, _extend2.default)(obj.prototype, instanceMethods);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","includeIoMixin","_extend","require","_extend2","_interopRequireDefault","_isFunction","_isFunction2","_cursor","obj","__esModule","BUFFER_SIZE","Math","pow","staticMethods","toXDR","val","cursor","Cursor","write","bytesWritten","tell","rewind","slice","buffer","fromXDR","input","format","arguments","length","undefined","Buffer","from","Error","result","read","validateXDR","e","instanceMethods","constructor","toString","prototype"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/js-xdr/lib/io-mixin.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = includeIoMixin;\n\nvar _extend = require('lodash/extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _cursor = require('./cursor');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: build a system to grow a buffer as we write to it\nvar BUFFER_SIZE = Math.pow(2, 16);\n\nvar staticMethods = {\n  toXDR: function toXDR(val) {\n    var cursor = new _cursor.Cursor(BUFFER_SIZE);\n    this.write(val, cursor);\n    var bytesWritten = cursor.tell();\n    cursor.rewind();\n\n    return cursor.slice(bytesWritten).buffer();\n  },\n  fromXDR: function fromXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n\n    var buffer = void 0;\n    switch (format) {\n      case 'raw':\n        buffer = input;\n        break;\n      case 'hex':\n        buffer = Buffer.from(input, 'hex');\n        break;\n      case 'base64':\n        buffer = Buffer.from(input, 'base64');\n        break;\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n\n    var cursor = new _cursor.Cursor(buffer);\n    var result = this.read(cursor);\n\n    // TODO: error out if the entire buffer isn't consumed\n\n    return result;\n  },\n  validateXDR: function validateXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n};\n\nvar instanceMethods = {\n  toXDR: function toXDR() {\n    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'raw';\n\n    var buffer = this.constructor.toXDR(this);\n    switch (format) {\n      case 'raw':\n        return buffer;\n      case 'hex':\n        return buffer.toString('hex');\n      case 'base64':\n        return buffer.toString('base64');\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n  }\n};\n\nfunction includeIoMixin(obj) {\n  (0, _extend2.default)(obj, staticMethods);\n\n  if ((0, _isFunction2.default)(obj)) {\n    (0, _extend2.default)(obj.prototype, instanceMethods);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}