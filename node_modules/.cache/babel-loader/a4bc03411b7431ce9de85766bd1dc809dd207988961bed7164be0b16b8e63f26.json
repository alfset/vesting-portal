{"ast":null,"code":"import{useEffect,useState}from'react';// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce(value,delay){const[debouncedValue,setDebouncedValue]=useState(value);useEffect(()=>{// 延迟后更新被取消的值\nconst handler=setTimeout(()=>{setDebouncedValue(value);},delay);// 如果值更改，则取消超时(延迟更改或卸载时也是如此)\n// 这就是我们如何防止当值在延迟时间内发生变化时，debdoff值的更新。超时被清除并重新启动。\nreturn()=>{clearTimeout(handler);};},[value,delay]);return debouncedValue;}","map":{"version":3,"names":["useEffect","useState","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useDebounce.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // 延迟后更新被取消的值\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // 如果值更改，则取消超时(延迟更改或卸载时也是如此)\n    // 这就是我们如何防止当值在延迟时间内发生变化时，debdoff值的更新。超时被清除并重新启动。\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C;AACA,cAAe,SAAS,CAAAC,WAAWA,CAAIC,KAAQ,CAAEC,KAAa,CAAK,CACjE,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGL,QAAQ,CAAIE,KAAK,CAAC,CAE9DH,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAO,OAAO,CAAGC,UAAU,CAAC,IAAM,CAC/BF,iBAAiB,CAACH,KAAK,CAAC,CAC1B,CAAC,CAAEC,KAAK,CAAC,CAET;AACA;AACA,MAAO,IAAM,CACXK,YAAY,CAACF,OAAO,CAAC,CACvB,CAAC,CACH,CAAC,CAAE,CAACJ,KAAK,CAAEC,KAAK,CAAC,CAAC,CAElB,MAAO,CAAAC,cAAc,CACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}