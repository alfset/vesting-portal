{"ast":null,"code":"import{chainInfo}from'./chainConfig';import{ENV_NODE_CONFIG,INIT_NODE,USE_VERSION,bridgeApi,scanApi,multiAridgeApi,explorer,env,version,controlConfig}from'./constant';import{getNetwork,getInitBridgeChain}from'./tools/getUrlParams';const ENV=getNetwork(ENV_NODE_CONFIG,INIT_NODE);const netConfig=chainInfo[ENV]?chainInfo[ENV]:chainInfo[INIT_NODE];const INITBRIDGE=getInitBridgeChain(netConfig.bridgeInitChain,netConfig.bridgeInitToken);const config={...netConfig,...INITBRIDGE,env,version,ENV_NODE_CONFIG,chainInfo,bridgeApi,scanApi,multiAridgeApi,explorer,oldAppName:'DeltaSwap',appName:'DeltaSwap',baseCurrency:'PLQ',localDataDeadline:1624700942896,farmUrl:'#/',explorerUrl:explorer,isStopSystem:0,getBaseCoin(value,chainId,type,name){// console.log(value)\n// console.log(chainId)\nif(value&&(value==='BASECURRENCY'||value==='W'+this.getCurChainInfo(chainId).symbol&&this.getCurChainInfo(chainId).nativeToken)){if(type){// return (this.getCurChainInfo(chainId).symbolName ?? this.getCurChainInfo(chainId).name) + '(Router)'\nreturn name;}else{// return this.getCurChainInfo(chainId).symbol\nreturn value;}}else{if(type){// if (value === this.getCurChainInfo(chainId).symbol) {\n//   return name + '(Bridge)'\n// } else {\n//   return name\n// }\nreturn name;}else{return value;}}},getCurConfigInfo(version){version=version?version:USE_VERSION;return controlConfig[version];},getCurChainInfo(chainID){// console.log(chainID)\nif(chainID&&chainInfo[chainID]){return chainInfo[chainID];}else{return netConfig;}}};export default config;","map":{"version":3,"names":["chainInfo","ENV_NODE_CONFIG","INIT_NODE","USE_VERSION","bridgeApi","scanApi","multiAridgeApi","explorer","env","version","controlConfig","getNetwork","getInitBridgeChain","ENV","netConfig","INITBRIDGE","bridgeInitChain","bridgeInitToken","config","oldAppName","appName","baseCurrency","localDataDeadline","farmUrl","explorerUrl","isStopSystem","getBaseCoin","value","chainId","type","name","getCurChainInfo","symbol","nativeToken","getCurConfigInfo","chainID"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/config/index.ts"],"sourcesContent":["import {chainInfo} from './chainConfig'\nimport {\n  ENV_NODE_CONFIG,\n  INIT_NODE,\n  USE_VERSION,\n  bridgeApi,\n  scanApi,\n  multiAridgeApi,\n  explorer,\n  env,\n  version,\n  controlConfig\n} from './constant'\n\nimport {getNetwork, getInitBridgeChain} from './tools/getUrlParams'\n\n \ninterface ConFig {\n  [key: string]: any\n}\n\nconst ENV = getNetwork(ENV_NODE_CONFIG, INIT_NODE)\nconst netConfig:ConFig = chainInfo[ENV] ? chainInfo[ENV] : chainInfo[INIT_NODE]\n\nconst INITBRIDGE = getInitBridgeChain(netConfig.bridgeInitChain, netConfig.bridgeInitToken)\n\nconst config: ConFig = {\n  ...netConfig,\n  ...INITBRIDGE,\n  env,\n  version,\n  ENV_NODE_CONFIG,\n  chainInfo,\n  bridgeApi,\n  scanApi,\n  multiAridgeApi,\n  explorer,\n  oldAppName: 'DeltaSwap',\n  appName: 'DeltaSwap',\n  baseCurrency: 'PLQ',\n  localDataDeadline: 1624700942896,\n  farmUrl: '#/',\n  explorerUrl: explorer,\n  isStopSystem: 0,\n  getBaseCoin (value:any, chainId:any, type?: number, name?: string) {\n    // console.log(value)\n    // console.log(chainId)\n    if (\n      value\n      && (\n        value === 'BASECURRENCY'\n        || (value === 'W' + this.getCurChainInfo(chainId).symbol && this.getCurChainInfo(chainId).nativeToken)\n      )\n    ) {\n      if (type) {\n        // return (this.getCurChainInfo(chainId).symbolName ?? this.getCurChainInfo(chainId).name) + '(Router)'\n        return name\n      } else {\n        // return this.getCurChainInfo(chainId).symbol\n        return value\n      }\n    } else {\n      if (type) {\n        // if (value === this.getCurChainInfo(chainId).symbol) {\n        //   return name + '(Bridge)'\n        // } else {\n        //   return name\n        // }\n        return name\n      } else {\n        return value\n      }\n    }\n  },\n  getCurConfigInfo (version?:any) {\n    version = version ? version : USE_VERSION\n    return controlConfig[version]\n  },\n  getCurChainInfo (chainID:any) {\n    // console.log(chainID)\n    if (chainID && chainInfo[chainID]) {\n      return chainInfo[chainID]\n    } else {\n      return netConfig\n    }\n  }\n}\nexport default config\n"],"mappings":"AAAA,OAAQA,SAAS,KAAO,eAAe,CACvC,OACEC,eAAe,CACfC,SAAS,CACTC,WAAW,CACXC,SAAS,CACTC,OAAO,CACPC,cAAc,CACdC,QAAQ,CACRC,GAAG,CACHC,OAAO,CACPC,aAAa,KACR,YAAY,CAEnB,OAAQC,UAAU,CAAEC,kBAAkB,KAAO,sBAAsB,CAOnE,KAAM,CAAAC,GAAG,CAAGF,UAAU,CAACV,eAAe,CAAEC,SAAS,CAAC,CAClD,KAAM,CAAAY,SAAgB,CAAGd,SAAS,CAACa,GAAG,CAAC,CAAGb,SAAS,CAACa,GAAG,CAAC,CAAGb,SAAS,CAACE,SAAS,CAAC,CAE/E,KAAM,CAAAa,UAAU,CAAGH,kBAAkB,CAACE,SAAS,CAACE,eAAe,CAAEF,SAAS,CAACG,eAAe,CAAC,CAE3F,KAAM,CAAAC,MAAc,CAAG,CACrB,GAAGJ,SAAS,CACZ,GAAGC,UAAU,CACbP,GAAG,CACHC,OAAO,CACPR,eAAe,CACfD,SAAS,CACTI,SAAS,CACTC,OAAO,CACPC,cAAc,CACdC,QAAQ,CACRY,UAAU,CAAE,WAAW,CACvBC,OAAO,CAAE,WAAW,CACpBC,YAAY,CAAE,KAAK,CACnBC,iBAAiB,CAAE,aAAa,CAChCC,OAAO,CAAE,IAAI,CACbC,WAAW,CAAEjB,QAAQ,CACrBkB,YAAY,CAAE,CAAC,CACfC,WAAWA,CAAEC,KAAS,CAAEC,OAAW,CAAEC,IAAa,CAAEC,IAAa,CAAE,CACjE;AACA;AACA,GACEH,KAAK,GAEHA,KAAK,GAAK,cAAc,EACpBA,KAAK,GAAK,GAAG,CAAG,IAAI,CAACI,eAAe,CAACH,OAAO,CAAC,CAACI,MAAM,EAAI,IAAI,CAACD,eAAe,CAACH,OAAO,CAAC,CAACK,WAAY,CACvG,CACD,CACA,GAAIJ,IAAI,CAAE,CACR;AACA,MAAO,CAAAC,IAAI,CACb,CAAC,IAAM,CACL;AACA,MAAO,CAAAH,KAAK,CACd,CACF,CAAC,IAAM,CACL,GAAIE,IAAI,CAAE,CACR;AACA;AACA;AACA;AACA;AACA,MAAO,CAAAC,IAAI,CACb,CAAC,IAAM,CACL,MAAO,CAAAH,KAAK,CACd,CACF,CACF,CAAC,CACDO,gBAAgBA,CAAEzB,OAAY,CAAE,CAC9BA,OAAO,CAAGA,OAAO,CAAGA,OAAO,CAAGN,WAAW,CACzC,MAAO,CAAAO,aAAa,CAACD,OAAO,CAAC,CAC/B,CAAC,CACDsB,eAAeA,CAAEI,OAAW,CAAE,CAC5B;AACA,GAAIA,OAAO,EAAInC,SAAS,CAACmC,OAAO,CAAC,CAAE,CACjC,MAAO,CAAAnC,SAAS,CAACmC,OAAO,CAAC,CAC3B,CAAC,IAAM,CACL,MAAO,CAAArB,SAAS,CAClB,CACF,CACF,CAAC,CACD,cAAe,CAAAI,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}