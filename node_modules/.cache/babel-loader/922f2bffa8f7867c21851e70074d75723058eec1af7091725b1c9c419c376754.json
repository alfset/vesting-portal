{"ast":null,"code":"import { w, TOKENLIST\n// isSupportIndexedDB\n} from './config';\nconst TOKENPATH = 'token-list-table';\nconst POOLPATH = 'pool-list-table';\nconst NFTPATH = 'nft-list-table';\nconst TOKENKEY = 'chainId';\n\n// const READWRITE = 'versionchange'\nconst READWRITE = 'readwrite';\nlet db = {};\n// let objectStore: any = {}\nconst tokenlistReauest = w.indexedDB.open(TOKENLIST, 11);\n// console.log(tokenlistReauest)\ntokenlistReauest.onerror = function (event) {\n  console.log(event);\n  console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n};\ntokenlistReauest.onsuccess = function (event) {\n  // console.log(event)\n  db = event.target.result;\n};\ntokenlistReauest.onupgradeneeded = function (event) {\n  var _db;\n  db = event.target.result;\n  // console.log(db)\n  // console.log(db.objecttables)\n  // console.log(db.objectStoreNames)\n  const dbTableList = {};\n  // console.log(db.objecttables.contains(TOKENPATH))\n  if ((_db = db) === null || _db === void 0 ? void 0 : _db.objectStoreNames) {\n    for (const key in (_db2 = db) === null || _db2 === void 0 ? void 0 : _db2.objectStoreNames) {\n      var _db2, _db3;\n      const val = (_db3 = db) === null || _db3 === void 0 ? void 0 : _db3.objectStoreNames[key];\n      // console.log(key)\n      if (val === TOKENPATH) {\n        dbTableList[TOKENPATH] = 1;\n      }\n      if (val === POOLPATH) {\n        dbTableList[POOLPATH] = 1;\n      }\n      if (val === NFTPATH) {\n        dbTableList[NFTPATH] = 1;\n      }\n    }\n  }\n  if (!dbTableList[TOKENPATH]) {\n    //判断数据库中是否已经存在该名称的数据表\n    db.createObjectStore(TOKENPATH, {\n      keyPath: TOKENKEY\n    }).createIndex(TOKENKEY, TOKENKEY, {\n      unique: true\n    });\n  }\n  if (!dbTableList[POOLPATH]) {\n    //判断数据库中是否已经存在该名称的数据表\n    db.createObjectStore(POOLPATH, {\n      keyPath: TOKENKEY\n    }).createIndex(TOKENKEY, TOKENKEY, {\n      unique: true\n    });\n  }\n  if (!dbTableList[NFTPATH]) {\n    //判断数据库中是否已经存在该名称的数据表\n    db.createObjectStore(NFTPATH, {\n      keyPath: TOKENKEY\n    }).createIndex(TOKENKEY, TOKENKEY, {\n      unique: true\n    });\n  }\n  // if (!db.objecttables || !db.objecttables.contains(TOKENPATH)) { //判断数据库中是否已经存在该名称的数据表\n  //   db.createObjectStore(TOKENPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  // }\n  // if (!db.objecttables || !db.objecttables.contains(POOLPATH)) { //判断数据库中是否已经存在该名称的数据表\n  //   db.createObjectStore(POOLPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  // }\n  // if (!db.objecttables || !db.objecttables.contains(NFTPATH)) { //判断数据库中是否已经存在该名称的数据表\n  //   db.createObjectStore(NFTPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  // }\n};\n\ndb.onerror = function (event) {\n  console.error(\"Database error: \" + event.target.errorCode);\n};\ntokenlistReauest.addEventListener('success', event => {\n  const db = event.target.result;\n  db.addEventListener('versionchange', event => {\n    console.log(event);\n    console.log('The version of this database has changed');\n  });\n});\nfunction getDBdata(path, key) {\n  return new Promise(resolve => {\n    var _db4;\n    if (!key || !((_db4 = db) === null || _db4 === void 0 ? void 0 : _db4.transaction)) {\n      resolve('LOADING');\n      return;\n    }\n    try {\n      // const transaction = db.transaction([path], \"readwrite\")\n      const transaction = db.transaction([TOKENPATH, POOLPATH, NFTPATH], READWRITE);\n      const objectStore = transaction.objectStore(path);\n      const request = objectStore.get(key.toString());\n      request.onerror = function (event) {\n        console.log(event);\n        // Handle errors!\n        resolve('ERROR');\n      };\n      request.onsuccess = function (event) {\n        // Do something with the request.result!\n        const data = event.target.result;\n        resolve(data);\n      };\n    } catch (error) {\n      console.log(path);\n      console.log(error);\n      resolve('ERROR');\n    }\n  });\n}\nfunction setDBdata(path, data) {\n  return new Promise(resolve => {\n    var _db5;\n    if (!((_db5 = db) === null || _db5 === void 0 ? void 0 : _db5.transaction)) {\n      var _db6;\n      console.log(333);\n      // console.log(key)\n      console.log(db);\n      console.log((_db6 = db) === null || _db6 === void 0 ? void 0 : _db6.transaction);\n      resolve('LOADING');\n      return;\n    }\n    const request = db.transaction([TOKENPATH, POOLPATH, NFTPATH], READWRITE) //readwrite表示有读写权限\n    .objectStore(path)\n    // .add(data) //新增数据\n    .put(data); //更新数据\n    request.onsuccess = function () {\n      // console.log(event);\n      console.log(path + '数据写入成功');\n      resolve('Success');\n    };\n    request.onerror = function (event) {\n      console.log(event);\n      console.log(path + '数据写入失败');\n      resolve('Error');\n    };\n  });\n}\nexport function getTokenlist(chainId) {\n  return new Promise(resolve => {\n    getDBdata(TOKENPATH, chainId).then(res => {\n      // console.log(res)\n      resolve(res);\n    });\n  });\n}\nexport function setTokenlist(chainId, tokenList, version) {\n  const data = {\n    chainId: chainId.toString(),\n    tokenList,\n    version,\n    timestamp: Date.now()\n  };\n  setDBdata(TOKENPATH, data);\n}\nexport function getPoollist(chainId) {\n  return new Promise(resolve => {\n    // console.log(chainId)\n    getDBdata(POOLPATH, chainId).then(res => {\n      resolve(res);\n    });\n  });\n}\nexport function setPoollist(chainId, tokenList, version) {\n  const data = {\n    chainId: chainId.toString(),\n    tokenList,\n    version,\n    timestamp: Date.now()\n  };\n  setDBdata(POOLPATH, data);\n}\nexport function getNftlist(chainId) {\n  return new Promise(resolve => {\n    // console.log(chainId)\n    getDBdata(NFTPATH, chainId).then(res => {\n      resolve(res);\n    });\n  });\n}\nexport function setNftlist(chainId, tokenList, version) {\n  const data = {\n    chainId: chainId.toString(),\n    tokenList,\n    version,\n    timestamp: Date.now()\n  };\n  setDBdata(NFTPATH, data);\n}","map":{"version":3,"names":["w","TOKENLIST","TOKENPATH","POOLPATH","NFTPATH","TOKENKEY","READWRITE","db","tokenlistReauest","indexedDB","open","onerror","event","console","log","onsuccess","target","result","onupgradeneeded","_db","dbTableList","objectStoreNames","key","_db2","_db3","val","createObjectStore","keyPath","createIndex","unique","error","errorCode","addEventListener","getDBdata","path","Promise","resolve","_db4","transaction","objectStore","request","get","toString","data","setDBdata","_db5","_db6","put","getTokenlist","chainId","then","res","setTokenlist","tokenList","version","timestamp","Date","now","getPoollist","setPoollist","getNftlist","setNftlist"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/indexedDB/tokenlist.ts"],"sourcesContent":["import {\n  w,\n  TOKENLIST\n  // isSupportIndexedDB\n} from './config'\n\nconst TOKENPATH = 'token-list-table'\nconst POOLPATH = 'pool-list-table'\nconst NFTPATH = 'nft-list-table'\nconst TOKENKEY = 'chainId'\n\n// const READWRITE = 'versionchange'\nconst READWRITE = 'readwrite'\n\n\nlet db:any = {}\n// let objectStore: any = {}\nconst tokenlistReauest = w.indexedDB.open(TOKENLIST, 11);\n// console.log(tokenlistReauest)\ntokenlistReauest.onerror = function(event:any) {\n  console.log(event)\n  console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n};\ntokenlistReauest.onsuccess = function(event:any) {\n  // console.log(event)\n  db = event.target.result;\n};\n\ntokenlistReauest.onupgradeneeded = function (event:any) {\n  db = event.target.result;\n  // console.log(db)\n  // console.log(db.objecttables)\n  // console.log(db.objectStoreNames)\n  const dbTableList:any = {}\n  // console.log(db.objecttables.contains(TOKENPATH))\n  if (db?.objectStoreNames) {\n    for (const key in db?.objectStoreNames) {\n      const val = db?.objectStoreNames[key]\n      // console.log(key)\n      if (val === TOKENPATH) {\n        dbTableList[TOKENPATH] = 1\n      }\n      if (val === POOLPATH) {\n        dbTableList[POOLPATH] = 1\n      }\n      if (val === NFTPATH) {\n        dbTableList[NFTPATH] = 1\n      }\n    }\n  }\n  if (!dbTableList[TOKENPATH]) { //判断数据库中是否已经存在该名称的数据表\n    db.createObjectStore(TOKENPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  }\n  if (!dbTableList[POOLPATH]) { //判断数据库中是否已经存在该名称的数据表\n    db.createObjectStore(POOLPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  }\n  if (!dbTableList[NFTPATH]) { //判断数据库中是否已经存在该名称的数据表\n    db.createObjectStore(NFTPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  }\n  // if (!db.objecttables || !db.objecttables.contains(TOKENPATH)) { //判断数据库中是否已经存在该名称的数据表\n  //   db.createObjectStore(TOKENPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  // }\n  // if (!db.objecttables || !db.objecttables.contains(POOLPATH)) { //判断数据库中是否已经存在该名称的数据表\n  //   db.createObjectStore(POOLPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  // }\n  // if (!db.objecttables || !db.objecttables.contains(NFTPATH)) { //判断数据库中是否已经存在该名称的数据表\n  //   db.createObjectStore(NFTPATH, { keyPath: TOKENKEY }).createIndex(TOKENKEY, TOKENKEY, { unique: true });\n  // }\n}\ndb.onerror = function(event:any) {\n  console.error(\"Database error: \" + event.target.errorCode);\n}\n\ntokenlistReauest.addEventListener('success', (event:any) => {\n  const db = event.target.result;\n  db.addEventListener('versionchange', (event:any) => {\n    console.log(event)\n    console.log('The version of this database has changed');\n  });\n});\n\nfunction getDBdata (path:any, key:any) {\n  return new Promise(resolve => {\n    if (!key || !db?.transaction) {\n      resolve('LOADING')\n      return\n    }\n    try {\n      // const transaction = db.transaction([path], \"readwrite\")\n      const transaction = db.transaction([TOKENPATH, POOLPATH, NFTPATH], READWRITE)\n      const objectStore = transaction.objectStore(path);\n      const request = objectStore.get(key.toString());\n      request.onerror = function(event:any) {\n        console.log(event)\n        // Handle errors!\n        resolve('ERROR')\n      };\n      request.onsuccess = function(event:any) {\n        // Do something with the request.result!\n        const data = event.target.result\n        resolve(data)\n      }\n    } catch (error) {\n      console.log(path)\n      console.log(error)\n      resolve('ERROR')\n    }\n  })\n}\n\nfunction setDBdata (path:any, data:any) {\n  \n  return new Promise(resolve => {\n    if (!db?.transaction) {\n      console.log(333)\n      // console.log(key)\n      console.log(db)\n      console.log(db?.transaction)\n      resolve('LOADING')\n      return\n    }\n    const request = db.transaction([TOKENPATH, POOLPATH, NFTPATH], READWRITE) //readwrite表示有读写权限\n      .objectStore(path)\n      // .add(data) //新增数据\n      .put(data) //更新数据\n    request.onsuccess = function () {\n      // console.log(event);\n      console.log(path + '数据写入成功');\n      resolve('Success')\n    };\n    request.onerror = function (event:any) {\n      console.log(event);\n      console.log(path + '数据写入失败');\n      resolve('Error')\n    }\n  })\n}\n\nexport function getTokenlist (chainId:any) {\n  return new Promise(resolve => {\n    getDBdata(TOKENPATH, chainId).then(res => {\n      // console.log(res)\n      resolve(res)\n    })\n  })\n}\nexport function setTokenlist (chainId:any, tokenList:any, version:any) {\n  const data = {\n    chainId: chainId.toString(),\n    tokenList,\n    version,\n    timestamp: Date.now()\n  }\n  setDBdata(TOKENPATH, data)\n}\n\nexport function getPoollist (chainId:any) {\n  return new Promise(resolve => {\n    // console.log(chainId)\n    getDBdata(POOLPATH, chainId).then(res => {\n      resolve(res)\n    })\n  })\n}\nexport function setPoollist (chainId:any, tokenList:any, version:any) {\n  const data = {\n    chainId: chainId.toString(),\n    tokenList,\n    version,\n    timestamp: Date.now()\n  }\n  setDBdata(POOLPATH, data)\n}\n\nexport function getNftlist (chainId:any) {\n  return new Promise(resolve => {\n    // console.log(chainId)\n    getDBdata(NFTPATH, chainId).then(res => {\n      resolve(res)\n    })\n  })\n}\nexport function setNftlist (chainId:any, tokenList:any, version:any) {\n  const data = {\n    chainId: chainId.toString(),\n    tokenList,\n    version,\n    timestamp: Date.now()\n  }\n  setDBdata(NFTPATH, data)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}