{"ast":null,"code":"import config from '../../config';\nimport multicallABI from '../../constants/multicall/abi.json';\n// import ERC20_INTERFACE from '../../constants/abis/erc20'\nconst TIMEOUT = 'timeout';\nconst Web3 = require('web3');\nexport function getWeb3(rpc, provider) {\n  rpc = rpc ? rpc : '';\n  if (provider) {\n    // console.log(library)\n    const wFn = new Web3(provider);\n    // console.log(wFn)\n    return wFn;\n  } else {\n    // console.log(rpc)\n    const wFn = new Web3(new Web3.providers.HttpProvider(rpc));\n    return wFn;\n  }\n}\nexport function getContract(_ref) {\n  let {\n    rpc,\n    abi,\n    provider\n  } = _ref;\n  const web3 = getWeb3(rpc, provider);\n  abi = abi ? abi : multicallABI;\n  return new web3.eth.Contract(abi);\n}\nfunction timeoutWeb3() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(TIMEOUT);\n    }, [1000 * 50]);\n  });\n}\nfunction getMulticallData(chainId, rpc, list) {\n  return new Promise((resolve, reject) => {\n    const contract = getContract({\n      abi: multicallABI,\n      rpc: rpc\n    });\n    contract.options.address = config.getCurChainInfo(chainId).multicalToken;\n    const arr = [];\n    for (const obj of list) {\n      arr.push({\n        target: obj.to,\n        callData: obj.data\n      });\n    }\n    contract.methods.aggregate(arr).call((err, res) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(res.returnData);\n      }\n    });\n  });\n}\nfunction getMulticallResult(chainId, rpc, list) {\n  return new Promise((resolve, reject) => {\n    Promise.race([timeoutWeb3(), getMulticallData(chainId, rpc, list)]).then(res => {\n      if (res === TIMEOUT) {\n        reject(res);\n      } else {\n        resolve(res);\n      }\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nconst useNode = {};\nasync function useMulticall(chainId, list) {\n  var _config$getCurChainIn;\n  if (isNaN(chainId)) return undefined;\n  const rpcArr = (_config$getCurChainIn = config.getCurChainInfo(chainId)) === null || _config$getCurChainIn === void 0 ? void 0 : _config$getCurChainIn.nodeRpcList;\n  if (!rpcArr) return '';\n  const len = rpcArr.length - 1;\n  if (!useNode[chainId]) {\n    useNode[chainId] = {\n      rpc: rpcArr[0],\n      index: 0\n    };\n  }\n  let index = useNode[chainId].index;\n  const rpc = rpcArr[useNode[chainId].index];\n  let results = '';\n  try {\n    results = await getMulticallResult(chainId, rpc, list);\n  } catch (error) {\n    console.error('useMulticall error: ' + rpc);\n    console.error(error.toString());\n    if (error.toString().indexOf('Invalid JSON RPC response') !== -1 || error.toString().indexOf('Error: Returned error') !== -1 || error === TIMEOUT) {\n      if (index < len) {\n        index++;\n        useNode[chainId] = {\n          rpc: rpcArr[index],\n          index: index\n        };\n        results = await useMulticall(chainId, list);\n      } else {\n        useNode[chainId] = {\n          rpc: rpcArr[0],\n          index: 0\n        };\n      }\n    } else {\n      results = error;\n    }\n  }\n  return results;\n}\n\n// const rList = [\n//   {\n//     data: ERC20_INTERFACE.encodeFunctionData('balanceOf', ['0xC03033d8b833fF7ca08BF2A58C9BC9d711257249']),\n//     methods: 'balanceOf',\n//     to: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d'\n//   },\n//   {\n//     data: ERC20_INTERFACE.encodeFunctionData('balanceOf', ['0xC03033d8b833fF7ca08BF2A58C9BC9d711257249']),\n//     methods: 'balanceOf',\n//     to: '0xf68c9df95a18b2a5a5fa1124d79eeeffbad0b6fa'\n//   },\n//   // {\n//   //   data: '0x313ce567',\n//   //   methods: 'decimals',\n//   //   to: '0x818ec0a7fe18ff94269904fced6ae3dae6d6dc0b'\n//   // },\n//   // {\n//   //   data: '0x95d89b41',\n//   //   methods: 'symbol',\n//   //   to: '0x818ec0a7fe18ff94269904fced6ae3dae6d6dc0b'\n//   // }\n// ]\n// useMulticall('56', rList).then(res => {\n//   console.log(res)\n//   const bl1 = ERC20_INTERFACE.decodeFunctionResult(rList[0].methods, res[0])[0]\n//   const bl2 = ERC20_INTERFACE.decodeFunctionResult(rList[1].methods, res[1])[0]\n//   console.log(bl1)\n//   console.log(bl2)\n//   console.log(bl1.sub(bl2).toString())\n//   // for (let i = 0, len = rList.length; i < len; i++) {\n//   //   console.log(rList[i].methods)\n//   //   console.log(ERC20_INTERFACE.decodeFunctionResult(rList[i].methods, res[i])[0])\n//   // }\n// })\nexport { useMulticall };","map":{"version":3,"names":["config","multicallABI","TIMEOUT","Web3","require","getWeb3","rpc","provider","wFn","providers","HttpProvider","getContract","_ref","abi","web3","eth","Contract","timeoutWeb3","Promise","resolve","setTimeout","getMulticallData","chainId","list","reject","contract","options","address","getCurChainInfo","multicalToken","arr","obj","push","target","to","callData","data","methods","aggregate","call","err","res","returnData","getMulticallResult","race","then","catch","error","useNode","useMulticall","_config$getCurChainIn","isNaN","undefined","rpcArr","nodeRpcList","len","length","index","results","console","toString","indexOf"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/tools/multicall.js"],"sourcesContent":["import config from '../../config'\nimport multicallABI from '../../constants/multicall/abi.json'\n// import ERC20_INTERFACE from '../../constants/abis/erc20'\nconst TIMEOUT = 'timeout'\n\nconst Web3 = require('web3')\n\nexport function getWeb3 (rpc, provider) {\n  rpc = rpc ? rpc : ''\n  if (provider) {\n    // console.log(library)\n    const wFn = new Web3(provider)\n    // console.log(wFn)\n    return wFn\n  } else {\n    // console.log(rpc)\n    const wFn = new Web3(new Web3.providers.HttpProvider(rpc))\n    return wFn\n  }\n}\n\n\nexport function getContract ({rpc, abi, provider}) {\n  const web3 = getWeb3(rpc, provider)\n  abi = abi ? abi : multicallABI\n  return new web3.eth.Contract(abi)\n}\n\nfunction timeoutWeb3 () {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(TIMEOUT)\n    }, [1000 * 50])\n  })\n}\n\nfunction getMulticallData (chainId, rpc, list) {\n  return new Promise((resolve, reject) => {\n    const contract = getContract({abi: multicallABI, rpc: rpc})\n    contract.options.address = config.getCurChainInfo(chainId).multicalToken\n    const arr = []\n    for (const obj of list) {\n      arr.push({\n        target: obj.to,\n        callData: obj.data\n      })\n    }\n    contract.methods.aggregate(arr).call((err, res) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(res.returnData)\n      }\n    })\n  })\n}\n\nfunction getMulticallResult (chainId, rpc, list) {\n  return new Promise((resolve, reject) => {\n    Promise.race([\n      timeoutWeb3(),\n      getMulticallData(chainId, rpc, list)\n    ]).then(res => {\n      if (res === TIMEOUT) {\n        reject(res)\n      } else {\n        resolve(res)\n      }\n    }).catch(error => {\n      reject(error)\n    })\n  })\n}\n\nconst useNode = {}\n\nasync function useMulticall (chainId, list) {\n  if (isNaN(chainId)) return undefined\n  const rpcArr = config.getCurChainInfo(chainId)?.nodeRpcList\n  if (!rpcArr) return ''\n  const len = rpcArr.length - 1\n  if (!useNode[chainId]) {\n    useNode[chainId] = {\n      rpc: rpcArr[0],\n      index: 0\n    }\n  }\n  let index = useNode[chainId].index\n  const rpc = rpcArr[useNode[chainId].index]\n  let results = ''\n  try {\n    results = await getMulticallResult(chainId, rpc, list)\n  } catch (error) {\n    console.error('useMulticall error: ' + rpc)\n    console.error(error.toString())\n    if (\n      error.toString().indexOf('Invalid JSON RPC response') !== -1\n      || error.toString().indexOf('Error: Returned error') !== -1\n      || error === TIMEOUT\n    ) {\n      if (index < len) {\n        index ++\n        useNode[chainId] = {\n          rpc: rpcArr[index],\n          index: index\n        }\n        results = await useMulticall(chainId, list)\n      } else {\n        useNode[chainId] = {\n          rpc: rpcArr[0],\n          index: 0\n        }\n      }\n    } else {\n      results = error\n    }\n  }\n  return results\n}\n\n// const rList = [\n//   {\n//     data: ERC20_INTERFACE.encodeFunctionData('balanceOf', ['0xC03033d8b833fF7ca08BF2A58C9BC9d711257249']),\n//     methods: 'balanceOf',\n//     to: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d'\n//   },\n//   {\n//     data: ERC20_INTERFACE.encodeFunctionData('balanceOf', ['0xC03033d8b833fF7ca08BF2A58C9BC9d711257249']),\n//     methods: 'balanceOf',\n//     to: '0xf68c9df95a18b2a5a5fa1124d79eeeffbad0b6fa'\n//   },\n//   // {\n//   //   data: '0x313ce567',\n//   //   methods: 'decimals',\n//   //   to: '0x818ec0a7fe18ff94269904fced6ae3dae6d6dc0b'\n//   // },\n//   // {\n//   //   data: '0x95d89b41',\n//   //   methods: 'symbol',\n//   //   to: '0x818ec0a7fe18ff94269904fced6ae3dae6d6dc0b'\n//   // }\n// ]\n// useMulticall('56', rList).then(res => {\n//   console.log(res)\n//   const bl1 = ERC20_INTERFACE.decodeFunctionResult(rList[0].methods, res[0])[0]\n//   const bl2 = ERC20_INTERFACE.decodeFunctionResult(rList[1].methods, res[1])[0]\n//   console.log(bl1)\n//   console.log(bl2)\n//   console.log(bl1.sub(bl2).toString())\n//   // for (let i = 0, len = rList.length; i < len; i++) {\n//   //   console.log(rList[i].methods)\n//   //   console.log(ERC20_INTERFACE.decodeFunctionResult(rList[i].methods, res[i])[0])\n//   // }\n// })\nexport {\n  useMulticall\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}