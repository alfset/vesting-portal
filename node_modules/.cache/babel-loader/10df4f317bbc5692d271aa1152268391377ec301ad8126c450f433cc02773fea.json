{"ast":null,"code":"import invariant from'tiny-invariant';import _Big from'big.js';import toFormat from'toformat';import JSBI from'jsbi';import{Fraction,Rounding,parseBigintIsh}from'./fraction';export let SolidityType=/*#__PURE__*/function(SolidityType){SolidityType[\"uint8\"]=\"uint8\";SolidityType[\"uint256\"]=\"uint256\";return SolidityType;}({});export const ZERO=JSBI.BigInt(0);export const SOLIDITY_TYPE_MAXIMA={[SolidityType.uint8]:JSBI.BigInt('0xff'),[SolidityType.uint256]:JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')};export function validateSolidityTypeInstance(value,solidityType){invariant(JSBI.greaterThanOrEqual(value,ZERO),\"\".concat(value,\" is not a \").concat(solidityType,\".\"));invariant(JSBI.lessThanOrEqual(value,SOLIDITY_TYPE_MAXIMA[solidityType]),\"\".concat(value,\" is not a \").concat(solidityType,\".\"));}const Big=toFormat(_Big);const TEN=JSBI.BigInt(10);export class BigAmount extends Fraction{static format(decimals,amount){return new BigAmount(decimals,amount);}// amount _must_ be raw, i.e. in the native representation\nconstructor(decimals,amount){const parsedAmount=parseBigintIsh(amount);validateSolidityTypeInstance(parsedAmount,SolidityType.uint256);super(parsedAmount,JSBI.exponentiate(TEN,JSBI.BigInt(decimals)));this.decimals=void 0;this.amount=void 0;this.decimals=decimals;this.amount=amount;}get raw(){return this.numerator;}getAmount(){return this.amount;}toSignificant(){let significantDigits=arguments.length>0&&arguments[0]!==undefined?arguments[0]:6;let// eslint-disable-next-line @typescript-eslint/ban-types\nformat=arguments.length>1?arguments[1]:undefined;let rounding=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Rounding.ROUND_DOWN;return super.toSignificant(significantDigits,format,rounding);}toFixed(){let decimalPlaces=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.decimals;let// eslint-disable-next-line @typescript-eslint/ban-types\nformat=arguments.length>1?arguments[1]:undefined;let rounding=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Rounding.ROUND_DOWN;invariant(decimalPlaces<=this.decimals,'DECIMALS');return super.toFixed(decimalPlaces,format,rounding);}// eslint-disable-next-line @typescript-eslint/ban-types\ntoExact(){let format=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{groupSeparator:''};Big.DP=this.decimals;return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);}}","map":{"version":3,"names":["invariant","_Big","toFormat","JSBI","Fraction","Rounding","parseBigintIsh","SolidityType","ZERO","BigInt","SOLIDITY_TYPE_MAXIMA","uint8","uint256","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","concat","lessThanOrEqual","Big","TEN","BigAmount","format","decimals","amount","constructor","parsedAmount","exponentiate","raw","numerator","getAmount","toSignificant","significantDigits","arguments","length","undefined","rounding","ROUND_DOWN","toFixed","decimalPlaces","toExact","groupSeparator","DP","toString","div","denominator"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/formatBignumber/index.ts"],"sourcesContent":["import invariant from 'tiny-invariant'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport JSBI from 'jsbi'\nimport {\n  Fraction,\n  BigintIsh,\n  Rounding,\n  parseBigintIsh\n} from './fraction'\n\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\nexport const ZERO = JSBI.BigInt(0)\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\nconst Big = toFormat(_Big)\n\nconst TEN = JSBI.BigInt(10)\n\nexport class BigAmount extends Fraction {\n  public readonly decimals: number\n  public readonly amount: BigintIsh\n\n  public static format(decimals: number, amount:BigintIsh): BigAmount {\n    return new BigAmount(decimals, amount)\n  }\n  \n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(decimals: number, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(decimals)))\n    this.decimals = decimals\n    this.amount = amount\n  }\n\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n  public getAmount(): BigintIsh {\n    return this.amount\n  }\n\n  public toSignificant(\n    significantDigits = 6,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.decimals,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}