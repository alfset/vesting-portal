{"ast":null,"code":"var _config$chainID;\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { CloverConnector } from '@clover-network/clover-connector';\nimport { NetworkConnector } from './NetworkConnector';\nimport { XdefiConnector } from './xdefi';\nimport { BitKeepConnector } from './bitkeep';\nimport { SafeAppConnector } from './gnosis-safe';\nimport { TallyConnector } from './tally';\nimport { spportChainArr as sc } from '../config/chainConfig';\nimport config from '../config';\nconst NETWORK_URL = config.nodeRpc;\nexport const NETWORK_CHAIN_ID = (_config$chainID = config.chainID) !== null && _config$chainID !== void 0 ? _config$chainID : 1;\nconst spportChain = {};\nconst spportChainArr = [];\nfor (const chainID in config.chainInfo) {\n  var _config$chainInfo$cha;\n  // for (const chainID of spportChainArr) {\n  if (isNaN(Number(chainID))) continue;\n  if (chainID && ((_config$chainInfo$cha = config.chainInfo[chainID]) === null || _config$chainInfo$cha === void 0 ? void 0 : _config$chainInfo$cha.nodeRpc)) {\n    // spportChainArr.push(Number(chainID))\n    spportChain[chainID] = config.chainInfo[chainID].nodeRpc;\n  }\n}\n// const sc1:any = sc\nfor (const c of sc) {\n  if (isNaN(Number(c))) continue;\n  spportChainArr.push(Number(c));\n}\n// spportChainArr.push(Number(NETWORK_CHAIN_ID))\n// spportChain[NETWORK_CHAIN_ID] = config.chainInfo[NETWORK_CHAIN_ID].nodeRpc\n// console.log(spportChainArr)\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(\"REACT_APP_NETWORK_URL must be a defined environment variable\");\n}\n// console.log(spportChainArr)\n// mainnet only\n// export const walletconnect = new WalletConnectConnector({\n//   supportedChainIds: [...spportChainArr],\n//   rpc: {\n//     ...spportChain\n//   },\n//   chainId: NETWORK_CHAIN_ID\n// })\n\nexport const walletoptions = {\n  supportedChainIds: [...spportChainArr],\n  rpc: {\n    ...spportChain\n  },\n  qrcode: true\n};\nexport const walletconnect = new WalletConnectConnector(walletoptions);\nexport const network = new NetworkConnector({\n  // urls: { [NETWORK_CHAIN_ID]: NETWORK_URL }\n  defaultChainId: NETWORK_CHAIN_ID,\n  urls: {\n    ...spportChain\n  }\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: [...spportChainArr]\n});\nexport const walletlink = new WalletLinkConnector({\n  url: spportChain[NETWORK_CHAIN_ID],\n  appName: 'DeltaSwap',\n  appLogoUrl: 'https://assets.coingecko.com/coins/images/12242/small/deltaswap.jpg',\n  supportedChainIds: [...spportChainArr]\n});\nexport const bsc = new BscConnector({\n  supportedChainIds: [...spportChainArr]\n});\nexport const xdefi = new XdefiConnector({\n  supportedChainIds: [...spportChainArr]\n});\nexport const bitkeep = new BitKeepConnector({\n  supportedChainIds: [...spportChainArr]\n});\nexport const clover = new CloverConnector({\n  supportedChainIds: [...spportChainArr]\n});\nexport const tally = new TallyConnector({\n  supportedChainIds: [...spportChainArr]\n});\nexport const gnosissafe = new SafeAppConnector();","map":{"version":3,"names":["Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","BscConnector","CloverConnector","NetworkConnector","XdefiConnector","BitKeepConnector","SafeAppConnector","TallyConnector","spportChainArr","sc","config","NETWORK_URL","nodeRpc","NETWORK_CHAIN_ID","_config$chainID","chainID","spportChain","chainInfo","_config$chainInfo$cha","isNaN","Number","c","push","Error","walletoptions","supportedChainIds","rpc","qrcode","walletconnect","network","defaultChainId","urls","networkLibrary","getNetworkLibrary","_networkLibrary","provider","injected","walletlink","url","appName","appLogoUrl","bsc","xdefi","bitkeep","clover","tally","gnosissafe"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/connectors/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport {WalletConnectConnector, WalletConnectConnectorArguments} from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport {BscConnector} from '@binance-chain/bsc-connector'\nimport {CloverConnector} from '@clover-network/clover-connector'\nimport { NetworkConnector } from './NetworkConnector'\nimport {XdefiConnector} from './xdefi'\nimport {BitKeepConnector} from './bitkeep'\nimport {SafeAppConnector} from './gnosis-safe'\nimport {TallyConnector} from './tally'\n\nimport {spportChainArr as sc} from '../config/chainConfig'\nimport config from '../config'\n\nconst NETWORK_URL = config.nodeRpc\n\nexport const NETWORK_CHAIN_ID: number = config.chainID ?? 1\n\nconst spportChain:any = {}\nconst spportChainArr:any = []\nfor (const chainID in config.chainInfo) {\n// for (const chainID of spportChainArr) {\n  if (isNaN(Number(chainID))) continue\n  if (chainID && config.chainInfo[chainID]?.nodeRpc) {\n    // spportChainArr.push(Number(chainID))\n    spportChain[chainID] = config.chainInfo[chainID].nodeRpc\n  }\n}\n// const sc1:any = sc\nfor (const c of sc) {\n  if (isNaN(Number(c))) continue\n  spportChainArr.push(Number(c))\n}\n// spportChainArr.push(Number(NETWORK_CHAIN_ID))\n// spportChain[NETWORK_CHAIN_ID] = config.chainInfo[NETWORK_CHAIN_ID].nodeRpc\n// console.log(spportChainArr)\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\n}\n// console.log(spportChainArr)\n// mainnet only\n// export const walletconnect = new WalletConnectConnector({\n//   supportedChainIds: [...spportChainArr],\n//   rpc: {\n//     ...spportChain\n//   },\n//   chainId: NETWORK_CHAIN_ID\n// })\n\nexport const walletoptions = {\n  supportedChainIds: [...spportChainArr],\n  rpc: { ...spportChain },\n  qrcode: true,\n} as WalletConnectConnectorArguments\nexport const walletconnect = new WalletConnectConnector(walletoptions)\n\nexport const network = new NetworkConnector({\n  // urls: { [NETWORK_CHAIN_ID]: NETWORK_URL }\n  defaultChainId: NETWORK_CHAIN_ID,\n  urls: { ...spportChain }\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [...spportChainArr]\n})\n\n\nexport const walletlink = new WalletLinkConnector({\n  url: spportChain[NETWORK_CHAIN_ID],\n  appName: 'DeltaSwap',\n  appLogoUrl: 'https://assets.coingecko.com/coins/images/12242/small/deltaswap.jpg',\n  supportedChainIds: [...spportChainArr]\n})\n\n\nexport const bsc = new BscConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const xdefi = new XdefiConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const bitkeep = new BitKeepConnector({\n  supportedChainIds: [...spportChainArr],\n})\n\nexport const clover =  new CloverConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const tally =  new TallyConnector({\n  supportedChainIds: [...spportChainArr],\n})\nexport const gnosissafe =  new SafeAppConnector()"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}