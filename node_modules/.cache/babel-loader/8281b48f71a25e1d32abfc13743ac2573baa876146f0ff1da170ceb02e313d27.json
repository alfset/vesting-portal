{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Asset = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _clone = require('lodash/clone');\nvar _clone2 = _interopRequireDefault(_clone);\nvar _padEnd = require('lodash/padEnd');\nvar _padEnd2 = _interopRequireDefault(_padEnd);\nvar _trimEnd = require('lodash/trimEnd');\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _keypair = require('./keypair');\nvar _strkey = require('./strkey');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Asset class represents an asset, either the native asset (`XLM`)\n * or an asset code / issuer account ID pair.\n *\n * An asset code describes an asset code and issuer pair. In the case of the native\n * asset XLM, the issuer will be null.\n *\n * @constructor\n * @param {string} code - The asset code.\n * @param {string} issuer - The account ID of the issuer.\n */\nvar Asset = exports.Asset = function () {\n  function Asset(code, issuer) {\n    _classCallCheck(this, Asset);\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {\n      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');\n    }\n    if (String(code).toLowerCase() !== 'xlm' && !issuer) {\n      throw new Error('Issuer cannot be null');\n    }\n    if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) {\n      throw new Error('Issuer is invalid');\n    }\n    if (String(code).toLowerCase() === 'xlm') {\n      // transform all xLM, Xlm, etc. variants -> XLM\n      this.code = 'XLM';\n    } else {\n      this.code = code;\n    }\n    this.issuer = issuer;\n  }\n\n  /**\n   * Returns an asset object for the native asset.\n   * @Return {Asset}\n   */\n\n  _createClass(Asset, [{\n    key: 'toXDRObject',\n    /**\n     * Returns the xdr.Asset object for this asset.\n     * @returns {xdr.Asset} XDR asset object\n     */\n    value: function toXDRObject() {\n      return this._toXDRObject(_xdr2.default.Asset);\n    }\n\n    /**\n     * Returns the xdr.ChangeTrustAsset object for this asset.\n     * @returns {xdr.ChangeTrustAsset} XDR asset object\n     */\n  }, {\n    key: 'toChangeTrustXDRObject',\n    value: function toChangeTrustXDRObject() {\n      return this._toXDRObject(_xdr2.default.ChangeTrustAsset);\n    }\n\n    /**\n     * Returns the xdr.TrustLineAsset object for this asset.\n     * @returns {xdr.TrustLineAsset} XDR asset object\n     */\n  }, {\n    key: 'toTrustLineXDRObject',\n    value: function toTrustLineXDRObject() {\n      return this._toXDRObject(_xdr2.default.TrustLineAsset);\n    }\n\n    /**\n     * Returns the xdr object for this asset.\n     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.\n     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object\n     */\n  }, {\n    key: '_toXDRObject',\n    value: function _toXDRObject() {\n      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _xdr2.default.Asset;\n      if (this.isNative()) {\n        return xdrAsset.assetTypeNative();\n      }\n      var xdrType = void 0;\n      var xdrTypeString = void 0;\n      if (this.code.length <= 4) {\n        xdrType = _xdr2.default.AlphaNum4;\n        xdrTypeString = 'assetTypeCreditAlphanum4';\n      } else {\n        xdrType = _xdr2.default.AlphaNum12;\n        xdrTypeString = 'assetTypeCreditAlphanum12';\n      }\n\n      // pad code with null bytes if necessary\n      var padLength = this.code.length <= 4 ? 4 : 12;\n      var paddedCode = (0, _padEnd2.default)(this.code, padLength, '\\0');\n\n      // eslint-disable-next-line new-cap\n      var assetType = new xdrType({\n        assetCode: paddedCode,\n        issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()\n      });\n      return new xdrAsset(xdrTypeString, assetType);\n    }\n\n    /**\n     * @returns {string} Asset code\n     */\n  }, {\n    key: 'getCode',\n    value: function getCode() {\n      return (0, _clone2.default)(this.code);\n    }\n\n    /**\n     * @returns {string} Asset issuer\n     */\n  }, {\n    key: 'getIssuer',\n    value: function getIssuer() {\n      return (0, _clone2.default)(this.issuer);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {string} Asset type. Can be one of following types:\n     *\n     *  - `native`,\n     *  - `credit_alphanum4`,\n     *  - `credit_alphanum12`, or\n     *  - `unknown` as the error case (which should never occur)\n     */\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      switch (this.getRawAssetType()) {\n        case _xdr2.default.AssetType.assetTypeNative():\n          return 'native';\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum4():\n          return 'credit_alphanum4';\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum12():\n          return 'credit_alphanum12';\n        default:\n          return 'unknown';\n      }\n    }\n\n    /**\n     * @returns {xdr.AssetType}  the raw XDR representation of the asset type\n     */\n  }, {\n    key: 'getRawAssetType',\n    value: function getRawAssetType() {\n      if (this.isNative()) {\n        return _xdr2.default.AssetType.assetTypeNative();\n      }\n      if (this.code.length <= 4) {\n        return _xdr2.default.AssetType.assetTypeCreditAlphanum4();\n      }\n      return _xdr2.default.AssetType.assetTypeCreditAlphanum12();\n    }\n\n    /**\n     * @returns {boolean}  true if this asset object is the native asset.\n     */\n  }, {\n    key: 'isNative',\n    value: function isNative() {\n      return !this.issuer;\n    }\n\n    /**\n     * @param {Asset} asset Asset to compare\n     * @returns {boolean} true if this asset equals the given asset.\n     */\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.code === asset.getCode() && this.issuer === asset.getIssuer();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      if (this.isNative()) {\n        return 'native';\n      }\n      return this.getCode() + ':' + this.getIssuer();\n    }\n\n    /**\n     * Compares two assets according to the criteria:\n     *\n     *  1. First compare the type (native < alphanum4 < alphanum12).\n     *  2. If the types are equal, compare the assets codes.\n     *  3. If the asset codes are equal, compare the issuers.\n     *\n     * @param   {Asset} assetA - the first asset\n     * @param   {Asset} assetB - the second asset\n     * @returns {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.\n     *\n     * @static\n     * @memberof Asset\n     */\n  }], [{\n    key: 'native',\n    value: function native() {\n      return new Asset('XLM');\n    }\n\n    /**\n     * Returns an asset object from its XDR object representation.\n     * @param {xdr.Asset} assetXdr - The asset xdr object.\n     * @returns {Asset}\n     */\n  }, {\n    key: 'fromOperation',\n    value: function fromOperation(assetXdr) {\n      var anum = void 0;\n      var code = void 0;\n      var issuer = void 0;\n      switch (assetXdr.switch()) {\n        case _xdr2.default.AssetType.assetTypeNative():\n          return this.native();\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum4():\n          anum = assetXdr.alphaNum4();\n        /* falls through */\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum12():\n          anum = anum || assetXdr.alphaNum12();\n          issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());\n          code = (0, _trimEnd2.default)(anum.assetCode(), '\\0');\n          return new this(code, issuer);\n        default:\n          throw new Error('Invalid asset type: ' + assetXdr.switch().name);\n      }\n    }\n  }, {\n    key: 'compare',\n    value: function compare(assetA, assetB) {\n      if (!assetA || !(assetA instanceof Asset)) {\n        throw new Error('assetA is invalid');\n      }\n      if (!assetB || !(assetB instanceof Asset)) {\n        throw new Error('assetB is invalid');\n      }\n      if (assetA.equals(assetB)) {\n        return 0;\n      }\n\n      // Compare asset types.\n      var xdrAtype = assetA.getRawAssetType().value;\n      var xdrBtype = assetB.getRawAssetType().value;\n      if (xdrAtype !== xdrBtype) {\n        return xdrAtype < xdrBtype ? -1 : 1;\n      }\n\n      // Compare asset codes.\n      var result = asciiCompare(assetA.getCode(), assetB.getCode());\n      if (result !== 0) {\n        return result;\n      }\n\n      // Compare asset issuers.\n      return asciiCompare(assetA.getIssuer(), assetB.getIssuer());\n    }\n  }]);\n  return Asset;\n}();\n\n/**\n * Compares two ASCII strings in lexographic order with uppercase precedence.\n *\n * @param   {string} a - the first string to compare\n * @param   {string} b - the second\n * @returns {number} like all `compare()`s:\n *     -1 if `a < b`, 0 if `a == b`, and 1 if `a > b`\n *\n * @warning No type-checks are done on the parameters\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n */\n\nfunction asciiCompare(a, b) {\n  return a.localeCompare(b, 'en', {\n    caseFirst: 'upper'\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Asset","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_clone","require","_clone2","_interopRequireDefault","_padEnd","_padEnd2","_trimEnd","_trimEnd2","_xdr","_xdr2","_keypair","_strkey","obj","__esModule","default","_classCallCheck","instance","TypeError","code","issuer","test","Error","String","toLowerCase","StrKey","isValidEd25519PublicKey","toXDRObject","_toXDRObject","toChangeTrustXDRObject","ChangeTrustAsset","toTrustLineXDRObject","TrustLineAsset","xdrAsset","arguments","isNative","assetTypeNative","xdrType","xdrTypeString","AlphaNum4","AlphaNum12","padLength","paddedCode","assetType","assetCode","Keypair","fromPublicKey","xdrAccountId","getCode","getIssuer","getAssetType","getRawAssetType","AssetType","assetTypeCreditAlphanum4","assetTypeCreditAlphanum12","equals","asset","toString","native","fromOperation","assetXdr","anum","switch","alphaNum4","alphaNum12","encodeEd25519PublicKey","ed25519","name","compare","assetA","assetB","xdrAtype","xdrBtype","result","asciiCompare","a","b","localeCompare","caseFirst"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/asset.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Asset = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _padEnd = require('lodash/padEnd');\n\nvar _padEnd2 = _interopRequireDefault(_padEnd);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _keypair = require('./keypair');\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Asset class represents an asset, either the native asset (`XLM`)\n * or an asset code / issuer account ID pair.\n *\n * An asset code describes an asset code and issuer pair. In the case of the native\n * asset XLM, the issuer will be null.\n *\n * @constructor\n * @param {string} code - The asset code.\n * @param {string} issuer - The account ID of the issuer.\n */\nvar Asset = exports.Asset = function () {\n  function Asset(code, issuer) {\n    _classCallCheck(this, Asset);\n\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {\n      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');\n    }\n    if (String(code).toLowerCase() !== 'xlm' && !issuer) {\n      throw new Error('Issuer cannot be null');\n    }\n    if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) {\n      throw new Error('Issuer is invalid');\n    }\n\n    if (String(code).toLowerCase() === 'xlm') {\n      // transform all xLM, Xlm, etc. variants -> XLM\n      this.code = 'XLM';\n    } else {\n      this.code = code;\n    }\n\n    this.issuer = issuer;\n  }\n\n  /**\n   * Returns an asset object for the native asset.\n   * @Return {Asset}\n   */\n\n\n  _createClass(Asset, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the xdr.Asset object for this asset.\n     * @returns {xdr.Asset} XDR asset object\n     */\n    value: function toXDRObject() {\n      return this._toXDRObject(_xdr2.default.Asset);\n    }\n\n    /**\n     * Returns the xdr.ChangeTrustAsset object for this asset.\n     * @returns {xdr.ChangeTrustAsset} XDR asset object\n     */\n\n  }, {\n    key: 'toChangeTrustXDRObject',\n    value: function toChangeTrustXDRObject() {\n      return this._toXDRObject(_xdr2.default.ChangeTrustAsset);\n    }\n\n    /**\n     * Returns the xdr.TrustLineAsset object for this asset.\n     * @returns {xdr.TrustLineAsset} XDR asset object\n     */\n\n  }, {\n    key: 'toTrustLineXDRObject',\n    value: function toTrustLineXDRObject() {\n      return this._toXDRObject(_xdr2.default.TrustLineAsset);\n    }\n\n    /**\n     * Returns the xdr object for this asset.\n     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.\n     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object\n     */\n\n  }, {\n    key: '_toXDRObject',\n    value: function _toXDRObject() {\n      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _xdr2.default.Asset;\n\n      if (this.isNative()) {\n        return xdrAsset.assetTypeNative();\n      }\n\n      var xdrType = void 0;\n      var xdrTypeString = void 0;\n      if (this.code.length <= 4) {\n        xdrType = _xdr2.default.AlphaNum4;\n        xdrTypeString = 'assetTypeCreditAlphanum4';\n      } else {\n        xdrType = _xdr2.default.AlphaNum12;\n        xdrTypeString = 'assetTypeCreditAlphanum12';\n      }\n\n      // pad code with null bytes if necessary\n      var padLength = this.code.length <= 4 ? 4 : 12;\n      var paddedCode = (0, _padEnd2.default)(this.code, padLength, '\\0');\n\n      // eslint-disable-next-line new-cap\n      var assetType = new xdrType({\n        assetCode: paddedCode,\n        issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()\n      });\n\n      return new xdrAsset(xdrTypeString, assetType);\n    }\n\n    /**\n     * @returns {string} Asset code\n     */\n\n  }, {\n    key: 'getCode',\n    value: function getCode() {\n      return (0, _clone2.default)(this.code);\n    }\n\n    /**\n     * @returns {string} Asset issuer\n     */\n\n  }, {\n    key: 'getIssuer',\n    value: function getIssuer() {\n      return (0, _clone2.default)(this.issuer);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {string} Asset type. Can be one of following types:\n     *\n     *  - `native`,\n     *  - `credit_alphanum4`,\n     *  - `credit_alphanum12`, or\n     *  - `unknown` as the error case (which should never occur)\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      switch (this.getRawAssetType()) {\n        case _xdr2.default.AssetType.assetTypeNative():\n          return 'native';\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum4():\n          return 'credit_alphanum4';\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum12():\n          return 'credit_alphanum12';\n        default:\n          return 'unknown';\n      }\n    }\n\n    /**\n     * @returns {xdr.AssetType}  the raw XDR representation of the asset type\n     */\n\n  }, {\n    key: 'getRawAssetType',\n    value: function getRawAssetType() {\n      if (this.isNative()) {\n        return _xdr2.default.AssetType.assetTypeNative();\n      }\n\n      if (this.code.length <= 4) {\n        return _xdr2.default.AssetType.assetTypeCreditAlphanum4();\n      }\n\n      return _xdr2.default.AssetType.assetTypeCreditAlphanum12();\n    }\n\n    /**\n     * @returns {boolean}  true if this asset object is the native asset.\n     */\n\n  }, {\n    key: 'isNative',\n    value: function isNative() {\n      return !this.issuer;\n    }\n\n    /**\n     * @param {Asset} asset Asset to compare\n     * @returns {boolean} true if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(asset) {\n      return this.code === asset.getCode() && this.issuer === asset.getIssuer();\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      if (this.isNative()) {\n        return 'native';\n      }\n\n      return this.getCode() + ':' + this.getIssuer();\n    }\n\n    /**\n     * Compares two assets according to the criteria:\n     *\n     *  1. First compare the type (native < alphanum4 < alphanum12).\n     *  2. If the types are equal, compare the assets codes.\n     *  3. If the asset codes are equal, compare the issuers.\n     *\n     * @param   {Asset} assetA - the first asset\n     * @param   {Asset} assetB - the second asset\n     * @returns {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.\n     *\n     * @static\n     * @memberof Asset\n     */\n\n  }], [{\n    key: 'native',\n    value: function native() {\n      return new Asset('XLM');\n    }\n\n    /**\n     * Returns an asset object from its XDR object representation.\n     * @param {xdr.Asset} assetXdr - The asset xdr object.\n     * @returns {Asset}\n     */\n\n  }, {\n    key: 'fromOperation',\n    value: function fromOperation(assetXdr) {\n      var anum = void 0;\n      var code = void 0;\n      var issuer = void 0;\n      switch (assetXdr.switch()) {\n        case _xdr2.default.AssetType.assetTypeNative():\n          return this.native();\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum4():\n          anum = assetXdr.alphaNum4();\n        /* falls through */\n        case _xdr2.default.AssetType.assetTypeCreditAlphanum12():\n          anum = anum || assetXdr.alphaNum12();\n          issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());\n          code = (0, _trimEnd2.default)(anum.assetCode(), '\\0');\n          return new this(code, issuer);\n        default:\n          throw new Error('Invalid asset type: ' + assetXdr.switch().name);\n      }\n    }\n  }, {\n    key: 'compare',\n    value: function compare(assetA, assetB) {\n      if (!assetA || !(assetA instanceof Asset)) {\n        throw new Error('assetA is invalid');\n      }\n      if (!assetB || !(assetB instanceof Asset)) {\n        throw new Error('assetB is invalid');\n      }\n\n      if (assetA.equals(assetB)) {\n        return 0;\n      }\n\n      // Compare asset types.\n      var xdrAtype = assetA.getRawAssetType().value;\n      var xdrBtype = assetB.getRawAssetType().value;\n      if (xdrAtype !== xdrBtype) {\n        return xdrAtype < xdrBtype ? -1 : 1;\n      }\n\n      // Compare asset codes.\n      var result = asciiCompare(assetA.getCode(), assetB.getCode());\n      if (result !== 0) {\n        return result;\n      }\n\n      // Compare asset issuers.\n      return asciiCompare(assetA.getIssuer(), assetB.getIssuer());\n    }\n  }]);\n\n  return Asset;\n}();\n\n/**\n * Compares two ASCII strings in lexographic order with uppercase precedence.\n *\n * @param   {string} a - the first string to compare\n * @param   {string} b - the second\n * @returns {number} like all `compare()`s:\n *     -1 if `a < b`, 0 if `a == b`, and 1 if `a > b`\n *\n * @warning No type-checks are done on the parameters\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n */\n\n\nfunction asciiCompare(a, b) {\n  return a.localeCompare(b, 'en', { caseFirst: 'upper' });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}