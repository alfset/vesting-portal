{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _map = require('lodash/map');\nvar _map2 = _interopRequireDefault(_map);\nvar _xdr = require('./xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _hashing = require('./hashing');\nvar _strkey = require('./strkey');\nvar _operation = require('./operation');\nvar _memo = require('./memo');\nvar _transaction_base = require('./transaction_base');\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have an\n * object or base64-encoded string of the transaction envelope XDR, use {@link\n * TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations should not\n * be changed. You should only add signatures (using {@link Transaction#sign})\n * to a Transaction object before submitting to the network or forwarding on to\n * additional signers.\n *\n * @constructor\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string\n * @param {string}  [networkPassphrase] - passphrase of the target stellar\n *     network (e.g. \"Public Global Stellar Network ; September 2015\")\n *\n * @extends TransactionBase\n */\nvar Transaction = exports.Transaction = function (_TransactionBase) {\n  _inherits(Transaction, _TransactionBase);\n  function Transaction(envelope, networkPassphrase) {\n    _classCallCheck(this, Transaction);\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n    var envelopeType = envelope.switch();\n    if (!(envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTxV0() || envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTx())) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + envelopeType.name + '.');\n    }\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n    var _this = _possibleConstructorReturn(this, (Transaction.__proto__ || Object.getPrototypeOf(Transaction)).call(this, tx, signatures, fee, networkPassphrase));\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n    switch (_this._envelopeType) {\n      case _xdr2.default.EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());\n        break;\n    }\n    var cond = null;\n    var timeBounds = null;\n    switch (_this._envelopeType) {\n      case _xdr2.default.EnvelopeType.envelopeTypeTxV0():\n        timeBounds = tx.timeBounds();\n        break;\n      case _xdr2.default.EnvelopeType.envelopeTypeTx():\n        switch (tx.cond().switch()) {\n          case _xdr2.default.PreconditionType.precondTime():\n            timeBounds = tx.cond().timeBounds();\n            break;\n          case _xdr2.default.PreconditionType.precondV2():\n            cond = tx.cond().v2();\n            timeBounds = cond.timeBounds();\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n    if (cond) {\n      var ledgerBounds = cond.ledgerBounds();\n      if (ledgerBounds) {\n        _this._ledgerBounds = {\n          minLedger: ledgerBounds.minLedger(),\n          maxLedger: ledgerBounds.maxLedger()\n        };\n      }\n      var minSeq = cond.minSeqNum();\n      if (minSeq) {\n        _this._minAccountSequence = minSeq.toString();\n      }\n      _this._minAccountSequenceAge = cond.minSeqAge();\n      _this._minAccountSequenceLedgerGap = cond.minSeqLedgerGap();\n      _this._extraSigners = cond.extraSigners();\n    }\n    var operations = tx.operations() || [];\n    _this._operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    return _this;\n  }\n\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n\n  _createClass(Transaction, [{\n    key: 'signatureBase',\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var tx = this.tx;\n\n      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n      if (this._envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTxV0()) {\n        tx = _xdr2.default.Transaction.fromXDR(Buffer.concat([\n        // TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _xdr2.default.PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n      var taggedTransaction = new _xdr2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n      var txSignature = new _xdr2.default.TransactionSignaturePayload({\n        networkId: _xdr2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope = void 0;\n      switch (this._envelopeType) {\n        case _xdr2.default.EnvelopeType.envelopeTypeTxV0():\n          envelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTxV0(new _xdr2.default.TransactionV0Envelope({\n            tx: _xdr2.default.TransactionV0.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        case _xdr2.default.EnvelopeType.envelopeTypeTx():\n          envelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTx(new _xdr2.default.TransactionV1Envelope({\n            tx: _xdr2.default.Transaction.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        default:\n          throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + this._envelopeType.name + '.');\n      }\n      return envelope;\n    }\n\n    /**\n     * Calculate the claimable balance ID for an operation within the transaction.\n     *\n     * @param   {integer}  opIndex   the index of the CreateClaimableBalance op\n     * @returns {string}   a hex string representing the claimable balance ID\n     *\n     * @throws {RangeError}   for invalid `opIndex` value\n     * @throws {TypeError}    if op at `opIndex` is not `CreateClaimableBalance`\n     * @throws for general XDR un/marshalling failures\n     *\n     * @see https://github.com/stellar/go/blob/d712346e61e288d450b0c08038c158f8848cc3e4/txnbuild/transaction.go#L392-L435\n     *\n     */\n  }, {\n    key: 'getClaimableBalanceId',\n    value: function getClaimableBalanceId(opIndex) {\n      // Validate and then extract the operation from the transaction.\n      if (!Number.isInteger(opIndex) || opIndex < 0 || opIndex >= this.operations.length) {\n        throw new RangeError('invalid operation index');\n      }\n      var op = this.operations[opIndex];\n      try {\n        op = _operation.Operation.createClaimableBalance(op);\n      } catch (err) {\n        throw new TypeError('expected createClaimableBalance, got ' + op.type + ': ' + err);\n      }\n\n      // Always use the transaction's *unmuxed* source.\n      var account = _strkey.StrKey.decodeEd25519PublicKey((0, _decode_encode_muxed_account.extractBaseAddress)(this.source));\n      var operationId = _xdr2.default.HashIdPreimage.envelopeTypeOpId(new _xdr2.default.HashIdPreimageOperationId({\n        sourceAccount: _xdr2.default.AccountId.publicKeyTypeEd25519(account),\n        seqNum: _xdr2.default.SequenceNumber.fromString(this.sequence),\n        opNum: opIndex\n      }));\n      var opIdHash = (0, _hashing.hash)(operationId.toXDR('raw'));\n      var balanceId = _xdr2.default.ClaimableBalanceId.claimableBalanceIdTypeV0(opIdHash);\n      return balanceId.toXDR('hex');\n    }\n  }, {\n    key: 'timeBounds',\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {object}\n     * @property {number} minLedger - smallest ledger bound (uint32)\n     * @property {number} maxLedger - largest ledger bound (or 0 for inf)\n     * @readonly\n     */\n  }, {\n    key: 'ledgerBounds',\n    get: function get() {\n      return this._ledgerBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string} 64 bit account sequence\n     * @readonly\n     */\n  }, {\n    key: 'minAccountSequence',\n    get: function get() {\n      return this._minAccountSequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {number} 64 bit number of seconds\n     * @readonly\n     */\n  }, {\n    key: 'minAccountSequenceAge',\n    get: function get() {\n      return this._minAccountSequenceAge;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {number} 32 bit number of ledgers\n     * @readonly\n     */\n  }, {\n    key: 'minAccountSequenceLedgerGap',\n    get: function get() {\n      return this._minAccountSequenceLedgerGap;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string[]}   array of extra signers (@{link StrKey}s)\n     * @readonly\n     */\n  }, {\n    key: 'extraSigners',\n    get: function get() {\n      return this._extraSigners;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: 'sequence',\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: 'source',\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n  }, {\n    key: 'operations',\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n  return Transaction;\n}(_transaction_base.TransactionBase);","map":{"version":3,"names":["Object","defineProperty","exports","value","Transaction","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_map","require","_map2","_interopRequireDefault","_xdr","_xdr2","_hashing","_strkey","_operation","_memo","_transaction_base","_decode_encode_muxed_account","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_TransactionBase","envelope","networkPassphrase","buffer","Buffer","from","TransactionEnvelope","fromXDR","envelopeType","switch","EnvelopeType","envelopeTypeTxV0","envelopeTypeTx","Error","name","txEnvelope","tx","fee","toString","signatures","slice","_this","getPrototypeOf","_envelopeType","memo","_sequence","seqNum","_source","StrKey","encodeEd25519PublicKey","sourceAccountEd25519","encodeMuxedAccountToAddress","sourceAccount","cond","timeBounds","PreconditionType","precondTime","precondV2","v2","_timeBounds","minTime","maxTime","ledgerBounds","_ledgerBounds","minLedger","maxLedger","minSeq","minSeqNum","_minAccountSequence","_minAccountSequenceAge","minSeqAge","_minAccountSequenceLedgerGap","minSeqLedgerGap","_extraSigners","extraSigners","operations","_operations","op","Operation","fromXDRObject","signatureBase","concat","PublicKeyType","publicKeyTypeEd25519","toXDR","taggedTransaction","TransactionSignaturePayloadTaggedTransaction","txSignature","TransactionSignaturePayload","networkId","Hash","hash","toEnvelope","rawTx","TransactionV0Envelope","TransactionV0","TransactionV1Envelope","getClaimableBalanceId","opIndex","Number","isInteger","RangeError","createClaimableBalance","err","type","account","decodeEd25519PublicKey","extractBaseAddress","source","operationId","HashIdPreimage","envelopeTypeOpId","HashIdPreimageOperationId","AccountId","SequenceNumber","fromString","sequence","opNum","opIdHash","balanceId","ClaimableBalanceId","claimableBalanceIdTypeV0","get","set","Memo","TransactionBase"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/transaction.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _xdr = require('./xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _hashing = require('./hashing');\n\nvar _strkey = require('./strkey');\n\nvar _operation = require('./operation');\n\nvar _memo = require('./memo');\n\nvar _transaction_base = require('./transaction_base');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have an\n * object or base64-encoded string of the transaction envelope XDR, use {@link\n * TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations should not\n * be changed. You should only add signatures (using {@link Transaction#sign})\n * to a Transaction object before submitting to the network or forwarding on to\n * additional signers.\n *\n * @constructor\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string\n * @param {string}  [networkPassphrase] - passphrase of the target stellar\n *     network (e.g. \"Public Global Stellar Network ; September 2015\")\n *\n * @extends TransactionBase\n */\nvar Transaction = exports.Transaction = function (_TransactionBase) {\n  _inherits(Transaction, _TransactionBase);\n\n  function Transaction(envelope, networkPassphrase) {\n    _classCallCheck(this, Transaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    var envelopeType = envelope.switch();\n    if (!(envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTxV0() || envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTx())) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + envelopeType.name + '.');\n    }\n\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n\n    var _this = _possibleConstructorReturn(this, (Transaction.__proto__ || Object.getPrototypeOf(Transaction)).call(this, tx, signatures, fee, networkPassphrase));\n\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n\n    switch (_this._envelopeType) {\n      case _xdr2.default.EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());\n        break;\n    }\n\n    var cond = null;\n    var timeBounds = null;\n    switch (_this._envelopeType) {\n      case _xdr2.default.EnvelopeType.envelopeTypeTxV0():\n        timeBounds = tx.timeBounds();\n        break;\n\n      case _xdr2.default.EnvelopeType.envelopeTypeTx():\n        switch (tx.cond().switch()) {\n          case _xdr2.default.PreconditionType.precondTime():\n            timeBounds = tx.cond().timeBounds();\n            break;\n\n          case _xdr2.default.PreconditionType.precondV2():\n            cond = tx.cond().v2();\n            timeBounds = cond.timeBounds();\n            break;\n\n          default:\n            break;\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n\n    if (cond) {\n      var ledgerBounds = cond.ledgerBounds();\n      if (ledgerBounds) {\n        _this._ledgerBounds = {\n          minLedger: ledgerBounds.minLedger(),\n          maxLedger: ledgerBounds.maxLedger()\n        };\n      }\n\n      var minSeq = cond.minSeqNum();\n      if (minSeq) {\n        _this._minAccountSequence = minSeq.toString();\n      }\n\n      _this._minAccountSequenceAge = cond.minSeqAge();\n      _this._minAccountSequenceLedgerGap = cond.minSeqLedgerGap();\n      _this._extraSigners = cond.extraSigners();\n    }\n\n    var operations = tx.operations() || [];\n    _this._operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    return _this;\n  }\n\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n\n\n  _createClass(Transaction, [{\n    key: 'signatureBase',\n\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var tx = this.tx;\n\n      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n      if (this._envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTxV0()) {\n        tx = _xdr2.default.Transaction.fromXDR(Buffer.concat([\n        // TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _xdr2.default.PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n\n      var taggedTransaction = new _xdr2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n\n      var txSignature = new _xdr2.default.TransactionSignaturePayload({\n        networkId: _xdr2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope = void 0;\n      switch (this._envelopeType) {\n        case _xdr2.default.EnvelopeType.envelopeTypeTxV0():\n          envelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTxV0(new _xdr2.default.TransactionV0Envelope({\n            tx: _xdr2.default.TransactionV0.fromXDR(rawTx), // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        case _xdr2.default.EnvelopeType.envelopeTypeTx():\n          envelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTx(new _xdr2.default.TransactionV1Envelope({\n            tx: _xdr2.default.Transaction.fromXDR(rawTx), // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        default:\n          throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + this._envelopeType.name + '.');\n      }\n\n      return envelope;\n    }\n\n    /**\n     * Calculate the claimable balance ID for an operation within the transaction.\n     *\n     * @param   {integer}  opIndex   the index of the CreateClaimableBalance op\n     * @returns {string}   a hex string representing the claimable balance ID\n     *\n     * @throws {RangeError}   for invalid `opIndex` value\n     * @throws {TypeError}    if op at `opIndex` is not `CreateClaimableBalance`\n     * @throws for general XDR un/marshalling failures\n     *\n     * @see https://github.com/stellar/go/blob/d712346e61e288d450b0c08038c158f8848cc3e4/txnbuild/transaction.go#L392-L435\n     *\n     */\n\n  }, {\n    key: 'getClaimableBalanceId',\n    value: function getClaimableBalanceId(opIndex) {\n      // Validate and then extract the operation from the transaction.\n      if (!Number.isInteger(opIndex) || opIndex < 0 || opIndex >= this.operations.length) {\n        throw new RangeError('invalid operation index');\n      }\n\n      var op = this.operations[opIndex];\n      try {\n        op = _operation.Operation.createClaimableBalance(op);\n      } catch (err) {\n        throw new TypeError('expected createClaimableBalance, got ' + op.type + ': ' + err);\n      }\n\n      // Always use the transaction's *unmuxed* source.\n      var account = _strkey.StrKey.decodeEd25519PublicKey((0, _decode_encode_muxed_account.extractBaseAddress)(this.source));\n      var operationId = _xdr2.default.HashIdPreimage.envelopeTypeOpId(new _xdr2.default.HashIdPreimageOperationId({\n        sourceAccount: _xdr2.default.AccountId.publicKeyTypeEd25519(account),\n        seqNum: _xdr2.default.SequenceNumber.fromString(this.sequence),\n        opNum: opIndex\n      }));\n\n      var opIdHash = (0, _hashing.hash)(operationId.toXDR('raw'));\n      var balanceId = _xdr2.default.ClaimableBalanceId.claimableBalanceIdTypeV0(opIdHash);\n      return balanceId.toXDR('hex');\n    }\n  }, {\n    key: 'timeBounds',\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {object}\n     * @property {number} minLedger - smallest ledger bound (uint32)\n     * @property {number} maxLedger - largest ledger bound (or 0 for inf)\n     * @readonly\n     */\n\n  }, {\n    key: 'ledgerBounds',\n    get: function get() {\n      return this._ledgerBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string} 64 bit account sequence\n     * @readonly\n     */\n\n  }, {\n    key: 'minAccountSequence',\n    get: function get() {\n      return this._minAccountSequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {number} 64 bit number of seconds\n     * @readonly\n     */\n\n  }, {\n    key: 'minAccountSequenceAge',\n    get: function get() {\n      return this._minAccountSequenceAge;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {number} 32 bit number of ledgers\n     * @readonly\n     */\n\n  }, {\n    key: 'minAccountSequenceLedgerGap',\n    get: function get() {\n      return this._minAccountSequenceLedgerGap;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string[]}   array of extra signers (@{link StrKey}s)\n     * @readonly\n     */\n\n  }, {\n    key: 'extraSigners',\n    get: function get() {\n      return this._extraSigners;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'sequence',\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'source',\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n\n  }, {\n    key: 'operations',\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n\n  return Transaction;\n}(_transaction_base.TransactionBase);"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}