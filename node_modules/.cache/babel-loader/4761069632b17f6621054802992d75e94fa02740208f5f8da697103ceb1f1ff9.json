{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allowTrust = allowTrust;\nvar _padEnd = require('lodash/padEnd');\nvar _padEnd2 = _interopRequireDefault(_padEnd);\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _keypair = require('../keypair');\nvar _strkey = require('../strkey');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @deprecated since v5.0\n *\n * Returns an XDR AllowTrustOp. An \"allow trust\" operation authorizes another\n * account to hold your account's credit for a given asset.\n *\n * @function\n * @alias Operation.allowTrust\n *\n * @param {object} opts Options object\n * @param {string} opts.trustor - The trusting account (the one being authorized)\n * @param {string} opts.assetCode - The asset code being authorized.\n * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.AllowTrustOp} Allow Trust operation\n */\nfunction allowTrust(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) {\n    throw new Error('trustor is invalid');\n  }\n  var attributes = {};\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  if (opts.assetCode.length <= 4) {\n    var code = (0, _padEnd2.default)(opts.assetCode, 4, '\\0');\n    attributes.asset = _xdr2.default.AssetCode.assetTypeCreditAlphanum4(code);\n  } else if (opts.assetCode.length <= 12) {\n    var _code = (0, _padEnd2.default)(opts.assetCode, 12, '\\0');\n    attributes.asset = _xdr2.default.AssetCode.assetTypeCreditAlphanum12(_code);\n  } else {\n    throw new Error('Asset code must be 12 characters at max.');\n  }\n  if (typeof opts.authorize === 'boolean') {\n    if (opts.authorize) {\n      attributes.authorize = _xdr2.default.TrustLineFlags.authorizedFlag().value;\n    } else {\n      attributes.authorize = 0;\n    }\n  } else {\n    attributes.authorize = opts.authorize;\n  }\n  var allowTrustOp = new _xdr2.default.AllowTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.allowTrust(allowTrustOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","allowTrust","_padEnd","require","_padEnd2","_interopRequireDefault","_xdr","_xdr2","_keypair","_strkey","obj","__esModule","default","opts","StrKey","isValidEd25519PublicKey","trustor","Error","attributes","Keypair","fromPublicKey","xdrAccountId","assetCode","length","code","asset","AssetCode","assetTypeCreditAlphanum4","_code","assetTypeCreditAlphanum12","authorize","TrustLineFlags","authorizedFlag","allowTrustOp","AllowTrustOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/allow_trust.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allowTrust = allowTrust;\n\nvar _padEnd = require('lodash/padEnd');\n\nvar _padEnd2 = _interopRequireDefault(_padEnd);\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @deprecated since v5.0\n *\n * Returns an XDR AllowTrustOp. An \"allow trust\" operation authorizes another\n * account to hold your account's credit for a given asset.\n *\n * @function\n * @alias Operation.allowTrust\n *\n * @param {object} opts Options object\n * @param {string} opts.trustor - The trusting account (the one being authorized)\n * @param {string} opts.assetCode - The asset code being authorized.\n * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.AllowTrustOp} Allow Trust operation\n */\nfunction allowTrust(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) {\n    throw new Error('trustor is invalid');\n  }\n  var attributes = {};\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  if (opts.assetCode.length <= 4) {\n    var code = (0, _padEnd2.default)(opts.assetCode, 4, '\\0');\n    attributes.asset = _xdr2.default.AssetCode.assetTypeCreditAlphanum4(code);\n  } else if (opts.assetCode.length <= 12) {\n    var _code = (0, _padEnd2.default)(opts.assetCode, 12, '\\0');\n    attributes.asset = _xdr2.default.AssetCode.assetTypeCreditAlphanum12(_code);\n  } else {\n    throw new Error('Asset code must be 12 characters at max.');\n  }\n\n  if (typeof opts.authorize === 'boolean') {\n    if (opts.authorize) {\n      attributes.authorize = _xdr2.default.TrustLineFlags.authorizedFlag().value;\n    } else {\n      attributes.authorize = 0;\n    }\n  } else {\n    attributes.authorize = opts.authorize;\n  }\n\n  var allowTrustOp = new _xdr2.default.AllowTrustOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.allowTrust(allowTrustOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}