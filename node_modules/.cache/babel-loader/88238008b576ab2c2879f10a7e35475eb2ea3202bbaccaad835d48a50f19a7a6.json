{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport JSBI from 'jsbi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ERC20_INTERFACE from '../../constants/abis/erc20';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { tryParseAmount5, tryParseAmount6 } from '../swap/hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport { isAddress } from '../../utils';\nimport { BigAmount } from '../../utils/formatBignumber';\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks';\nimport { gnosissafe } from '../../connectors';\nimport { walletViews, updateTokenBalance } from './actions';\nexport function useIsGnosisSafeWallet() {\n  const {\n    connector,\n    account\n  } = useActiveWeb3React();\n  const isGnosisSafeWallet = useMemo(() => {\n    // console.log(gnosissafe)\n    // console.log(connector)\n    if (gnosissafe === connector && account) {\n      return true;\n    }\n    return false;\n  }, [gnosissafe, connector, account]);\n  return {\n    isGnosisSafeWallet\n  };\n}\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHWalletBalances(uncheckedAddresses, chainId) {\n  const multicallContract = useMulticallContract();\n  const addresses = useMemo(() => uncheckedAddresses ? uncheckedAddresses.map(isAddress).filter(a => a !== false).sort() : [], [uncheckedAddresses]);\n  const results = useSingleContractMultipleData(multicallContract, 'getEthBalance', addresses.map(address => [address]), undefined, chainId);\n  // console.log(results)\n  return useMemo(() => addresses.reduce((memo, address, i) => {\n    var _results$i, _results$i$result;\n    const value = results === null || results === void 0 ? void 0 : (_results$i = results[i]) === null || _results$i === void 0 ? void 0 : (_results$i$result = _results$i.result) === null || _results$i$result === void 0 ? void 0 : _results$i$result[0];\n    if (value) memo[address] = BigAmount.format(18, value.toString());\n    return memo;\n  }, {}), [addresses, results]);\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(address, tokens, chainId) {\n  const validatedTokens = useMemo(() => {\n    var _tokens$filter;\n    return (_tokens$filter = tokens === null || tokens === void 0 ? void 0 : tokens.filter(t => isAddress(t === null || t === void 0 ? void 0 : t.address) !== false)) !== null && _tokens$filter !== void 0 ? _tokens$filter : [];\n  }, [tokens]);\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens]);\n  // console.log(chainId)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address], undefined, chainId);\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading = useMemo(() => balances.some(callState => callState.loading), [balances]);\n  return [useMemo(() => {\n    if (address && validatedTokens.length > 0) {\n      const results = validatedTokens.reduce((memo, token, i) => {\n        var _balances$i, _balances$i$result;\n        const value = balances === null || balances === void 0 ? void 0 : (_balances$i = balances[i]) === null || _balances$i === void 0 ? void 0 : (_balances$i$result = _balances$i.result) === null || _balances$i$result === void 0 ? void 0 : _balances$i$result[0];\n        const amount = value ? JSBI.BigInt(value.toString()) : undefined;\n        if (amount) {\n          memo[token.address.toLowerCase()] = BigAmount.format(token.decimals, amount);\n        }\n        // console.log(memo)\n        return memo;\n      }, {});\n      return results;\n    } else {\n      return {};\n    }\n  }, [address, validatedTokens, balances]), anyLoading];\n}\nexport function useTokenBalancesWithLoadingIndicator1(address, token, decimals, chainId) {\n  // const validatedTokens: any[] = useMemo(\n  //   () => tokens?.filter((t?: any): t is any => isAddress(t?.address) !== false) ?? [],\n  //   [tokens]\n  // )\n\n  // const validatedTokenAddresses = isAddress(token) ? [token] : []\n  // const validatedAddresses = isAddress(address) ? [address] : [undefined]\n  const validatedTokenAddresses = useMemo(() => {\n    if (isAddress(token)) {\n      return [token];\n    }\n    return [undefined];\n  }, [token]);\n  const validatedAddresses = useMemo(() => {\n    if (isAddress(address)) {\n      return [address];\n    }\n    return [undefined];\n  }, [address]);\n  // console.log(chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(validatedAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', validatedAddresses, undefined, chainId);\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading = useMemo(() => balances.some(callState => callState.loading), [balances]);\n  return useMemo(() => {\n    // console.log(token, address, balances)\n    if (address && token && !anyLoading) {\n      var _balances$, _balances$$result;\n      const value = balances === null || balances === void 0 ? void 0 : (_balances$ = balances[0]) === null || _balances$ === void 0 ? void 0 : (_balances$$result = _balances$.result) === null || _balances$$result === void 0 ? void 0 : _balances$$result[0];\n      const amount = value ? value.toString() : undefined;\n      // console.log('amount', amount)\n      // console.log('decimals', decimals)\n      // console.log(balances)\n      return amount || amount === 0 ? BigAmount.format(decimals, amount) : undefined;\n    } else {\n      return undefined;\n    }\n  }, [address, token, balances, anyLoading]);\n}\nexport function useOneTokenBalance(token) {\n  const {\n    chainId,\n    account\n  } = useActiveReact();\n  const lists = useSelector(state => state.wallet.tokenBalanceList);\n  // console.log(lists)\n  return useMemo(() => {\n    if (chainId && account && lists && token) {\n      var _lists$account, _lists$account$chainI;\n      // console.log(lists)\n      // console.log(account)\n      // console.log(chainId)\n      // console.log(token)\n      if (lists === null || lists === void 0 ? void 0 : (_lists$account = lists[account]) === null || _lists$account === void 0 ? void 0 : (_lists$account$chainI = _lists$account[chainId]) === null || _lists$account$chainI === void 0 ? void 0 : _lists$account$chainI[token]) {\n        const blItem = lists[account][chainId][token];\n        if (token === 'NATIVE') {\n          // console.log(blItem)\n          return {\n            ...blItem,\n            balances: blItem.balancestr === '0' ? BigAmount.format(18, '0') : tryParseAmount6(blItem.balancestr)\n          };\n        }\n        const tokens = {\n          chainId,\n          address: token,\n          decimals: blItem.dec\n        };\n        const amount = blItem.balancestr ? JSBI.BigInt(blItem.balancestr.toString()) : undefined;\n        return {\n          ...blItem,\n          balances1: tryParseAmount6(blItem.balancestr),\n          balances2: tryParseAmount5(blItem.balancestr, blItem.dec),\n          balances: tokens && amount ? BigAmount.format(tokens.decimals, amount) : ''\n        };\n      }\n      return {};\n    }\n    return {};\n  }, [lists, chainId, account, token]);\n}\nexport function useCurrencyBalance1(account, token, decimals, chainId) {\n  // const balances = useTokenBalanceList()\n  // console.log(currency)\n  const balanceWallet = useTokenBalancesWithLoadingIndicator1(account, token, decimals, chainId);\n  const blItem = useOneTokenBalance(token ? token === null || token === void 0 ? void 0 : token.toLowerCase() : undefined);\n  // console.log('balanceWallet', token, balanceWallet)\n  return useMemo(() => {\n    // console.log('blItem', blItem)\n    // console.log('balanceWallet', token, balanceWallet)\n    if (balanceWallet) {\n      return balanceWallet;\n    } else {\n      if (blItem === null || blItem === void 0 ? void 0 : blItem.balances) {\n        // return BigAmount.format(decimals, blItem.balances)\n        return blItem.balances;\n      }\n      return undefined;\n    }\n  }, [balanceWallet, blItem === null || blItem === void 0 ? void 0 : blItem.balances, decimals]);\n  // }, [account, token, chainId, balanceWallet, blItem?.balances, decimals])\n}\n\nexport function useTokenTotalSupplyWithLoadingIndicator(tokens, chainId) {\n  const validatedTokens = useMemo(() => {\n    var _tokens$filter2;\n    return (_tokens$filter2 = tokens === null || tokens === void 0 ? void 0 : tokens.filter(t => isAddress(t === null || t === void 0 ? void 0 : t.address) !== false)) !== null && _tokens$filter2 !== void 0 ? _tokens$filter2 : [];\n  }, [tokens]);\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens]);\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'totalSupply', [], undefined, chainId);\n  // console.log(validatedTokenAddresses)\n  // console.log(balances)\n  // console.log(balances)\n\n  const anyLoading = useMemo(() => balances.some(callState => callState.loading), [balances]);\n  return [useMemo(() => validatedTokens.length > 0 ? validatedTokens.reduce((memo, token, i) => {\n    var _balances$i2, _balances$i2$result;\n    const value = balances === null || balances === void 0 ? void 0 : (_balances$i2 = balances[i]) === null || _balances$i2 === void 0 ? void 0 : (_balances$i2$result = _balances$i2.result) === null || _balances$i2$result === void 0 ? void 0 : _balances$i2$result[0];\n    const amount = value ? JSBI.BigInt(value.toString()) : undefined;\n    if (amount) {\n      // memo[token.address.toLowerCase()] = new TokenAmount(token, amount)\n      memo[token.address.toLowerCase()] = BigAmount.format(token.decimals, amount);\n    }\n    // console.log(memo)\n    return memo;\n  }, {}) : {}, [validatedTokens, balances]), anyLoading];\n}\nexport function useTokenBalancesList(address, tokens, chainId) {\n  const validatedTokens = useMemo(() => {\n    var _tokens$filter3;\n    return (_tokens$filter3 = tokens === null || tokens === void 0 ? void 0 : tokens.filter(t => isAddress(t) !== false)) !== null && _tokens$filter3 !== void 0 ? _tokens$filter3 : [];\n  }, [tokens]);\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt), [validatedTokens]);\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address], undefined, chainId);\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading = useMemo(() => balances.some(callState => callState.loading), [balances]);\n  return [useMemo(() => address && validatedTokens.length > 0 ? validatedTokens.reduce((memo, token, i) => {\n    var _balances$i3, _balances$i3$result;\n    const value = balances === null || balances === void 0 ? void 0 : (_balances$i3 = balances[i]) === null || _balances$i3 === void 0 ? void 0 : (_balances$i3$result = _balances$i3.result) === null || _balances$i3$result === void 0 ? void 0 : _balances$i3$result[0];\n    const amount = value ? JSBI.BigInt(value.toString()) : undefined;\n    if (amount) {\n      memo[token] = amount.toString();\n    }\n    // console.log(memo)\n    return memo;\n  }, {}) : {}, [address, validatedTokens, balances]), anyLoading];\n}\nexport function useTokenBalanceList() {\n  const {\n    chainId,\n    account\n  } = useActiveReact();\n  const lists = useSelector(state => state.wallet.tokenBalanceList);\n  // console.log(lists)\n  return useMemo(() => {\n    if (chainId && account && lists) {\n      if (lists[account] && lists[account][chainId]) {\n        const list = {};\n        for (const token in lists[account][chainId]) {\n          const obj = lists[account][chainId][token];\n          // const amount = obj.balancestr ? JSBI.BigInt(obj.balancestr.toString()) : undefined\n          try {\n            list[token] = {\n              ...obj,\n              balances: BigAmount.format(obj.dec ? obj.dec : 0, obj.balancestr)\n              // balances: amount\n            };\n          } catch (error) {\n            console.log(error);\n            console.log(obj);\n            console.log(account, chainId, token);\n          }\n        }\n        return list;\n      }\n      return {};\n    }\n    return {};\n  }, [lists, chainId, account]);\n}\nexport function useETHBalances(uncheckedAddresses, chainId) {\n  const ethBalance = useETHWalletBalances(uncheckedAddresses, chainId);\n  const blItem = useOneTokenBalance('NATIVE');\n  const addresses = useMemo(() => uncheckedAddresses ? uncheckedAddresses.map(isAddress).filter(a => a !== false).sort() : [], [uncheckedAddresses]);\n  return useMemo(() => {\n    if (chainId) {\n      // console.log(1)\n      // console.log(ethBalance)\n      return ethBalance;\n    } else {\n      // console.log(2)\n      // console.log(blItem)\n      // console.log(blItem.balances)\n      // console.log(ethBalance)\n      return addresses.reduce((memo, address) => {\n        if (ethBalance[address]) return ethBalance;\n        if (blItem === null || blItem === void 0 ? void 0 : blItem.balances) return {\n          [address]: blItem === null || blItem === void 0 ? void 0 : blItem.balances\n        };\n        return memo;\n      }, {});\n    }\n  }, [ethBalance, blItem, chainId]);\n}\nexport function useTokenTotalSupply(tokens, chainId) {\n  const validatedTokens = useMemo(() => {\n    var _tokens$filter4;\n    return (_tokens$filter4 = tokens === null || tokens === void 0 ? void 0 : tokens.filter(t => isAddress(t) !== false)) !== null && _tokens$filter4 !== void 0 ? _tokens$filter4 : [];\n  }, [tokens]);\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt), [validatedTokens]);\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'totalSupply', [], undefined, chainId);\n  // console.log(validatedTokenAddresses)\n  // console.log(balances)\n  // console.log(balances)\n\n  const anyLoading = useMemo(() => balances.some(callState => callState.loading), [balances]);\n  return [useMemo(() => validatedTokens.length > 0 ? validatedTokens.reduce((memo, token, i) => {\n    var _balances$i4, _balances$i4$result;\n    const value = balances === null || balances === void 0 ? void 0 : (_balances$i4 = balances[i]) === null || _balances$i4 === void 0 ? void 0 : (_balances$i4$result = _balances$i4.result) === null || _balances$i4$result === void 0 ? void 0 : _balances$i4$result[0];\n    const amount = value ? JSBI.BigInt(value.toString()) : undefined;\n    if (amount) {\n      memo[token] = amount.toString();\n    }\n    // console.log(memo)\n    return memo;\n  }, {}) : {}, [validatedTokens, balances]), anyLoading];\n}\nexport function useTokenBalances(address, tokens, chainId) {\n  return useTokenBalancesWithLoadingIndicator(address ? address === null || address === void 0 ? void 0 : address.toLowerCase() : undefined, tokens, chainId)[0];\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account, token, chainId) {\n  const tokenBalances = useTokenBalances(account, [token], chainId);\n  if (!(token === null || token === void 0 ? void 0 : token.address)) return undefined;\n  return tokenBalances[token.address.toLowerCase()];\n}\nexport function useCurrencyBalances(account, currencies, chainId, isETH) {\n  const tokens = useMemo(() => {\n    var _currencies$filter;\n    return (_currencies$filter = currencies === null || currencies === void 0 ? void 0 : currencies.filter(currency => currency === null || currency === void 0 ? void 0 : currency.address)) !== null && _currencies$filter !== void 0 ? _currencies$filter : [];\n  }, [currencies]);\n  // console.log(tokens)\n  const tokenBalances = useTokenBalances(account, tokens, chainId);\n  const containsETH = isETH;\n  const ethBalance = useETHBalances(containsETH ? [account] : [], chainId);\n  return useMemo(() => {\n    var _currencies$map;\n    return (_currencies$map = currencies === null || currencies === void 0 ? void 0 : currencies.map(currency => {\n      var _currency$address;\n      if (!account || !currency) return undefined;\n      if (isETH) return ethBalance[account];\n      if (currency === null || currency === void 0 ? void 0 : currency.address) return tokenBalances[(_currency$address = currency.address) === null || _currency$address === void 0 ? void 0 : _currency$address.toLowerCase()];\n      // if (currency === ETHER) return ethBalance[account]\n      return undefined;\n    })) !== null && _currencies$map !== void 0 ? _currencies$map : [];\n  }, [account, currencies, ethBalance, tokenBalances]);\n}\nexport function useCurrencyBalance(account, currency, chainId, isETH) {\n  var _currency$address2;\n  // const balances = useTokenBalanceList()\n  // console.log(currency)\n  const balanceWallet = useCurrencyBalances(account, currency ? [currency] : [], chainId, isETH)[0];\n  const blItem = useOneTokenBalance(currency ? currency === null || currency === void 0 ? void 0 : (_currency$address2 = currency.address) === null || _currency$address2 === void 0 ? void 0 : _currency$address2.toLowerCase() : undefined);\n  return useMemo(() => {\n    if (chainId || balanceWallet) {\n      return balanceWallet;\n    } else {\n      if (blItem && blItem.balances) {\n        return blItem.balances;\n      }\n      return undefined;\n    }\n  }, [account, currency, chainId, isETH, balanceWallet, blItem]);\n}\nexport function useWalletViews() {\n  const walletViewsResult = useSelector(state => state.wallet.walletViews);\n  const dispatch = useDispatch();\n  // const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT)\n\n  const setWalletView = useCallback(type => {\n    // console.log(type)\n    dispatch(walletViews({\n      type\n    }));\n  }, []);\n  return {\n    walletView: walletViewsResult,\n    setWalletView\n  };\n}\nexport function useAllTokenBalance() {\n  const dispatch = useDispatch();\n  const tokenBalance = useSelector(state => state.wallet.tokenBalance);\n  const setTokenBalance = useCallback((chainId, token, account, balance, decimals) => {\n    dispatch(updateTokenBalance({\n      chainId,\n      token,\n      account,\n      balance,\n      decimals\n    }));\n  }, [dispatch]);\n  const getTokenBalance = useCallback((chainId, token, account) => {\n    var _tokenBalance$chainId, _tokenBalance$chainId2;\n    // console.log(tokenBalance)\n    if (tokenBalance === null || tokenBalance === void 0 ? void 0 : (_tokenBalance$chainId = tokenBalance[chainId]) === null || _tokenBalance$chainId === void 0 ? void 0 : (_tokenBalance$chainId2 = _tokenBalance$chainId[account]) === null || _tokenBalance$chainId2 === void 0 ? void 0 : _tokenBalance$chainId2[token]) {\n      var _tokenBalance$chainId3, _tokenBalance$chainId4;\n      return tokenBalance === null || tokenBalance === void 0 ? void 0 : (_tokenBalance$chainId3 = tokenBalance[chainId]) === null || _tokenBalance$chainId3 === void 0 ? void 0 : (_tokenBalance$chainId4 = _tokenBalance$chainId3[account]) === null || _tokenBalance$chainId4 === void 0 ? void 0 : _tokenBalance$chainId4[token];\n    }\n    return;\n  }, [tokenBalance]);\n  return {\n    setTokenBalance,\n    getTokenBalance\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","JSBI","useDispatch","useSelector","ERC20_INTERFACE","useActiveWeb3React","useActiveReact","tryParseAmount5","tryParseAmount6","useMulticallContract","isAddress","BigAmount","useSingleContractMultipleData","useMultipleContractSingleData","gnosissafe","walletViews","updateTokenBalance","useIsGnosisSafeWallet","connector","account","isGnosisSafeWallet","useETHWalletBalances","uncheckedAddresses","chainId","multicallContract","addresses","map","filter","a","sort","results","address","undefined","reduce","memo","i","_results$i","_results$i$result","value","result","format","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","_tokens$filter","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","_balances$i","_balances$i$result","amount","BigInt","toLowerCase","decimals","useTokenBalancesWithLoadingIndicator1","validatedAddresses","_balances$","_balances$$result","useOneTokenBalance","lists","state","wallet","tokenBalanceList","_lists$account","_lists$account$chainI","blItem","balancestr","dec","balances1","balances2","useCurrencyBalance1","balanceWallet","useTokenTotalSupplyWithLoadingIndicator","_tokens$filter2","_balances$i2","_balances$i2$result","useTokenBalancesList","_tokens$filter3","_balances$i3","_balances$i3$result","useTokenBalanceList","list","obj","error","console","log","useETHBalances","ethBalance","useTokenTotalSupply","_tokens$filter4","_balances$i4","_balances$i4$result","useTokenBalances","useTokenBalance","tokenBalances","useCurrencyBalances","currencies","isETH","_currencies$filter","currency","containsETH","_currencies$map","_currency$address","useCurrencyBalance","_currency$address2","useWalletViews","walletViewsResult","dispatch","setWalletView","type","walletView","useAllTokenBalance","tokenBalance","setTokenBalance","balance","getTokenBalance","_tokenBalance$chainId","_tokenBalance$chainId2","_tokenBalance$chainId3","_tokenBalance$chainId4"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/wallet/hooks.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport JSBI from 'jsbi'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\nimport {useActiveWeb3React} from '../../hooks'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { tryParseAmount5,tryParseAmount6 } from '../swap/hooks'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { BigAmount } from '../../utils/formatBignumber'\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\nimport { AppState, AppDispatch } from '../index'\n\nimport {gnosissafe} from '../../connectors'\nimport { walletViews, updateTokenBalance } from './actions'\n\nexport function useIsGnosisSafeWallet () {\n  const { connector, account } = useActiveWeb3React()\n  const isGnosisSafeWallet =  useMemo(() => {\n    // console.log(gnosissafe)\n    // console.log(connector)\n    if ( gnosissafe === connector && account) {\n      return true\n    }\n    return false\n  }, [gnosissafe, connector, account])\n  return {\n    isGnosisSafeWallet\n  }\n}\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHWalletBalances(\n  uncheckedAddresses?: (string | undefined)[],\n  chainId?: any\n): { [address: string]: any | undefined } {\n  const multicallContract = useMulticallContract()\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map(address => [address]),\n    undefined,\n    chainId\n  )\n  // console.log(results)\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: any }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value) memo[address] = BigAmount.format(18, value.toString())\n        return memo\n      }, {}),\n    [addresses, results]\n  )\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (any | undefined)[],\n  chainId?:any\n): [{ [tokenAddress: string]: any }, boolean] {\n  const validatedTokens: any[] = useMemo(\n    () => tokens?.filter((t?: any) => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\n  // console.log(chainId)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () => {\n        if (address && validatedTokens.length > 0) {\n          const results = validatedTokens.reduce<{ [tokenAddress: string]: any }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address.toLowerCase()] = BigAmount.format(token.decimals, amount)\n            }\n            // console.log(memo)\n            return memo\n          }, {})\n          return results\n        } else {\n          return {}\n        }\n      },\n      [address, validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalancesWithLoadingIndicator1(\n  address?: any,\n  token?: any,\n  decimals?: any,\n  chainId?:any\n): any {\n  // const validatedTokens: any[] = useMemo(\n  //   () => tokens?.filter((t?: any): t is any => isAddress(t?.address) !== false) ?? [],\n  //   [tokens]\n  // )\n\n  // const validatedTokenAddresses = isAddress(token) ? [token] : []\n  // const validatedAddresses = isAddress(address) ? [address] : [undefined]\n  const validatedTokenAddresses = useMemo(() => {\n    if (isAddress(token)) {\n      return [token]\n    } \n    return [undefined]\n  }, [token])\n  const validatedAddresses = useMemo(() => {\n    if (isAddress(address)) {\n      return [address]\n    } \n    return [undefined]\n  }, [address])\n  // console.log(chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(validatedAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', validatedAddresses, undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return useMemo(\n    () => {\n      // console.log(token, address, balances)\n      if (address && token && !anyLoading) {\n        const value = balances?.[0]?.result?.[0]\n        const amount = value ? value.toString() : undefined\n        // console.log('amount', amount)\n        // console.log('decimals', decimals)\n        // console.log(balances)\n        return amount || amount === 0 ? BigAmount.format(decimals, amount) : undefined\n      } else {\n        return undefined\n      }\n    },\n    [address, token, balances, anyLoading]\n  )\n}\n\nexport function useOneTokenBalance(token:any): any {\n  const { chainId, account } = useActiveReact()\n  const lists:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.tokenBalanceList)\n  // console.log(lists)\n  return useMemo(() => {\n    if (chainId && account && lists && token) {\n      // console.log(lists)\n      // console.log(account)\n      // console.log(chainId)\n      // console.log(token)\n      if (lists?.[account]?.[chainId]?.[token]) {\n        const blItem = lists[account][chainId][token]\n        if (token === 'NATIVE') {\n          // console.log(blItem)\n          return {\n            ...blItem,\n            balances: blItem.balancestr === '0' ? BigAmount.format(18, '0') : tryParseAmount6(blItem.balancestr)\n          }\n        }\n        \n        const tokens = {chainId,address: token, decimals: blItem.dec}\n        const amount = blItem.balancestr ? JSBI.BigInt(blItem.balancestr.toString()) : undefined\n        return {\n          ...blItem,\n          balances1: tryParseAmount6(blItem.balancestr),\n          balances2: tryParseAmount5(blItem.balancestr, blItem.dec),\n          balances: tokens && amount ? BigAmount.format(tokens.decimals, amount) : ''\n        }\n      }\n      return {}\n    }\n    return {}\n  }, [lists, chainId, account, token])\n}\n\nexport function useCurrencyBalance1(account?: string | null, token?: string, decimals?: any, chainId?:any): any | undefined {\n  // const balances = useTokenBalanceList()\n  // console.log(currency)\n  const balanceWallet  = useTokenBalancesWithLoadingIndicator1(account, token, decimals, chainId)\n  const blItem = useOneTokenBalance(token ? token?.toLowerCase() : undefined)\n  // console.log('balanceWallet', token, balanceWallet)\n  return useMemo(() => {\n    // console.log('blItem', blItem)\n    // console.log('balanceWallet', token, balanceWallet)\n    if (balanceWallet) {\n      return balanceWallet\n    } else {\n      if (blItem?.balances) {\n        // return BigAmount.format(decimals, blItem.balances)\n        return blItem.balances\n      }\n      return undefined\n    }\n  }, [balanceWallet, blItem?.balances, decimals])\n  // }, [account, token, chainId, balanceWallet, blItem?.balances, decimals])\n}\n\n\nexport function useTokenTotalSupplyWithLoadingIndicator(\n  tokens?: (any)[],\n  chainId?:any\n): [{ [tokenAddress: string]: any }, boolean] {\n  const validatedTokens: any[] = useMemo(\n    () => tokens?.filter((t?: any) => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'totalSupply', [], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(balances)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: any }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                // memo[token.address.toLowerCase()] = new TokenAmount(token, amount)\n                memo[token.address.toLowerCase()] = BigAmount.format(token.decimals, amount)\n              }\n              // console.log(memo)\n              return memo\n            }, {})\n          : {},\n      [validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalancesList(\n  address?: string,\n  tokens?: (string | undefined)[],\n  chainId?:any\n): [{ [tokenAddress: string]: string | undefined }, boolean] {\n  const validatedTokens: string[] = useMemo(\n    () => tokens?.filter((t?: string): t is string => isAddress(t) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt), [validatedTokens])\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(address)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: string | undefined }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token] = amount.toString()\n              }\n              // console.log(memo)\n              return memo\n            }, {})\n          : {},\n      [address, validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalanceList(): any {\n  const { chainId, account } = useActiveReact()\n  const lists:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.tokenBalanceList)\n  // console.log(lists)\n  return useMemo(() => {\n    if (chainId && account && lists) {\n      if (lists[account] && lists[account][chainId]) {\n        const list:any = {}\n        for (const token in lists[account][chainId]) {\n          const obj = lists[account][chainId][token]\n          // const amount = obj.balancestr ? JSBI.BigInt(obj.balancestr.toString()) : undefined\n          try {\n            list[token] = {\n              ...obj,\n              balances: BigAmount.format(obj.dec ? obj.dec : 0, obj.balancestr)\n              // balances: amount\n            }\n          } catch (error) {\n            console.log(error)\n            console.log(obj)\n            console.log(account, chainId, token)\n          }\n        }\n        return list\n      }\n      return {}\n    }\n    return {}\n  }, [lists, chainId, account])\n}\n\n\nexport function useETHBalances(\n  uncheckedAddresses?: (string | undefined)[],\n  chainId?: any\n): { [address: string]: any | undefined } {\n  const ethBalance = useETHWalletBalances(uncheckedAddresses, chainId)\n  const blItem = useOneTokenBalance('NATIVE')\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n  return useMemo(\n    () => {\n      if (chainId) {\n        // console.log(1)\n        // console.log(ethBalance)\n        return ethBalance\n      } else {\n        // console.log(2)\n        // console.log(blItem)\n        // console.log(blItem.balances)\n        // console.log(ethBalance)\n        return addresses.reduce<{ [address: string]: any }>((memo, address) => {\n          if (ethBalance[address]) return ethBalance\n          if (blItem?.balances) return {[address]: blItem?.balances}\n          return memo\n        }, {})\n      }\n    },\n    [ethBalance, blItem, chainId]\n  )\n}\nexport function useTokenTotalSupply(\n  tokens?: (string | undefined)[],\n  chainId?:any\n): [{ [tokenAddress: string]: string | undefined }, boolean] {\n  const validatedTokens: string[] = useMemo(\n    () => tokens?.filter((t?: string): t is string => isAddress(t) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt), [validatedTokens])\n  // console.log(tokens)\n  // console.log(validatedTokenAddresses)\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'totalSupply', [], undefined, chainId)\n  // console.log(validatedTokenAddresses)\n  // console.log(balances)\n  // console.log(balances)\n\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: string | undefined }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token] = amount.toString()\n              }\n              // console.log(memo)\n              return memo\n            }, {})\n          : {},\n      [validatedTokens, balances]\n    ),\n    anyLoading\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (any | undefined)[],\n  chainId?:any\n): { [tokenAddress: string]: any } {\n  return useTokenBalancesWithLoadingIndicator(address ? address?.toLowerCase() : undefined, tokens, chainId)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: any, chainId?:any): any {\n  const tokenBalances = useTokenBalances(account, [token], chainId)\n  if (!token?.address) return undefined\n  return tokenBalances[token.address.toLowerCase()]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (any | undefined)[],\n  chainId?:any,\n  isETH?:any\n): (any | undefined)[] {\n  const tokens = useMemo(() => currencies?.filter((currency) => currency?.address) ?? [], [\n    currencies\n  ])\n  // console.log(tokens)\n  const tokenBalances = useTokenBalances(account, tokens, chainId)\n  const containsETH: boolean = isETH\n  const ethBalance = useETHBalances(containsETH ? [account] : [], chainId)\n\n  return useMemo(\n    () =>\n      currencies?.map(currency => {\n        if (!account || !currency) return undefined\n        if (isETH) return ethBalance[account]\n        if (currency?.address) return tokenBalances[currency.address?.toLowerCase()]\n        // if (currency === ETHER) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: any, chainId?:any, isETH?:any): any | undefined {\n  // const balances = useTokenBalanceList()\n  // console.log(currency)\n  const balanceWallet  = useCurrencyBalances(account, currency ? [currency] : [], chainId, isETH)[0]\n  const blItem = useOneTokenBalance(currency ? currency?.address?.toLowerCase() : undefined)\n  return useMemo(() => {\n    if (chainId || balanceWallet) {\n      return balanceWallet\n    } else {\n      if (blItem && blItem.balances) {\n        return blItem.balances\n      }\n      return undefined\n    }\n  }, [account, currency, chainId, isETH, balanceWallet, blItem])\n}\n\n\n\nexport function useWalletViews () {\n  const walletViewsResult:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.walletViews)\n  const dispatch = useDispatch<AppDispatch>()\n  // const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT)\n\n  const setWalletView = useCallback((type: any) => {\n    // console.log(type)\n    dispatch(walletViews({type}))\n  }, [])\n\n  return {\n    walletView: walletViewsResult,\n    setWalletView\n  }\n}\n\nexport function useAllTokenBalance() {\n  const dispatch = useDispatch<AppDispatch>()\n  const tokenBalance:any = useSelector<AppState, AppState['wallet']>(state => state.wallet.tokenBalance)\n\n  const setTokenBalance = useCallback((chainId: any, token:any, account:any, balance:string, decimals:number) => {\n    dispatch(updateTokenBalance({chainId, token, account, balance, decimals}))\n  }, [dispatch])\n\n  const getTokenBalance = useCallback((chainId: any, token:any, account:any) => {\n    // console.log(tokenBalance)\n    if (tokenBalance?.[chainId]?.[account]?.[token]) {\n      return tokenBalance?.[chainId]?.[account]?.[token]\n    }\n    return\n  }, [tokenBalance])\n  return {\n    setTokenBalance,\n    getTokenBalance\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}