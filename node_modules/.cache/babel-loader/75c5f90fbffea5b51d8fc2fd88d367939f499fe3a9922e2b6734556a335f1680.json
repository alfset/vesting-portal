{"ast":null,"code":"import{createReducer,nanoid}from'@reduxjs/toolkit';import{addPopup,removePopup,updateBlockNumber,setOpenModal,viewTxnsDtils,viewTxnsErrorTip}from'./actions';const initialState={blockNumber:{},popupList:[],openModal:null,viewTxnsDtils:{hash:'',isOpenModal:''},viewTxnsErrorTip:{errorTip:'',isOpenModal:''}};export default createReducer(initialState,builder=>builder.addCase(updateBlockNumber,(state,action)=>{const{chainId,blockNumber}=action.payload;if(typeof state.blockNumber[chainId]!=='number'){state.blockNumber[chainId]=blockNumber;}else{state.blockNumber[chainId]=Math.max(blockNumber,state.blockNumber[chainId]);}}).addCase(setOpenModal,(state,action)=>{state.openModal=action.payload;}).addCase(addPopup,(state,_ref)=>{let{payload:{content,key,removeAfterMs=60*1000*2}}=_ref;state.popupList=(key?state.popupList.filter(popup=>popup.key!==key):state.popupList).concat([{key:key||nanoid(),show:true,content,removeAfterMs}]);}).addCase(removePopup,(state,_ref2)=>{let{payload:{key}}=_ref2;state.popupList.forEach(p=>{if(p.key===key){p.show=false;}});}).addCase(viewTxnsDtils,(state,_ref3)=>{let{payload:{hash,isOpenModal}}=_ref3;state.viewTxnsDtils={hash,isOpenModal};}).addCase(viewTxnsErrorTip,(state,_ref4)=>{let{payload:{errorTip,isOpenModal}}=_ref4;state.viewTxnsErrorTip={errorTip,isOpenModal};}));","map":{"version":3,"names":["createReducer","nanoid","addPopup","removePopup","updateBlockNumber","setOpenModal","viewTxnsDtils","viewTxnsErrorTip","initialState","blockNumber","popupList","openModal","hash","isOpenModal","errorTip","builder","addCase","state","action","chainId","payload","Math","max","_ref","content","key","removeAfterMs","filter","popup","concat","show","_ref2","forEach","p","_ref3","_ref4"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/application/reducer.ts"],"sourcesContent":["import { createReducer, nanoid } from '@reduxjs/toolkit'\nimport { addPopup, PopupContent, removePopup, updateBlockNumber, ApplicationModal, setOpenModal, viewTxnsDtils, viewTxnsErrorTip } from './actions'\n\ntype PopupList = Array<{ key: string; show: boolean; content: PopupContent; removeAfterMs: number | null }>\n\nexport interface ApplicationState {\n  readonly blockNumber: { readonly [chainId: number]: number }\n  readonly popupList: PopupList\n  readonly openModal: ApplicationModal | null\n  readonly viewTxnsDtils: any\n  readonly viewTxnsErrorTip: any\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  openModal: null,\n  viewTxnsDtils: {\n    hash: '',\n    isOpenModal: ''\n  },\n  viewTxnsErrorTip: {\n    errorTip: '',\n    isOpenModal: ''\n  }\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const { chainId, blockNumber } = action.payload\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId])\n      }\n    })\n    .addCase(setOpenModal, (state, action) => {\n      state.openModal = action.payload\n    })\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 60 * 1000 * 2 } }) => {\n      state.popupList = (key ? state.popupList.filter(popup => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs\n        }\n      ])\n    })\n    .addCase(removePopup, (state, { payload: { key } }) => {\n      state.popupList.forEach(p => {\n        if (p.key === key) {\n          p.show = false\n        }\n      })\n    })\n    .addCase(viewTxnsDtils, (state, { payload: { hash, isOpenModal } }) => {\n      state.viewTxnsDtils = {\n        hash,\n        isOpenModal\n      }\n    })\n    .addCase(viewTxnsErrorTip, (state, { payload: { errorTip, isOpenModal } }) => {\n      state.viewTxnsErrorTip = {\n        errorTip,\n        isOpenModal\n      }\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}