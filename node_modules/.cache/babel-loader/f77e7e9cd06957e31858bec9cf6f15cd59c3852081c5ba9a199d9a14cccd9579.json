{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiSignature = void 0;\nvar PublicKey_1 = require(\"./PublicKey\");\nvar CompactBitArray_1 = require(\"./CompactBitArray\");\nvar SignatureV2_1 = require(\"./SignatureV2\");\nvar MultiSignature = /** @class */function () {\n  /**\n   * MultiSignature constructor\n   * public_keys order must be guaranteed\n   */\n  function MultiSignature(multisig_pubkey) {\n    this.multisig_pubkey = multisig_pubkey;\n    var n = multisig_pubkey.pubkeys.length;\n    this.bitarray = CompactBitArray_1.CompactBitArray.fromBits(n);\n    this.signatures = [];\n  }\n  MultiSignature.prototype.appendSignature = function (signature_data, index) {\n    var newSigIndex = this.bitarray.numTrueBitsBefore(index);\n    // Signature already exists, just replace the value there\n    if (this.bitarray.getIndex(index)) {\n      this.signatures[newSigIndex] = signature_data;\n      return;\n    }\n    this.bitarray.setIndex(index, true);\n    // Optimization if the index is the greatest index\n    if (newSigIndex == this.signatures.length) {\n      this.signatures.push(signature_data);\n      return;\n    }\n    this.signatures.splice(newSigIndex, 0, signature_data);\n  };\n  // adds a signature to the multisig, at the index in\n  // keys corresponding to the provided pubkey.\n  MultiSignature.prototype.appendSignatureFromPubKey = function (signature_data, public_key) {\n    var index = this.multisig_pubkey.pubkeys.findIndex(function (v) {\n      return v.key === public_key.key;\n    });\n    if (index == -1) {\n      throw new Error(\"provided key doesn't exist in public_keys\");\n    }\n    this.appendSignature(signature_data, index);\n  };\n  MultiSignature.prototype.appendSignatureV2s = function (signatures) {\n    for (var _i = 0, signatures_1 = signatures; _i < signatures_1.length; _i++) {\n      var signature = signatures_1[_i];\n      if (!(signature.public_key instanceof PublicKey_1.SimplePublicKey)) {\n        throw new Error('non-SimplePublicKey cannot be used to sign multisig');\n      }\n      this.appendSignatureFromPubKey(signature.data, signature.public_key);\n    }\n  };\n  MultiSignature.prototype.toSignatureDescriptor = function () {\n    return new SignatureV2_1.SignatureV2.Descriptor(new SignatureV2_1.SignatureV2.Descriptor.Multi(this.bitarray, this.signatures));\n  };\n  return MultiSignature;\n}();\nexports.MultiSignature = MultiSignature;","map":{"version":3,"names":["PublicKey_1","require","CompactBitArray_1","SignatureV2_1","MultiSignature","multisig_pubkey","n","pubkeys","length","bitarray","CompactBitArray","fromBits","signatures","prototype","appendSignature","signature_data","index","newSigIndex","numTrueBitsBefore","getIndex","setIndex","push","splice","appendSignatureFromPubKey","public_key","findIndex","v","key","Error","appendSignatureV2s","_i","signatures_1","signature","SimplePublicKey","data","toSignatureDescriptor","SignatureV2","Descriptor","Multi","exports"],"sources":["../../src/core/MultiSignature.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AACA,IAAAE,aAAA,GAAAF,OAAA;AAEA,IAAAG,cAAA;EAIE;;;;EAIA,SAAAA,eAAmBC,eAA6C;IAA7C,KAAAA,eAAe,GAAfA,eAAe;IAChC,IAAMC,CAAC,GAAGD,eAAe,CAACE,OAAO,CAACC,MAAM;IACxC,IAAI,CAACC,QAAQ,GAAGP,iBAAA,CAAAQ,eAAe,CAACC,QAAQ,CAACL,CAAC,CAAC;IAC3C,IAAI,CAACM,UAAU,GAAG,EAAE;EACtB;EAEOR,cAAA,CAAAS,SAAA,CAAAC,eAAe,GAAtB,UACEC,cAAsC,EACtCC,KAAa;IAEb,IAAMC,WAAW,GAAG,IAAI,CAACR,QAAQ,CAACS,iBAAiB,CAACF,KAAK,CAAC;IAE1D;IACA,IAAI,IAAI,CAACP,QAAQ,CAACU,QAAQ,CAACH,KAAK,CAAC,EAAE;MACjC,IAAI,CAACJ,UAAU,CAACK,WAAW,CAAC,GAAGF,cAAc;MAC7C;;IAGF,IAAI,CAACN,QAAQ,CAACW,QAAQ,CAACJ,KAAK,EAAE,IAAI,CAAC;IAEnC;IACA,IAAIC,WAAW,IAAI,IAAI,CAACL,UAAU,CAACJ,MAAM,EAAE;MACzC,IAAI,CAACI,UAAU,CAACS,IAAI,CAACN,cAAc,CAAC;MACpC;;IAGF,IAAI,CAACH,UAAU,CAACU,MAAM,CAACL,WAAW,EAAE,CAAC,EAAEF,cAAc,CAAC;EACxD,CAAC;EAED;EACA;EACOX,cAAA,CAAAS,SAAA,CAAAU,yBAAyB,GAAhC,UACER,cAAsC,EACtCS,UAA2B;IAE3B,IAAMR,KAAK,GAAG,IAAI,CAACX,eAAe,CAACE,OAAO,CAACkB,SAAS,CAClD,UAAAC,CAAC;MAAI,OAAAA,CAAC,CAACC,GAAG,KAAKH,UAAU,CAACG,GAAG;IAAxB,CAAwB,CAC9B;IACD,IAAIX,KAAK,IAAI,CAAC,CAAC,EAAE;MACf,MAAM,IAAIY,KAAK,CAAC,2CAA2C,CAAC;;IAG9D,IAAI,CAACd,eAAe,CAACC,cAAc,EAAEC,KAAK,CAAC;EAC7C,CAAC;EAEMZ,cAAA,CAAAS,SAAA,CAAAgB,kBAAkB,GAAzB,UAA0BjB,UAAyB;IACjD,KAAwB,IAAAkB,EAAA,IAAU,EAAVC,YAAA,GAAAnB,UAAU,EAAVkB,EAAA,GAAAC,YAAA,CAAAvB,MAAU,EAAVsB,EAAA,EAAU,EAAE;MAA/B,IAAME,SAAS,GAAAD,YAAA,CAAAD,EAAA;MAClB,IAAI,EAAEE,SAAS,CAACR,UAAU,YAAYxB,WAAA,CAAAiC,eAAe,CAAC,EAAE;QACtD,MAAM,IAAIL,KAAK,CAAC,qDAAqD,CAAC;;MAGxE,IAAI,CAACL,yBAAyB,CAACS,SAAS,CAACE,IAAI,EAAEF,SAAS,CAACR,UAAU,CAAC;;EAExE,CAAC;EAEMpB,cAAA,CAAAS,SAAA,CAAAsB,qBAAqB,GAA5B;IACE,OAAO,IAAIhC,aAAA,CAAAiC,WAAW,CAACC,UAAU,CAC/B,IAAIlC,aAAA,CAAAiC,WAAW,CAACC,UAAU,CAACC,KAAK,CAAC,IAAI,CAAC7B,QAAQ,EAAE,IAAI,CAACG,UAAU,CAAC,CACjE;EACH,CAAC;EACH,OAAAR,cAAC;AAAD,CAAC,CApED;AAAamC,OAAA,CAAAnC,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}