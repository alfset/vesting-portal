{"ast":null,"code":"import { useCallback, useState, useMemo, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport { useTranslation } from 'react-i18next';\nimport {\n// useDispatch,\nuseSelector } from 'react-redux';\n// import { useTranslation } from 'react-i18next'\n\n// import { ChainId } from \"../../config/chainConfig/chainId\";\nimport config from \"../../config\";\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { tryParseAmount3 } from '../../state/swap/hooks';\nimport { recordsTxns } from '../../utils/bridge/register';\nimport { useTxnsDtilOpen, useTxnsErrorTipOpen } from '../../state/application/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { BigAmount } from \"../../utils/formatBignumber\";\nimport { ChainId } from \"../../config/chainConfig/chainId\";\n// import {\n//   flowAddress\n// } from './actions'\n\nexport function useLoginFlow() {\n  const loginFlow = useCallback(() => {\n    fcl.authenticate();\n  }, []);\n  const logoutFlow = useCallback(() => {\n    fcl.unauthenticate();\n  }, []);\n  return {\n    loginFlow,\n    logoutFlow\n  };\n}\nexport function useFlowAddress() {\n  const account = useSelector(state => state.flow.flowAddress);\n  return {\n    flowAddress: account\n  };\n}\nexport function useFlowBalance() {\n  const flowBalanceList = useSelector(state => state.flow.flowBalanceList);\n  // console.log(flowBalanceList)\n\n  const getFlowTokenBalance = useCallback(account => {\n    return new Promise(resolve => {\n      fcl.query({\n        cadence: \"\\n          import FungibleToken from 0xFungibleToken\\n          pub fun main(account:Address):UFix64 {\\n            // Get the accounts' public account objects\\n            let recipient = getAccount(account)\\n            let receiverRef = recipient.getCapability<&{FungibleToken.Balance}>(/public/exampleTokenBalance)\\n            let tokenBalance=receiverRef.borrow()??panic(\\\"get receiver for capability fails\\\")\\n            return tokenBalance.balance\\n          }\\n        \",\n        args: (arg, t) => [arg(account, t.Address)]\n      }).then(res => {\n        console.log(res);\n        resolve(res);\n      }).catch(err => {\n        console.log(err);\n        resolve('');\n      });\n    });\n  }, []);\n  return {\n    flowBalanceList,\n    getFlowTokenBalance\n  };\n}\nexport function getFLOWTxnsStatus(txid, chainId) {\n  const data = {\n    msg: 'Error',\n    info: ''\n  };\n  return new Promise(resolve => {\n    const url = \"\".concat(config.chainInfo[chainId].nodeRpc, \"/transaction_results/\").concat(txid);\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json);\n      if (json) {\n        if (json.execution === 'Failure') {\n          data.msg = 'Failure';\n          data.error = 'Txns is failure!';\n        } else if (json.execution === 'Success') {\n          data.msg = 'Success';\n          data.info = json;\n        } else {\n          data.msg = 'Null';\n          data.error = 'Query is empty!';\n        }\n      } else {\n        data.msg = 'Null';\n        data.error = 'Query is empty!';\n      }\n      resolve(data);\n    }).catch(err => {\n      data.error = 'Query is empty!';\n      console.log(err);\n      resolve(data);\n    });\n  });\n}\nexport function useSendFlowTxns() {\n  const transferFn = useCallback((receiveAddress, amount) => {\n    // console.log(receiveAddress)\n    // console.log(amount)\n    return new Promise(resolve => {\n      fcl.mutate({\n        cadence: \"\\n          import FungibleToken from 0xFungibleToken\\n          import FlowToken from 0xFlowToken\\n          transaction(receiveAddress:Address, amount:UFix64 ) {\\n            let sentVault: @FungibleToken.Vault\\n            prepare(signer: AuthAccount) {\\n                let vaultRef = signer.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\\n              ?? panic(\\\"Could not borrow reference to the owner''s Vault!\\\")\\n                self.sentVault <- vaultRef.withdraw(amount: amount)\\n            }\\n            execute {\\n                let receiverRef =  getAccount(receiveAddress)\\n                    .getCapability(/public/flowTokenReceiver)\\n                    .borrow<&{FungibleToken.Receiver}>()\\n              ?? panic(\\\"Could not borrow receiver reference to the recipient''s Vault\\\")\\n                receiverRef.deposit(from: <-self.sentVault)\\n            }\\n          }\\n        \",\n        args: (arg, t) => [arg(receiveAddress, t.Address), arg(amount.toFixed(8), t.UFix64)]\n      }).then(res => {\n        console.log(res);\n        resolve(res);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }, []);\n  const swapoutFn = useCallback((routerToken, anyToken, receiveAddress, amount, toChainId) => {\n    return new Promise(resolve => {\n      fcl.mutate({\n        cadence: \"\\n          import FungibleToken from 0xFungibleToken\\n          import FlowToken from 0xFlowToken\\n          import Router from \".concat(routerToken, \"\\n          transaction(routerToken:String, anyToken:String, receiveAddress:String, amount:UFix64, toChainId:UInt64) {\\n            let vaultRef: &{FungibleToken.Provider}\\n            let vaultStoragePath:StoragePath\\n            prepare(acct: AuthAccount) {\\n                self.vaultStoragePath= /storage/exampleTokenVault\\n                self.vaultRef = acct.borrow<&{FungibleToken.Provider}>(from:self.vaultStoragePath)\\n                                        ?? panic(\\\"Could not borrow a reference to the owner's vault\\\")\\n            }\\n            execute {\\n                log(\\\"vaultStoragePath:\\\".concat(self.vaultStoragePath.toString()))\\n                let temporaryVault <- self.vaultRef.withdraw(amount: amount)\\n                Router.swapOut(token:anyToken,to: receiveAddress,toChainId:toChainId,value:<-temporaryVault)\\n            }\\n          }\\n        \"),\n        args: (arg, t) => [arg(routerToken, t.String), arg(anyToken, t.String), arg(receiveAddress, t.String), arg(amount.toFixed(8), t.UFix64), arg(toChainId, t.UInt64)]\n      }).then(res => {\n        console.log(res);\n        resolve(res);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }, []);\n  return {\n    transferFn,\n    swapoutFn\n  };\n}\nexport function useAdaCrossChain(routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig) {\n  const {\n    account\n  } = useActiveReact();\n  const {\n    t\n  } = useTranslation();\n  const {\n    onChangeViewDtil\n  } = useTxnsDtilOpen();\n  const {\n    onChangeViewErrorTip\n  } = useTxnsErrorTipOpen();\n  const addTransaction = useTransactionAdder();\n  const {\n    swapoutFn\n  } = useSendFlowTxns();\n  const {\n    getFlowTokenBalance\n  } = useFlowBalance();\n  const inputValue = typedValue;\n  const [balance, setBalance] = useState();\n  useEffect(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      getFlowTokenBalance(account).then(res => {\n        // console.log(res)\n        const dec = selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals;\n        // console.log(token)\n        // console.log(res?.[token]?.balance)\n        if (res) {\n          const blvalue = tryParseAmount3(res, dec);\n          const bl = res ? BigAmount.format(dec, blvalue) : undefined;\n          setBalance(bl);\n        } else {\n          setBalance(0);\n        }\n      });\n    }\n  }, [selectCurrency, account, chainId]);\n  const inputAmount = useMemo(() => tryParseAmount3(inputValue + '', selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals), [inputValue, selectCurrency]);\n  let sufficientBalance = false;\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && Number(balance === null || balance === void 0 ? void 0 : balance.toExact()) >= Number(inputValue);\n  } catch (error) {\n    console.log(error);\n  }\n  return useMemo(() => {\n    if (!account || ![ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId) || !routerToken) return {};\n    return {\n      balance: balance,\n      execute: async () => {\n        try {\n          const txResult = await swapoutFn(routerToken, inputToken, receiveAddress, typedValue, selectChain);\n          console.log(txResult);\n          if (txResult === null || txResult === void 0 ? void 0 : txResult.status) {\n            var _txResult$data;\n            const txReceipt = {\n              hash: txResult === null || txResult === void 0 ? void 0 : (_txResult$data = txResult.data) === null || _txResult$data === void 0 ? void 0 : _txResult$data.transactionId\n            };\n            console.log(txReceipt);\n            if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash) {\n              const data = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                routerToken: routerToken\n              };\n              addTransaction(txReceipt, {\n                summary: \"Cross bridge \".concat(typedValue, \" \").concat(selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol),\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress === null || receiveAddress === void 0 ? void 0 : receiveAddress.toLowerCase() : receiveAddress,\n                symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                version: destConfig.type,\n                routerToken: routerToken,\n                token: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address,\n                logoUrl: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.logoUrl,\n                isLiquidity: destConfig === null || destConfig === void 0 ? void 0 : destConfig.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol,\n                  name: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.name,\n                  decimals: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.decimals,\n                  address: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.address\n                },\n                toInfo: {\n                  symbol: destConfig === null || destConfig === void 0 ? void 0 : destConfig.symbol,\n                  name: destConfig === null || destConfig === void 0 ? void 0 : destConfig.name,\n                  decimals: destConfig === null || destConfig === void 0 ? void 0 : destConfig.decimals,\n                  address: destConfig === null || destConfig === void 0 ? void 0 : destConfig.address\n                }\n              });\n              recordsTxns(data);\n              onChangeViewDtil(txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.hash, true);\n            }\n          } else {\n            // onChangeViewErrorTip('Txns failure.', true)\n            onChangeViewErrorTip(JSON.stringify(txResult), true);\n          }\n        } catch (error) {\n          console.log(error);\n          onChangeViewErrorTip('Txns failure.', true);\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {\n        symbol: selectCurrency === null || selectCurrency === void 0 ? void 0 : selectCurrency.symbol\n      })\n    };\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, balance]);\n}","map":{"version":3,"names":["useCallback","useState","useMemo","useEffect","fcl","useTranslation","useSelector","config","useActiveReact","tryParseAmount3","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","BigAmount","ChainId","useLoginFlow","loginFlow","authenticate","logoutFlow","unauthenticate","useFlowAddress","account","state","flow","flowAddress","useFlowBalance","flowBalanceList","getFlowTokenBalance","Promise","resolve","query","cadence","args","arg","t","Address","then","res","console","log","catch","err","getFLOWTxnsStatus","txid","chainId","data","msg","info","url","concat","chainInfo","nodeRpc","fetch","json","execution","error","useSendFlowTxns","transferFn","receiveAddress","amount","mutate","toFixed","UFix64","swapoutFn","routerToken","anyToken","toChainId","String","UInt64","useAdaCrossChain","inputToken","selectCurrency","selectChain","typedValue","destConfig","onChangeViewDtil","onChangeViewErrorTip","addTransaction","inputValue","balance","setBalance","FLOW","FLOW_TEST","includes","dec","decimals","blvalue","bl","format","undefined","inputAmount","sufficientBalance","Number","toExact","execute","txResult","status","_txResult$data","txReceipt","hash","transactionId","value","formatvalue","to","symbol","version","type","pairid","summary","toAddress","indexOf","toLowerCase","token","address","logoUrl","isLiquidity","fromInfo","name","toInfo","JSON","stringify","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/flow/index.ts"],"sourcesContent":["import { useCallback, useState, useMemo, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  // useDispatch,\n  useSelector\n} from 'react-redux'\n// import { useTranslation } from 'react-i18next'\nimport {\n  AppState,\n  // AppDispatch\n} from '../../state'\n// import { ChainId } from \"../../config/chainConfig/chainId\";\nimport config from \"../../config\";\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { BigAmount } from \"../../utils/formatBignumber\"\nimport { ChainId } from \"../../config/chainConfig/chainId\"\n// import {\n//   flowAddress\n// } from './actions'\n\nexport function useLoginFlow () {\n  const loginFlow = useCallback(() => {\n    fcl.authenticate()\n  }, [])\n\n  const logoutFlow = useCallback(() => {\n    fcl.unauthenticate()\n  }, [])\n  return {\n    loginFlow,\n    logoutFlow\n  }\n}\n\nexport function useFlowAddress () {\n  const account:any = useSelector<AppState, AppState['flow']>(state => state.flow.flowAddress)\n  return {\n    flowAddress: account\n  }\n}\n\nexport function useFlowBalance () {\n  const flowBalanceList:any = useSelector<AppState, AppState['flow']>(state => state.flow.flowBalanceList)\n  // console.log(flowBalanceList)\n\n  const getFlowTokenBalance = useCallback((account) => {\n    return new Promise(resolve => {\n      fcl.query({\n        cadence: `\n          import FungibleToken from 0xFungibleToken\n          pub fun main(account:Address):UFix64 {\n            // Get the accounts' public account objects\n            let recipient = getAccount(account)\n            let receiverRef = recipient.getCapability<&{FungibleToken.Balance}>(/public/exampleTokenBalance)\n            let tokenBalance=receiverRef.borrow()??panic(\"get receiver for capability fails\")\n            return tokenBalance.balance\n          }\n        `,\n        args: (arg:any, t:any) => [arg(account, t.Address)],\n      }).then((res:any) => {\n        console.log(res)\n        resolve(res)\n      }).catch((err:any) => {\n        console.log(err)\n        resolve('')\n      })\n    })\n  }, [])\n\n  return {\n    flowBalanceList,\n    getFlowTokenBalance\n  }\n}\n\nexport function getFLOWTxnsStatus (txid:string, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    const url = `${config.chainInfo[chainId].nodeRpc}/transaction_results/${txid}`\n    fetch(url).then(res => res.json()).then(json => {\n      console.log(json)\n      if (json) {\n        if (json.execution === 'Failure') {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        } else if (json.execution === 'Success') {\n          data.msg = 'Success'\n          data.info = json\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      data.error = 'Query is empty!'\n      console.log(err)\n      resolve(data)\n    })\n  })\n}\n\nexport function useSendFlowTxns () {\n  const transferFn = useCallback((receiveAddress:any, amount:any) => {\n    // console.log(receiveAddress)\n    // console.log(amount)\n    return new Promise(resolve => {\n      fcl.mutate({\n        cadence: `\n          import FungibleToken from 0xFungibleToken\n          import FlowToken from 0xFlowToken\n          transaction(receiveAddress:Address, amount:UFix64 ) {\n            let sentVault: @FungibleToken.Vault\n            prepare(signer: AuthAccount) {\n                let vaultRef = signer.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n              ?? panic(\"Could not borrow reference to the owner''s Vault!\")\n                self.sentVault <- vaultRef.withdraw(amount: amount)\n            }\n            execute {\n                let receiverRef =  getAccount(receiveAddress)\n                    .getCapability(/public/flowTokenReceiver)\n                    .borrow<&{FungibleToken.Receiver}>()\n              ?? panic(\"Could not borrow receiver reference to the recipient''s Vault\")\n                receiverRef.deposit(from: <-self.sentVault)\n            }\n          }\n        `,\n        args: (arg:any, t:any) => [arg(receiveAddress, t.Address), arg(amount.toFixed(8), t.UFix64)],\n      }).then((res:any) => {\n        console.log(res)\n        resolve(res)\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    })\n  }, [])\n  const swapoutFn = useCallback((routerToken:any, anyToken:any, receiveAddress:any, amount:any, toChainId:any) => {\n    return new Promise(resolve => {\n      fcl.mutate({\n        cadence: `\n          import FungibleToken from 0xFungibleToken\n          import FlowToken from 0xFlowToken\n          import Router from ${routerToken}\n          transaction(routerToken:String, anyToken:String, receiveAddress:String, amount:UFix64, toChainId:UInt64) {\n            let vaultRef: &{FungibleToken.Provider}\n            let vaultStoragePath:StoragePath\n            prepare(acct: AuthAccount) {\n                self.vaultStoragePath= /storage/exampleTokenVault\n                self.vaultRef = acct.borrow<&{FungibleToken.Provider}>(from:self.vaultStoragePath)\n                                        ?? panic(\"Could not borrow a reference to the owner's vault\")\n            }\n            execute {\n                log(\"vaultStoragePath:\".concat(self.vaultStoragePath.toString()))\n                let temporaryVault <- self.vaultRef.withdraw(amount: amount)\n                Router.swapOut(token:anyToken,to: receiveAddress,toChainId:toChainId,value:<-temporaryVault)\n            }\n          }\n        `,\n        args: (arg:any, t:any) => [arg(routerToken, t.String), arg(anyToken, t.String), arg(receiveAddress, t.String), arg(amount.toFixed(8), t.UFix64), arg(toChainId, t.UInt64)],\n      }).then((res:any) => {\n        console.log(res)\n        resolve(res)\n      }).catch((err:any) => {\n        console.log(err)\n      })\n    })\n  }, [])\n  return {\n    transferFn,\n    swapoutFn\n  }\n}\n\n\nexport function useAdaCrossChain (\n  routerToken: any,\n  inputToken: any,\n  chainId:any,\n  selectCurrency:any,\n  selectChain:any,\n  receiveAddress:any,\n  typedValue:any,\n  destConfig:any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const {account} = useActiveReact()\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n\n  const addTransaction = useTransactionAdder()\n  const {swapoutFn} = useSendFlowTxns()\n  const {getFlowTokenBalance} = useFlowBalance()\n\n  const inputValue = typedValue\n\n  const [balance, setBalance] = useState<any>()\n\n  useEffect(() => {\n    if ([ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId)) {\n      getFlowTokenBalance(account).then((res:any) => {\n        // console.log(res)\n        const dec = selectCurrency?.decimals\n        // console.log(token)\n        // console.log(res?.[token]?.balance)\n        if (res) {\n          const blvalue = tryParseAmount3(res, dec)\n          const bl = res ? BigAmount.format(dec, blvalue) : undefined\n          setBalance(bl)\n        } else {\n          setBalance(0)\n        }\n      })\n    }\n  }, [selectCurrency, account, chainId])\n\n  const inputAmount = useMemo(() => tryParseAmount3(inputValue + '', selectCurrency?.decimals), [inputValue, selectCurrency])\n\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(inputValue))\n  } catch (error) {\n    console.log(error)\n  }\n  return useMemo(() => {\n    if (!account || ![ChainId.FLOW, ChainId.FLOW_TEST].includes(chainId) || !routerToken ) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n        try {\n          \n          const txResult:any = await swapoutFn(routerToken, inputToken, receiveAddress, typedValue, selectChain)\n          console.log(txResult)\n          if (txResult?.status) {\n            const txReceipt:any = {hash: txResult?.data?.transactionId}\n            console.log(txReceipt)\n            if (txReceipt?.hash) {\n              const data:any = {\n                hash: txReceipt.hash,\n                chainId: chainId,\n                selectChain: selectChain,\n                account: account,\n                value: inputAmount,\n                formatvalue: typedValue,\n                to: receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                pairid: selectCurrency?.symbol,\n                routerToken: routerToken\n              }\n              addTransaction(txReceipt, {\n                summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n                value: typedValue,\n                toChainId: selectChain,\n                toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n                symbol: selectCurrency?.symbol,\n                version: destConfig.type,\n                routerToken: routerToken,\n                token: selectCurrency?.address,\n                logoUrl: selectCurrency?.logoUrl,\n                isLiquidity: destConfig?.isLiquidity,\n                fromInfo: {\n                  symbol: selectCurrency?.symbol,\n                  name: selectCurrency?.name,\n                  decimals: selectCurrency?.decimals,\n                  address: selectCurrency?.address,\n                },\n                toInfo: {\n                  symbol: destConfig?.symbol,\n                  name: destConfig?.name,\n                  decimals: destConfig?.decimals,\n                  address: destConfig?.address,\n                },\n              })\n              recordsTxns(data)\n              onChangeViewDtil(txReceipt?.hash, true)\n            }\n          } else {\n            // onChangeViewErrorTip('Txns failure.', true)\n            onChangeViewErrorTip(JSON.stringify(txResult), true)\n          }\n        } catch (error) {\n          console.log(error);\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [receiveAddress, account, selectCurrency, inputAmount, chainId, routerToken, selectChain, destConfig, inputToken, balance])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}