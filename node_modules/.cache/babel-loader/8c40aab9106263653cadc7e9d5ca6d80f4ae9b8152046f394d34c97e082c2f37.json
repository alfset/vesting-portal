{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\nvar _isString = require('lodash/isString');\nvar _isString2 = _interopRequireDefault(_isString);\nvar _xdr = require('../xdr');\nvar _xdr2 = _interopRequireDefault(_xdr);\nvar _strkey = require('../strkey');\nvar _keypair = require('../keypair');\nvar _asset = require('../asset');\nvar _liquidity_pool_id = require('../liquidity_pool_id');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var ledgerKey = _xdr2.default.LedgerKey.account(new _xdr2.default.LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.LiquidityPoolId(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var asset = void 0;\n  if (opts.asset instanceof _asset.Asset) {\n    asset = opts.asset.toTrustLineXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) {\n    asset = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be an Asset or LiquidityPoolId');\n  }\n  var ledgerKey = _xdr2.default.LedgerKey.trustline(new _xdr2.default.LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: asset\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n  if (!(0, _isString2.default)(opts.offerId)) {\n    throw new Error('offerId is invalid');\n  }\n  var ledgerKey = _xdr2.default.LedgerKey.offer(new _xdr2.default.LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _xdr2.default.Int64.fromString(opts.offerId)\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (!(0, _isString2.default)(opts.name) || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n  var ledgerKey = _xdr2.default.LedgerKey.data(new _xdr2.default.LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!(0, _isString2.default)(opts.balanceId)) {\n    throw new Error('balanceId is invalid');\n  }\n  var ledgerKey = _xdr2.default.LedgerKey.claimableBalance(new _xdr2.default.LedgerKeyClaimableBalance({\n    balanceId: _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Creates a \"revoke sponsorship\" operation for a liquidity pool.\n *\n * @function\n * @alias Operation.revokeLiquidityPoolSponsorship\n * @param {object} opts â€“ Options object.\n * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr Operation.\n *\n * @example\n * const op = Operation.revokeLiquidityPoolSponsorship({\n *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',\n * });\n *\n */\nfunction revokeLiquidityPoolSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!(0, _isString2.default)(opts.liquidityPoolId)) {\n    throw new Error('liquidityPoolId is invalid');\n  }\n  var ledgerKey = _xdr2.default.LedgerKey.liquidityPool(new _xdr2.default.LedgerKeyLiquidityPool({\n    liquidityPoolId: _xdr2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex')\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.revokeSponsorship(op)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var key = void 0;\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n    key = new _xdr2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n    key = new _xdr2.default.SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n    key = new _xdr2.default.SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n  var signer = new _xdr2.default.RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","revokeAccountSponsorship","revokeTrustlineSponsorship","revokeOfferSponsorship","revokeDataSponsorship","revokeClaimableBalanceSponsorship","revokeLiquidityPoolSponsorship","revokeSignerSponsorship","_isString","require","_isString2","_interopRequireDefault","_xdr","_xdr2","_strkey","_keypair","_asset","_liquidity_pool_id","obj","__esModule","default","opts","arguments","length","undefined","StrKey","isValidEd25519PublicKey","account","Error","ledgerKey","LedgerKey","LedgerKeyAccount","accountId","Keypair","fromPublicKey","xdrAccountId","op","RevokeSponsorshipOp","revokeSponsorshipLedgerEntry","opAttributes","body","OperationBody","revokeSponsorship","setSourceAccount","Operation","asset","Asset","toTrustLineXDRObject","LiquidityPoolId","toXDRObject","TypeError","trustline","LedgerKeyTrustLine","seller","offerId","offer","LedgerKeyOffer","sellerId","Int64","fromString","name","data","LedgerKeyData","dataName","balanceId","claimableBalance","LedgerKeyClaimableBalance","ClaimableBalanceId","fromXDR","liquidityPoolId","liquidityPool","LedgerKeyLiquidityPool","PoolId","key","signer","ed25519PublicKey","rawKey","decodeEd25519PublicKey","SignerKey","signerKeyTypeEd25519","preAuthTx","buffer","Buffer","from","isBuffer","signerKeyTypePreAuthTx","sha256Hash","_buffer","signerKeyTypeHashX","RevokeSponsorshipOpSigner","signerKey","revokeSponsorshipSigner"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/operations/revoke_sponsorship.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _xdr = require('../xdr');\n\nvar _xdr2 = _interopRequireDefault(_xdr);\n\nvar _strkey = require('../strkey');\n\nvar _keypair = require('../keypair');\n\nvar _asset = require('../asset');\n\nvar _liquidity_pool_id = require('../liquidity_pool_id');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var ledgerKey = _xdr2.default.LedgerKey.account(new _xdr2.default.LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.LiquidityPoolId(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var asset = void 0;\n  if (opts.asset instanceof _asset.Asset) {\n    asset = opts.asset.toTrustLineXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) {\n    asset = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be an Asset or LiquidityPoolId');\n  }\n\n  var ledgerKey = _xdr2.default.LedgerKey.trustline(new _xdr2.default.LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: asset\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n  if (!(0, _isString2.default)(opts.offerId)) {\n    throw new Error('offerId is invalid');\n  }\n\n  var ledgerKey = _xdr2.default.LedgerKey.offer(new _xdr2.default.LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _xdr2.default.Int64.fromString(opts.offerId)\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (!(0, _isString2.default)(opts.name) || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n\n  var ledgerKey = _xdr2.default.LedgerKey.data(new _xdr2.default.LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.balanceId)) {\n    throw new Error('balanceId is invalid');\n  }\n\n  var ledgerKey = _xdr2.default.LedgerKey.claimableBalance(new _xdr2.default.LedgerKeyClaimableBalance({\n    balanceId: _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Creates a \"revoke sponsorship\" operation for a liquidity pool.\n *\n * @function\n * @alias Operation.revokeLiquidityPoolSponsorship\n * @param {object} opts â€“ Options object.\n * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr Operation.\n *\n * @example\n * const op = Operation.revokeLiquidityPoolSponsorship({\n *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',\n * });\n *\n */\nfunction revokeLiquidityPoolSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.liquidityPoolId)) {\n    throw new Error('liquidityPoolId is invalid');\n  }\n\n  var ledgerKey = _xdr2.default.LedgerKey.liquidityPool(new _xdr2.default.LedgerKeyLiquidityPool({\n    liquidityPoolId: _xdr2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex')\n  }));\n\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {\n    body: _xdr2.default.OperationBody.revokeSponsorship(op)\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var key = void 0;\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n    key = new _xdr2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n\n    key = new _xdr2.default.SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n\n    key = new _xdr2.default.SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n\n  var signer = new _xdr2.default.RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n\n  var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n  var opAttributes = {};\n  opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _xdr2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}