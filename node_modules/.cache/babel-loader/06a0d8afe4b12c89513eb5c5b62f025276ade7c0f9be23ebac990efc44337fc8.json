{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport config from '../config';\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\nexport function getEtherscanLink(chainId, data, type) {\n  switch (type) {\n    case 'transaction':\n      {\n        const url = config.getCurChainInfo(chainId).lookHash + data;\n        return url;\n      }\n    case 'token':\n      {\n        const url = config.getCurChainInfo(chainId).lookAddr + data;\n        return url;\n      }\n    case 'block':\n      {\n        const url = config.getCurChainInfo(chainId).lookBlock + data;\n        return url;\n      }\n    case 'address':\n    default:\n      {\n        const url = config.getCurChainInfo(chainId).lookAddr + data;\n        return url;\n      }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  // const parsed = isAddress(address)\n  const parsed = address;\n  // if (!parsed) {\n  //   throw Error(`Invalid 'address' parameter '${address}'.`)\n  // }\n  return \"\".concat(parsed.substring(0, chars + 2), \"...\").concat(parsed.substring(42 - chars));\n}\nexport function shortenAddress1(address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return \"\".concat(address.substring(0, chars + 2), \"...\").concat(address.substring(address.length - chars));\n}\n\n// add 10%\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n}\n\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\n\n// account is optional\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(\"Invalid 'address' parameter '\".concat(address, \"'.\"));\n  }\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}","map":{"version":3,"names":["Contract","getAddress","AddressZero","BigNumber","config","isAddress","value","getEtherscanLink","chainId","data","type","url","getCurChainInfo","lookHash","lookAddr","lookBlock","shortenAddress","address","chars","arguments","length","undefined","parsed","concat","substring","shortenAddress1","calculateGasMargin","mul","from","add","div","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","Error","escapeRegExp","string","replace"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/index.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport config from '../config'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nexport function getEtherscanLink(\n  chainId: any,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n\n  switch (type) {\n    case 'transaction': {\n      const url = config.getCurChainInfo(chainId).lookHash + data\n      return url\n    }\n    case 'token': {\n      const url = config.getCurChainInfo(chainId).lookAddr + data\n      return url\n    }\n    case 'block': {\n      const url = config.getCurChainInfo(chainId).lookBlock + data\n      return url\n    }\n    case 'address':\n    default: {\n      const url = config.getCurChainInfo(chainId).lookAddr + data\n      return url\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  // const parsed = isAddress(address)\n  const parsed = address\n  // if (!parsed) {\n  //   throw Error(`Invalid 'address' parameter '${address}'.`)\n  // }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\nexport function shortenAddress1(address: string, chars = 4): string {\n  return `${address.substring(0, chars + 2)}...${address.substring(address.length - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}