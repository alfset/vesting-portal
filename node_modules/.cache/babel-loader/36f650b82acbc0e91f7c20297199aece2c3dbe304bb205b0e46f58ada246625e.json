{"ast":null,"code":"import { ChainId } from \"../../config/chainConfig/chainId\";\nconst bitcoin = require('bitcoinjs-lib');\nconst OPS = require('bitcoin-ops');\n\n// const NETWORK = config.env === 'test' ? bitcoin.networks.testnet : bitcoin.networks.bitcoin\nconst NETWORK = bitcoin.networks.bitcoin;\nconst LITECOIN = {\n  messagePrefix: '\\x19Litecoin Signed Message:\\n',\n  bech32: 'ltc',\n  bip32: {\n    public: 0x019da462,\n    private: 0x019d9cfe\n  },\n  pubKeyHash: 0x30,\n  scriptHash: 0x32,\n  wif: 0xb0\n};\nconst BLOCK = {\n  messagePrefix: '\\x19Blocknet Signed Message:\\n',\n  bech32: 'block',\n  bip32: {\n    public: 0x0488B21E,\n    private: 0x0488ADE4\n  },\n  pubKeyHash: 0x1a,\n  scriptHash: 0x1c,\n  wif: 0x9a\n};\nconst COLOSSUSXT = {\n  messagePrefix: '\\x19ColossusXT Signed Message:\\n',\n  bip32: {\n    public: 0x019da462,\n    private: 0x019d9cfe\n  },\n  pubKeyHash: 0x1e,\n  scriptHash: 0x0d,\n  wif: 0xd4\n};\nfunction getNetwork(chainId) {\n  let network = NETWORK;\n  chainId = chainId ? chainId.toUpperCase() : '';\n  if (chainId === ChainId.BTC) {\n    network = bitcoin.networks.bitcoin;\n  } else if (chainId === ChainId.BTC_TEST) {\n    network = bitcoin.networks.testnet;\n  } else if (chainId === ChainId.LTC) {\n    network = LITECOIN;\n  } else if (chainId === ChainId.BLOCK) {\n    network = BLOCK;\n  } else if (chainId === ChainId.COLX) {\n    network = COLOSSUSXT;\n  }\n  return network;\n}\nexport function createAddress(address, chainId, initAddr) {\n  const network = getNetwork(chainId);\n  address = address.replace('0x', '');\n  const {\n    hash\n  } = bitcoin.address.fromBase58Check(initAddr);\n  const reddemScript = bitcoin.script.compile([Buffer.from(address, 'hex'), OPS.OP_DROP, OPS.OP_DUP, OPS.OP_HASH160, Buffer.from(hash, 'hex'), OPS.OP_EQUALVERIFY, OPS.OP_CHECKSIG]);\n  const output = bitcoin.script.compile([OPS.OP_HASH160, bitcoin.crypto.hash160(reddemScript), OPS.OP_EQUAL]);\n  const p2shAddress = bitcoin.payments.p2sh({\n    output: output,\n    network: network\n  });\n  // console.log(p2shAddress.address)\n  return p2shAddress.address;\n}\nexport const BTCARR = [ChainId.BTC, ChainId.BTC_TEST, ChainId.LTC, ChainId.BLOCK, ChainId.COLX];\nexport function isBTCAddress(address, chainId) {\n  const network = getNetwork(chainId);\n  try {\n    bitcoin.address.toOutputScript(address, network);\n    return address;\n  } catch (error) {\n    return false;\n  }\n}","map":{"version":3,"names":["ChainId","bitcoin","require","OPS","NETWORK","networks","LITECOIN","messagePrefix","bech32","bip32","public","private","pubKeyHash","scriptHash","wif","BLOCK","COLOSSUSXT","getNetwork","chainId","network","toUpperCase","BTC","BTC_TEST","testnet","LTC","COLX","createAddress","address","initAddr","replace","hash","fromBase58Check","reddemScript","script","compile","Buffer","from","OP_DROP","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","output","crypto","hash160","OP_EQUAL","p2shAddress","payments","p2sh","BTCARR","isBTCAddress","toOutputScript","error"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/isAddress/BTC.ts"],"sourcesContent":["import { ChainId } from \"../../config/chainConfig/chainId\"\nconst bitcoin = require('bitcoinjs-lib')\nconst OPS = require('bitcoin-ops')\n\n// const NETWORK = config.env === 'test' ? bitcoin.networks.testnet : bitcoin.networks.bitcoin\nconst NETWORK = bitcoin.networks.bitcoin\nconst LITECOIN = {\n  messagePrefix: '\\x19Litecoin Signed Message:\\n',\n  bech32: 'ltc',\n  bip32: {\n    public: 0x019da462,\n    private: 0x019d9cfe,\n  },\n  pubKeyHash: 0x30,\n  scriptHash: 0x32,\n  wif: 0xb0,\n}\n\nconst BLOCK = {\n  messagePrefix: '\\x19Blocknet Signed Message:\\n',\n  bech32: 'block',\n  bip32: {\n   public: 0x0488B21E,\n   private: 0x0488ADE4\n  },\n  \n  pubKeyHash: 0x1a,\n  scriptHash: 0x1c,\n  wif: 0x9a,\n}\n\nconst COLOSSUSXT = {\n  messagePrefix: '\\x19ColossusXT Signed Message:\\n',\n  bip32: {\n    public: 0x019da462,\n    private: 0x019d9cfe,\n  },\n  pubKeyHash: 0x1e,\n  scriptHash: 0x0d,\n  wif: 0xd4,\n}\n\nfunction getNetwork (chainId?:string) {\n  let network = NETWORK\n  chainId = chainId ? chainId.toUpperCase() : ''\n  if (chainId === ChainId.BTC) {\n    network = bitcoin.networks.bitcoin\n  } else if (chainId === ChainId.BTC_TEST) {\n    network = bitcoin.networks.testnet\n  } else if (chainId === ChainId.LTC) {\n    network = LITECOIN\n  } else if (chainId === ChainId.BLOCK) {\n    network = BLOCK\n  } else if (chainId === ChainId.COLX) {\n    network = COLOSSUSXT\n  } \n  return network\n}\n\nexport function createAddress (address:string, chainId:string | undefined, initAddr:string) {\n  const network = getNetwork(chainId)\n  address = address.replace('0x', '')\n  const {hash} = bitcoin.address.fromBase58Check(initAddr)\n\n  const reddemScript = bitcoin.script.compile([\n    Buffer.from(address, 'hex'),\n    OPS.OP_DROP,\n    OPS.OP_DUP,\n    OPS.OP_HASH160,\n    Buffer.from(hash,'hex'),\n    OPS.OP_EQUALVERIFY,\n    OPS.OP_CHECKSIG,\n  ])\n  const output = bitcoin.script.compile([\n    OPS.OP_HASH160,\n    bitcoin.crypto.hash160(reddemScript),\n    OPS.OP_EQUAL,\n  ])\n  const p2shAddress = bitcoin.payments.p2sh({\n    output: output,\n    network: network,\n  })\n  // console.log(p2shAddress.address)\n  return p2shAddress.address;\n}\n\nexport const BTCARR = [ChainId.BTC, ChainId.BTC_TEST, ChainId.LTC, ChainId.BLOCK, ChainId.COLX]\n\nexport function isBTCAddress (address:string, chainId?:string) {\n  const network = getNetwork(chainId)\n  try {\n    bitcoin.address.toOutputScript(address, network)\n    return address\n  } catch (error) {\n    return false\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}