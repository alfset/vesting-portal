{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _jsXdr = require(\"js-xdr\");\nvar XDR = _interopRequireWildcard(_jsXdr);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar types = XDR.config(function (xdr) {\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Value<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Value\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPBallot\n  //   {\n  //       uint32 counter; // n\n  //       Value value;    // x\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpBallot\", [[\"counter\", xdr.lookup(\"Uint32\")], [\"value\", xdr.lookup(\"Value\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCPStatementType\n  //   {\n  //       SCP_ST_PREPARE = 0,\n  //       SCP_ST_CONFIRM = 1,\n  //       SCP_ST_EXTERNALIZE = 2,\n  //       SCP_ST_NOMINATE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ScpStatementType\", {\n    scpStPrepare: 0,\n    scpStConfirm: 1,\n    scpStExternalize: 2,\n    scpStNominate: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPNomination\n  //   {\n  //       Hash quorumSetHash; // D\n  //       Value votes<>;      // X\n  //       Value accepted<>;   // Y\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpNomination\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"votes\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)], [\"accepted\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementPrepare\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"ballot\", xdr.lookup(\"ScpBallot\")], [\"prepared\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"preparedPrime\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"nC\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementConfirm\", [[\"ballot\", xdr.lookup(\"ScpBallot\")], [\"nPrepared\", xdr.lookup(\"Uint32\")], [\"nCommit\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"quorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementExternalize\", [[\"commit\", xdr.lookup(\"ScpBallot\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"commitQuorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ScpStatementPledges\", {\n    switchOn: xdr.lookup(\"ScpStatementType\"),\n    switchName: \"type\",\n    switches: [[\"scpStPrepare\", \"prepare\"], [\"scpStConfirm\", \"confirm\"], [\"scpStExternalize\", \"externalize\"], [\"scpStNominate\", \"nominate\"]],\n    arms: {\n      prepare: xdr.lookup(\"ScpStatementPrepare\"),\n      confirm: xdr.lookup(\"ScpStatementConfirm\"),\n      externalize: xdr.lookup(\"ScpStatementExternalize\"),\n      nominate: xdr.lookup(\"ScpNomination\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPStatement\n  //   {\n  //       NodeID nodeID;    // v\n  //       uint64 slotIndex; // i\n  //   \n  //       union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //       pledges;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatement\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"slotIndex\", xdr.lookup(\"Uint64\")], [\"pledges\", xdr.lookup(\"ScpStatementPledges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPEnvelope\n  //   {\n  //       SCPStatement statement;\n  //       Signature signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpEnvelope\", [[\"statement\", xdr.lookup(\"ScpStatement\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPQuorumSet\n  //   {\n  //       uint32 threshold;\n  //       NodeID validators<>;\n  //       SCPQuorumSet innerSets<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpQuorumSet\", [[\"threshold\", xdr.lookup(\"Uint32\")], [\"validators\", xdr.varArray(xdr.lookup(\"NodeId\"), 2147483647)], [\"innerSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey AccountID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"AccountId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Thresholds[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Thresholds\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string32<32>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String32\", xdr.string(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string64<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String64\", xdr.string(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef int64 SequenceNumber;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SequenceNumber\", xdr.lookup(\"Int64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 TimePoint;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimePoint\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 Duration;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Duration\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque DataValue<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DataValue\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash PoolID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PoolId\", xdr.lookup(\"Hash\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode4[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode4\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode12[12];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode12\", xdr.opaque(12));\n\n  // === xdr source ============================================================\n  //\n  //   enum AssetType\n  //   {\n  //       ASSET_TYPE_NATIVE = 0,\n  //       ASSET_TYPE_CREDIT_ALPHANUM4 = 1,\n  //       ASSET_TYPE_CREDIT_ALPHANUM12 = 2,\n  //       ASSET_TYPE_POOL_SHARE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AssetType\", {\n    assetTypeNative: 0,\n    assetTypeCreditAlphanum4: 1,\n    assetTypeCreditAlphanum12: 2,\n    assetTypePoolShare: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AssetCode switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AssetCode4 assetCode4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AssetCode12 assetCode12;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AssetCode\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeCreditAlphanum4\", \"assetCode4\"], [\"assetTypeCreditAlphanum12\", \"assetCode12\"]],\n    arms: {\n      assetCode4: xdr.lookup(\"AssetCode4\"),\n      assetCode12: xdr.lookup(\"AssetCode12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum4\n  //   {\n  //       AssetCode4 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum4\", [[\"assetCode\", xdr.lookup(\"AssetCode4\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum12\n  //   {\n  //       AssetCode12 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum12\", [[\"assetCode\", xdr.lookup(\"AssetCode12\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Asset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Asset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr.void()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Price\n  //   {\n  //       int32 n; // numerator\n  //       int32 d; // denominator\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Price\", [[\"n\", xdr.lookup(\"Int32\")], [\"d\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Liabilities\n  //   {\n  //       int64 buying;\n  //       int64 selling;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Liabilities\", [[\"buying\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ThresholdIndexes\n  //   {\n  //       THRESHOLD_MASTER_WEIGHT = 0,\n  //       THRESHOLD_LOW = 1,\n  //       THRESHOLD_MED = 2,\n  //       THRESHOLD_HIGH = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ThresholdIndices\", {\n    thresholdMasterWeight: 0,\n    thresholdLow: 1,\n    thresholdMed: 2,\n    thresholdHigh: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryType\n  //   {\n  //       ACCOUNT = 0,\n  //       TRUSTLINE = 1,\n  //       OFFER = 2,\n  //       DATA = 3,\n  //       CLAIMABLE_BALANCE = 4,\n  //       LIQUIDITY_POOL = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerEntryType\", {\n    account: 0,\n    trustline: 1,\n    offer: 2,\n    data: 3,\n    claimableBalance: 4,\n    liquidityPool: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Signer\n  //   {\n  //       SignerKey key;\n  //       uint32 weight; // really only need 1 byte\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Signer\", [[\"key\", xdr.lookup(\"SignerKey\")], [\"weight\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountFlags\n  //   { // masks for each flag\n  //   \n  //       // Flags set on issuer accounts\n  //       // TrustLines are created with authorized set to \"false\" requiring\n  //       // the issuer to set it for each TrustLine\n  //       AUTH_REQUIRED_FLAG = 0x1,\n  //       // If set, the authorized flag in TrustLines can be cleared\n  //       // otherwise, authorization cannot be revoked\n  //       AUTH_REVOCABLE_FLAG = 0x2,\n  //       // Once set, causes all AUTH_* flags to be read-only\n  //       AUTH_IMMUTABLE_FLAG = 0x4,\n  //       // Trustlines are created with clawback enabled set to \"true\",\n  //       // and claimable balances created from those trustlines are created\n  //       // with clawback enabled set to \"true\"\n  //       AUTH_CLAWBACK_ENABLED_FLAG = 0x8\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AccountFlags\", {\n    authRequiredFlag: 1,\n    authRevocableFlag: 2,\n    authImmutableFlag: 4,\n    authClawbackEnabledFlag: 8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_ACCOUNT_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS_V17 = 0xF;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_ACCOUNT_FLAGS_V17\", 0xF);\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_SIGNERS = 20;\n  //\n  // ===========================================================================\n  xdr.const(\"MAX_SIGNERS\", 20);\n\n  // === xdr source ============================================================\n  //\n  //   typedef AccountID* SponsorshipDescriptor;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SponsorshipDescriptor\", xdr.option(xdr.lookup(\"AccountId\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV3\n  //   {\n  //       // We can use this to add more fields, or because it is first, to\n  //       // change AccountEntryExtensionV3 into a union.\n  //       ExtensionPoint ext;\n  //   \n  //       // Ledger number at which `seqNum` took on its present value.\n  //       uint32 seqLedger;\n  //   \n  //       // Time at which `seqNum` took on its present value.\n  //       TimePoint seqTime;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"seqLedger\", xdr.lookup(\"Uint32\")], [\"seqTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV2Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [3, \"v3\"]],\n    arms: {\n      v3: xdr.lookup(\"AccountEntryExtensionV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV2\n  //   {\n  //       uint32 numSponsored;\n  //       uint32 numSponsoring;\n  //       SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV2\", [[\"numSponsored\", xdr.lookup(\"Uint32\")], [\"numSponsoring\", xdr.lookup(\"Uint32\")], [\"signerSponsoringIDs\", xdr.varArray(xdr.lookup(\"SponsorshipDescriptor\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"AccountEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV1\n  //   {\n  //       Liabilities liabilities;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"AccountEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"AccountEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntry\n  //   {\n  //       AccountID accountID;      // master public key for this account\n  //       int64 balance;            // in stroops\n  //       SequenceNumber seqNum;    // last sequence number used for this account\n  //       uint32 numSubEntries;     // number of sub-entries this account has\n  //                                 // drives the reserve\n  //       AccountID* inflationDest; // Account to vote for during inflation\n  //       uint32 flags;             // see AccountFlags\n  //   \n  //       string32 homeDomain; // can be used for reverse federation and memo lookup\n  //   \n  //       // fields used for signatures\n  //       // thresholds stores unsigned bytes: [weight of master|low|medium|high]\n  //       Thresholds thresholds;\n  //   \n  //       Signer signers<MAX_SIGNERS>; // possible signers for this account\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"balance\", xdr.lookup(\"Int64\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"numSubEntries\", xdr.lookup(\"Uint32\")], [\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"flags\", xdr.lookup(\"Uint32\")], [\"homeDomain\", xdr.lookup(\"String32\")], [\"thresholds\", xdr.lookup(\"Thresholds\")], [\"signers\", xdr.varArray(xdr.lookup(\"Signer\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TrustLineFlags\n  //   {\n  //       // issuer has authorized account to perform transactions with its credit\n  //       AUTHORIZED_FLAG = 1,\n  //       // issuer has authorized account to maintain and reduce liabilities for its\n  //       // credit\n  //       AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG = 2,\n  //       // issuer has specified that it may clawback its credit, and that claimable\n  //       // balances created with its credit may also be clawed back\n  //       TRUSTLINE_CLAWBACK_ENABLED_FLAG = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"TrustLineFlags\", {\n    authorizedFlag: 1,\n    authorizedToMaintainLiabilitiesFlag: 2,\n    trustlineClawbackEnabledFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_TRUSTLINE_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V13 = 3;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_TRUSTLINE_FLAGS_V13\", 3);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V17 = 7;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_TRUSTLINE_FLAGS_V17\", 7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolType\n  //   {\n  //       LIQUIDITY_POOL_CONSTANT_PRODUCT = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LiquidityPoolType\", {\n    liquidityPoolConstantProduct: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TrustLineAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //   \n  //   case ASSET_TYPE_POOL_SHARE:\n  //       PoolID liquidityPoolID;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr.void()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPoolId\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPoolId: xdr.lookup(\"PoolId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExtensionV2Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntryExtensionV2\n  //   {\n  //       int32 liquidityPoolUseCount;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryExtensionV2\", [[\"liquidityPoolUseCount\", xdr.lookup(\"Int32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"TrustLineEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Liabilities liabilities;\n  //   \n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"TrustLineEntryV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //   \n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TrustLineEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntry\n  //   {\n  //       AccountID accountID;  // account this trustline belongs to\n  //       TrustLineAsset asset; // type of asset (with issuer)\n  //       int64 balance;        // how much of this asset the user has.\n  //                             // Asset defines the unit for this;\n  //   \n  //       int64 limit;  // balance cannot be above this\n  //       uint32 flags; // see TrustLineFlags\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //   \n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")], [\"balance\", xdr.lookup(\"Int64\")], [\"limit\", xdr.lookup(\"Int64\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OfferEntryFlags\n  //   {\n  //       // an offer with this flag will not act on and take a reverse offer of equal\n  //       // price\n  //       PASSIVE_FLAG = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"OfferEntryFlags\", {\n    passiveFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_OFFERENTRY_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_OFFERENTRY_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OfferEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct OfferEntry\n  //   {\n  //       AccountID sellerID;\n  //       int64 offerID;\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount of A\n  //   \n  //       /* price for this offer:\n  //           price of A in terms of B\n  //           price=AmountB/AmountA=priceNumerator/priceDenominator\n  //           price is after fees\n  //       */\n  //       Price price;\n  //       uint32 flags; // see OfferEntryFlags\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OfferEntry\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"OfferEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"DataEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DataEntry\n  //   {\n  //       AccountID accountID; // account this data belongs to\n  //       string64 dataName;\n  //       DataValue dataValue;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DataEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.lookup(\"DataValue\")], [\"ext\", xdr.lookup(\"DataEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimPredicateType\n  //   {\n  //       CLAIM_PREDICATE_UNCONDITIONAL = 0,\n  //       CLAIM_PREDICATE_AND = 1,\n  //       CLAIM_PREDICATE_OR = 2,\n  //       CLAIM_PREDICATE_NOT = 3,\n  //       CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME = 4,\n  //       CLAIM_PREDICATE_BEFORE_RELATIVE_TIME = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimPredicateType\", {\n    claimPredicateUnconditional: 0,\n    claimPredicateAnd: 1,\n    claimPredicateOr: 2,\n    claimPredicateNot: 3,\n    claimPredicateBeforeAbsoluteTime: 4,\n    claimPredicateBeforeRelativeTime: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimPredicate switch (ClaimPredicateType type)\n  //   {\n  //   case CLAIM_PREDICATE_UNCONDITIONAL:\n  //       void;\n  //   case CLAIM_PREDICATE_AND:\n  //       ClaimPredicate andPredicates<2>;\n  //   case CLAIM_PREDICATE_OR:\n  //       ClaimPredicate orPredicates<2>;\n  //   case CLAIM_PREDICATE_NOT:\n  //       ClaimPredicate* notPredicate;\n  //   case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:\n  //       int64 absBefore; // Predicate will be true if closeTime < absBefore\n  //   case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:\n  //       int64 relBefore; // Seconds since closeTime of the ledger in which the\n  //                        // ClaimableBalanceEntry was created\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimPredicate\", {\n    switchOn: xdr.lookup(\"ClaimPredicateType\"),\n    switchName: \"type\",\n    switches: [[\"claimPredicateUnconditional\", xdr.void()], [\"claimPredicateAnd\", \"andPredicates\"], [\"claimPredicateOr\", \"orPredicates\"], [\"claimPredicateNot\", \"notPredicate\"], [\"claimPredicateBeforeAbsoluteTime\", \"absBefore\"], [\"claimPredicateBeforeRelativeTime\", \"relBefore\"]],\n    arms: {\n      andPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      orPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      notPredicate: xdr.option(xdr.lookup(\"ClaimPredicate\")),\n      absBefore: xdr.lookup(\"Int64\"),\n      relBefore: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimantType\n  //   {\n  //       CLAIMANT_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimantType\", {\n    claimantTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimantV0\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"predicate\", xdr.lookup(\"ClaimPredicate\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Claimant switch (ClaimantType type)\n  //   {\n  //   case CLAIMANT_TYPE_V0:\n  //       struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Claimant\", {\n    switchOn: xdr.lookup(\"ClaimantType\"),\n    switchName: \"type\",\n    switches: [[\"claimantTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimantV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceIDType\n  //   {\n  //       CLAIMABLE_BALANCE_ID_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimableBalanceIdType\", {\n    claimableBalanceIdTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimableBalanceID switch (ClaimableBalanceIDType type)\n  //   {\n  //   case CLAIMABLE_BALANCE_ID_TYPE_V0:\n  //       Hash v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceId\", {\n    switchOn: xdr.lookup(\"ClaimableBalanceIdType\"),\n    switchName: \"type\",\n    switches: [[\"claimableBalanceIdTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceFlags\n  //   {\n  //       // If set, the issuer account of the asset held by the claimable balance may\n  //       // clawback the claimable balance\n  //       CLAIMABLE_BALANCE_CLAWBACK_ENABLED_FLAG = 0x1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimableBalanceFlags\", {\n    claimableBalanceClawbackEnabledFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_CLAIMABLE_BALANCE_FLAGS = 0x1;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_CLAIMABLE_BALANCE_FLAGS\", 0x1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntryExtensionV1\n  //   {\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   \n  //       uint32 flags; // see ClaimableBalanceFlags\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntryExtensionV1\", [[\"ext\", xdr.lookup(\"ClaimableBalanceEntryExtensionV1Ext\")], [\"flags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ClaimableBalanceEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntry\n  //   {\n  //       // Unique identifier for this ClaimableBalanceEntry\n  //       ClaimableBalanceID balanceID;\n  //   \n  //       // List of claimants with associated predicate\n  //       Claimant claimants<10>;\n  //   \n  //       // Any asset including native\n  //       Asset asset;\n  //   \n  //       // Amount of asset\n  //       int64 amount;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntry\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"ext\", xdr.lookup(\"ClaimableBalanceEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolConstantProductParameters\n  //   {\n  //       Asset assetA; // assetA < assetB\n  //       Asset assetB;\n  //       int32 fee; // Fee is in basis points, so the actual rate is (fee/100)%\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolConstantProductParameters\", [[\"assetA\", xdr.lookup(\"Asset\")], [\"assetB\", xdr.lookup(\"Asset\")], [\"fee\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //   \n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntryConstantProduct\", [[\"params\", xdr.lookup(\"LiquidityPoolConstantProductParameters\")], [\"reserveA\", xdr.lookup(\"Int64\")], [\"reserveB\", xdr.lookup(\"Int64\")], [\"totalPoolShares\", xdr.lookup(\"Int64\")], [\"poolSharesTrustLineCount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //   \n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolEntryBody\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolEntryConstantProduct\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolEntry\n  //   {\n  //       PoolID liquidityPoolID;\n  //   \n  //       union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //   \n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntry\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"body\", xdr.lookup(\"LiquidityPoolEntryBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntryExtensionV1\n  //   {\n  //       SponsorshipDescriptor sponsoringID;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntryExtensionV1\", [[\"sponsoringId\", xdr.lookup(\"SponsorshipDescriptor\")], [\"ext\", xdr.lookup(\"LedgerEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryData\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"]],\n    arms: {\n      account: xdr.lookup(\"AccountEntry\"),\n      trustLine: xdr.lookup(\"TrustLineEntry\"),\n      offer: xdr.lookup(\"OfferEntry\"),\n      data: xdr.lookup(\"DataEntry\"),\n      claimableBalance: xdr.lookup(\"ClaimableBalanceEntry\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntry\n  //   {\n  //       uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed\n  //   \n  //       union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       }\n  //       data;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntry\", [[\"lastModifiedLedgerSeq\", xdr.lookup(\"Uint32\")], [\"data\", xdr.lookup(\"LedgerEntryData\")], [\"ext\", xdr.lookup(\"LedgerEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyAccount\", [[\"accountId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTrustLine\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyOffer\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyData\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyClaimableBalance\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyLiquidityPool\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerKey switch (LedgerEntryType type)\n  //   {\n  //   case ACCOUNT:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //       } account;\n  //   \n  //   case TRUSTLINE:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       } trustLine;\n  //   \n  //   case OFFER:\n  //       struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       } offer;\n  //   \n  //   case DATA:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       } data;\n  //   \n  //   case CLAIMABLE_BALANCE:\n  //       struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       } claimableBalance;\n  //   \n  //   case LIQUIDITY_POOL:\n  //       struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       } liquidityPool;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerKey\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"]],\n    arms: {\n      account: xdr.lookup(\"LedgerKeyAccount\"),\n      trustLine: xdr.lookup(\"LedgerKeyTrustLine\"),\n      offer: xdr.lookup(\"LedgerKeyOffer\"),\n      data: xdr.lookup(\"LedgerKeyData\"),\n      claimableBalance: xdr.lookup(\"LedgerKeyClaimableBalance\"),\n      liquidityPool: xdr.lookup(\"LedgerKeyLiquidityPool\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EnvelopeType\n  //   {\n  //       ENVELOPE_TYPE_TX_V0 = 0,\n  //       ENVELOPE_TYPE_SCP = 1,\n  //       ENVELOPE_TYPE_TX = 2,\n  //       ENVELOPE_TYPE_AUTH = 3,\n  //       ENVELOPE_TYPE_SCPVALUE = 4,\n  //       ENVELOPE_TYPE_TX_FEE_BUMP = 5,\n  //       ENVELOPE_TYPE_OP_ID = 6,\n  //       ENVELOPE_TYPE_POOL_REVOKE_OP_ID = 7\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"EnvelopeType\", {\n    envelopeTypeTxV0: 0,\n    envelopeTypeScp: 1,\n    envelopeTypeTx: 2,\n    envelopeTypeAuth: 3,\n    envelopeTypeScpvalue: 4,\n    envelopeTypeTxFeeBump: 5,\n    envelopeTypeOpId: 6,\n    envelopeTypePoolRevokeOpId: 7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque UpgradeType<128>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"UpgradeType\", xdr.varOpaque(128));\n\n  // === xdr source ============================================================\n  //\n  //   enum StellarValueType\n  //   {\n  //       STELLAR_VALUE_BASIC = 0,\n  //       STELLAR_VALUE_SIGNED = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"StellarValueType\", {\n    stellarValueBasic: 0,\n    stellarValueSigned: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseValueSignature\n  //   {\n  //       NodeID nodeID;       // which node introduced the value\n  //       Signature signature; // nodeID's signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseValueSignature\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"StellarValueExt\", {\n    switchOn: xdr.lookup(\"StellarValueType\"),\n    switchName: \"v\",\n    switches: [[\"stellarValueBasic\", xdr.void()], [\"stellarValueSigned\", \"lcValueSignature\"]],\n    arms: {\n      lcValueSignature: xdr.lookup(\"LedgerCloseValueSignature\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct StellarValue\n  //   {\n  //       Hash txSetHash;      // transaction set to apply to previous ledger\n  //       TimePoint closeTime; // network close time\n  //   \n  //       // upgrades to apply to the previous ledger (usually empty)\n  //       // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop\n  //       // unknown steps during consensus if needed.\n  //       // see notes below on 'LedgerUpgrade' for more detail\n  //       // max size is dictated by number of upgrade types (+ room for future)\n  //       UpgradeType upgrades<6>;\n  //   \n  //       // reserved for future use\n  //       union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StellarValue\", [[\"txSetHash\", xdr.lookup(\"Hash\")], [\"closeTime\", xdr.lookup(\"TimePoint\")], [\"upgrades\", xdr.varArray(xdr.lookup(\"UpgradeType\"), 6)], [\"ext\", xdr.lookup(\"StellarValueExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_LEDGER_HEADER_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_LEDGER_HEADER_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerHeaderFlags\n  //   {\n  //       DISABLE_LIQUIDITY_POOL_TRADING_FLAG = 0x1,\n  //       DISABLE_LIQUIDITY_POOL_DEPOSIT_FLAG = 0x2,\n  //       DISABLE_LIQUIDITY_POOL_WITHDRAWAL_FLAG = 0x4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerHeaderFlags\", {\n    disableLiquidityPoolTradingFlag: 1,\n    disableLiquidityPoolDepositFlag: 2,\n    disableLiquidityPoolWithdrawalFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderExtensionV1\n  //   {\n  //       uint32 flags; // LedgerHeaderFlags\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderExtensionV1\", [[\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"LedgerHeaderExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerHeaderExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeader\n  //   {\n  //       uint32 ledgerVersion;    // the protocol version of the ledger\n  //       Hash previousLedgerHash; // hash of the previous ledger header\n  //       StellarValue scpValue;   // what consensus agreed to\n  //       Hash txSetResultHash;    // the TransactionResultSet that led to this ledger\n  //       Hash bucketListHash;     // hash of the ledger state\n  //   \n  //       uint32 ledgerSeq; // sequence number of this ledger\n  //   \n  //       int64 totalCoins; // total number of stroops in existence.\n  //                         // 10,000,000 stroops in 1 XLM\n  //   \n  //       int64 feePool;       // fees burned since last inflation run\n  //       uint32 inflationSeq; // inflation sequence number\n  //   \n  //       uint64 idPool; // last used global ID, used for generating objects\n  //   \n  //       uint32 baseFee;     // base fee per operation in stroops\n  //       uint32 baseReserve; // account base reserve in stroops\n  //   \n  //       uint32 maxTxSetSize; // maximum size a transaction set can be\n  //   \n  //       Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back\n  //                         // in time without walking the chain back ledger by ledger\n  //                         // each slot contains the oldest ledger that is mod of\n  //                         // either 50  5000  50000 or 500000 depending on index\n  //                         // skipList[0] mod(50), skipList[1] mod(5000), etc\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeader\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"scpValue\", xdr.lookup(\"StellarValue\")], [\"txSetResultHash\", xdr.lookup(\"Hash\")], [\"bucketListHash\", xdr.lookup(\"Hash\")], [\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"totalCoins\", xdr.lookup(\"Int64\")], [\"feePool\", xdr.lookup(\"Int64\")], [\"inflationSeq\", xdr.lookup(\"Uint32\")], [\"idPool\", xdr.lookup(\"Uint64\")], [\"baseFee\", xdr.lookup(\"Uint32\")], [\"baseReserve\", xdr.lookup(\"Uint32\")], [\"maxTxSetSize\", xdr.lookup(\"Uint32\")], [\"skipList\", xdr.array(xdr.lookup(\"Hash\"), 4)], [\"ext\", xdr.lookup(\"LedgerHeaderExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerUpgradeType\n  //   {\n  //       LEDGER_UPGRADE_VERSION = 1,\n  //       LEDGER_UPGRADE_BASE_FEE = 2,\n  //       LEDGER_UPGRADE_MAX_TX_SET_SIZE = 3,\n  //       LEDGER_UPGRADE_BASE_RESERVE = 4,\n  //       LEDGER_UPGRADE_FLAGS = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerUpgradeType\", {\n    ledgerUpgradeVersion: 1,\n    ledgerUpgradeBaseFee: 2,\n    ledgerUpgradeMaxTxSetSize: 3,\n    ledgerUpgradeBaseReserve: 4,\n    ledgerUpgradeFlags: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerUpgrade switch (LedgerUpgradeType type)\n  //   {\n  //   case LEDGER_UPGRADE_VERSION:\n  //       uint32 newLedgerVersion; // update ledgerVersion\n  //   case LEDGER_UPGRADE_BASE_FEE:\n  //       uint32 newBaseFee; // update baseFee\n  //   case LEDGER_UPGRADE_MAX_TX_SET_SIZE:\n  //       uint32 newMaxTxSetSize; // update maxTxSetSize\n  //   case LEDGER_UPGRADE_BASE_RESERVE:\n  //       uint32 newBaseReserve; // update baseReserve\n  //   case LEDGER_UPGRADE_FLAGS:\n  //       uint32 newFlags; // update flags\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerUpgrade\", {\n    switchOn: xdr.lookup(\"LedgerUpgradeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerUpgradeVersion\", \"newLedgerVersion\"], [\"ledgerUpgradeBaseFee\", \"newBaseFee\"], [\"ledgerUpgradeMaxTxSetSize\", \"newMaxTxSetSize\"], [\"ledgerUpgradeBaseReserve\", \"newBaseReserve\"], [\"ledgerUpgradeFlags\", \"newFlags\"]],\n    arms: {\n      newLedgerVersion: xdr.lookup(\"Uint32\"),\n      newBaseFee: xdr.lookup(\"Uint32\"),\n      newMaxTxSetSize: xdr.lookup(\"Uint32\"),\n      newBaseReserve: xdr.lookup(\"Uint32\"),\n      newFlags: xdr.lookup(\"Uint32\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketEntryType\n  //   {\n  //       METAENTRY =\n  //           -1, // At-and-after protocol 11: bucket metadata, should come first.\n  //       LIVEENTRY = 0, // Before protocol 11: created-or-updated;\n  //                      // At-and-after protocol 11: only updated.\n  //       DEADENTRY = 1,\n  //       INITENTRY = 2 // At-and-after protocol 11: only created.\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"BucketEntryType\", {\n    metaentry: -1,\n    liveentry: 0,\n    deadentry: 1,\n    initentry: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"BucketMetadataExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct BucketMetadata\n  //   {\n  //       // Indicates the protocol version used to create / merge this bucket.\n  //       uint32 ledgerVersion;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BucketMetadata\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"BucketMetadataExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union BucketEntry switch (BucketEntryType type)\n  //   {\n  //   case LIVEENTRY:\n  //   case INITENTRY:\n  //       LedgerEntry liveEntry;\n  //   \n  //   case DEADENTRY:\n  //       LedgerKey deadEntry;\n  //   case METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BucketEntry\", {\n    switchOn: xdr.lookup(\"BucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"liveentry\", \"liveEntry\"], [\"initentry\", \"liveEntry\"], [\"deadentry\", \"deadEntry\"], [\"metaentry\", \"metaEntry\"]],\n    arms: {\n      liveEntry: xdr.lookup(\"LedgerEntry\"),\n      deadEntry: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum TxSetComponentType\n  //   {\n  //     // txs with effective fee <= bid derived from a base fee (if any).\n  //     // If base fee is not specified, no discount is applied.\n  //     TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"TxSetComponentType\", {\n    txsetCompTxsMaybeDiscountedFee: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     }\n  //\n  // ===========================================================================\n  xdr.struct(\"TxSetComponentTxsMaybeDiscountedFee\", [[\"baseFee\", xdr.option(xdr.lookup(\"Int64\"))], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TxSetComponent switch (TxSetComponentType type)\n  //   {\n  //   case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:\n  //     struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     } txsMaybeDiscountedFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TxSetComponent\", {\n    switchOn: xdr.lookup(\"TxSetComponentType\"),\n    switchName: \"type\",\n    switches: [[\"txsetCompTxsMaybeDiscountedFee\", \"txsMaybeDiscountedFee\"]],\n    arms: {\n      txsMaybeDiscountedFee: xdr.lookup(\"TxSetComponentTxsMaybeDiscountedFee\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionPhase switch (int v)\n  //   {\n  //   case 0:\n  //       TxSetComponent v0Components<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionPhase\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"v0Components\"]],\n    arms: {\n      v0Components: xdr.varArray(xdr.lookup(\"TxSetComponent\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSet\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionEnvelope txs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSet\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSetV1\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionPhase phases<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSetV1\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"phases\", xdr.varArray(xdr.lookup(\"TransactionPhase\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union GeneralizedTransactionSet switch (int v)\n  //   {\n  //   // We consider the legacy TransactionSet to be v0.\n  //   case 1:\n  //       TransactionSetV1 v1TxSet;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"GeneralizedTransactionSet\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[1, \"v1TxSet\"]],\n    arms: {\n      v1TxSet: xdr.lookup(\"TransactionSetV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultPair\n  //   {\n  //       Hash transactionHash;\n  //       TransactionResult result; // result for the transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"TransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultSet\n  //   {\n  //       TransactionResultPair results<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultSet\", [[\"results\", xdr.varArray(xdr.lookup(\"TransactionResultPair\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"generalizedTxSet\"]],\n    arms: {\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionSet txSet;\n  //   \n  //       // when v != 0, txSet must be empty\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryResultEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryResultEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionResultSet txResultSet;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryResultEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txResultSet\", xdr.lookup(\"TransactionResultSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryResultEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderHistoryEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderHistoryEntry\n  //   {\n  //       Hash hash;\n  //       LedgerHeader header;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderHistoryEntry\", [[\"hash\", xdr.lookup(\"Hash\")], [\"header\", xdr.lookup(\"LedgerHeader\")], [\"ext\", xdr.lookup(\"LedgerHeaderHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerSCPMessages\n  //   {\n  //       uint32 ledgerSeq;\n  //       SCPEnvelope messages<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerScpMessages\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"messages\", xdr.varArray(xdr.lookup(\"ScpEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPHistoryEntryV0\n  //   {\n  //       SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages\n  //       LedgerSCPMessages ledgerMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpHistoryEntryV0\", [[\"quorumSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)], [\"ledgerMessages\", xdr.lookup(\"LedgerScpMessages\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCPHistoryEntry switch (int v)\n  //   {\n  //   case 0:\n  //       SCPHistoryEntryV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScpHistoryEntry\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScpHistoryEntryV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryChangeType\n  //   {\n  //       LEDGER_ENTRY_CREATED = 0, // entry was added to the ledger\n  //       LEDGER_ENTRY_UPDATED = 1, // entry was modified in the ledger\n  //       LEDGER_ENTRY_REMOVED = 2, // entry was removed from the ledger\n  //       LEDGER_ENTRY_STATE = 3    // value of the entry\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerEntryChangeType\", {\n    ledgerEntryCreated: 0,\n    ledgerEntryUpdated: 1,\n    ledgerEntryRemoved: 2,\n    ledgerEntryState: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerEntryChange switch (LedgerEntryChangeType type)\n  //   {\n  //   case LEDGER_ENTRY_CREATED:\n  //       LedgerEntry created;\n  //   case LEDGER_ENTRY_UPDATED:\n  //       LedgerEntry updated;\n  //   case LEDGER_ENTRY_REMOVED:\n  //       LedgerKey removed;\n  //   case LEDGER_ENTRY_STATE:\n  //       LedgerEntry state;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryChange\", {\n    switchOn: xdr.lookup(\"LedgerEntryChangeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerEntryCreated\", \"created\"], [\"ledgerEntryUpdated\", \"updated\"], [\"ledgerEntryRemoved\", \"removed\"], [\"ledgerEntryState\", \"state\"]],\n    arms: {\n      created: xdr.lookup(\"LedgerEntry\"),\n      updated: xdr.lookup(\"LedgerEntry\"),\n      removed: xdr.lookup(\"LedgerKey\"),\n      state: xdr.lookup(\"LedgerEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef LedgerEntryChange LedgerEntryChanges<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"LedgerEntryChanges\", xdr.varArray(xdr.lookup(\"LedgerEntryChange\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct OperationMeta\n  //   {\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OperationMeta\", [[\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV1\n  //   {\n  //       LedgerEntryChanges txChanges; // tx level changes if any\n  //       OperationMeta operations<>;   // meta for each operation\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV1\", [[\"txChanges\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV2\n  //   {\n  //       LedgerEntryChanges txChangesBefore; // tx level changes before operations\n  //                                           // are applied if any\n  //       OperationMeta operations<>;         // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;  // tx level changes after operations are\n  //                                           // applied if any\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV2\", [[\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionMeta switch (int v)\n  //   {\n  //   case 0:\n  //       OperationMeta operations<>;\n  //   case 1:\n  //       TransactionMetaV1 v1;\n  //   case 2:\n  //       TransactionMetaV2 v2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionMeta\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"operations\"], [1, \"v1\"], [2, \"v2\"]],\n    arms: {\n      operations: xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647),\n      v1: xdr.lookup(\"TransactionMetaV1\"),\n      v2: xdr.lookup(\"TransactionMetaV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultMeta\n  //   {\n  //       TransactionResultPair result;\n  //       LedgerEntryChanges feeProcessing;\n  //       TransactionMeta txApplyProcessing;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultMeta\", [[\"result\", xdr.lookup(\"TransactionResultPair\")], [\"feeProcessing\", xdr.lookup(\"LedgerEntryChanges\")], [\"txApplyProcessing\", xdr.lookup(\"TransactionMeta\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UpgradeEntryMeta\n  //   {\n  //       LedgerUpgrade upgrade;\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UpgradeEntryMeta\", [[\"upgrade\", xdr.lookup(\"LedgerUpgrade\")], [\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV0\n  //   {\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //       // NB: txSet is sorted in \"Hash order\"\n  //       TransactionSet txSet;\n  //   \n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //   \n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //   \n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV0\", [[\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV1\n  //   {\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //   \n  //       GeneralizedTransactionSet txSet;\n  //   \n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //   \n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //   \n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV1\", [[\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"GeneralizedTransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMeta switch (int v)\n  //   {\n  //   case 0:\n  //       LedgerCloseMetaV0 v0;\n  //   case 1:\n  //       LedgerCloseMetaV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMeta\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"v0\"], [1, \"v1\"]],\n    arms: {\n      v0: xdr.lookup(\"LedgerCloseMetaV0\"),\n      v1: xdr.lookup(\"LedgerCloseMetaV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ErrorCode\n  //   {\n  //       ERR_MISC = 0, // Unspecific error\n  //       ERR_DATA = 1, // Malformed data\n  //       ERR_CONF = 2, // Misconfiguration error\n  //       ERR_AUTH = 3, // Authentication failure\n  //       ERR_LOAD = 4  // System overloaded\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ErrorCode\", {\n    errMisc: 0,\n    errData: 1,\n    errConf: 2,\n    errAuth: 3,\n    errLoad: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Error\n  //   {\n  //       ErrorCode code;\n  //       string msg<100>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Error\", [[\"code\", xdr.lookup(\"ErrorCode\")], [\"msg\", xdr.string(100)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMore\n  //   {\n  //       uint32 numMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMore\", [[\"numMessages\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AuthCert\n  //   {\n  //       Curve25519Public pubkey;\n  //       uint64 expiration;\n  //       Signature sig;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthCert\", [[\"pubkey\", xdr.lookup(\"Curve25519Public\")], [\"expiration\", xdr.lookup(\"Uint64\")], [\"sig\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Hello\n  //   {\n  //       uint32 ledgerVersion;\n  //       uint32 overlayVersion;\n  //       uint32 overlayMinVersion;\n  //       Hash networkID;\n  //       string versionStr<100>;\n  //       int listeningPort;\n  //       NodeID peerID;\n  //       AuthCert cert;\n  //       uint256 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Hello\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"overlayVersion\", xdr.lookup(\"Uint32\")], [\"overlayMinVersion\", xdr.lookup(\"Uint32\")], [\"networkId\", xdr.lookup(\"Hash\")], [\"versionStr\", xdr.string(100)], [\"listeningPort\", xdr.int()], [\"peerId\", xdr.lookup(\"NodeId\")], [\"cert\", xdr.lookup(\"AuthCert\")], [\"nonce\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Auth\n  //   {\n  //       // Empty message, just to confirm\n  //       // establishment of MAC keys.\n  //       int unused;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Auth\", [[\"unused\", xdr.int()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum IPAddrType\n  //   {\n  //       IPv4 = 0,\n  //       IPv6 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"IpAddrType\", {\n    iPv4: 0,\n    iPv6: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"PeerAddressIp\", {\n    switchOn: xdr.lookup(\"IpAddrType\"),\n    switchName: \"type\",\n    switches: [[\"iPv4\", \"ipv4\"], [\"iPv6\", \"ipv6\"]],\n    arms: {\n      ipv4: xdr.opaque(4),\n      ipv6: xdr.opaque(16)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerAddress\n  //   {\n  //       union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //       ip;\n  //       uint32 port;\n  //       uint32 numFailures;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerAddress\", [[\"ip\", xdr.lookup(\"PeerAddressIp\")], [\"port\", xdr.lookup(\"Uint32\")], [\"numFailures\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum MessageType\n  //   {\n  //       ERROR_MSG = 0,\n  //       AUTH = 2,\n  //       DONT_HAVE = 3,\n  //   \n  //       GET_PEERS = 4, // gets a list of peers this guy knows about\n  //       PEERS = 5,\n  //   \n  //       GET_TX_SET = 6, // gets a particular txset by hash\n  //       TX_SET = 7,\n  //       GENERALIZED_TX_SET = 17,\n  //   \n  //       TRANSACTION = 8, // pass on a tx you have heard about\n  //   \n  //       // SCP\n  //       GET_SCP_QUORUMSET = 9,\n  //       SCP_QUORUMSET = 10,\n  //       SCP_MESSAGE = 11,\n  //       GET_SCP_STATE = 12,\n  //   \n  //       // new messages\n  //       HELLO = 13,\n  //   \n  //       SURVEY_REQUEST = 14,\n  //       SURVEY_RESPONSE = 15,\n  //   \n  //       SEND_MORE = 16\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"MessageType\", {\n    errorMsg: 0,\n    auth: 2,\n    dontHave: 3,\n    getPeers: 4,\n    peers: 5,\n    getTxSet: 6,\n    txSet: 7,\n    generalizedTxSet: 17,\n    transaction: 8,\n    getScpQuorumset: 9,\n    scpQuorumset: 10,\n    scpMessage: 11,\n    getScpState: 12,\n    hello: 13,\n    surveyRequest: 14,\n    surveyResponse: 15,\n    sendMore: 16\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DontHave\n  //   {\n  //       MessageType type;\n  //       uint256 reqHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DontHave\", [[\"type\", xdr.lookup(\"MessageType\")], [\"reqHash\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageCommandType\n  //   {\n  //       SURVEY_TOPOLOGY = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SurveyMessageCommandType\", {\n    surveyTopology: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyRequestMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       Curve25519Public encryptionKey;\n  //       SurveyMessageCommandType commandType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyRequestMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"encryptionKey\", xdr.lookup(\"Curve25519Public\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       SurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"SurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque EncryptedBody<64000>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"EncryptedBody\", xdr.varOpaque(64000));\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyResponseMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       SurveyMessageCommandType commandType;\n  //       EncryptedBody encryptedBody;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyResponseMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")], [\"encryptedBody\", xdr.lookup(\"EncryptedBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       SurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"SurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerStats\n  //   {\n  //       NodeID id;\n  //       string versionStr<100>;\n  //       uint64 messagesRead;\n  //       uint64 messagesWritten;\n  //       uint64 bytesRead;\n  //       uint64 bytesWritten;\n  //       uint64 secondsConnected;\n  //   \n  //       uint64 uniqueFloodBytesRecv;\n  //       uint64 duplicateFloodBytesRecv;\n  //       uint64 uniqueFetchBytesRecv;\n  //       uint64 duplicateFetchBytesRecv;\n  //   \n  //       uint64 uniqueFloodMessageRecv;\n  //       uint64 duplicateFloodMessageRecv;\n  //       uint64 uniqueFetchMessageRecv;\n  //       uint64 duplicateFetchMessageRecv;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerStats\", [[\"id\", xdr.lookup(\"NodeId\")], [\"versionStr\", xdr.string(100)], [\"messagesRead\", xdr.lookup(\"Uint64\")], [\"messagesWritten\", xdr.lookup(\"Uint64\")], [\"bytesRead\", xdr.lookup(\"Uint64\")], [\"bytesWritten\", xdr.lookup(\"Uint64\")], [\"secondsConnected\", xdr.lookup(\"Uint64\")], [\"uniqueFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchMessageRecv\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef PeerStats PeerStatList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PeerStatList\", xdr.varArray(xdr.lookup(\"PeerStats\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBody\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //   \n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBody\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SurveyResponseBody switch (SurveyMessageCommandType type)\n  //   {\n  //   case SURVEY_TOPOLOGY:\n  //       TopologyResponseBody topologyResponseBody;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SurveyResponseBody\", {\n    switchOn: xdr.lookup(\"SurveyMessageCommandType\"),\n    switchName: \"type\",\n    switches: [[\"surveyTopology\", \"topologyResponseBody\"]],\n    arms: {\n      topologyResponseBody: xdr.lookup(\"TopologyResponseBody\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union StellarMessage switch (MessageType type)\n  //   {\n  //   case ERROR_MSG:\n  //       Error error;\n  //   case HELLO:\n  //       Hello hello;\n  //   case AUTH:\n  //       Auth auth;\n  //   case DONT_HAVE:\n  //       DontHave dontHave;\n  //   case GET_PEERS:\n  //       void;\n  //   case PEERS:\n  //       PeerAddress peers<100>;\n  //   \n  //   case GET_TX_SET:\n  //       uint256 txSetHash;\n  //   case TX_SET:\n  //       TransactionSet txSet;\n  //   case GENERALIZED_TX_SET:\n  //       GeneralizedTransactionSet generalizedTxSet;\n  //   \n  //   case TRANSACTION:\n  //       TransactionEnvelope transaction;\n  //   \n  //   case SURVEY_REQUEST:\n  //       SignedSurveyRequestMessage signedSurveyRequestMessage;\n  //   \n  //   case SURVEY_RESPONSE:\n  //       SignedSurveyResponseMessage signedSurveyResponseMessage;\n  //   \n  //   // SCP\n  //   case GET_SCP_QUORUMSET:\n  //       uint256 qSetHash;\n  //   case SCP_QUORUMSET:\n  //       SCPQuorumSet qSet;\n  //   case SCP_MESSAGE:\n  //       SCPEnvelope envelope;\n  //   case GET_SCP_STATE:\n  //       uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest\n  //   case SEND_MORE:\n  //       SendMore sendMoreMessage;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"StellarMessage\", {\n    switchOn: xdr.lookup(\"MessageType\"),\n    switchName: \"type\",\n    switches: [[\"errorMsg\", \"error\"], [\"hello\", \"hello\"], [\"auth\", \"auth\"], [\"dontHave\", \"dontHave\"], [\"getPeers\", xdr.void()], [\"peers\", \"peers\"], [\"getTxSet\", \"txSetHash\"], [\"txSet\", \"txSet\"], [\"generalizedTxSet\", \"generalizedTxSet\"], [\"transaction\", \"transaction\"], [\"surveyRequest\", \"signedSurveyRequestMessage\"], [\"surveyResponse\", \"signedSurveyResponseMessage\"], [\"getScpQuorumset\", \"qSetHash\"], [\"scpQuorumset\", \"qSet\"], [\"scpMessage\", \"envelope\"], [\"getScpState\", \"getScpLedgerSeq\"], [\"sendMore\", \"sendMoreMessage\"]],\n    arms: {\n      error: xdr.lookup(\"Error\"),\n      hello: xdr.lookup(\"Hello\"),\n      auth: xdr.lookup(\"Auth\"),\n      dontHave: xdr.lookup(\"DontHave\"),\n      peers: xdr.varArray(xdr.lookup(\"PeerAddress\"), 100),\n      txSetHash: xdr.lookup(\"Uint256\"),\n      txSet: xdr.lookup(\"TransactionSet\"),\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\"),\n      transaction: xdr.lookup(\"TransactionEnvelope\"),\n      signedSurveyRequestMessage: xdr.lookup(\"SignedSurveyRequestMessage\"),\n      signedSurveyResponseMessage: xdr.lookup(\"SignedSurveyResponseMessage\"),\n      qSetHash: xdr.lookup(\"Uint256\"),\n      qSet: xdr.lookup(\"ScpQuorumSet\"),\n      envelope: xdr.lookup(\"ScpEnvelope\"),\n      getScpLedgerSeq: xdr.lookup(\"Uint32\"),\n      sendMoreMessage: xdr.lookup(\"SendMore\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthenticatedMessageV0\", [[\"sequence\", xdr.lookup(\"Uint64\")], [\"message\", xdr.lookup(\"StellarMessage\")], [\"mac\", xdr.lookup(\"HmacSha256Mac\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union AuthenticatedMessage switch (uint32 v)\n  //   {\n  //   case 0:\n  //       struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AuthenticatedMessage\", {\n    switchOn: xdr.lookup(\"Uint32\"),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"AuthenticatedMessageV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolParameters switch (LiquidityPoolType type)\n  //   {\n  //   case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //       LiquidityPoolConstantProductParameters constantProduct;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolParameters\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolConstantProductParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"MuxedAccountMed25519\", [[\"id\", xdr.lookup(\"Uint64\")], [\"ed25519\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union MuxedAccount switch (CryptoKeyType type)\n  //   {\n  //   case KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case KEY_TYPE_MUXED_ED25519:\n  //       struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       } med25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"MuxedAccount\", {\n    switchOn: xdr.lookup(\"CryptoKeyType\"),\n    switchName: \"type\",\n    switches: [[\"keyTypeEd25519\", \"ed25519\"], [\"keyTypeMuxedEd25519\", \"med25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      med25519: xdr.lookup(\"MuxedAccountMed25519\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DecoratedSignature\n  //   {\n  //       SignatureHint hint;  // last 4 bytes of the public key, used as a hint\n  //       Signature signature; // actual signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DecoratedSignature\", [[\"hint\", xdr.lookup(\"SignatureHint\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationType\n  //   {\n  //       CREATE_ACCOUNT = 0,\n  //       PAYMENT = 1,\n  //       PATH_PAYMENT_STRICT_RECEIVE = 2,\n  //       MANAGE_SELL_OFFER = 3,\n  //       CREATE_PASSIVE_SELL_OFFER = 4,\n  //       SET_OPTIONS = 5,\n  //       CHANGE_TRUST = 6,\n  //       ALLOW_TRUST = 7,\n  //       ACCOUNT_MERGE = 8,\n  //       INFLATION = 9,\n  //       MANAGE_DATA = 10,\n  //       BUMP_SEQUENCE = 11,\n  //       MANAGE_BUY_OFFER = 12,\n  //       PATH_PAYMENT_STRICT_SEND = 13,\n  //       CREATE_CLAIMABLE_BALANCE = 14,\n  //       CLAIM_CLAIMABLE_BALANCE = 15,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES = 16,\n  //       END_SPONSORING_FUTURE_RESERVES = 17,\n  //       REVOKE_SPONSORSHIP = 18,\n  //       CLAWBACK = 19,\n  //       CLAWBACK_CLAIMABLE_BALANCE = 20,\n  //       SET_TRUST_LINE_FLAGS = 21,\n  //       LIQUIDITY_POOL_DEPOSIT = 22,\n  //       LIQUIDITY_POOL_WITHDRAW = 23\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"OperationType\", {\n    createAccount: 0,\n    payment: 1,\n    pathPaymentStrictReceive: 2,\n    manageSellOffer: 3,\n    createPassiveSellOffer: 4,\n    setOptions: 5,\n    changeTrust: 6,\n    allowTrust: 7,\n    accountMerge: 8,\n    inflation: 9,\n    manageData: 10,\n    bumpSequence: 11,\n    manageBuyOffer: 12,\n    pathPaymentStrictSend: 13,\n    createClaimableBalance: 14,\n    claimClaimableBalance: 15,\n    beginSponsoringFutureReserves: 16,\n    endSponsoringFutureReserves: 17,\n    revokeSponsorship: 18,\n    clawback: 19,\n    clawbackClaimableBalance: 20,\n    setTrustLineFlags: 21,\n    liquidityPoolDeposit: 22,\n    liquidityPoolWithdraw: 23\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateAccountOp\n  //   {\n  //       AccountID destination; // account to create\n  //       int64 startingBalance; // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateAccountOp\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"startingBalance\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PaymentOp\n  //   {\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset asset;              // what they end up with\n  //       int64 amount;             // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PaymentOp\", [[\"destination\", xdr.lookup(\"MuxedAccount\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictReceiveOp\n  //   {\n  //       Asset sendAsset; // asset we pay with\n  //       int64 sendMax;   // the maximum amount of sendAsset to\n  //                        // send (excluding fees).\n  //                        // The operation will fail if can't be met\n  //   \n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destAmount;         // amount they end up with\n  //   \n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendMax\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destAmount\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictSendOp\n  //   {\n  //       Asset sendAsset;  // asset we pay with\n  //       int64 sendAmount; // amount of sendAsset to send (excluding fees)\n  //   \n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destMin;            // the minimum amount of dest asset to\n  //                                 // be received\n  //                                 // The operation will fail if it can't be met\n  //   \n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendAmount\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destMin\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageSellOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 amount; // amount being sold. if set to 0, delete the offer\n  //       Price price;  // price of thing being sold in terms of what you are buying\n  //   \n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageBuyOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 buyAmount; // amount being bought. if set to 0, delete the offer\n  //       Price price;     // price of thing being bought in terms of what you are\n  //                        // selling\n  //   \n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageBuyOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"buyAmount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreatePassiveSellOfferOp\n  //   {\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount taker gets\n  //       Price price;   // cost of A in terms of B\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreatePassiveSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetOptionsOp\n  //   {\n  //       AccountID* inflationDest; // sets the inflation destination\n  //   \n  //       uint32* clearFlags; // which flags to clear\n  //       uint32* setFlags;   // which flags to set\n  //   \n  //       // account threshold manipulation\n  //       uint32* masterWeight; // weight of the master account\n  //       uint32* lowThreshold;\n  //       uint32* medThreshold;\n  //       uint32* highThreshold;\n  //   \n  //       string32* homeDomain; // sets the home domain\n  //   \n  //       // Add, update or remove a signer for the account\n  //       // signer is deleted if the weight is 0\n  //       Signer* signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetOptionsOp\", [[\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"clearFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"setFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"masterWeight\", xdr.option(xdr.lookup(\"Uint32\"))], [\"lowThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"medThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"highThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"homeDomain\", xdr.option(xdr.lookup(\"String32\"))], [\"signer\", xdr.option(xdr.lookup(\"Signer\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //   \n  //   case ASSET_TYPE_POOL_SHARE:\n  //       LiquidityPoolParameters liquidityPool;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr.void()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPool\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ChangeTrustOp\n  //   {\n  //       ChangeTrustAsset line;\n  //   \n  //       // if limit is set to 0, deletes the trust line\n  //       int64 limit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ChangeTrustOp\", [[\"line\", xdr.lookup(\"ChangeTrustAsset\")], [\"limit\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AllowTrustOp\n  //   {\n  //       AccountID trustor;\n  //       AssetCode asset;\n  //   \n  //       // One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG\n  //       uint32 authorize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AllowTrustOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"AssetCode\")], [\"authorize\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageDataOp\n  //   {\n  //       string64 dataName;\n  //       DataValue* dataValue; // set to null to clear\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageDataOp\", [[\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.option(xdr.lookup(\"DataValue\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BumpSequenceOp\n  //   {\n  //       SequenceNumber bumpTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BumpSequenceOp\", [[\"bumpTo\", xdr.lookup(\"SequenceNumber\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateClaimableBalanceOp\n  //   {\n  //       Asset asset;\n  //       int64 amount;\n  //       Claimant claimants<10>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateClaimableBalanceOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BeginSponsoringFutureReservesOp\n  //   {\n  //       AccountID sponsoredID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BeginSponsoringFutureReservesOp\", [[\"sponsoredId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipType\n  //   {\n  //       REVOKE_SPONSORSHIP_LEDGER_ENTRY = 0,\n  //       REVOKE_SPONSORSHIP_SIGNER = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"RevokeSponsorshipType\", {\n    revokeSponsorshipLedgerEntry: 0,\n    revokeSponsorshipSigner: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"RevokeSponsorshipOpSigner\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"signerKey\", xdr.lookup(\"SignerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipOp switch (RevokeSponsorshipType type)\n  //   {\n  //   case REVOKE_SPONSORSHIP_LEDGER_ENTRY:\n  //       LedgerKey ledgerKey;\n  //   case REVOKE_SPONSORSHIP_SIGNER:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       } signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipOp\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipType\"),\n    switchName: \"type\",\n    switches: [[\"revokeSponsorshipLedgerEntry\", \"ledgerKey\"], [\"revokeSponsorshipSigner\", \"signer\"]],\n    arms: {\n      ledgerKey: xdr.lookup(\"LedgerKey\"),\n      signer: xdr.lookup(\"RevokeSponsorshipOpSigner\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackOp\n  //   {\n  //       Asset asset;\n  //       MuxedAccount from;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"from\", xdr.lookup(\"MuxedAccount\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetTrustLineFlagsOp\n  //   {\n  //       AccountID trustor;\n  //       Asset asset;\n  //   \n  //       uint32 clearFlags; // which flags to clear\n  //       uint32 setFlags;   // which flags to set\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetTrustLineFlagsOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"clearFlags\", xdr.lookup(\"Uint32\")], [\"setFlags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const LIQUIDITY_POOL_FEE_V18 = 30;\n  //\n  // ===========================================================================\n  xdr.const(\"LIQUIDITY_POOL_FEE_V18\", 30);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolDepositOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 maxAmountA; // maximum amount of first asset to deposit\n  //       int64 maxAmountB; // maximum amount of second asset to deposit\n  //       Price minPrice;   // minimum depositA/depositB\n  //       Price maxPrice;   // maximum depositA/depositB\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolDepositOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"maxAmountA\", xdr.lookup(\"Int64\")], [\"maxAmountB\", xdr.lookup(\"Int64\")], [\"minPrice\", xdr.lookup(\"Price\")], [\"maxPrice\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolWithdrawOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 amount;     // amount of pool shares to withdraw\n  //       int64 minAmountA; // minimum amount of first asset to withdraw\n  //       int64 minAmountB; // minimum amount of second asset to withdraw\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolWithdrawOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"amount\", xdr.lookup(\"Int64\")], [\"minAmountA\", xdr.lookup(\"Int64\")], [\"minAmountB\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationBody\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountOp\"], [\"payment\", \"paymentOp\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveOp\"], [\"manageSellOffer\", \"manageSellOfferOp\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferOp\"], [\"setOptions\", \"setOptionsOp\"], [\"changeTrust\", \"changeTrustOp\"], [\"allowTrust\", \"allowTrustOp\"], [\"accountMerge\", \"destination\"], [\"inflation\", xdr.void()], [\"manageData\", \"manageDataOp\"], [\"bumpSequence\", \"bumpSequenceOp\"], [\"manageBuyOffer\", \"manageBuyOfferOp\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendOp\"], [\"createClaimableBalance\", \"createClaimableBalanceOp\"], [\"claimClaimableBalance\", \"claimClaimableBalanceOp\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesOp\"], [\"endSponsoringFutureReserves\", xdr.void()], [\"revokeSponsorship\", \"revokeSponsorshipOp\"], [\"clawback\", \"clawbackOp\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceOp\"], [\"setTrustLineFlags\", \"setTrustLineFlagsOp\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositOp\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawOp\"]],\n    arms: {\n      createAccountOp: xdr.lookup(\"CreateAccountOp\"),\n      paymentOp: xdr.lookup(\"PaymentOp\"),\n      pathPaymentStrictReceiveOp: xdr.lookup(\"PathPaymentStrictReceiveOp\"),\n      manageSellOfferOp: xdr.lookup(\"ManageSellOfferOp\"),\n      createPassiveSellOfferOp: xdr.lookup(\"CreatePassiveSellOfferOp\"),\n      setOptionsOp: xdr.lookup(\"SetOptionsOp\"),\n      changeTrustOp: xdr.lookup(\"ChangeTrustOp\"),\n      allowTrustOp: xdr.lookup(\"AllowTrustOp\"),\n      destination: xdr.lookup(\"MuxedAccount\"),\n      manageDataOp: xdr.lookup(\"ManageDataOp\"),\n      bumpSequenceOp: xdr.lookup(\"BumpSequenceOp\"),\n      manageBuyOfferOp: xdr.lookup(\"ManageBuyOfferOp\"),\n      pathPaymentStrictSendOp: xdr.lookup(\"PathPaymentStrictSendOp\"),\n      createClaimableBalanceOp: xdr.lookup(\"CreateClaimableBalanceOp\"),\n      claimClaimableBalanceOp: xdr.lookup(\"ClaimClaimableBalanceOp\"),\n      beginSponsoringFutureReservesOp: xdr.lookup(\"BeginSponsoringFutureReservesOp\"),\n      revokeSponsorshipOp: xdr.lookup(\"RevokeSponsorshipOp\"),\n      clawbackOp: xdr.lookup(\"ClawbackOp\"),\n      clawbackClaimableBalanceOp: xdr.lookup(\"ClawbackClaimableBalanceOp\"),\n      setTrustLineFlagsOp: xdr.lookup(\"SetTrustLineFlagsOp\"),\n      liquidityPoolDepositOp: xdr.lookup(\"LiquidityPoolDepositOp\"),\n      liquidityPoolWithdrawOp: xdr.lookup(\"LiquidityPoolWithdrawOp\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Operation\n  //   {\n  //       // sourceAccount is the account used to run the operation\n  //       // if not set, the runtime defaults to \"sourceAccount\" specified at\n  //       // the transaction level\n  //       MuxedAccount* sourceAccount;\n  //   \n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Operation\", [[\"sourceAccount\", xdr.option(xdr.lookup(\"MuxedAccount\"))], [\"body\", xdr.lookup(\"OperationBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageOperationId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageRevokeId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")], [\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"asset\", xdr.lookup(\"Asset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HashIDPreimage switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       } operationID;\n  //   case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       } revokeID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HashIdPreimage\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeOpId\", \"operationId\"], [\"envelopeTypePoolRevokeOpId\", \"revokeId\"]],\n    arms: {\n      operationId: xdr.lookup(\"HashIdPreimageOperationId\"),\n      revokeId: xdr.lookup(\"HashIdPreimageRevokeId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum MemoType\n  //   {\n  //       MEMO_NONE = 0,\n  //       MEMO_TEXT = 1,\n  //       MEMO_ID = 2,\n  //       MEMO_HASH = 3,\n  //       MEMO_RETURN = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"MemoType\", {\n    memoNone: 0,\n    memoText: 1,\n    memoId: 2,\n    memoHash: 3,\n    memoReturn: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Memo switch (MemoType type)\n  //   {\n  //   case MEMO_NONE:\n  //       void;\n  //   case MEMO_TEXT:\n  //       string text<28>;\n  //   case MEMO_ID:\n  //       uint64 id;\n  //   case MEMO_HASH:\n  //       Hash hash; // the hash of what to pull from the content server\n  //   case MEMO_RETURN:\n  //       Hash retHash; // the hash of the tx you are rejecting\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Memo\", {\n    switchOn: xdr.lookup(\"MemoType\"),\n    switchName: \"type\",\n    switches: [[\"memoNone\", xdr.void()], [\"memoText\", \"text\"], [\"memoId\", \"id\"], [\"memoHash\", \"hash\"], [\"memoReturn\", \"retHash\"]],\n    arms: {\n      text: xdr.string(28),\n      id: xdr.lookup(\"Uint64\"),\n      hash: xdr.lookup(\"Hash\"),\n      retHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeBounds\n  //   {\n  //       TimePoint minTime;\n  //       TimePoint maxTime; // 0 here means no maxTime\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeBounds\", [[\"minTime\", xdr.lookup(\"TimePoint\")], [\"maxTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerBounds\n  //   {\n  //       uint32 minLedger;\n  //       uint32 maxLedger; // 0 here means no maxLedger\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerBounds\", [[\"minLedger\", xdr.lookup(\"Uint32\")], [\"maxLedger\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PreconditionsV2\n  //   {\n  //       TimeBounds* timeBounds;\n  //   \n  //       // Transaction only valid for ledger numbers n such that\n  //       // minLedger <= n < maxLedger (if maxLedger == 0, then\n  //       // only minLedger is checked)\n  //       LedgerBounds* ledgerBounds;\n  //   \n  //       // If NULL, only valid when sourceAccount's sequence number\n  //       // is seqNum - 1.  Otherwise, valid when sourceAccount's\n  //       // sequence number n satisfies minSeqNum <= n < tx.seqNum.\n  //       // Note that after execution the account's sequence number\n  //       // is always raised to tx.seqNum, and a transaction is not\n  //       // valid if tx.seqNum is too high to ensure replay protection.\n  //       SequenceNumber* minSeqNum;\n  //   \n  //       // For the transaction to be valid, the current ledger time must\n  //       // be at least minSeqAge greater than sourceAccount's seqTime.\n  //       Duration minSeqAge;\n  //   \n  //       // For the transaction to be valid, the current ledger number\n  //       // must be at least minSeqLedgerGap greater than sourceAccount's\n  //       // seqLedger.\n  //       uint32 minSeqLedgerGap;\n  //   \n  //       // For the transaction to be valid, there must be a signature\n  //       // corresponding to every Signer in this array, even if the\n  //       // signature is not otherwise required by the sourceAccount or\n  //       // operations.\n  //       SignerKey extraSigners<2>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PreconditionsV2\", [[\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"ledgerBounds\", xdr.option(xdr.lookup(\"LedgerBounds\"))], [\"minSeqNum\", xdr.option(xdr.lookup(\"SequenceNumber\"))], [\"minSeqAge\", xdr.lookup(\"Duration\")], [\"minSeqLedgerGap\", xdr.lookup(\"Uint32\")], [\"extraSigners\", xdr.varArray(xdr.lookup(\"SignerKey\"), 2)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum PreconditionType\n  //   {\n  //       PRECOND_NONE = 0,\n  //       PRECOND_TIME = 1,\n  //       PRECOND_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PreconditionType\", {\n    precondNone: 0,\n    precondTime: 1,\n    precondV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Preconditions switch (PreconditionType type)\n  //   {\n  //   case PRECOND_NONE:\n  //       void;\n  //   case PRECOND_TIME:\n  //       TimeBounds timeBounds;\n  //   case PRECOND_V2:\n  //       PreconditionsV2 v2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Preconditions\", {\n    switchOn: xdr.lookup(\"PreconditionType\"),\n    switchName: \"type\",\n    switches: [[\"precondNone\", xdr.void()], [\"precondTime\", \"timeBounds\"], [\"precondV2\", \"v2\"]],\n    arms: {\n      timeBounds: xdr.lookup(\"TimeBounds\"),\n      v2: xdr.lookup(\"PreconditionsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_OPS_PER_TX = 100;\n  //\n  // ===========================================================================\n  xdr.const(\"MAX_OPS_PER_TX\", 100);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionV0Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0\n  //   {\n  //       uint256 sourceAccountEd25519;\n  //       uint32 fee;\n  //       SequenceNumber seqNum;\n  //       TimeBounds* timeBounds;\n  //       Memo memo;\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0\", [[\"sourceAccountEd25519\", xdr.lookup(\"Uint256\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionV0Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0Envelope\n  //   {\n  //       TransactionV0 tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0Envelope\", [[\"tx\", xdr.lookup(\"TransactionV0\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Transaction\n  //   {\n  //       // account used to run the transaction\n  //       MuxedAccount sourceAccount;\n  //   \n  //       // the fee the sourceAccount will pay\n  //       uint32 fee;\n  //   \n  //       // sequence number to consume in the account\n  //       SequenceNumber seqNum;\n  //   \n  //       // validity conditions\n  //       Preconditions cond;\n  //   \n  //       Memo memo;\n  //   \n  //       Operation operations<MAX_OPS_PER_TX>;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Transaction\", [[\"sourceAccount\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"cond\", xdr.lookup(\"Preconditions\")], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV1Envelope\n  //   {\n  //       Transaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV1Envelope\", [[\"tx\", xdr.lookup(\"Transaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionInnerTx\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TransactionV1Envelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransaction\n  //   {\n  //       MuxedAccount feeSource;\n  //       int64 fee;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //       innerTx;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransaction\", [[\"feeSource\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Int64\")], [\"innerTx\", xdr.lookup(\"FeeBumpTransactionInnerTx\")], [\"ext\", xdr.lookup(\"FeeBumpTransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransactionEnvelope\n  //   {\n  //       FeeBumpTransaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransactionEnvelope\", [[\"tx\", xdr.lookup(\"FeeBumpTransaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionEnvelope switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_TX_V0:\n  //       TransactionV0Envelope v0;\n  //   case ENVELOPE_TYPE_TX:\n  //       TransactionV1Envelope v1;\n  //   case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //       FeeBumpTransactionEnvelope feeBump;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionEnvelope\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTxV0\", \"v0\"], [\"envelopeTypeTx\", \"v1\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      v0: xdr.lookup(\"TransactionV0Envelope\"),\n      v1: xdr.lookup(\"TransactionV1Envelope\"),\n      feeBump: xdr.lookup(\"FeeBumpTransactionEnvelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionSignaturePayloadTaggedTransaction\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"tx\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      tx: xdr.lookup(\"Transaction\"),\n      feeBump: xdr.lookup(\"FeeBumpTransaction\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSignaturePayload\n  //   {\n  //       Hash networkId;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //       taggedTransaction;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSignaturePayload\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"taggedTransaction\", xdr.lookup(\"TransactionSignaturePayloadTaggedTransaction\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimAtomType\n  //   {\n  //       CLAIM_ATOM_TYPE_V0 = 0,\n  //       CLAIM_ATOM_TYPE_ORDER_BOOK = 1,\n  //       CLAIM_ATOM_TYPE_LIQUIDITY_POOL = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimAtomType\", {\n    claimAtomTypeV0: 0,\n    claimAtomTypeOrderBook: 1,\n    claimAtomTypeLiquidityPool: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtomV0\n  //   {\n  //       // emitted to identify the offer\n  //       uint256 sellerEd25519; // Account that owns the offer\n  //       int64 offerID;\n  //   \n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //   \n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtomV0\", [[\"sellerEd25519\", xdr.lookup(\"Uint256\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtom\n  //   {\n  //       // emitted to identify the offer\n  //       AccountID sellerID; // Account that owns the offer\n  //       int64 offerID;\n  //   \n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //   \n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtom\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimLiquidityAtom\n  //   {\n  //       PoolID liquidityPoolID;\n  //   \n  //       // amount and asset taken from the pool\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //   \n  //       // amount and asset sent to the pool\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimLiquidityAtom\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimAtom switch (ClaimAtomType type)\n  //   {\n  //   case CLAIM_ATOM_TYPE_V0:\n  //       ClaimOfferAtomV0 v0;\n  //   case CLAIM_ATOM_TYPE_ORDER_BOOK:\n  //       ClaimOfferAtom orderBook;\n  //   case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:\n  //       ClaimLiquidityAtom liquidityPool;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimAtom\", {\n    switchOn: xdr.lookup(\"ClaimAtomType\"),\n    switchName: \"type\",\n    switches: [[\"claimAtomTypeV0\", \"v0\"], [\"claimAtomTypeOrderBook\", \"orderBook\"], [\"claimAtomTypeLiquidityPool\", \"liquidityPool\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimOfferAtomV0\"),\n      orderBook: xdr.lookup(\"ClaimOfferAtom\"),\n      liquidityPool: xdr.lookup(\"ClaimLiquidityAtom\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateAccountResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CREATE_ACCOUNT_SUCCESS = 0, // account was created\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       CREATE_ACCOUNT_MALFORMED = -1,   // invalid destination\n  //       CREATE_ACCOUNT_UNDERFUNDED = -2, // not enough funds in source account\n  //       CREATE_ACCOUNT_LOW_RESERVE =\n  //           -3, // would create an account below the min reserve\n  //       CREATE_ACCOUNT_ALREADY_EXIST = -4 // account already exists\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"CreateAccountResultCode\", {\n    createAccountSuccess: 0,\n    createAccountMalformed: -1,\n    createAccountUnderfunded: -2,\n    createAccountLowReserve: -3,\n    createAccountAlreadyExist: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateAccountResult switch (CreateAccountResultCode code)\n  //   {\n  //   case CREATE_ACCOUNT_SUCCESS:\n  //       void;\n  //   case CREATE_ACCOUNT_MALFORMED:\n  //   case CREATE_ACCOUNT_UNDERFUNDED:\n  //   case CREATE_ACCOUNT_LOW_RESERVE:\n  //   case CREATE_ACCOUNT_ALREADY_EXIST:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateAccountResult\", {\n    switchOn: xdr.lookup(\"CreateAccountResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createAccountSuccess\", xdr.void()], [\"createAccountMalformed\", xdr.void()], [\"createAccountUnderfunded\", xdr.void()], [\"createAccountLowReserve\", xdr.void()], [\"createAccountAlreadyExist\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PaymentResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PAYMENT_SUCCESS = 0, // payment successfully completed\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       PAYMENT_MALFORMED = -1,          // bad input\n  //       PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account\n  //       PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account\n  //       PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer\n  //       PAYMENT_NO_DESTINATION = -5,     // destination account does not exist\n  //       PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset\n  //       PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset\n  //       PAYMENT_LINE_FULL = -8,      // destination would go above their limit\n  //       PAYMENT_NO_ISSUER = -9       // missing issuer on asset\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PaymentResultCode\", {\n    paymentSuccess: 0,\n    paymentMalformed: -1,\n    paymentUnderfunded: -2,\n    paymentSrcNoTrust: -3,\n    paymentSrcNotAuthorized: -4,\n    paymentNoDestination: -5,\n    paymentNoTrust: -6,\n    paymentNotAuthorized: -7,\n    paymentLineFull: -8,\n    paymentNoIssuer: -9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PaymentResult switch (PaymentResultCode code)\n  //   {\n  //   case PAYMENT_SUCCESS:\n  //       void;\n  //   case PAYMENT_MALFORMED:\n  //   case PAYMENT_UNDERFUNDED:\n  //   case PAYMENT_SRC_NO_TRUST:\n  //   case PAYMENT_SRC_NOT_AUTHORIZED:\n  //   case PAYMENT_NO_DESTINATION:\n  //   case PAYMENT_NO_TRUST:\n  //   case PAYMENT_NOT_AUTHORIZED:\n  //   case PAYMENT_LINE_FULL:\n  //   case PAYMENT_NO_ISSUER:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PaymentResult\", {\n    switchOn: xdr.lookup(\"PaymentResultCode\"),\n    switchName: \"code\",\n    switches: [[\"paymentSuccess\", xdr.void()], [\"paymentMalformed\", xdr.void()], [\"paymentUnderfunded\", xdr.void()], [\"paymentSrcNoTrust\", xdr.void()], [\"paymentSrcNotAuthorized\", xdr.void()], [\"paymentNoDestination\", xdr.void()], [\"paymentNoTrust\", xdr.void()], [\"paymentNotAuthorized\", xdr.void()], [\"paymentLineFull\", xdr.void()], [\"paymentNoIssuer\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictReceiveResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_SUCCESS = 0, // success\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL =\n  //           -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX = -12 // could not satisfy sendmax\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PathPaymentStrictReceiveResultCode\", {\n    pathPaymentStrictReceiveSuccess: 0,\n    pathPaymentStrictReceiveMalformed: -1,\n    pathPaymentStrictReceiveUnderfunded: -2,\n    pathPaymentStrictReceiveSrcNoTrust: -3,\n    pathPaymentStrictReceiveSrcNotAuthorized: -4,\n    pathPaymentStrictReceiveNoDestination: -5,\n    pathPaymentStrictReceiveNoTrust: -6,\n    pathPaymentStrictReceiveNotAuthorized: -7,\n    pathPaymentStrictReceiveLineFull: -8,\n    pathPaymentStrictReceiveNoIssuer: -9,\n    pathPaymentStrictReceiveTooFewOffers: -10,\n    pathPaymentStrictReceiveOfferCrossSelf: -11,\n    pathPaymentStrictReceiveOverSendmax: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SimplePaymentResult\n  //   {\n  //       AccountID destination;\n  //       Asset asset;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SimplePaymentResult\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictReceiveResult switch (\n  //       PathPaymentStrictReceiveResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictReceiveResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictReceiveResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictReceiveSuccess\", \"success\"], [\"pathPaymentStrictReceiveMalformed\", xdr.void()], [\"pathPaymentStrictReceiveUnderfunded\", xdr.void()], [\"pathPaymentStrictReceiveSrcNoTrust\", xdr.void()], [\"pathPaymentStrictReceiveSrcNotAuthorized\", xdr.void()], [\"pathPaymentStrictReceiveNoDestination\", xdr.void()], [\"pathPaymentStrictReceiveNoTrust\", xdr.void()], [\"pathPaymentStrictReceiveNotAuthorized\", xdr.void()], [\"pathPaymentStrictReceiveLineFull\", xdr.void()], [\"pathPaymentStrictReceiveNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictReceiveTooFewOffers\", xdr.void()], [\"pathPaymentStrictReceiveOfferCrossSelf\", xdr.void()], [\"pathPaymentStrictReceiveOverSendmax\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictReceiveResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictSendResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_SUCCESS = 0, // success\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_SEND_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_SEND_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_SEND_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_SEND_LINE_FULL = -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_SEND_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN = -12 // could not satisfy destMin\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PathPaymentStrictSendResultCode\", {\n    pathPaymentStrictSendSuccess: 0,\n    pathPaymentStrictSendMalformed: -1,\n    pathPaymentStrictSendUnderfunded: -2,\n    pathPaymentStrictSendSrcNoTrust: -3,\n    pathPaymentStrictSendSrcNotAuthorized: -4,\n    pathPaymentStrictSendNoDestination: -5,\n    pathPaymentStrictSendNoTrust: -6,\n    pathPaymentStrictSendNotAuthorized: -7,\n    pathPaymentStrictSendLineFull: -8,\n    pathPaymentStrictSendNoIssuer: -9,\n    pathPaymentStrictSendTooFewOffers: -10,\n    pathPaymentStrictSendOfferCrossSelf: -11,\n    pathPaymentStrictSendUnderDestmin: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_SEND_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_SEND_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictSendResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictSendResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictSendSuccess\", \"success\"], [\"pathPaymentStrictSendMalformed\", xdr.void()], [\"pathPaymentStrictSendUnderfunded\", xdr.void()], [\"pathPaymentStrictSendSrcNoTrust\", xdr.void()], [\"pathPaymentStrictSendSrcNotAuthorized\", xdr.void()], [\"pathPaymentStrictSendNoDestination\", xdr.void()], [\"pathPaymentStrictSendNoTrust\", xdr.void()], [\"pathPaymentStrictSendNotAuthorized\", xdr.void()], [\"pathPaymentStrictSendLineFull\", xdr.void()], [\"pathPaymentStrictSendNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictSendTooFewOffers\", xdr.void()], [\"pathPaymentStrictSendOfferCrossSelf\", xdr.void()], [\"pathPaymentStrictSendUnderDestmin\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictSendResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageSellOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_SELL_OFFER_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_SELL_OFFER_MALFORMED = -1, // generated offer would be invalid\n  //       MANAGE_SELL_OFFER_SELL_NO_TRUST =\n  //           -2,                              // no trust line for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_TRUST = -3, // no trust line for what we're buying\n  //       MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_SELL_OFFER_LINE_FULL = -6, // can't receive more of what it's buying\n  //       MANAGE_SELL_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_SELL_OFFER_CROSS_SELF =\n  //           -8, // would cross an offer from the same user\n  //       MANAGE_SELL_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //   \n  //       // update errors\n  //       MANAGE_SELL_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //   \n  //       MANAGE_SELL_OFFER_LOW_RESERVE =\n  //           -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageSellOfferResultCode\", {\n    manageSellOfferSuccess: 0,\n    manageSellOfferMalformed: -1,\n    manageSellOfferSellNoTrust: -2,\n    manageSellOfferBuyNoTrust: -3,\n    manageSellOfferSellNotAuthorized: -4,\n    manageSellOfferBuyNotAuthorized: -5,\n    manageSellOfferLineFull: -6,\n    manageSellOfferUnderfunded: -7,\n    manageSellOfferCrossSelf: -8,\n    manageSellOfferSellNoIssuer: -9,\n    manageSellOfferBuyNoIssuer: -10,\n    manageSellOfferNotFound: -11,\n    manageSellOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageOfferEffect\n  //   {\n  //       MANAGE_OFFER_CREATED = 0,\n  //       MANAGE_OFFER_UPDATED = 1,\n  //       MANAGE_OFFER_DELETED = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageOfferEffect\", {\n    manageOfferCreated: 0,\n    manageOfferUpdated: 1,\n    manageOfferDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ManageOfferSuccessResultOffer\", {\n    switchOn: xdr.lookup(\"ManageOfferEffect\"),\n    switchName: \"effect\",\n    switches: [[\"manageOfferCreated\", \"offer\"], [\"manageOfferUpdated\", \"offer\"], [\"manageOfferDeleted\", xdr.void()]],\n    arms: {\n      offer: xdr.lookup(\"OfferEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageOfferSuccessResult\n  //   {\n  //       // offers that got claimed while creating this offer\n  //       ClaimAtom offersClaimed<>;\n  //   \n  //       union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //       offer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageOfferSuccessResult\", [[\"offersClaimed\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"offer\", xdr.lookup(\"ManageOfferSuccessResultOffer\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ManageSellOfferResult switch (ManageSellOfferResultCode code)\n  //   {\n  //   case MANAGE_SELL_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_SELL_OFFER_MALFORMED:\n  //   case MANAGE_SELL_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_LINE_FULL:\n  //   case MANAGE_SELL_OFFER_UNDERFUNDED:\n  //   case MANAGE_SELL_OFFER_CROSS_SELF:\n  //   case MANAGE_SELL_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_NOT_FOUND:\n  //   case MANAGE_SELL_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageSellOfferResult\", {\n    switchOn: xdr.lookup(\"ManageSellOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageSellOfferSuccess\", \"success\"], [\"manageSellOfferMalformed\", xdr.void()], [\"manageSellOfferSellNoTrust\", xdr.void()], [\"manageSellOfferBuyNoTrust\", xdr.void()], [\"manageSellOfferSellNotAuthorized\", xdr.void()], [\"manageSellOfferBuyNotAuthorized\", xdr.void()], [\"manageSellOfferLineFull\", xdr.void()], [\"manageSellOfferUnderfunded\", xdr.void()], [\"manageSellOfferCrossSelf\", xdr.void()], [\"manageSellOfferSellNoIssuer\", xdr.void()], [\"manageSellOfferBuyNoIssuer\", xdr.void()], [\"manageSellOfferNotFound\", xdr.void()], [\"manageSellOfferLowReserve\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageBuyOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_BUY_OFFER_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_BUY_OFFER_MALFORMED = -1,     // generated offer would be invalid\n  //       MANAGE_BUY_OFFER_SELL_NO_TRUST = -2, // no trust line for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_TRUST = -3,  // no trust line for what we're buying\n  //       MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_BUY_OFFER_LINE_FULL = -6,   // can't receive more of what it's buying\n  //       MANAGE_BUY_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_BUY_OFFER_CROSS_SELF = -8, // would cross an offer from the same user\n  //       MANAGE_BUY_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //   \n  //       // update errors\n  //       MANAGE_BUY_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //   \n  //       MANAGE_BUY_OFFER_LOW_RESERVE = -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageBuyOfferResultCode\", {\n    manageBuyOfferSuccess: 0,\n    manageBuyOfferMalformed: -1,\n    manageBuyOfferSellNoTrust: -2,\n    manageBuyOfferBuyNoTrust: -3,\n    manageBuyOfferSellNotAuthorized: -4,\n    manageBuyOfferBuyNotAuthorized: -5,\n    manageBuyOfferLineFull: -6,\n    manageBuyOfferUnderfunded: -7,\n    manageBuyOfferCrossSelf: -8,\n    manageBuyOfferSellNoIssuer: -9,\n    manageBuyOfferBuyNoIssuer: -10,\n    manageBuyOfferNotFound: -11,\n    manageBuyOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageBuyOfferResult switch (ManageBuyOfferResultCode code)\n  //   {\n  //   case MANAGE_BUY_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_BUY_OFFER_MALFORMED:\n  //   case MANAGE_BUY_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_LINE_FULL:\n  //   case MANAGE_BUY_OFFER_UNDERFUNDED:\n  //   case MANAGE_BUY_OFFER_CROSS_SELF:\n  //   case MANAGE_BUY_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_NOT_FOUND:\n  //   case MANAGE_BUY_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageBuyOfferResult\", {\n    switchOn: xdr.lookup(\"ManageBuyOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageBuyOfferSuccess\", \"success\"], [\"manageBuyOfferMalformed\", xdr.void()], [\"manageBuyOfferSellNoTrust\", xdr.void()], [\"manageBuyOfferBuyNoTrust\", xdr.void()], [\"manageBuyOfferSellNotAuthorized\", xdr.void()], [\"manageBuyOfferBuyNotAuthorized\", xdr.void()], [\"manageBuyOfferLineFull\", xdr.void()], [\"manageBuyOfferUnderfunded\", xdr.void()], [\"manageBuyOfferCrossSelf\", xdr.void()], [\"manageBuyOfferSellNoIssuer\", xdr.void()], [\"manageBuyOfferBuyNoIssuer\", xdr.void()], [\"manageBuyOfferNotFound\", xdr.void()], [\"manageBuyOfferLowReserve\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetOptionsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_OPTIONS_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       SET_OPTIONS_LOW_RESERVE = -1,      // not enough funds to add a signer\n  //       SET_OPTIONS_TOO_MANY_SIGNERS = -2, // max number of signers already reached\n  //       SET_OPTIONS_BAD_FLAGS = -3,        // invalid combination of clear/set flags\n  //       SET_OPTIONS_INVALID_INFLATION = -4,      // inflation account does not exist\n  //       SET_OPTIONS_CANT_CHANGE = -5,            // can no longer change this option\n  //       SET_OPTIONS_UNKNOWN_FLAG = -6,           // can't set an unknown flag\n  //       SET_OPTIONS_THRESHOLD_OUT_OF_RANGE = -7, // bad value for weight/threshold\n  //       SET_OPTIONS_BAD_SIGNER = -8,             // signer cannot be masterkey\n  //       SET_OPTIONS_INVALID_HOME_DOMAIN = -9,    // malformed home domain\n  //       SET_OPTIONS_AUTH_REVOCABLE_REQUIRED =\n  //           -10 // auth revocable is required for clawback\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SetOptionsResultCode\", {\n    setOptionsSuccess: 0,\n    setOptionsLowReserve: -1,\n    setOptionsTooManySigners: -2,\n    setOptionsBadFlags: -3,\n    setOptionsInvalidInflation: -4,\n    setOptionsCantChange: -5,\n    setOptionsUnknownFlag: -6,\n    setOptionsThresholdOutOfRange: -7,\n    setOptionsBadSigner: -8,\n    setOptionsInvalidHomeDomain: -9,\n    setOptionsAuthRevocableRequired: -10\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetOptionsResult switch (SetOptionsResultCode code)\n  //   {\n  //   case SET_OPTIONS_SUCCESS:\n  //       void;\n  //   case SET_OPTIONS_LOW_RESERVE:\n  //   case SET_OPTIONS_TOO_MANY_SIGNERS:\n  //   case SET_OPTIONS_BAD_FLAGS:\n  //   case SET_OPTIONS_INVALID_INFLATION:\n  //   case SET_OPTIONS_CANT_CHANGE:\n  //   case SET_OPTIONS_UNKNOWN_FLAG:\n  //   case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:\n  //   case SET_OPTIONS_BAD_SIGNER:\n  //   case SET_OPTIONS_INVALID_HOME_DOMAIN:\n  //   case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetOptionsResult\", {\n    switchOn: xdr.lookup(\"SetOptionsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setOptionsSuccess\", xdr.void()], [\"setOptionsLowReserve\", xdr.void()], [\"setOptionsTooManySigners\", xdr.void()], [\"setOptionsBadFlags\", xdr.void()], [\"setOptionsInvalidInflation\", xdr.void()], [\"setOptionsCantChange\", xdr.void()], [\"setOptionsUnknownFlag\", xdr.void()], [\"setOptionsThresholdOutOfRange\", xdr.void()], [\"setOptionsBadSigner\", xdr.void()], [\"setOptionsInvalidHomeDomain\", xdr.void()], [\"setOptionsAuthRevocableRequired\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ChangeTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CHANGE_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       CHANGE_TRUST_MALFORMED = -1,     // bad input\n  //       CHANGE_TRUST_NO_ISSUER = -2,     // could not find issuer\n  //       CHANGE_TRUST_INVALID_LIMIT = -3, // cannot drop limit below balance\n  //                                        // cannot create with a limit of 0\n  //       CHANGE_TRUST_LOW_RESERVE =\n  //           -4, // not enough funds to create a new trust line,\n  //       CHANGE_TRUST_SELF_NOT_ALLOWED = -5,   // trusting self is not allowed\n  //       CHANGE_TRUST_TRUST_LINE_MISSING = -6, // Asset trustline is missing for pool\n  //       CHANGE_TRUST_CANNOT_DELETE =\n  //           -7, // Asset trustline is still referenced in a pool\n  //       CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES =\n  //           -8 // Asset trustline is deauthorized\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ChangeTrustResultCode\", {\n    changeTrustSuccess: 0,\n    changeTrustMalformed: -1,\n    changeTrustNoIssuer: -2,\n    changeTrustInvalidLimit: -3,\n    changeTrustLowReserve: -4,\n    changeTrustSelfNotAllowed: -5,\n    changeTrustTrustLineMissing: -6,\n    changeTrustCannotDelete: -7,\n    changeTrustNotAuthMaintainLiabilities: -8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustResult switch (ChangeTrustResultCode code)\n  //   {\n  //   case CHANGE_TRUST_SUCCESS:\n  //       void;\n  //   case CHANGE_TRUST_MALFORMED:\n  //   case CHANGE_TRUST_NO_ISSUER:\n  //   case CHANGE_TRUST_INVALID_LIMIT:\n  //   case CHANGE_TRUST_LOW_RESERVE:\n  //   case CHANGE_TRUST_SELF_NOT_ALLOWED:\n  //   case CHANGE_TRUST_TRUST_LINE_MISSING:\n  //   case CHANGE_TRUST_CANNOT_DELETE:\n  //   case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustResult\", {\n    switchOn: xdr.lookup(\"ChangeTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"changeTrustSuccess\", xdr.void()], [\"changeTrustMalformed\", xdr.void()], [\"changeTrustNoIssuer\", xdr.void()], [\"changeTrustInvalidLimit\", xdr.void()], [\"changeTrustLowReserve\", xdr.void()], [\"changeTrustSelfNotAllowed\", xdr.void()], [\"changeTrustTrustLineMissing\", xdr.void()], [\"changeTrustCannotDelete\", xdr.void()], [\"changeTrustNotAuthMaintainLiabilities\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AllowTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ALLOW_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ALLOW_TRUST_MALFORMED = -1,     // asset is not ASSET_TYPE_ALPHANUM\n  //       ALLOW_TRUST_NO_TRUST_LINE = -2, // trustor does not have a trustline\n  //                                       // source account does not require trust\n  //       ALLOW_TRUST_TRUST_NOT_REQUIRED = -3,\n  //       ALLOW_TRUST_CANT_REVOKE = -4,      // source account can't revoke trust,\n  //       ALLOW_TRUST_SELF_NOT_ALLOWED = -5, // trusting self is not allowed\n  //       ALLOW_TRUST_LOW_RESERVE = -6       // claimable balances can't be created\n  //                                          // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AllowTrustResultCode\", {\n    allowTrustSuccess: 0,\n    allowTrustMalformed: -1,\n    allowTrustNoTrustLine: -2,\n    allowTrustTrustNotRequired: -3,\n    allowTrustCantRevoke: -4,\n    allowTrustSelfNotAllowed: -5,\n    allowTrustLowReserve: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AllowTrustResult switch (AllowTrustResultCode code)\n  //   {\n  //   case ALLOW_TRUST_SUCCESS:\n  //       void;\n  //   case ALLOW_TRUST_MALFORMED:\n  //   case ALLOW_TRUST_NO_TRUST_LINE:\n  //   case ALLOW_TRUST_TRUST_NOT_REQUIRED:\n  //   case ALLOW_TRUST_CANT_REVOKE:\n  //   case ALLOW_TRUST_SELF_NOT_ALLOWED:\n  //   case ALLOW_TRUST_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AllowTrustResult\", {\n    switchOn: xdr.lookup(\"AllowTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"allowTrustSuccess\", xdr.void()], [\"allowTrustMalformed\", xdr.void()], [\"allowTrustNoTrustLine\", xdr.void()], [\"allowTrustTrustNotRequired\", xdr.void()], [\"allowTrustCantRevoke\", xdr.void()], [\"allowTrustSelfNotAllowed\", xdr.void()], [\"allowTrustLowReserve\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountMergeResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ACCOUNT_MERGE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ACCOUNT_MERGE_MALFORMED = -1,       // can't merge onto itself\n  //       ACCOUNT_MERGE_NO_ACCOUNT = -2,      // destination does not exist\n  //       ACCOUNT_MERGE_IMMUTABLE_SET = -3,   // source account has AUTH_IMMUTABLE set\n  //       ACCOUNT_MERGE_HAS_SUB_ENTRIES = -4, // account has trust lines/offers\n  //       ACCOUNT_MERGE_SEQNUM_TOO_FAR = -5,  // sequence number is over max allowed\n  //       ACCOUNT_MERGE_DEST_FULL = -6,       // can't add source balance to\n  //                                           // destination balance\n  //       ACCOUNT_MERGE_IS_SPONSOR = -7       // can't merge account that is a sponsor\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AccountMergeResultCode\", {\n    accountMergeSuccess: 0,\n    accountMergeMalformed: -1,\n    accountMergeNoAccount: -2,\n    accountMergeImmutableSet: -3,\n    accountMergeHasSubEntries: -4,\n    accountMergeSeqnumTooFar: -5,\n    accountMergeDestFull: -6,\n    accountMergeIsSponsor: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AccountMergeResult switch (AccountMergeResultCode code)\n  //   {\n  //   case ACCOUNT_MERGE_SUCCESS:\n  //       int64 sourceAccountBalance; // how much got transferred from source account\n  //   case ACCOUNT_MERGE_MALFORMED:\n  //   case ACCOUNT_MERGE_NO_ACCOUNT:\n  //   case ACCOUNT_MERGE_IMMUTABLE_SET:\n  //   case ACCOUNT_MERGE_HAS_SUB_ENTRIES:\n  //   case ACCOUNT_MERGE_SEQNUM_TOO_FAR:\n  //   case ACCOUNT_MERGE_DEST_FULL:\n  //   case ACCOUNT_MERGE_IS_SPONSOR:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AccountMergeResult\", {\n    switchOn: xdr.lookup(\"AccountMergeResultCode\"),\n    switchName: \"code\",\n    switches: [[\"accountMergeSuccess\", \"sourceAccountBalance\"], [\"accountMergeMalformed\", xdr.void()], [\"accountMergeNoAccount\", xdr.void()], [\"accountMergeImmutableSet\", xdr.void()], [\"accountMergeHasSubEntries\", xdr.void()], [\"accountMergeSeqnumTooFar\", xdr.void()], [\"accountMergeDestFull\", xdr.void()], [\"accountMergeIsSponsor\", xdr.void()]],\n    arms: {\n      sourceAccountBalance: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InflationResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INFLATION_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       INFLATION_NOT_TIME = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"InflationResultCode\", {\n    inflationSuccess: 0,\n    inflationNotTime: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InflationPayout // or use PaymentResultAtom to limit types?\n  //   {\n  //       AccountID destination;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InflationPayout\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union InflationResult switch (InflationResultCode code)\n  //   {\n  //   case INFLATION_SUCCESS:\n  //       InflationPayout payouts<>;\n  //   case INFLATION_NOT_TIME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InflationResult\", {\n    switchOn: xdr.lookup(\"InflationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"inflationSuccess\", \"payouts\"], [\"inflationNotTime\", xdr.void()]],\n    arms: {\n      payouts: xdr.varArray(xdr.lookup(\"InflationPayout\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageDataResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_DATA_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_DATA_NOT_SUPPORTED_YET =\n  //           -1, // The network hasn't moved to this protocol change yet\n  //       MANAGE_DATA_NAME_NOT_FOUND =\n  //           -2, // Trying to remove a Data Entry that isn't there\n  //       MANAGE_DATA_LOW_RESERVE = -3, // not enough funds to create a new Data Entry\n  //       MANAGE_DATA_INVALID_NAME = -4 // Name not a valid string\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageDataResultCode\", {\n    manageDataSuccess: 0,\n    manageDataNotSupportedYet: -1,\n    manageDataNameNotFound: -2,\n    manageDataLowReserve: -3,\n    manageDataInvalidName: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageDataResult switch (ManageDataResultCode code)\n  //   {\n  //   case MANAGE_DATA_SUCCESS:\n  //       void;\n  //   case MANAGE_DATA_NOT_SUPPORTED_YET:\n  //   case MANAGE_DATA_NAME_NOT_FOUND:\n  //   case MANAGE_DATA_LOW_RESERVE:\n  //   case MANAGE_DATA_INVALID_NAME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageDataResult\", {\n    switchOn: xdr.lookup(\"ManageDataResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageDataSuccess\", xdr.void()], [\"manageDataNotSupportedYet\", xdr.void()], [\"manageDataNameNotFound\", xdr.void()], [\"manageDataLowReserve\", xdr.void()], [\"manageDataInvalidName\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BumpSequenceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BUMP_SEQUENCE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       BUMP_SEQUENCE_BAD_SEQ = -1 // `bumpTo` is not within bounds\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"BumpSequenceResultCode\", {\n    bumpSequenceSuccess: 0,\n    bumpSequenceBadSeq: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BumpSequenceResult switch (BumpSequenceResultCode code)\n  //   {\n  //   case BUMP_SEQUENCE_SUCCESS:\n  //       void;\n  //   case BUMP_SEQUENCE_BAD_SEQ:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BumpSequenceResult\", {\n    switchOn: xdr.lookup(\"BumpSequenceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"bumpSequenceSuccess\", xdr.void()], [\"bumpSequenceBadSeq\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateClaimableBalanceResultCode\n  //   {\n  //       CREATE_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CREATE_CLAIMABLE_BALANCE_MALFORMED = -1,\n  //       CREATE_CLAIMABLE_BALANCE_LOW_RESERVE = -2,\n  //       CREATE_CLAIMABLE_BALANCE_NO_TRUST = -3,\n  //       CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -4,\n  //       CREATE_CLAIMABLE_BALANCE_UNDERFUNDED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"CreateClaimableBalanceResultCode\", {\n    createClaimableBalanceSuccess: 0,\n    createClaimableBalanceMalformed: -1,\n    createClaimableBalanceLowReserve: -2,\n    createClaimableBalanceNoTrust: -3,\n    createClaimableBalanceNotAuthorized: -4,\n    createClaimableBalanceUnderfunded: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateClaimableBalanceResult switch (\n  //       CreateClaimableBalanceResultCode code)\n  //   {\n  //   case CREATE_CLAIMABLE_BALANCE_SUCCESS:\n  //       ClaimableBalanceID balanceID;\n  //   case CREATE_CLAIMABLE_BALANCE_MALFORMED:\n  //   case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:\n  //   case CREATE_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //   case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"CreateClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createClaimableBalanceSuccess\", \"balanceId\"], [\"createClaimableBalanceMalformed\", xdr.void()], [\"createClaimableBalanceLowReserve\", xdr.void()], [\"createClaimableBalanceNoTrust\", xdr.void()], [\"createClaimableBalanceNotAuthorized\", xdr.void()], [\"createClaimableBalanceUnderfunded\", xdr.void()]],\n    arms: {\n      balanceId: xdr.lookup(\"ClaimableBalanceId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimClaimableBalanceResultCode\n  //   {\n  //       CLAIM_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM = -2,\n  //       CLAIM_CLAIMABLE_BALANCE_LINE_FULL = -3,\n  //       CLAIM_CLAIMABLE_BALANCE_NO_TRUST = -4,\n  //       CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimClaimableBalanceResultCode\", {\n    claimClaimableBalanceSuccess: 0,\n    claimClaimableBalanceDoesNotExist: -1,\n    claimClaimableBalanceCannotClaim: -2,\n    claimClaimableBalanceLineFull: -3,\n    claimClaimableBalanceNoTrust: -4,\n    claimClaimableBalanceNotAuthorized: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)\n  //   {\n  //   case CLAIM_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:\n  //   case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:\n  //   case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClaimClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"claimClaimableBalanceSuccess\", xdr.void()], [\"claimClaimableBalanceDoesNotExist\", xdr.void()], [\"claimClaimableBalanceCannotClaim\", xdr.void()], [\"claimClaimableBalanceLineFull\", xdr.void()], [\"claimClaimableBalanceNoTrust\", xdr.void()], [\"claimClaimableBalanceNotAuthorized\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BeginSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED = -1,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED = -2,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"BeginSponsoringFutureReservesResultCode\", {\n    beginSponsoringFutureReservesSuccess: 0,\n    beginSponsoringFutureReservesMalformed: -1,\n    beginSponsoringFutureReservesAlreadySponsored: -2,\n    beginSponsoringFutureReservesRecursive: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BeginSponsoringFutureReservesResult switch (\n  //       BeginSponsoringFutureReservesResultCode code)\n  //   {\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BeginSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"BeginSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"beginSponsoringFutureReservesSuccess\", xdr.void()], [\"beginSponsoringFutureReservesMalformed\", xdr.void()], [\"beginSponsoringFutureReservesAlreadySponsored\", xdr.void()], [\"beginSponsoringFutureReservesRecursive\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EndSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"EndSponsoringFutureReservesResultCode\", {\n    endSponsoringFutureReservesSuccess: 0,\n    endSponsoringFutureReservesNotSponsored: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union EndSponsoringFutureReservesResult switch (\n  //       EndSponsoringFutureReservesResultCode code)\n  //   {\n  //   case END_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"EndSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"EndSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"endSponsoringFutureReservesSuccess\", xdr.void()], [\"endSponsoringFutureReservesNotSponsored\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       REVOKE_SPONSORSHIP_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       REVOKE_SPONSORSHIP_DOES_NOT_EXIST = -1,\n  //       REVOKE_SPONSORSHIP_NOT_SPONSOR = -2,\n  //       REVOKE_SPONSORSHIP_LOW_RESERVE = -3,\n  //       REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE = -4,\n  //       REVOKE_SPONSORSHIP_MALFORMED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"RevokeSponsorshipResultCode\", {\n    revokeSponsorshipSuccess: 0,\n    revokeSponsorshipDoesNotExist: -1,\n    revokeSponsorshipNotSponsor: -2,\n    revokeSponsorshipLowReserve: -3,\n    revokeSponsorshipOnlyTransferable: -4,\n    revokeSponsorshipMalformed: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)\n  //   {\n  //   case REVOKE_SPONSORSHIP_SUCCESS:\n  //       void;\n  //   case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:\n  //   case REVOKE_SPONSORSHIP_NOT_SPONSOR:\n  //   case REVOKE_SPONSORSHIP_LOW_RESERVE:\n  //   case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:\n  //   case REVOKE_SPONSORSHIP_MALFORMED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipResult\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipResultCode\"),\n    switchName: \"code\",\n    switches: [[\"revokeSponsorshipSuccess\", xdr.void()], [\"revokeSponsorshipDoesNotExist\", xdr.void()], [\"revokeSponsorshipNotSponsor\", xdr.void()], [\"revokeSponsorshipLowReserve\", xdr.void()], [\"revokeSponsorshipOnlyTransferable\", xdr.void()], [\"revokeSponsorshipMalformed\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_MALFORMED = -1,\n  //       CLAWBACK_NOT_CLAWBACK_ENABLED = -2,\n  //       CLAWBACK_NO_TRUST = -3,\n  //       CLAWBACK_UNDERFUNDED = -4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClawbackResultCode\", {\n    clawbackSuccess: 0,\n    clawbackMalformed: -1,\n    clawbackNotClawbackEnabled: -2,\n    clawbackNoTrust: -3,\n    clawbackUnderfunded: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackResult switch (ClawbackResultCode code)\n  //   {\n  //   case CLAWBACK_SUCCESS:\n  //       void;\n  //   case CLAWBACK_MALFORMED:\n  //   case CLAWBACK_NOT_CLAWBACK_ENABLED:\n  //   case CLAWBACK_NO_TRUST:\n  //   case CLAWBACK_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackResult\", {\n    switchOn: xdr.lookup(\"ClawbackResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackSuccess\", xdr.void()], [\"clawbackMalformed\", xdr.void()], [\"clawbackNotClawbackEnabled\", xdr.void()], [\"clawbackNoTrust\", xdr.void()], [\"clawbackUnderfunded\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackClaimableBalanceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER = -2,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClawbackClaimableBalanceResultCode\", {\n    clawbackClaimableBalanceSuccess: 0,\n    clawbackClaimableBalanceDoesNotExist: -1,\n    clawbackClaimableBalanceNotIssuer: -2,\n    clawbackClaimableBalanceNotClawbackEnabled: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackClaimableBalanceResult switch (\n  //       ClawbackClaimableBalanceResultCode code)\n  //   {\n  //   case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClawbackClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackClaimableBalanceSuccess\", xdr.void()], [\"clawbackClaimableBalanceDoesNotExist\", xdr.void()], [\"clawbackClaimableBalanceNotIssuer\", xdr.void()], [\"clawbackClaimableBalanceNotClawbackEnabled\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetTrustLineFlagsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_TRUST_LINE_FLAGS_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       SET_TRUST_LINE_FLAGS_MALFORMED = -1,\n  //       SET_TRUST_LINE_FLAGS_NO_TRUST_LINE = -2,\n  //       SET_TRUST_LINE_FLAGS_CANT_REVOKE = -3,\n  //       SET_TRUST_LINE_FLAGS_INVALID_STATE = -4,\n  //       SET_TRUST_LINE_FLAGS_LOW_RESERVE = -5 // claimable balances can't be created\n  //                                             // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SetTrustLineFlagsResultCode\", {\n    setTrustLineFlagsSuccess: 0,\n    setTrustLineFlagsMalformed: -1,\n    setTrustLineFlagsNoTrustLine: -2,\n    setTrustLineFlagsCantRevoke: -3,\n    setTrustLineFlagsInvalidState: -4,\n    setTrustLineFlagsLowReserve: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code)\n  //   {\n  //   case SET_TRUST_LINE_FLAGS_SUCCESS:\n  //       void;\n  //   case SET_TRUST_LINE_FLAGS_MALFORMED:\n  //   case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE:\n  //   case SET_TRUST_LINE_FLAGS_CANT_REVOKE:\n  //   case SET_TRUST_LINE_FLAGS_INVALID_STATE:\n  //   case SET_TRUST_LINE_FLAGS_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetTrustLineFlagsResult\", {\n    switchOn: xdr.lookup(\"SetTrustLineFlagsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setTrustLineFlagsSuccess\", xdr.void()], [\"setTrustLineFlagsMalformed\", xdr.void()], [\"setTrustLineFlagsNoTrustLine\", xdr.void()], [\"setTrustLineFlagsCantRevoke\", xdr.void()], [\"setTrustLineFlagsInvalidState\", xdr.void()], [\"setTrustLineFlagsLowReserve\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolDepositResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_MALFORMED = -1,      // bad input\n  //       LIQUIDITY_POOL_DEPOSIT_NO_TRUST = -2,       // no trust line for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED = -3, // not authorized for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED = -4,    // not enough balance for one of\n  //                                                   // the assets\n  //       LIQUIDITY_POOL_DEPOSIT_LINE_FULL = -5,      // pool share trust line doesn't\n  //                                                   // have sufficient limit\n  //       LIQUIDITY_POOL_DEPOSIT_BAD_PRICE = -6,      // deposit price outside bounds\n  //       LIQUIDITY_POOL_DEPOSIT_POOL_FULL = -7       // pool reserves are full\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LiquidityPoolDepositResultCode\", {\n    liquidityPoolDepositSuccess: 0,\n    liquidityPoolDepositMalformed: -1,\n    liquidityPoolDepositNoTrust: -2,\n    liquidityPoolDepositNotAuthorized: -3,\n    liquidityPoolDepositUnderfunded: -4,\n    liquidityPoolDepositLineFull: -5,\n    liquidityPoolDepositBadPrice: -6,\n    liquidityPoolDepositPoolFull: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_DEPOSIT_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_DEPOSIT_MALFORMED:\n  //   case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:\n  //   case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:\n  //   case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:\n  //   case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:\n  //   case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolDepositResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolDepositResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolDepositSuccess\", xdr.void()], [\"liquidityPoolDepositMalformed\", xdr.void()], [\"liquidityPoolDepositNoTrust\", xdr.void()], [\"liquidityPoolDepositNotAuthorized\", xdr.void()], [\"liquidityPoolDepositUnderfunded\", xdr.void()], [\"liquidityPoolDepositLineFull\", xdr.void()], [\"liquidityPoolDepositBadPrice\", xdr.void()], [\"liquidityPoolDepositPoolFull\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolWithdrawResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input\n  //       LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the\n  //                                                  // assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the\n  //                                                  // pool share\n  //       LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one\n  //                                                  // of the assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LiquidityPoolWithdrawResultCode\", {\n    liquidityPoolWithdrawSuccess: 0,\n    liquidityPoolWithdrawMalformed: -1,\n    liquidityPoolWithdrawNoTrust: -2,\n    liquidityPoolWithdrawUnderfunded: -3,\n    liquidityPoolWithdrawLineFull: -4,\n    liquidityPoolWithdrawUnderMinimum: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_WITHDRAW_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_WITHDRAW_MALFORMED:\n  //   case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolWithdrawResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolWithdrawResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolWithdrawSuccess\", xdr.void()], [\"liquidityPoolWithdrawMalformed\", xdr.void()], [\"liquidityPoolWithdrawNoTrust\", xdr.void()], [\"liquidityPoolWithdrawUnderfunded\", xdr.void()], [\"liquidityPoolWithdrawLineFull\", xdr.void()], [\"liquidityPoolWithdrawUnderMinimum\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationResultCode\n  //   {\n  //       opINNER = 0, // inner object result is valid\n  //   \n  //       opBAD_AUTH = -1,            // too few valid signatures / wrong network\n  //       opNO_ACCOUNT = -2,          // source account was not found\n  //       opNOT_SUPPORTED = -3,       // operation not supported at this time\n  //       opTOO_MANY_SUBENTRIES = -4, // max number of subentries already reached\n  //       opEXCEEDED_WORK_LIMIT = -5, // operation did too much work\n  //       opTOO_MANY_SPONSORING = -6  // account is sponsoring too many entries\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"OperationResultCode\", {\n    opInner: 0,\n    opBadAuth: -1,\n    opNoAccount: -2,\n    opNotSupported: -3,\n    opTooManySubentries: -4,\n    opExceededWorkLimit: -5,\n    opTooManySponsoring: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResultTr\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountResult\"], [\"payment\", \"paymentResult\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveResult\"], [\"manageSellOffer\", \"manageSellOfferResult\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferResult\"], [\"setOptions\", \"setOptionsResult\"], [\"changeTrust\", \"changeTrustResult\"], [\"allowTrust\", \"allowTrustResult\"], [\"accountMerge\", \"accountMergeResult\"], [\"inflation\", \"inflationResult\"], [\"manageData\", \"manageDataResult\"], [\"bumpSequence\", \"bumpSeqResult\"], [\"manageBuyOffer\", \"manageBuyOfferResult\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendResult\"], [\"createClaimableBalance\", \"createClaimableBalanceResult\"], [\"claimClaimableBalance\", \"claimClaimableBalanceResult\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesResult\"], [\"endSponsoringFutureReserves\", \"endSponsoringFutureReservesResult\"], [\"revokeSponsorship\", \"revokeSponsorshipResult\"], [\"clawback\", \"clawbackResult\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceResult\"], [\"setTrustLineFlags\", \"setTrustLineFlagsResult\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositResult\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawResult\"]],\n    arms: {\n      createAccountResult: xdr.lookup(\"CreateAccountResult\"),\n      paymentResult: xdr.lookup(\"PaymentResult\"),\n      pathPaymentStrictReceiveResult: xdr.lookup(\"PathPaymentStrictReceiveResult\"),\n      manageSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      createPassiveSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      setOptionsResult: xdr.lookup(\"SetOptionsResult\"),\n      changeTrustResult: xdr.lookup(\"ChangeTrustResult\"),\n      allowTrustResult: xdr.lookup(\"AllowTrustResult\"),\n      accountMergeResult: xdr.lookup(\"AccountMergeResult\"),\n      inflationResult: xdr.lookup(\"InflationResult\"),\n      manageDataResult: xdr.lookup(\"ManageDataResult\"),\n      bumpSeqResult: xdr.lookup(\"BumpSequenceResult\"),\n      manageBuyOfferResult: xdr.lookup(\"ManageBuyOfferResult\"),\n      pathPaymentStrictSendResult: xdr.lookup(\"PathPaymentStrictSendResult\"),\n      createClaimableBalanceResult: xdr.lookup(\"CreateClaimableBalanceResult\"),\n      claimClaimableBalanceResult: xdr.lookup(\"ClaimClaimableBalanceResult\"),\n      beginSponsoringFutureReservesResult: xdr.lookup(\"BeginSponsoringFutureReservesResult\"),\n      endSponsoringFutureReservesResult: xdr.lookup(\"EndSponsoringFutureReservesResult\"),\n      revokeSponsorshipResult: xdr.lookup(\"RevokeSponsorshipResult\"),\n      clawbackResult: xdr.lookup(\"ClawbackResult\"),\n      clawbackClaimableBalanceResult: xdr.lookup(\"ClawbackClaimableBalanceResult\"),\n      setTrustLineFlagsResult: xdr.lookup(\"SetTrustLineFlagsResult\"),\n      liquidityPoolDepositResult: xdr.lookup(\"LiquidityPoolDepositResult\"),\n      liquidityPoolWithdrawResult: xdr.lookup(\"LiquidityPoolWithdrawResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union OperationResult switch (OperationResultCode code)\n  //   {\n  //   case opINNER:\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       }\n  //       tr;\n  //   case opBAD_AUTH:\n  //   case opNO_ACCOUNT:\n  //   case opNOT_SUPPORTED:\n  //   case opTOO_MANY_SUBENTRIES:\n  //   case opEXCEEDED_WORK_LIMIT:\n  //   case opTOO_MANY_SPONSORING:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResult\", {\n    switchOn: xdr.lookup(\"OperationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"opInner\", \"tr\"], [\"opBadAuth\", xdr.void()], [\"opNoAccount\", xdr.void()], [\"opNotSupported\", xdr.void()], [\"opTooManySubentries\", xdr.void()], [\"opExceededWorkLimit\", xdr.void()], [\"opTooManySponsoring\", xdr.void()]],\n    arms: {\n      tr: xdr.lookup(\"OperationResultTr\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum TransactionResultCode\n  //   {\n  //       txFEE_BUMP_INNER_SUCCESS = 1, // fee bump inner transaction succeeded\n  //       txSUCCESS = 0,                // all operations succeeded\n  //   \n  //       txFAILED = -1, // one of the operations failed (none were applied)\n  //   \n  //       txTOO_EARLY = -2,         // ledger closeTime before minTime\n  //       txTOO_LATE = -3,          // ledger closeTime after maxTime\n  //       txMISSING_OPERATION = -4, // no operation was specified\n  //       txBAD_SEQ = -5,           // sequence number does not match source account\n  //   \n  //       txBAD_AUTH = -6,             // too few valid signatures / wrong network\n  //       txINSUFFICIENT_BALANCE = -7, // fee would bring account below reserve\n  //       txNO_ACCOUNT = -8,           // source account not found\n  //       txINSUFFICIENT_FEE = -9,     // fee is too small\n  //       txBAD_AUTH_EXTRA = -10,      // unused signatures attached to transaction\n  //       txINTERNAL_ERROR = -11,      // an unknown error occurred\n  //   \n  //       txNOT_SUPPORTED = -12,         // transaction type not supported\n  //       txFEE_BUMP_INNER_FAILED = -13, // fee bump inner transaction failed\n  //       txBAD_SPONSORSHIP = -14,       // sponsorship not confirmed\n  //       txBAD_MIN_SEQ_AGE_OR_GAP =\n  //           -15, // minSeqAge or minSeqLedgerGap conditions not met\n  //       txMALFORMED = -16 // precondition is invalid\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"TransactionResultCode\", {\n    txFeeBumpInnerSuccess: 1,\n    txSuccess: 0,\n    txFailed: -1,\n    txTooEarly: -2,\n    txTooLate: -3,\n    txMissingOperation: -4,\n    txBadSeq: -5,\n    txBadAuth: -6,\n    txInsufficientBalance: -7,\n    txNoAccount: -8,\n    txInsufficientFee: -9,\n    txBadAuthExtra: -10,\n    txInternalError: -11,\n    txNotSupported: -12,\n    txFeeBumpInnerFailed: -13,\n    txBadSponsorship: -14,\n    txBadMinSeqAgeOrGap: -15,\n    txMalformed: -16\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr.void()], [\"txTooLate\", xdr.void()], [\"txMissingOperation\", xdr.void()], [\"txBadSeq\", xdr.void()], [\"txBadAuth\", xdr.void()], [\"txInsufficientBalance\", xdr.void()], [\"txNoAccount\", xdr.void()], [\"txInsufficientFee\", xdr.void()], [\"txBadAuthExtra\", xdr.void()], [\"txInternalError\", xdr.void()], [\"txNotSupported\", xdr.void()], [\"txBadSponsorship\", xdr.void()], [\"txBadMinSeqAgeOrGap\", xdr.void()], [\"txMalformed\", xdr.void()]],\n    arms: {\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResult\n  //   {\n  //       // Always 0. Here for binary compatibility.\n  //       int64 feeCharged;\n  //   \n  //       union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //       result;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"InnerTransactionResultResult\")], [\"ext\", xdr.lookup(\"InnerTransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResultPair\n  //   {\n  //       Hash transactionHash;          // hash of the inner transaction\n  //       InnerTransactionResult result; // result for the inner transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"InnerTransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txFeeBumpInnerSuccess\", \"innerResultPair\"], [\"txFeeBumpInnerFailed\", \"innerResultPair\"], [\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr.void()], [\"txTooLate\", xdr.void()], [\"txMissingOperation\", xdr.void()], [\"txBadSeq\", xdr.void()], [\"txBadAuth\", xdr.void()], [\"txInsufficientBalance\", xdr.void()], [\"txNoAccount\", xdr.void()], [\"txInsufficientFee\", xdr.void()], [\"txBadAuthExtra\", xdr.void()], [\"txInternalError\", xdr.void()], [\"txNotSupported\", xdr.void()], [\"txBadSponsorship\", xdr.void()], [\"txBadMinSeqAgeOrGap\", xdr.void()], [\"txMalformed\", xdr.void()]],\n    arms: {\n      innerResultPair: xdr.lookup(\"InnerTransactionResultPair\"),\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResult\n  //   {\n  //       int64 feeCharged; // actual fee charged for the transaction\n  //   \n  //       union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //       result;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"TransactionResultResult\")], [\"ext\", xdr.lookup(\"TransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Hash[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Hash\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque uint256[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint256\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned int uint32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint32\", xdr.uint());\n\n  // === xdr source ============================================================\n  //\n  //   typedef int int32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int32\", xdr.int());\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned hyper uint64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint64\", xdr.uhyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef hyper int64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int64\", xdr.hyper());\n\n  // === xdr source ============================================================\n  //\n  //   union ExtensionPoint switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtensionPoint\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CryptoKeyType\n  //   {\n  //       KEY_TYPE_ED25519 = 0,\n  //       KEY_TYPE_PRE_AUTH_TX = 1,\n  //       KEY_TYPE_HASH_X = 2,\n  //       KEY_TYPE_ED25519_SIGNED_PAYLOAD = 3,\n  //       // MUXED enum values for supported type are derived from the enum values\n  //       // above by ORing them with 0x100\n  //       KEY_TYPE_MUXED_ED25519 = 0x100\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"CryptoKeyType\", {\n    keyTypeEd25519: 0,\n    keyTypePreAuthTx: 1,\n    keyTypeHashX: 2,\n    keyTypeEd25519SignedPayload: 3,\n    keyTypeMuxedEd25519: 256\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PublicKeyType\n  //   {\n  //       PUBLIC_KEY_TYPE_ED25519 = KEY_TYPE_ED25519\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PublicKeyType\", {\n    publicKeyTypeEd25519: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SignerKeyType\n  //   {\n  //       SIGNER_KEY_TYPE_ED25519 = KEY_TYPE_ED25519,\n  //       SIGNER_KEY_TYPE_PRE_AUTH_TX = KEY_TYPE_PRE_AUTH_TX,\n  //       SIGNER_KEY_TYPE_HASH_X = KEY_TYPE_HASH_X,\n  //       SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD = KEY_TYPE_ED25519_SIGNED_PAYLOAD\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SignerKeyType\", {\n    signerKeyTypeEd25519: 0,\n    signerKeyTypePreAuthTx: 1,\n    signerKeyTypeHashX: 2,\n    signerKeyTypeEd25519SignedPayload: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PublicKey switch (PublicKeyType type)\n  //   {\n  //   case PUBLIC_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PublicKey\", {\n    switchOn: xdr.lookup(\"PublicKeyType\"),\n    switchName: \"type\",\n    switches: [[\"publicKeyTypeEd25519\", \"ed25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"SignerKeyEd25519SignedPayload\", [[\"ed25519\", xdr.lookup(\"Uint256\")], [\"payload\", xdr.varOpaque(64)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SignerKey switch (SignerKeyType type)\n  //   {\n  //   case SIGNER_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case SIGNER_KEY_TYPE_PRE_AUTH_TX:\n  //       /* SHA-256 Hash of TransactionSignaturePayload structure */\n  //       uint256 preAuthTx;\n  //   case SIGNER_KEY_TYPE_HASH_X:\n  //       /* Hash of random 256 bit preimage X */\n  //       uint256 hashX;\n  //   case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:\n  //       struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       } ed25519SignedPayload;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SignerKey\", {\n    switchOn: xdr.lookup(\"SignerKeyType\"),\n    switchName: \"type\",\n    switches: [[\"signerKeyTypeEd25519\", \"ed25519\"], [\"signerKeyTypePreAuthTx\", \"preAuthTx\"], [\"signerKeyTypeHashX\", \"hashX\"], [\"signerKeyTypeEd25519SignedPayload\", \"ed25519SignedPayload\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      preAuthTx: xdr.lookup(\"Uint256\"),\n      hashX: xdr.lookup(\"Uint256\"),\n      ed25519SignedPayload: xdr.lookup(\"SignerKeyEd25519SignedPayload\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Signature<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Signature\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SignatureHint[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"SignatureHint\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey NodeID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"NodeId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Secret\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Secret\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Public\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Public\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Key\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Key\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Mac\n  //   {\n  //       opaque mac[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Mac\", [[\"mac\", xdr.opaque(32)]]);\n}); // Automatically generated by xdrgen\n// DO NOT EDIT or your changes may be overwritten\n\n/* jshint maxstatements:2147483647  */\n/* jshint esnext:true  */\n\nexports.default = types;","map":{"version":3,"names":["Object","defineProperty","exports","value","_jsXdr","require","XDR","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","types","config","xdr","typedef","varOpaque","struct","lookup","enum","scpStPrepare","scpStConfirm","scpStExternalize","scpStNominate","varArray","option","union","switchOn","switchName","switches","arms","prepare","confirm","externalize","nominate","opaque","string","assetTypeNative","assetTypeCreditAlphanum4","assetTypeCreditAlphanum12","assetTypePoolShare","assetCode4","assetCode12","void","alphaNum4","alphaNum12","thresholdMasterWeight","thresholdLow","thresholdMed","thresholdHigh","account","trustline","offer","data","claimableBalance","liquidityPool","authRequiredFlag","authRevocableFlag","authImmutableFlag","authClawbackEnabledFlag","const","int","v3","v2","v1","authorizedFlag","authorizedToMaintainLiabilitiesFlag","trustlineClawbackEnabledFlag","liquidityPoolConstantProduct","liquidityPoolId","passiveFlag","claimPredicateUnconditional","claimPredicateAnd","claimPredicateOr","claimPredicateNot","claimPredicateBeforeAbsoluteTime","claimPredicateBeforeRelativeTime","andPredicates","orPredicates","notPredicate","absBefore","relBefore","claimantTypeV0","v0","claimableBalanceIdTypeV0","claimableBalanceClawbackEnabledFlag","constantProduct","trustLine","envelopeTypeTxV0","envelopeTypeScp","envelopeTypeTx","envelopeTypeAuth","envelopeTypeScpvalue","envelopeTypeTxFeeBump","envelopeTypeOpId","envelopeTypePoolRevokeOpId","stellarValueBasic","stellarValueSigned","lcValueSignature","disableLiquidityPoolTradingFlag","disableLiquidityPoolDepositFlag","disableLiquidityPoolWithdrawalFlag","array","ledgerUpgradeVersion","ledgerUpgradeBaseFee","ledgerUpgradeMaxTxSetSize","ledgerUpgradeBaseReserve","ledgerUpgradeFlags","newLedgerVersion","newBaseFee","newMaxTxSetSize","newBaseReserve","newFlags","metaentry","liveentry","deadentry","initentry","liveEntry","deadEntry","metaEntry","txsetCompTxsMaybeDiscountedFee","txsMaybeDiscountedFee","v0Components","v1TxSet","generalizedTxSet","ledgerEntryCreated","ledgerEntryUpdated","ledgerEntryRemoved","ledgerEntryState","created","updated","removed","state","operations","errMisc","errData","errConf","errAuth","errLoad","iPv4","iPv6","ipv4","ipv6","errorMsg","auth","dontHave","getPeers","peers","getTxSet","txSet","transaction","getScpQuorumset","scpQuorumset","scpMessage","getScpState","hello","surveyRequest","surveyResponse","sendMore","surveyTopology","topologyResponseBody","error","txSetHash","signedSurveyRequestMessage","signedSurveyResponseMessage","qSetHash","qSet","envelope","getScpLedgerSeq","sendMoreMessage","ed25519","med25519","createAccount","payment","pathPaymentStrictReceive","manageSellOffer","createPassiveSellOffer","setOptions","changeTrust","allowTrust","accountMerge","inflation","manageData","bumpSequence","manageBuyOffer","pathPaymentStrictSend","createClaimableBalance","claimClaimableBalance","beginSponsoringFutureReserves","endSponsoringFutureReserves","revokeSponsorship","clawback","clawbackClaimableBalance","setTrustLineFlags","liquidityPoolDeposit","liquidityPoolWithdraw","revokeSponsorshipLedgerEntry","revokeSponsorshipSigner","ledgerKey","signer","createAccountOp","paymentOp","pathPaymentStrictReceiveOp","manageSellOfferOp","createPassiveSellOfferOp","setOptionsOp","changeTrustOp","allowTrustOp","destination","manageDataOp","bumpSequenceOp","manageBuyOfferOp","pathPaymentStrictSendOp","createClaimableBalanceOp","claimClaimableBalanceOp","beginSponsoringFutureReservesOp","revokeSponsorshipOp","clawbackOp","clawbackClaimableBalanceOp","setTrustLineFlagsOp","liquidityPoolDepositOp","liquidityPoolWithdrawOp","operationId","revokeId","memoNone","memoText","memoId","memoHash","memoReturn","text","id","hash","retHash","precondNone","precondTime","precondV2","timeBounds","feeBump","tx","claimAtomTypeV0","claimAtomTypeOrderBook","claimAtomTypeLiquidityPool","orderBook","createAccountSuccess","createAccountMalformed","createAccountUnderfunded","createAccountLowReserve","createAccountAlreadyExist","paymentSuccess","paymentMalformed","paymentUnderfunded","paymentSrcNoTrust","paymentSrcNotAuthorized","paymentNoDestination","paymentNoTrust","paymentNotAuthorized","paymentLineFull","paymentNoIssuer","pathPaymentStrictReceiveSuccess","pathPaymentStrictReceiveMalformed","pathPaymentStrictReceiveUnderfunded","pathPaymentStrictReceiveSrcNoTrust","pathPaymentStrictReceiveSrcNotAuthorized","pathPaymentStrictReceiveNoDestination","pathPaymentStrictReceiveNoTrust","pathPaymentStrictReceiveNotAuthorized","pathPaymentStrictReceiveLineFull","pathPaymentStrictReceiveNoIssuer","pathPaymentStrictReceiveTooFewOffers","pathPaymentStrictReceiveOfferCrossSelf","pathPaymentStrictReceiveOverSendmax","success","noIssuer","pathPaymentStrictSendSuccess","pathPaymentStrictSendMalformed","pathPaymentStrictSendUnderfunded","pathPaymentStrictSendSrcNoTrust","pathPaymentStrictSendSrcNotAuthorized","pathPaymentStrictSendNoDestination","pathPaymentStrictSendNoTrust","pathPaymentStrictSendNotAuthorized","pathPaymentStrictSendLineFull","pathPaymentStrictSendNoIssuer","pathPaymentStrictSendTooFewOffers","pathPaymentStrictSendOfferCrossSelf","pathPaymentStrictSendUnderDestmin","manageSellOfferSuccess","manageSellOfferMalformed","manageSellOfferSellNoTrust","manageSellOfferBuyNoTrust","manageSellOfferSellNotAuthorized","manageSellOfferBuyNotAuthorized","manageSellOfferLineFull","manageSellOfferUnderfunded","manageSellOfferCrossSelf","manageSellOfferSellNoIssuer","manageSellOfferBuyNoIssuer","manageSellOfferNotFound","manageSellOfferLowReserve","manageOfferCreated","manageOfferUpdated","manageOfferDeleted","manageBuyOfferSuccess","manageBuyOfferMalformed","manageBuyOfferSellNoTrust","manageBuyOfferBuyNoTrust","manageBuyOfferSellNotAuthorized","manageBuyOfferBuyNotAuthorized","manageBuyOfferLineFull","manageBuyOfferUnderfunded","manageBuyOfferCrossSelf","manageBuyOfferSellNoIssuer","manageBuyOfferBuyNoIssuer","manageBuyOfferNotFound","manageBuyOfferLowReserve","setOptionsSuccess","setOptionsLowReserve","setOptionsTooManySigners","setOptionsBadFlags","setOptionsInvalidInflation","setOptionsCantChange","setOptionsUnknownFlag","setOptionsThresholdOutOfRange","setOptionsBadSigner","setOptionsInvalidHomeDomain","setOptionsAuthRevocableRequired","changeTrustSuccess","changeTrustMalformed","changeTrustNoIssuer","changeTrustInvalidLimit","changeTrustLowReserve","changeTrustSelfNotAllowed","changeTrustTrustLineMissing","changeTrustCannotDelete","changeTrustNotAuthMaintainLiabilities","allowTrustSuccess","allowTrustMalformed","allowTrustNoTrustLine","allowTrustTrustNotRequired","allowTrustCantRevoke","allowTrustSelfNotAllowed","allowTrustLowReserve","accountMergeSuccess","accountMergeMalformed","accountMergeNoAccount","accountMergeImmutableSet","accountMergeHasSubEntries","accountMergeSeqnumTooFar","accountMergeDestFull","accountMergeIsSponsor","sourceAccountBalance","inflationSuccess","inflationNotTime","payouts","manageDataSuccess","manageDataNotSupportedYet","manageDataNameNotFound","manageDataLowReserve","manageDataInvalidName","bumpSequenceSuccess","bumpSequenceBadSeq","createClaimableBalanceSuccess","createClaimableBalanceMalformed","createClaimableBalanceLowReserve","createClaimableBalanceNoTrust","createClaimableBalanceNotAuthorized","createClaimableBalanceUnderfunded","balanceId","claimClaimableBalanceSuccess","claimClaimableBalanceDoesNotExist","claimClaimableBalanceCannotClaim","claimClaimableBalanceLineFull","claimClaimableBalanceNoTrust","claimClaimableBalanceNotAuthorized","beginSponsoringFutureReservesSuccess","beginSponsoringFutureReservesMalformed","beginSponsoringFutureReservesAlreadySponsored","beginSponsoringFutureReservesRecursive","endSponsoringFutureReservesSuccess","endSponsoringFutureReservesNotSponsored","revokeSponsorshipSuccess","revokeSponsorshipDoesNotExist","revokeSponsorshipNotSponsor","revokeSponsorshipLowReserve","revokeSponsorshipOnlyTransferable","revokeSponsorshipMalformed","clawbackSuccess","clawbackMalformed","clawbackNotClawbackEnabled","clawbackNoTrust","clawbackUnderfunded","clawbackClaimableBalanceSuccess","clawbackClaimableBalanceDoesNotExist","clawbackClaimableBalanceNotIssuer","clawbackClaimableBalanceNotClawbackEnabled","setTrustLineFlagsSuccess","setTrustLineFlagsMalformed","setTrustLineFlagsNoTrustLine","setTrustLineFlagsCantRevoke","setTrustLineFlagsInvalidState","setTrustLineFlagsLowReserve","liquidityPoolDepositSuccess","liquidityPoolDepositMalformed","liquidityPoolDepositNoTrust","liquidityPoolDepositNotAuthorized","liquidityPoolDepositUnderfunded","liquidityPoolDepositLineFull","liquidityPoolDepositBadPrice","liquidityPoolDepositPoolFull","liquidityPoolWithdrawSuccess","liquidityPoolWithdrawMalformed","liquidityPoolWithdrawNoTrust","liquidityPoolWithdrawUnderfunded","liquidityPoolWithdrawLineFull","liquidityPoolWithdrawUnderMinimum","opInner","opBadAuth","opNoAccount","opNotSupported","opTooManySubentries","opExceededWorkLimit","opTooManySponsoring","createAccountResult","paymentResult","pathPaymentStrictReceiveResult","manageSellOfferResult","createPassiveSellOfferResult","setOptionsResult","changeTrustResult","allowTrustResult","accountMergeResult","inflationResult","manageDataResult","bumpSeqResult","manageBuyOfferResult","pathPaymentStrictSendResult","createClaimableBalanceResult","claimClaimableBalanceResult","beginSponsoringFutureReservesResult","endSponsoringFutureReservesResult","revokeSponsorshipResult","clawbackResult","clawbackClaimableBalanceResult","setTrustLineFlagsResult","liquidityPoolDepositResult","liquidityPoolWithdrawResult","tr","txFeeBumpInnerSuccess","txSuccess","txFailed","txTooEarly","txTooLate","txMissingOperation","txBadSeq","txBadAuth","txInsufficientBalance","txNoAccount","txInsufficientFee","txBadAuthExtra","txInternalError","txNotSupported","txFeeBumpInnerFailed","txBadSponsorship","txBadMinSeqAgeOrGap","txMalformed","results","innerResultPair","uint","uhyper","hyper","keyTypeEd25519","keyTypePreAuthTx","keyTypeHashX","keyTypeEd25519SignedPayload","keyTypeMuxedEd25519","publicKeyTypeEd25519","signerKeyTypeEd25519","signerKeyTypePreAuthTx","signerKeyTypeHashX","signerKeyTypeEd25519SignedPayload","preAuthTx","hashX","ed25519SignedPayload"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/stellar-base/lib/generated/curr_generated.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _jsXdr = require(\"js-xdr\");\n\nvar XDR = _interopRequireWildcard(_jsXdr);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar types = XDR.config(function (xdr) {\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Value<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Value\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPBallot\n  //   {\n  //       uint32 counter; // n\n  //       Value value;    // x\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpBallot\", [[\"counter\", xdr.lookup(\"Uint32\")], [\"value\", xdr.lookup(\"Value\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCPStatementType\n  //   {\n  //       SCP_ST_PREPARE = 0,\n  //       SCP_ST_CONFIRM = 1,\n  //       SCP_ST_EXTERNALIZE = 2,\n  //       SCP_ST_NOMINATE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ScpStatementType\", {\n    scpStPrepare: 0,\n    scpStConfirm: 1,\n    scpStExternalize: 2,\n    scpStNominate: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPNomination\n  //   {\n  //       Hash quorumSetHash; // D\n  //       Value votes<>;      // X\n  //       Value accepted<>;   // Y\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpNomination\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"votes\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)], [\"accepted\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementPrepare\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"ballot\", xdr.lookup(\"ScpBallot\")], [\"prepared\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"preparedPrime\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"nC\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementConfirm\", [[\"ballot\", xdr.lookup(\"ScpBallot\")], [\"nPrepared\", xdr.lookup(\"Uint32\")], [\"nCommit\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"quorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementExternalize\", [[\"commit\", xdr.lookup(\"ScpBallot\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"commitQuorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ScpStatementPledges\", {\n    switchOn: xdr.lookup(\"ScpStatementType\"),\n    switchName: \"type\",\n    switches: [[\"scpStPrepare\", \"prepare\"], [\"scpStConfirm\", \"confirm\"], [\"scpStExternalize\", \"externalize\"], [\"scpStNominate\", \"nominate\"]],\n    arms: {\n      prepare: xdr.lookup(\"ScpStatementPrepare\"),\n      confirm: xdr.lookup(\"ScpStatementConfirm\"),\n      externalize: xdr.lookup(\"ScpStatementExternalize\"),\n      nominate: xdr.lookup(\"ScpNomination\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPStatement\n  //   {\n  //       NodeID nodeID;    // v\n  //       uint64 slotIndex; // i\n  //   \n  //       union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //       pledges;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatement\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"slotIndex\", xdr.lookup(\"Uint64\")], [\"pledges\", xdr.lookup(\"ScpStatementPledges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPEnvelope\n  //   {\n  //       SCPStatement statement;\n  //       Signature signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpEnvelope\", [[\"statement\", xdr.lookup(\"ScpStatement\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPQuorumSet\n  //   {\n  //       uint32 threshold;\n  //       NodeID validators<>;\n  //       SCPQuorumSet innerSets<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpQuorumSet\", [[\"threshold\", xdr.lookup(\"Uint32\")], [\"validators\", xdr.varArray(xdr.lookup(\"NodeId\"), 2147483647)], [\"innerSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey AccountID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"AccountId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Thresholds[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Thresholds\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string32<32>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String32\", xdr.string(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string64<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String64\", xdr.string(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef int64 SequenceNumber;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SequenceNumber\", xdr.lookup(\"Int64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 TimePoint;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimePoint\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 Duration;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Duration\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque DataValue<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DataValue\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash PoolID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PoolId\", xdr.lookup(\"Hash\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode4[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode4\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode12[12];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode12\", xdr.opaque(12));\n\n  // === xdr source ============================================================\n  //\n  //   enum AssetType\n  //   {\n  //       ASSET_TYPE_NATIVE = 0,\n  //       ASSET_TYPE_CREDIT_ALPHANUM4 = 1,\n  //       ASSET_TYPE_CREDIT_ALPHANUM12 = 2,\n  //       ASSET_TYPE_POOL_SHARE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AssetType\", {\n    assetTypeNative: 0,\n    assetTypeCreditAlphanum4: 1,\n    assetTypeCreditAlphanum12: 2,\n    assetTypePoolShare: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AssetCode switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AssetCode4 assetCode4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AssetCode12 assetCode12;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AssetCode\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeCreditAlphanum4\", \"assetCode4\"], [\"assetTypeCreditAlphanum12\", \"assetCode12\"]],\n    arms: {\n      assetCode4: xdr.lookup(\"AssetCode4\"),\n      assetCode12: xdr.lookup(\"AssetCode12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum4\n  //   {\n  //       AssetCode4 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum4\", [[\"assetCode\", xdr.lookup(\"AssetCode4\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum12\n  //   {\n  //       AssetCode12 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum12\", [[\"assetCode\", xdr.lookup(\"AssetCode12\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Asset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Asset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr.void()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Price\n  //   {\n  //       int32 n; // numerator\n  //       int32 d; // denominator\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Price\", [[\"n\", xdr.lookup(\"Int32\")], [\"d\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Liabilities\n  //   {\n  //       int64 buying;\n  //       int64 selling;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Liabilities\", [[\"buying\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ThresholdIndexes\n  //   {\n  //       THRESHOLD_MASTER_WEIGHT = 0,\n  //       THRESHOLD_LOW = 1,\n  //       THRESHOLD_MED = 2,\n  //       THRESHOLD_HIGH = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ThresholdIndices\", {\n    thresholdMasterWeight: 0,\n    thresholdLow: 1,\n    thresholdMed: 2,\n    thresholdHigh: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryType\n  //   {\n  //       ACCOUNT = 0,\n  //       TRUSTLINE = 1,\n  //       OFFER = 2,\n  //       DATA = 3,\n  //       CLAIMABLE_BALANCE = 4,\n  //       LIQUIDITY_POOL = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerEntryType\", {\n    account: 0,\n    trustline: 1,\n    offer: 2,\n    data: 3,\n    claimableBalance: 4,\n    liquidityPool: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Signer\n  //   {\n  //       SignerKey key;\n  //       uint32 weight; // really only need 1 byte\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Signer\", [[\"key\", xdr.lookup(\"SignerKey\")], [\"weight\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountFlags\n  //   { // masks for each flag\n  //   \n  //       // Flags set on issuer accounts\n  //       // TrustLines are created with authorized set to \"false\" requiring\n  //       // the issuer to set it for each TrustLine\n  //       AUTH_REQUIRED_FLAG = 0x1,\n  //       // If set, the authorized flag in TrustLines can be cleared\n  //       // otherwise, authorization cannot be revoked\n  //       AUTH_REVOCABLE_FLAG = 0x2,\n  //       // Once set, causes all AUTH_* flags to be read-only\n  //       AUTH_IMMUTABLE_FLAG = 0x4,\n  //       // Trustlines are created with clawback enabled set to \"true\",\n  //       // and claimable balances created from those trustlines are created\n  //       // with clawback enabled set to \"true\"\n  //       AUTH_CLAWBACK_ENABLED_FLAG = 0x8\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AccountFlags\", {\n    authRequiredFlag: 1,\n    authRevocableFlag: 2,\n    authImmutableFlag: 4,\n    authClawbackEnabledFlag: 8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_ACCOUNT_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS_V17 = 0xF;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_ACCOUNT_FLAGS_V17\", 0xF);\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_SIGNERS = 20;\n  //\n  // ===========================================================================\n  xdr.const(\"MAX_SIGNERS\", 20);\n\n  // === xdr source ============================================================\n  //\n  //   typedef AccountID* SponsorshipDescriptor;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SponsorshipDescriptor\", xdr.option(xdr.lookup(\"AccountId\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV3\n  //   {\n  //       // We can use this to add more fields, or because it is first, to\n  //       // change AccountEntryExtensionV3 into a union.\n  //       ExtensionPoint ext;\n  //   \n  //       // Ledger number at which `seqNum` took on its present value.\n  //       uint32 seqLedger;\n  //   \n  //       // Time at which `seqNum` took on its present value.\n  //       TimePoint seqTime;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"seqLedger\", xdr.lookup(\"Uint32\")], [\"seqTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV2Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [3, \"v3\"]],\n    arms: {\n      v3: xdr.lookup(\"AccountEntryExtensionV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV2\n  //   {\n  //       uint32 numSponsored;\n  //       uint32 numSponsoring;\n  //       SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV2\", [[\"numSponsored\", xdr.lookup(\"Uint32\")], [\"numSponsoring\", xdr.lookup(\"Uint32\")], [\"signerSponsoringIDs\", xdr.varArray(xdr.lookup(\"SponsorshipDescriptor\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"AccountEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV1\n  //   {\n  //       Liabilities liabilities;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"AccountEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"AccountEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntry\n  //   {\n  //       AccountID accountID;      // master public key for this account\n  //       int64 balance;            // in stroops\n  //       SequenceNumber seqNum;    // last sequence number used for this account\n  //       uint32 numSubEntries;     // number of sub-entries this account has\n  //                                 // drives the reserve\n  //       AccountID* inflationDest; // Account to vote for during inflation\n  //       uint32 flags;             // see AccountFlags\n  //   \n  //       string32 homeDomain; // can be used for reverse federation and memo lookup\n  //   \n  //       // fields used for signatures\n  //       // thresholds stores unsigned bytes: [weight of master|low|medium|high]\n  //       Thresholds thresholds;\n  //   \n  //       Signer signers<MAX_SIGNERS>; // possible signers for this account\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"balance\", xdr.lookup(\"Int64\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"numSubEntries\", xdr.lookup(\"Uint32\")], [\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"flags\", xdr.lookup(\"Uint32\")], [\"homeDomain\", xdr.lookup(\"String32\")], [\"thresholds\", xdr.lookup(\"Thresholds\")], [\"signers\", xdr.varArray(xdr.lookup(\"Signer\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TrustLineFlags\n  //   {\n  //       // issuer has authorized account to perform transactions with its credit\n  //       AUTHORIZED_FLAG = 1,\n  //       // issuer has authorized account to maintain and reduce liabilities for its\n  //       // credit\n  //       AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG = 2,\n  //       // issuer has specified that it may clawback its credit, and that claimable\n  //       // balances created with its credit may also be clawed back\n  //       TRUSTLINE_CLAWBACK_ENABLED_FLAG = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"TrustLineFlags\", {\n    authorizedFlag: 1,\n    authorizedToMaintainLiabilitiesFlag: 2,\n    trustlineClawbackEnabledFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_TRUSTLINE_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V13 = 3;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_TRUSTLINE_FLAGS_V13\", 3);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V17 = 7;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_TRUSTLINE_FLAGS_V17\", 7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolType\n  //   {\n  //       LIQUIDITY_POOL_CONSTANT_PRODUCT = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LiquidityPoolType\", {\n    liquidityPoolConstantProduct: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TrustLineAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //   \n  //   case ASSET_TYPE_POOL_SHARE:\n  //       PoolID liquidityPoolID;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr.void()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPoolId\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPoolId: xdr.lookup(\"PoolId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExtensionV2Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntryExtensionV2\n  //   {\n  //       int32 liquidityPoolUseCount;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryExtensionV2\", [[\"liquidityPoolUseCount\", xdr.lookup(\"Int32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"TrustLineEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Liabilities liabilities;\n  //   \n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"TrustLineEntryV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //   \n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TrustLineEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntry\n  //   {\n  //       AccountID accountID;  // account this trustline belongs to\n  //       TrustLineAsset asset; // type of asset (with issuer)\n  //       int64 balance;        // how much of this asset the user has.\n  //                             // Asset defines the unit for this;\n  //   \n  //       int64 limit;  // balance cannot be above this\n  //       uint32 flags; // see TrustLineFlags\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //   \n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")], [\"balance\", xdr.lookup(\"Int64\")], [\"limit\", xdr.lookup(\"Int64\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OfferEntryFlags\n  //   {\n  //       // an offer with this flag will not act on and take a reverse offer of equal\n  //       // price\n  //       PASSIVE_FLAG = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"OfferEntryFlags\", {\n    passiveFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_OFFERENTRY_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_OFFERENTRY_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OfferEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct OfferEntry\n  //   {\n  //       AccountID sellerID;\n  //       int64 offerID;\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount of A\n  //   \n  //       /* price for this offer:\n  //           price of A in terms of B\n  //           price=AmountB/AmountA=priceNumerator/priceDenominator\n  //           price is after fees\n  //       */\n  //       Price price;\n  //       uint32 flags; // see OfferEntryFlags\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OfferEntry\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"OfferEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"DataEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DataEntry\n  //   {\n  //       AccountID accountID; // account this data belongs to\n  //       string64 dataName;\n  //       DataValue dataValue;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DataEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.lookup(\"DataValue\")], [\"ext\", xdr.lookup(\"DataEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimPredicateType\n  //   {\n  //       CLAIM_PREDICATE_UNCONDITIONAL = 0,\n  //       CLAIM_PREDICATE_AND = 1,\n  //       CLAIM_PREDICATE_OR = 2,\n  //       CLAIM_PREDICATE_NOT = 3,\n  //       CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME = 4,\n  //       CLAIM_PREDICATE_BEFORE_RELATIVE_TIME = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimPredicateType\", {\n    claimPredicateUnconditional: 0,\n    claimPredicateAnd: 1,\n    claimPredicateOr: 2,\n    claimPredicateNot: 3,\n    claimPredicateBeforeAbsoluteTime: 4,\n    claimPredicateBeforeRelativeTime: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimPredicate switch (ClaimPredicateType type)\n  //   {\n  //   case CLAIM_PREDICATE_UNCONDITIONAL:\n  //       void;\n  //   case CLAIM_PREDICATE_AND:\n  //       ClaimPredicate andPredicates<2>;\n  //   case CLAIM_PREDICATE_OR:\n  //       ClaimPredicate orPredicates<2>;\n  //   case CLAIM_PREDICATE_NOT:\n  //       ClaimPredicate* notPredicate;\n  //   case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:\n  //       int64 absBefore; // Predicate will be true if closeTime < absBefore\n  //   case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:\n  //       int64 relBefore; // Seconds since closeTime of the ledger in which the\n  //                        // ClaimableBalanceEntry was created\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimPredicate\", {\n    switchOn: xdr.lookup(\"ClaimPredicateType\"),\n    switchName: \"type\",\n    switches: [[\"claimPredicateUnconditional\", xdr.void()], [\"claimPredicateAnd\", \"andPredicates\"], [\"claimPredicateOr\", \"orPredicates\"], [\"claimPredicateNot\", \"notPredicate\"], [\"claimPredicateBeforeAbsoluteTime\", \"absBefore\"], [\"claimPredicateBeforeRelativeTime\", \"relBefore\"]],\n    arms: {\n      andPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      orPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      notPredicate: xdr.option(xdr.lookup(\"ClaimPredicate\")),\n      absBefore: xdr.lookup(\"Int64\"),\n      relBefore: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimantType\n  //   {\n  //       CLAIMANT_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimantType\", {\n    claimantTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimantV0\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"predicate\", xdr.lookup(\"ClaimPredicate\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Claimant switch (ClaimantType type)\n  //   {\n  //   case CLAIMANT_TYPE_V0:\n  //       struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Claimant\", {\n    switchOn: xdr.lookup(\"ClaimantType\"),\n    switchName: \"type\",\n    switches: [[\"claimantTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimantV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceIDType\n  //   {\n  //       CLAIMABLE_BALANCE_ID_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimableBalanceIdType\", {\n    claimableBalanceIdTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimableBalanceID switch (ClaimableBalanceIDType type)\n  //   {\n  //   case CLAIMABLE_BALANCE_ID_TYPE_V0:\n  //       Hash v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceId\", {\n    switchOn: xdr.lookup(\"ClaimableBalanceIdType\"),\n    switchName: \"type\",\n    switches: [[\"claimableBalanceIdTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceFlags\n  //   {\n  //       // If set, the issuer account of the asset held by the claimable balance may\n  //       // clawback the claimable balance\n  //       CLAIMABLE_BALANCE_CLAWBACK_ENABLED_FLAG = 0x1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimableBalanceFlags\", {\n    claimableBalanceClawbackEnabledFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_CLAIMABLE_BALANCE_FLAGS = 0x1;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_CLAIMABLE_BALANCE_FLAGS\", 0x1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntryExtensionV1\n  //   {\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   \n  //       uint32 flags; // see ClaimableBalanceFlags\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntryExtensionV1\", [[\"ext\", xdr.lookup(\"ClaimableBalanceEntryExtensionV1Ext\")], [\"flags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ClaimableBalanceEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntry\n  //   {\n  //       // Unique identifier for this ClaimableBalanceEntry\n  //       ClaimableBalanceID balanceID;\n  //   \n  //       // List of claimants with associated predicate\n  //       Claimant claimants<10>;\n  //   \n  //       // Any asset including native\n  //       Asset asset;\n  //   \n  //       // Amount of asset\n  //       int64 amount;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntry\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"ext\", xdr.lookup(\"ClaimableBalanceEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolConstantProductParameters\n  //   {\n  //       Asset assetA; // assetA < assetB\n  //       Asset assetB;\n  //       int32 fee; // Fee is in basis points, so the actual rate is (fee/100)%\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolConstantProductParameters\", [[\"assetA\", xdr.lookup(\"Asset\")], [\"assetB\", xdr.lookup(\"Asset\")], [\"fee\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //   \n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntryConstantProduct\", [[\"params\", xdr.lookup(\"LiquidityPoolConstantProductParameters\")], [\"reserveA\", xdr.lookup(\"Int64\")], [\"reserveB\", xdr.lookup(\"Int64\")], [\"totalPoolShares\", xdr.lookup(\"Int64\")], [\"poolSharesTrustLineCount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //   \n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolEntryBody\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolEntryConstantProduct\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolEntry\n  //   {\n  //       PoolID liquidityPoolID;\n  //   \n  //       union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //   \n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntry\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"body\", xdr.lookup(\"LiquidityPoolEntryBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntryExtensionV1\n  //   {\n  //       SponsorshipDescriptor sponsoringID;\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntryExtensionV1\", [[\"sponsoringId\", xdr.lookup(\"SponsorshipDescriptor\")], [\"ext\", xdr.lookup(\"LedgerEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryData\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"]],\n    arms: {\n      account: xdr.lookup(\"AccountEntry\"),\n      trustLine: xdr.lookup(\"TrustLineEntry\"),\n      offer: xdr.lookup(\"OfferEntry\"),\n      data: xdr.lookup(\"DataEntry\"),\n      claimableBalance: xdr.lookup(\"ClaimableBalanceEntry\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntry\n  //   {\n  //       uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed\n  //   \n  //       union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       }\n  //       data;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntry\", [[\"lastModifiedLedgerSeq\", xdr.lookup(\"Uint32\")], [\"data\", xdr.lookup(\"LedgerEntryData\")], [\"ext\", xdr.lookup(\"LedgerEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyAccount\", [[\"accountId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTrustLine\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyOffer\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyData\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyClaimableBalance\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyLiquidityPool\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerKey switch (LedgerEntryType type)\n  //   {\n  //   case ACCOUNT:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //       } account;\n  //   \n  //   case TRUSTLINE:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       } trustLine;\n  //   \n  //   case OFFER:\n  //       struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       } offer;\n  //   \n  //   case DATA:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       } data;\n  //   \n  //   case CLAIMABLE_BALANCE:\n  //       struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       } claimableBalance;\n  //   \n  //   case LIQUIDITY_POOL:\n  //       struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       } liquidityPool;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerKey\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"]],\n    arms: {\n      account: xdr.lookup(\"LedgerKeyAccount\"),\n      trustLine: xdr.lookup(\"LedgerKeyTrustLine\"),\n      offer: xdr.lookup(\"LedgerKeyOffer\"),\n      data: xdr.lookup(\"LedgerKeyData\"),\n      claimableBalance: xdr.lookup(\"LedgerKeyClaimableBalance\"),\n      liquidityPool: xdr.lookup(\"LedgerKeyLiquidityPool\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EnvelopeType\n  //   {\n  //       ENVELOPE_TYPE_TX_V0 = 0,\n  //       ENVELOPE_TYPE_SCP = 1,\n  //       ENVELOPE_TYPE_TX = 2,\n  //       ENVELOPE_TYPE_AUTH = 3,\n  //       ENVELOPE_TYPE_SCPVALUE = 4,\n  //       ENVELOPE_TYPE_TX_FEE_BUMP = 5,\n  //       ENVELOPE_TYPE_OP_ID = 6,\n  //       ENVELOPE_TYPE_POOL_REVOKE_OP_ID = 7\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"EnvelopeType\", {\n    envelopeTypeTxV0: 0,\n    envelopeTypeScp: 1,\n    envelopeTypeTx: 2,\n    envelopeTypeAuth: 3,\n    envelopeTypeScpvalue: 4,\n    envelopeTypeTxFeeBump: 5,\n    envelopeTypeOpId: 6,\n    envelopeTypePoolRevokeOpId: 7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque UpgradeType<128>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"UpgradeType\", xdr.varOpaque(128));\n\n  // === xdr source ============================================================\n  //\n  //   enum StellarValueType\n  //   {\n  //       STELLAR_VALUE_BASIC = 0,\n  //       STELLAR_VALUE_SIGNED = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"StellarValueType\", {\n    stellarValueBasic: 0,\n    stellarValueSigned: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseValueSignature\n  //   {\n  //       NodeID nodeID;       // which node introduced the value\n  //       Signature signature; // nodeID's signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseValueSignature\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"StellarValueExt\", {\n    switchOn: xdr.lookup(\"StellarValueType\"),\n    switchName: \"v\",\n    switches: [[\"stellarValueBasic\", xdr.void()], [\"stellarValueSigned\", \"lcValueSignature\"]],\n    arms: {\n      lcValueSignature: xdr.lookup(\"LedgerCloseValueSignature\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct StellarValue\n  //   {\n  //       Hash txSetHash;      // transaction set to apply to previous ledger\n  //       TimePoint closeTime; // network close time\n  //   \n  //       // upgrades to apply to the previous ledger (usually empty)\n  //       // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop\n  //       // unknown steps during consensus if needed.\n  //       // see notes below on 'LedgerUpgrade' for more detail\n  //       // max size is dictated by number of upgrade types (+ room for future)\n  //       UpgradeType upgrades<6>;\n  //   \n  //       // reserved for future use\n  //       union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StellarValue\", [[\"txSetHash\", xdr.lookup(\"Hash\")], [\"closeTime\", xdr.lookup(\"TimePoint\")], [\"upgrades\", xdr.varArray(xdr.lookup(\"UpgradeType\"), 6)], [\"ext\", xdr.lookup(\"StellarValueExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_LEDGER_HEADER_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr.const(\"MASK_LEDGER_HEADER_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerHeaderFlags\n  //   {\n  //       DISABLE_LIQUIDITY_POOL_TRADING_FLAG = 0x1,\n  //       DISABLE_LIQUIDITY_POOL_DEPOSIT_FLAG = 0x2,\n  //       DISABLE_LIQUIDITY_POOL_WITHDRAWAL_FLAG = 0x4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerHeaderFlags\", {\n    disableLiquidityPoolTradingFlag: 1,\n    disableLiquidityPoolDepositFlag: 2,\n    disableLiquidityPoolWithdrawalFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExtensionV1Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderExtensionV1\n  //   {\n  //       uint32 flags; // LedgerHeaderFlags\n  //   \n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderExtensionV1\", [[\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"LedgerHeaderExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerHeaderExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeader\n  //   {\n  //       uint32 ledgerVersion;    // the protocol version of the ledger\n  //       Hash previousLedgerHash; // hash of the previous ledger header\n  //       StellarValue scpValue;   // what consensus agreed to\n  //       Hash txSetResultHash;    // the TransactionResultSet that led to this ledger\n  //       Hash bucketListHash;     // hash of the ledger state\n  //   \n  //       uint32 ledgerSeq; // sequence number of this ledger\n  //   \n  //       int64 totalCoins; // total number of stroops in existence.\n  //                         // 10,000,000 stroops in 1 XLM\n  //   \n  //       int64 feePool;       // fees burned since last inflation run\n  //       uint32 inflationSeq; // inflation sequence number\n  //   \n  //       uint64 idPool; // last used global ID, used for generating objects\n  //   \n  //       uint32 baseFee;     // base fee per operation in stroops\n  //       uint32 baseReserve; // account base reserve in stroops\n  //   \n  //       uint32 maxTxSetSize; // maximum size a transaction set can be\n  //   \n  //       Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back\n  //                         // in time without walking the chain back ledger by ledger\n  //                         // each slot contains the oldest ledger that is mod of\n  //                         // either 50  5000  50000 or 500000 depending on index\n  //                         // skipList[0] mod(50), skipList[1] mod(5000), etc\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeader\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"scpValue\", xdr.lookup(\"StellarValue\")], [\"txSetResultHash\", xdr.lookup(\"Hash\")], [\"bucketListHash\", xdr.lookup(\"Hash\")], [\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"totalCoins\", xdr.lookup(\"Int64\")], [\"feePool\", xdr.lookup(\"Int64\")], [\"inflationSeq\", xdr.lookup(\"Uint32\")], [\"idPool\", xdr.lookup(\"Uint64\")], [\"baseFee\", xdr.lookup(\"Uint32\")], [\"baseReserve\", xdr.lookup(\"Uint32\")], [\"maxTxSetSize\", xdr.lookup(\"Uint32\")], [\"skipList\", xdr.array(xdr.lookup(\"Hash\"), 4)], [\"ext\", xdr.lookup(\"LedgerHeaderExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerUpgradeType\n  //   {\n  //       LEDGER_UPGRADE_VERSION = 1,\n  //       LEDGER_UPGRADE_BASE_FEE = 2,\n  //       LEDGER_UPGRADE_MAX_TX_SET_SIZE = 3,\n  //       LEDGER_UPGRADE_BASE_RESERVE = 4,\n  //       LEDGER_UPGRADE_FLAGS = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerUpgradeType\", {\n    ledgerUpgradeVersion: 1,\n    ledgerUpgradeBaseFee: 2,\n    ledgerUpgradeMaxTxSetSize: 3,\n    ledgerUpgradeBaseReserve: 4,\n    ledgerUpgradeFlags: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerUpgrade switch (LedgerUpgradeType type)\n  //   {\n  //   case LEDGER_UPGRADE_VERSION:\n  //       uint32 newLedgerVersion; // update ledgerVersion\n  //   case LEDGER_UPGRADE_BASE_FEE:\n  //       uint32 newBaseFee; // update baseFee\n  //   case LEDGER_UPGRADE_MAX_TX_SET_SIZE:\n  //       uint32 newMaxTxSetSize; // update maxTxSetSize\n  //   case LEDGER_UPGRADE_BASE_RESERVE:\n  //       uint32 newBaseReserve; // update baseReserve\n  //   case LEDGER_UPGRADE_FLAGS:\n  //       uint32 newFlags; // update flags\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerUpgrade\", {\n    switchOn: xdr.lookup(\"LedgerUpgradeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerUpgradeVersion\", \"newLedgerVersion\"], [\"ledgerUpgradeBaseFee\", \"newBaseFee\"], [\"ledgerUpgradeMaxTxSetSize\", \"newMaxTxSetSize\"], [\"ledgerUpgradeBaseReserve\", \"newBaseReserve\"], [\"ledgerUpgradeFlags\", \"newFlags\"]],\n    arms: {\n      newLedgerVersion: xdr.lookup(\"Uint32\"),\n      newBaseFee: xdr.lookup(\"Uint32\"),\n      newMaxTxSetSize: xdr.lookup(\"Uint32\"),\n      newBaseReserve: xdr.lookup(\"Uint32\"),\n      newFlags: xdr.lookup(\"Uint32\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketEntryType\n  //   {\n  //       METAENTRY =\n  //           -1, // At-and-after protocol 11: bucket metadata, should come first.\n  //       LIVEENTRY = 0, // Before protocol 11: created-or-updated;\n  //                      // At-and-after protocol 11: only updated.\n  //       DEADENTRY = 1,\n  //       INITENTRY = 2 // At-and-after protocol 11: only created.\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"BucketEntryType\", {\n    metaentry: -1,\n    liveentry: 0,\n    deadentry: 1,\n    initentry: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"BucketMetadataExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct BucketMetadata\n  //   {\n  //       // Indicates the protocol version used to create / merge this bucket.\n  //       uint32 ledgerVersion;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BucketMetadata\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"BucketMetadataExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union BucketEntry switch (BucketEntryType type)\n  //   {\n  //   case LIVEENTRY:\n  //   case INITENTRY:\n  //       LedgerEntry liveEntry;\n  //   \n  //   case DEADENTRY:\n  //       LedgerKey deadEntry;\n  //   case METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BucketEntry\", {\n    switchOn: xdr.lookup(\"BucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"liveentry\", \"liveEntry\"], [\"initentry\", \"liveEntry\"], [\"deadentry\", \"deadEntry\"], [\"metaentry\", \"metaEntry\"]],\n    arms: {\n      liveEntry: xdr.lookup(\"LedgerEntry\"),\n      deadEntry: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum TxSetComponentType\n  //   {\n  //     // txs with effective fee <= bid derived from a base fee (if any).\n  //     // If base fee is not specified, no discount is applied.\n  //     TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"TxSetComponentType\", {\n    txsetCompTxsMaybeDiscountedFee: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     }\n  //\n  // ===========================================================================\n  xdr.struct(\"TxSetComponentTxsMaybeDiscountedFee\", [[\"baseFee\", xdr.option(xdr.lookup(\"Int64\"))], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TxSetComponent switch (TxSetComponentType type)\n  //   {\n  //   case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:\n  //     struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     } txsMaybeDiscountedFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TxSetComponent\", {\n    switchOn: xdr.lookup(\"TxSetComponentType\"),\n    switchName: \"type\",\n    switches: [[\"txsetCompTxsMaybeDiscountedFee\", \"txsMaybeDiscountedFee\"]],\n    arms: {\n      txsMaybeDiscountedFee: xdr.lookup(\"TxSetComponentTxsMaybeDiscountedFee\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionPhase switch (int v)\n  //   {\n  //   case 0:\n  //       TxSetComponent v0Components<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionPhase\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"v0Components\"]],\n    arms: {\n      v0Components: xdr.varArray(xdr.lookup(\"TxSetComponent\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSet\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionEnvelope txs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSet\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSetV1\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionPhase phases<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSetV1\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"phases\", xdr.varArray(xdr.lookup(\"TransactionPhase\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union GeneralizedTransactionSet switch (int v)\n  //   {\n  //   // We consider the legacy TransactionSet to be v0.\n  //   case 1:\n  //       TransactionSetV1 v1TxSet;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"GeneralizedTransactionSet\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[1, \"v1TxSet\"]],\n    arms: {\n      v1TxSet: xdr.lookup(\"TransactionSetV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultPair\n  //   {\n  //       Hash transactionHash;\n  //       TransactionResult result; // result for the transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"TransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultSet\n  //   {\n  //       TransactionResultPair results<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultSet\", [[\"results\", xdr.varArray(xdr.lookup(\"TransactionResultPair\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()], [1, \"generalizedTxSet\"]],\n    arms: {\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionSet txSet;\n  //   \n  //       // when v != 0, txSet must be empty\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryResultEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryResultEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionResultSet txResultSet;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryResultEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txResultSet\", xdr.lookup(\"TransactionResultSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryResultEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderHistoryEntryExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderHistoryEntry\n  //   {\n  //       Hash hash;\n  //       LedgerHeader header;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderHistoryEntry\", [[\"hash\", xdr.lookup(\"Hash\")], [\"header\", xdr.lookup(\"LedgerHeader\")], [\"ext\", xdr.lookup(\"LedgerHeaderHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerSCPMessages\n  //   {\n  //       uint32 ledgerSeq;\n  //       SCPEnvelope messages<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerScpMessages\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"messages\", xdr.varArray(xdr.lookup(\"ScpEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPHistoryEntryV0\n  //   {\n  //       SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages\n  //       LedgerSCPMessages ledgerMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpHistoryEntryV0\", [[\"quorumSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)], [\"ledgerMessages\", xdr.lookup(\"LedgerScpMessages\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCPHistoryEntry switch (int v)\n  //   {\n  //   case 0:\n  //       SCPHistoryEntryV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScpHistoryEntry\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScpHistoryEntryV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryChangeType\n  //   {\n  //       LEDGER_ENTRY_CREATED = 0, // entry was added to the ledger\n  //       LEDGER_ENTRY_UPDATED = 1, // entry was modified in the ledger\n  //       LEDGER_ENTRY_REMOVED = 2, // entry was removed from the ledger\n  //       LEDGER_ENTRY_STATE = 3    // value of the entry\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LedgerEntryChangeType\", {\n    ledgerEntryCreated: 0,\n    ledgerEntryUpdated: 1,\n    ledgerEntryRemoved: 2,\n    ledgerEntryState: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerEntryChange switch (LedgerEntryChangeType type)\n  //   {\n  //   case LEDGER_ENTRY_CREATED:\n  //       LedgerEntry created;\n  //   case LEDGER_ENTRY_UPDATED:\n  //       LedgerEntry updated;\n  //   case LEDGER_ENTRY_REMOVED:\n  //       LedgerKey removed;\n  //   case LEDGER_ENTRY_STATE:\n  //       LedgerEntry state;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryChange\", {\n    switchOn: xdr.lookup(\"LedgerEntryChangeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerEntryCreated\", \"created\"], [\"ledgerEntryUpdated\", \"updated\"], [\"ledgerEntryRemoved\", \"removed\"], [\"ledgerEntryState\", \"state\"]],\n    arms: {\n      created: xdr.lookup(\"LedgerEntry\"),\n      updated: xdr.lookup(\"LedgerEntry\"),\n      removed: xdr.lookup(\"LedgerKey\"),\n      state: xdr.lookup(\"LedgerEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef LedgerEntryChange LedgerEntryChanges<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"LedgerEntryChanges\", xdr.varArray(xdr.lookup(\"LedgerEntryChange\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct OperationMeta\n  //   {\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OperationMeta\", [[\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV1\n  //   {\n  //       LedgerEntryChanges txChanges; // tx level changes if any\n  //       OperationMeta operations<>;   // meta for each operation\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV1\", [[\"txChanges\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV2\n  //   {\n  //       LedgerEntryChanges txChangesBefore; // tx level changes before operations\n  //                                           // are applied if any\n  //       OperationMeta operations<>;         // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;  // tx level changes after operations are\n  //                                           // applied if any\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV2\", [[\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionMeta switch (int v)\n  //   {\n  //   case 0:\n  //       OperationMeta operations<>;\n  //   case 1:\n  //       TransactionMetaV1 v1;\n  //   case 2:\n  //       TransactionMetaV2 v2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionMeta\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"operations\"], [1, \"v1\"], [2, \"v2\"]],\n    arms: {\n      operations: xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647),\n      v1: xdr.lookup(\"TransactionMetaV1\"),\n      v2: xdr.lookup(\"TransactionMetaV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultMeta\n  //   {\n  //       TransactionResultPair result;\n  //       LedgerEntryChanges feeProcessing;\n  //       TransactionMeta txApplyProcessing;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultMeta\", [[\"result\", xdr.lookup(\"TransactionResultPair\")], [\"feeProcessing\", xdr.lookup(\"LedgerEntryChanges\")], [\"txApplyProcessing\", xdr.lookup(\"TransactionMeta\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UpgradeEntryMeta\n  //   {\n  //       LedgerUpgrade upgrade;\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UpgradeEntryMeta\", [[\"upgrade\", xdr.lookup(\"LedgerUpgrade\")], [\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV0\n  //   {\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //       // NB: txSet is sorted in \"Hash order\"\n  //       TransactionSet txSet;\n  //   \n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //   \n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //   \n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV0\", [[\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV1\n  //   {\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //   \n  //       GeneralizedTransactionSet txSet;\n  //   \n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //   \n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //   \n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV1\", [[\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"GeneralizedTransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMeta switch (int v)\n  //   {\n  //   case 0:\n  //       LedgerCloseMetaV0 v0;\n  //   case 1:\n  //       LedgerCloseMetaV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMeta\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, \"v0\"], [1, \"v1\"]],\n    arms: {\n      v0: xdr.lookup(\"LedgerCloseMetaV0\"),\n      v1: xdr.lookup(\"LedgerCloseMetaV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ErrorCode\n  //   {\n  //       ERR_MISC = 0, // Unspecific error\n  //       ERR_DATA = 1, // Malformed data\n  //       ERR_CONF = 2, // Misconfiguration error\n  //       ERR_AUTH = 3, // Authentication failure\n  //       ERR_LOAD = 4  // System overloaded\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ErrorCode\", {\n    errMisc: 0,\n    errData: 1,\n    errConf: 2,\n    errAuth: 3,\n    errLoad: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Error\n  //   {\n  //       ErrorCode code;\n  //       string msg<100>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Error\", [[\"code\", xdr.lookup(\"ErrorCode\")], [\"msg\", xdr.string(100)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMore\n  //   {\n  //       uint32 numMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMore\", [[\"numMessages\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AuthCert\n  //   {\n  //       Curve25519Public pubkey;\n  //       uint64 expiration;\n  //       Signature sig;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthCert\", [[\"pubkey\", xdr.lookup(\"Curve25519Public\")], [\"expiration\", xdr.lookup(\"Uint64\")], [\"sig\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Hello\n  //   {\n  //       uint32 ledgerVersion;\n  //       uint32 overlayVersion;\n  //       uint32 overlayMinVersion;\n  //       Hash networkID;\n  //       string versionStr<100>;\n  //       int listeningPort;\n  //       NodeID peerID;\n  //       AuthCert cert;\n  //       uint256 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Hello\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"overlayVersion\", xdr.lookup(\"Uint32\")], [\"overlayMinVersion\", xdr.lookup(\"Uint32\")], [\"networkId\", xdr.lookup(\"Hash\")], [\"versionStr\", xdr.string(100)], [\"listeningPort\", xdr.int()], [\"peerId\", xdr.lookup(\"NodeId\")], [\"cert\", xdr.lookup(\"AuthCert\")], [\"nonce\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Auth\n  //   {\n  //       // Empty message, just to confirm\n  //       // establishment of MAC keys.\n  //       int unused;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Auth\", [[\"unused\", xdr.int()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum IPAddrType\n  //   {\n  //       IPv4 = 0,\n  //       IPv6 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"IpAddrType\", {\n    iPv4: 0,\n    iPv6: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"PeerAddressIp\", {\n    switchOn: xdr.lookup(\"IpAddrType\"),\n    switchName: \"type\",\n    switches: [[\"iPv4\", \"ipv4\"], [\"iPv6\", \"ipv6\"]],\n    arms: {\n      ipv4: xdr.opaque(4),\n      ipv6: xdr.opaque(16)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerAddress\n  //   {\n  //       union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //       ip;\n  //       uint32 port;\n  //       uint32 numFailures;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerAddress\", [[\"ip\", xdr.lookup(\"PeerAddressIp\")], [\"port\", xdr.lookup(\"Uint32\")], [\"numFailures\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum MessageType\n  //   {\n  //       ERROR_MSG = 0,\n  //       AUTH = 2,\n  //       DONT_HAVE = 3,\n  //   \n  //       GET_PEERS = 4, // gets a list of peers this guy knows about\n  //       PEERS = 5,\n  //   \n  //       GET_TX_SET = 6, // gets a particular txset by hash\n  //       TX_SET = 7,\n  //       GENERALIZED_TX_SET = 17,\n  //   \n  //       TRANSACTION = 8, // pass on a tx you have heard about\n  //   \n  //       // SCP\n  //       GET_SCP_QUORUMSET = 9,\n  //       SCP_QUORUMSET = 10,\n  //       SCP_MESSAGE = 11,\n  //       GET_SCP_STATE = 12,\n  //   \n  //       // new messages\n  //       HELLO = 13,\n  //   \n  //       SURVEY_REQUEST = 14,\n  //       SURVEY_RESPONSE = 15,\n  //   \n  //       SEND_MORE = 16\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"MessageType\", {\n    errorMsg: 0,\n    auth: 2,\n    dontHave: 3,\n    getPeers: 4,\n    peers: 5,\n    getTxSet: 6,\n    txSet: 7,\n    generalizedTxSet: 17,\n    transaction: 8,\n    getScpQuorumset: 9,\n    scpQuorumset: 10,\n    scpMessage: 11,\n    getScpState: 12,\n    hello: 13,\n    surveyRequest: 14,\n    surveyResponse: 15,\n    sendMore: 16\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DontHave\n  //   {\n  //       MessageType type;\n  //       uint256 reqHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DontHave\", [[\"type\", xdr.lookup(\"MessageType\")], [\"reqHash\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageCommandType\n  //   {\n  //       SURVEY_TOPOLOGY = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SurveyMessageCommandType\", {\n    surveyTopology: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyRequestMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       Curve25519Public encryptionKey;\n  //       SurveyMessageCommandType commandType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyRequestMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"encryptionKey\", xdr.lookup(\"Curve25519Public\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       SurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"SurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque EncryptedBody<64000>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"EncryptedBody\", xdr.varOpaque(64000));\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyResponseMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       SurveyMessageCommandType commandType;\n  //       EncryptedBody encryptedBody;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyResponseMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")], [\"encryptedBody\", xdr.lookup(\"EncryptedBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       SurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"SurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerStats\n  //   {\n  //       NodeID id;\n  //       string versionStr<100>;\n  //       uint64 messagesRead;\n  //       uint64 messagesWritten;\n  //       uint64 bytesRead;\n  //       uint64 bytesWritten;\n  //       uint64 secondsConnected;\n  //   \n  //       uint64 uniqueFloodBytesRecv;\n  //       uint64 duplicateFloodBytesRecv;\n  //       uint64 uniqueFetchBytesRecv;\n  //       uint64 duplicateFetchBytesRecv;\n  //   \n  //       uint64 uniqueFloodMessageRecv;\n  //       uint64 duplicateFloodMessageRecv;\n  //       uint64 uniqueFetchMessageRecv;\n  //       uint64 duplicateFetchMessageRecv;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerStats\", [[\"id\", xdr.lookup(\"NodeId\")], [\"versionStr\", xdr.string(100)], [\"messagesRead\", xdr.lookup(\"Uint64\")], [\"messagesWritten\", xdr.lookup(\"Uint64\")], [\"bytesRead\", xdr.lookup(\"Uint64\")], [\"bytesWritten\", xdr.lookup(\"Uint64\")], [\"secondsConnected\", xdr.lookup(\"Uint64\")], [\"uniqueFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchMessageRecv\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef PeerStats PeerStatList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PeerStatList\", xdr.varArray(xdr.lookup(\"PeerStats\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBody\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //   \n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBody\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SurveyResponseBody switch (SurveyMessageCommandType type)\n  //   {\n  //   case SURVEY_TOPOLOGY:\n  //       TopologyResponseBody topologyResponseBody;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SurveyResponseBody\", {\n    switchOn: xdr.lookup(\"SurveyMessageCommandType\"),\n    switchName: \"type\",\n    switches: [[\"surveyTopology\", \"topologyResponseBody\"]],\n    arms: {\n      topologyResponseBody: xdr.lookup(\"TopologyResponseBody\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union StellarMessage switch (MessageType type)\n  //   {\n  //   case ERROR_MSG:\n  //       Error error;\n  //   case HELLO:\n  //       Hello hello;\n  //   case AUTH:\n  //       Auth auth;\n  //   case DONT_HAVE:\n  //       DontHave dontHave;\n  //   case GET_PEERS:\n  //       void;\n  //   case PEERS:\n  //       PeerAddress peers<100>;\n  //   \n  //   case GET_TX_SET:\n  //       uint256 txSetHash;\n  //   case TX_SET:\n  //       TransactionSet txSet;\n  //   case GENERALIZED_TX_SET:\n  //       GeneralizedTransactionSet generalizedTxSet;\n  //   \n  //   case TRANSACTION:\n  //       TransactionEnvelope transaction;\n  //   \n  //   case SURVEY_REQUEST:\n  //       SignedSurveyRequestMessage signedSurveyRequestMessage;\n  //   \n  //   case SURVEY_RESPONSE:\n  //       SignedSurveyResponseMessage signedSurveyResponseMessage;\n  //   \n  //   // SCP\n  //   case GET_SCP_QUORUMSET:\n  //       uint256 qSetHash;\n  //   case SCP_QUORUMSET:\n  //       SCPQuorumSet qSet;\n  //   case SCP_MESSAGE:\n  //       SCPEnvelope envelope;\n  //   case GET_SCP_STATE:\n  //       uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest\n  //   case SEND_MORE:\n  //       SendMore sendMoreMessage;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"StellarMessage\", {\n    switchOn: xdr.lookup(\"MessageType\"),\n    switchName: \"type\",\n    switches: [[\"errorMsg\", \"error\"], [\"hello\", \"hello\"], [\"auth\", \"auth\"], [\"dontHave\", \"dontHave\"], [\"getPeers\", xdr.void()], [\"peers\", \"peers\"], [\"getTxSet\", \"txSetHash\"], [\"txSet\", \"txSet\"], [\"generalizedTxSet\", \"generalizedTxSet\"], [\"transaction\", \"transaction\"], [\"surveyRequest\", \"signedSurveyRequestMessage\"], [\"surveyResponse\", \"signedSurveyResponseMessage\"], [\"getScpQuorumset\", \"qSetHash\"], [\"scpQuorumset\", \"qSet\"], [\"scpMessage\", \"envelope\"], [\"getScpState\", \"getScpLedgerSeq\"], [\"sendMore\", \"sendMoreMessage\"]],\n    arms: {\n      error: xdr.lookup(\"Error\"),\n      hello: xdr.lookup(\"Hello\"),\n      auth: xdr.lookup(\"Auth\"),\n      dontHave: xdr.lookup(\"DontHave\"),\n      peers: xdr.varArray(xdr.lookup(\"PeerAddress\"), 100),\n      txSetHash: xdr.lookup(\"Uint256\"),\n      txSet: xdr.lookup(\"TransactionSet\"),\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\"),\n      transaction: xdr.lookup(\"TransactionEnvelope\"),\n      signedSurveyRequestMessage: xdr.lookup(\"SignedSurveyRequestMessage\"),\n      signedSurveyResponseMessage: xdr.lookup(\"SignedSurveyResponseMessage\"),\n      qSetHash: xdr.lookup(\"Uint256\"),\n      qSet: xdr.lookup(\"ScpQuorumSet\"),\n      envelope: xdr.lookup(\"ScpEnvelope\"),\n      getScpLedgerSeq: xdr.lookup(\"Uint32\"),\n      sendMoreMessage: xdr.lookup(\"SendMore\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthenticatedMessageV0\", [[\"sequence\", xdr.lookup(\"Uint64\")], [\"message\", xdr.lookup(\"StellarMessage\")], [\"mac\", xdr.lookup(\"HmacSha256Mac\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union AuthenticatedMessage switch (uint32 v)\n  //   {\n  //   case 0:\n  //       struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AuthenticatedMessage\", {\n    switchOn: xdr.lookup(\"Uint32\"),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"AuthenticatedMessageV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolParameters switch (LiquidityPoolType type)\n  //   {\n  //   case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //       LiquidityPoolConstantProductParameters constantProduct;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolParameters\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolConstantProductParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"MuxedAccountMed25519\", [[\"id\", xdr.lookup(\"Uint64\")], [\"ed25519\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union MuxedAccount switch (CryptoKeyType type)\n  //   {\n  //   case KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case KEY_TYPE_MUXED_ED25519:\n  //       struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       } med25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"MuxedAccount\", {\n    switchOn: xdr.lookup(\"CryptoKeyType\"),\n    switchName: \"type\",\n    switches: [[\"keyTypeEd25519\", \"ed25519\"], [\"keyTypeMuxedEd25519\", \"med25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      med25519: xdr.lookup(\"MuxedAccountMed25519\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DecoratedSignature\n  //   {\n  //       SignatureHint hint;  // last 4 bytes of the public key, used as a hint\n  //       Signature signature; // actual signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DecoratedSignature\", [[\"hint\", xdr.lookup(\"SignatureHint\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationType\n  //   {\n  //       CREATE_ACCOUNT = 0,\n  //       PAYMENT = 1,\n  //       PATH_PAYMENT_STRICT_RECEIVE = 2,\n  //       MANAGE_SELL_OFFER = 3,\n  //       CREATE_PASSIVE_SELL_OFFER = 4,\n  //       SET_OPTIONS = 5,\n  //       CHANGE_TRUST = 6,\n  //       ALLOW_TRUST = 7,\n  //       ACCOUNT_MERGE = 8,\n  //       INFLATION = 9,\n  //       MANAGE_DATA = 10,\n  //       BUMP_SEQUENCE = 11,\n  //       MANAGE_BUY_OFFER = 12,\n  //       PATH_PAYMENT_STRICT_SEND = 13,\n  //       CREATE_CLAIMABLE_BALANCE = 14,\n  //       CLAIM_CLAIMABLE_BALANCE = 15,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES = 16,\n  //       END_SPONSORING_FUTURE_RESERVES = 17,\n  //       REVOKE_SPONSORSHIP = 18,\n  //       CLAWBACK = 19,\n  //       CLAWBACK_CLAIMABLE_BALANCE = 20,\n  //       SET_TRUST_LINE_FLAGS = 21,\n  //       LIQUIDITY_POOL_DEPOSIT = 22,\n  //       LIQUIDITY_POOL_WITHDRAW = 23\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"OperationType\", {\n    createAccount: 0,\n    payment: 1,\n    pathPaymentStrictReceive: 2,\n    manageSellOffer: 3,\n    createPassiveSellOffer: 4,\n    setOptions: 5,\n    changeTrust: 6,\n    allowTrust: 7,\n    accountMerge: 8,\n    inflation: 9,\n    manageData: 10,\n    bumpSequence: 11,\n    manageBuyOffer: 12,\n    pathPaymentStrictSend: 13,\n    createClaimableBalance: 14,\n    claimClaimableBalance: 15,\n    beginSponsoringFutureReserves: 16,\n    endSponsoringFutureReserves: 17,\n    revokeSponsorship: 18,\n    clawback: 19,\n    clawbackClaimableBalance: 20,\n    setTrustLineFlags: 21,\n    liquidityPoolDeposit: 22,\n    liquidityPoolWithdraw: 23\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateAccountOp\n  //   {\n  //       AccountID destination; // account to create\n  //       int64 startingBalance; // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateAccountOp\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"startingBalance\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PaymentOp\n  //   {\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset asset;              // what they end up with\n  //       int64 amount;             // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PaymentOp\", [[\"destination\", xdr.lookup(\"MuxedAccount\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictReceiveOp\n  //   {\n  //       Asset sendAsset; // asset we pay with\n  //       int64 sendMax;   // the maximum amount of sendAsset to\n  //                        // send (excluding fees).\n  //                        // The operation will fail if can't be met\n  //   \n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destAmount;         // amount they end up with\n  //   \n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendMax\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destAmount\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictSendOp\n  //   {\n  //       Asset sendAsset;  // asset we pay with\n  //       int64 sendAmount; // amount of sendAsset to send (excluding fees)\n  //   \n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destMin;            // the minimum amount of dest asset to\n  //                                 // be received\n  //                                 // The operation will fail if it can't be met\n  //   \n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendAmount\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destMin\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageSellOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 amount; // amount being sold. if set to 0, delete the offer\n  //       Price price;  // price of thing being sold in terms of what you are buying\n  //   \n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageBuyOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 buyAmount; // amount being bought. if set to 0, delete the offer\n  //       Price price;     // price of thing being bought in terms of what you are\n  //                        // selling\n  //   \n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageBuyOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"buyAmount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreatePassiveSellOfferOp\n  //   {\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount taker gets\n  //       Price price;   // cost of A in terms of B\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreatePassiveSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetOptionsOp\n  //   {\n  //       AccountID* inflationDest; // sets the inflation destination\n  //   \n  //       uint32* clearFlags; // which flags to clear\n  //       uint32* setFlags;   // which flags to set\n  //   \n  //       // account threshold manipulation\n  //       uint32* masterWeight; // weight of the master account\n  //       uint32* lowThreshold;\n  //       uint32* medThreshold;\n  //       uint32* highThreshold;\n  //   \n  //       string32* homeDomain; // sets the home domain\n  //   \n  //       // Add, update or remove a signer for the account\n  //       // signer is deleted if the weight is 0\n  //       Signer* signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetOptionsOp\", [[\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"clearFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"setFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"masterWeight\", xdr.option(xdr.lookup(\"Uint32\"))], [\"lowThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"medThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"highThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"homeDomain\", xdr.option(xdr.lookup(\"String32\"))], [\"signer\", xdr.option(xdr.lookup(\"Signer\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //   \n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //   \n  //   case ASSET_TYPE_POOL_SHARE:\n  //       LiquidityPoolParameters liquidityPool;\n  //   \n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr.void()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPool\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ChangeTrustOp\n  //   {\n  //       ChangeTrustAsset line;\n  //   \n  //       // if limit is set to 0, deletes the trust line\n  //       int64 limit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ChangeTrustOp\", [[\"line\", xdr.lookup(\"ChangeTrustAsset\")], [\"limit\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AllowTrustOp\n  //   {\n  //       AccountID trustor;\n  //       AssetCode asset;\n  //   \n  //       // One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG\n  //       uint32 authorize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AllowTrustOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"AssetCode\")], [\"authorize\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageDataOp\n  //   {\n  //       string64 dataName;\n  //       DataValue* dataValue; // set to null to clear\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageDataOp\", [[\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.option(xdr.lookup(\"DataValue\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BumpSequenceOp\n  //   {\n  //       SequenceNumber bumpTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BumpSequenceOp\", [[\"bumpTo\", xdr.lookup(\"SequenceNumber\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateClaimableBalanceOp\n  //   {\n  //       Asset asset;\n  //       int64 amount;\n  //       Claimant claimants<10>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateClaimableBalanceOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BeginSponsoringFutureReservesOp\n  //   {\n  //       AccountID sponsoredID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BeginSponsoringFutureReservesOp\", [[\"sponsoredId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipType\n  //   {\n  //       REVOKE_SPONSORSHIP_LEDGER_ENTRY = 0,\n  //       REVOKE_SPONSORSHIP_SIGNER = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"RevokeSponsorshipType\", {\n    revokeSponsorshipLedgerEntry: 0,\n    revokeSponsorshipSigner: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"RevokeSponsorshipOpSigner\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"signerKey\", xdr.lookup(\"SignerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipOp switch (RevokeSponsorshipType type)\n  //   {\n  //   case REVOKE_SPONSORSHIP_LEDGER_ENTRY:\n  //       LedgerKey ledgerKey;\n  //   case REVOKE_SPONSORSHIP_SIGNER:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       } signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipOp\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipType\"),\n    switchName: \"type\",\n    switches: [[\"revokeSponsorshipLedgerEntry\", \"ledgerKey\"], [\"revokeSponsorshipSigner\", \"signer\"]],\n    arms: {\n      ledgerKey: xdr.lookup(\"LedgerKey\"),\n      signer: xdr.lookup(\"RevokeSponsorshipOpSigner\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackOp\n  //   {\n  //       Asset asset;\n  //       MuxedAccount from;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"from\", xdr.lookup(\"MuxedAccount\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetTrustLineFlagsOp\n  //   {\n  //       AccountID trustor;\n  //       Asset asset;\n  //   \n  //       uint32 clearFlags; // which flags to clear\n  //       uint32 setFlags;   // which flags to set\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetTrustLineFlagsOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"clearFlags\", xdr.lookup(\"Uint32\")], [\"setFlags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const LIQUIDITY_POOL_FEE_V18 = 30;\n  //\n  // ===========================================================================\n  xdr.const(\"LIQUIDITY_POOL_FEE_V18\", 30);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolDepositOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 maxAmountA; // maximum amount of first asset to deposit\n  //       int64 maxAmountB; // maximum amount of second asset to deposit\n  //       Price minPrice;   // minimum depositA/depositB\n  //       Price maxPrice;   // maximum depositA/depositB\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolDepositOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"maxAmountA\", xdr.lookup(\"Int64\")], [\"maxAmountB\", xdr.lookup(\"Int64\")], [\"minPrice\", xdr.lookup(\"Price\")], [\"maxPrice\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolWithdrawOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 amount;     // amount of pool shares to withdraw\n  //       int64 minAmountA; // minimum amount of first asset to withdraw\n  //       int64 minAmountB; // minimum amount of second asset to withdraw\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolWithdrawOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"amount\", xdr.lookup(\"Int64\")], [\"minAmountA\", xdr.lookup(\"Int64\")], [\"minAmountB\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationBody\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountOp\"], [\"payment\", \"paymentOp\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveOp\"], [\"manageSellOffer\", \"manageSellOfferOp\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferOp\"], [\"setOptions\", \"setOptionsOp\"], [\"changeTrust\", \"changeTrustOp\"], [\"allowTrust\", \"allowTrustOp\"], [\"accountMerge\", \"destination\"], [\"inflation\", xdr.void()], [\"manageData\", \"manageDataOp\"], [\"bumpSequence\", \"bumpSequenceOp\"], [\"manageBuyOffer\", \"manageBuyOfferOp\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendOp\"], [\"createClaimableBalance\", \"createClaimableBalanceOp\"], [\"claimClaimableBalance\", \"claimClaimableBalanceOp\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesOp\"], [\"endSponsoringFutureReserves\", xdr.void()], [\"revokeSponsorship\", \"revokeSponsorshipOp\"], [\"clawback\", \"clawbackOp\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceOp\"], [\"setTrustLineFlags\", \"setTrustLineFlagsOp\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositOp\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawOp\"]],\n    arms: {\n      createAccountOp: xdr.lookup(\"CreateAccountOp\"),\n      paymentOp: xdr.lookup(\"PaymentOp\"),\n      pathPaymentStrictReceiveOp: xdr.lookup(\"PathPaymentStrictReceiveOp\"),\n      manageSellOfferOp: xdr.lookup(\"ManageSellOfferOp\"),\n      createPassiveSellOfferOp: xdr.lookup(\"CreatePassiveSellOfferOp\"),\n      setOptionsOp: xdr.lookup(\"SetOptionsOp\"),\n      changeTrustOp: xdr.lookup(\"ChangeTrustOp\"),\n      allowTrustOp: xdr.lookup(\"AllowTrustOp\"),\n      destination: xdr.lookup(\"MuxedAccount\"),\n      manageDataOp: xdr.lookup(\"ManageDataOp\"),\n      bumpSequenceOp: xdr.lookup(\"BumpSequenceOp\"),\n      manageBuyOfferOp: xdr.lookup(\"ManageBuyOfferOp\"),\n      pathPaymentStrictSendOp: xdr.lookup(\"PathPaymentStrictSendOp\"),\n      createClaimableBalanceOp: xdr.lookup(\"CreateClaimableBalanceOp\"),\n      claimClaimableBalanceOp: xdr.lookup(\"ClaimClaimableBalanceOp\"),\n      beginSponsoringFutureReservesOp: xdr.lookup(\"BeginSponsoringFutureReservesOp\"),\n      revokeSponsorshipOp: xdr.lookup(\"RevokeSponsorshipOp\"),\n      clawbackOp: xdr.lookup(\"ClawbackOp\"),\n      clawbackClaimableBalanceOp: xdr.lookup(\"ClawbackClaimableBalanceOp\"),\n      setTrustLineFlagsOp: xdr.lookup(\"SetTrustLineFlagsOp\"),\n      liquidityPoolDepositOp: xdr.lookup(\"LiquidityPoolDepositOp\"),\n      liquidityPoolWithdrawOp: xdr.lookup(\"LiquidityPoolWithdrawOp\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Operation\n  //   {\n  //       // sourceAccount is the account used to run the operation\n  //       // if not set, the runtime defaults to \"sourceAccount\" specified at\n  //       // the transaction level\n  //       MuxedAccount* sourceAccount;\n  //   \n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Operation\", [[\"sourceAccount\", xdr.option(xdr.lookup(\"MuxedAccount\"))], [\"body\", xdr.lookup(\"OperationBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageOperationId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageRevokeId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")], [\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"asset\", xdr.lookup(\"Asset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HashIDPreimage switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       } operationID;\n  //   case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       } revokeID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HashIdPreimage\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeOpId\", \"operationId\"], [\"envelopeTypePoolRevokeOpId\", \"revokeId\"]],\n    arms: {\n      operationId: xdr.lookup(\"HashIdPreimageOperationId\"),\n      revokeId: xdr.lookup(\"HashIdPreimageRevokeId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum MemoType\n  //   {\n  //       MEMO_NONE = 0,\n  //       MEMO_TEXT = 1,\n  //       MEMO_ID = 2,\n  //       MEMO_HASH = 3,\n  //       MEMO_RETURN = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"MemoType\", {\n    memoNone: 0,\n    memoText: 1,\n    memoId: 2,\n    memoHash: 3,\n    memoReturn: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Memo switch (MemoType type)\n  //   {\n  //   case MEMO_NONE:\n  //       void;\n  //   case MEMO_TEXT:\n  //       string text<28>;\n  //   case MEMO_ID:\n  //       uint64 id;\n  //   case MEMO_HASH:\n  //       Hash hash; // the hash of what to pull from the content server\n  //   case MEMO_RETURN:\n  //       Hash retHash; // the hash of the tx you are rejecting\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Memo\", {\n    switchOn: xdr.lookup(\"MemoType\"),\n    switchName: \"type\",\n    switches: [[\"memoNone\", xdr.void()], [\"memoText\", \"text\"], [\"memoId\", \"id\"], [\"memoHash\", \"hash\"], [\"memoReturn\", \"retHash\"]],\n    arms: {\n      text: xdr.string(28),\n      id: xdr.lookup(\"Uint64\"),\n      hash: xdr.lookup(\"Hash\"),\n      retHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeBounds\n  //   {\n  //       TimePoint minTime;\n  //       TimePoint maxTime; // 0 here means no maxTime\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeBounds\", [[\"minTime\", xdr.lookup(\"TimePoint\")], [\"maxTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerBounds\n  //   {\n  //       uint32 minLedger;\n  //       uint32 maxLedger; // 0 here means no maxLedger\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerBounds\", [[\"minLedger\", xdr.lookup(\"Uint32\")], [\"maxLedger\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PreconditionsV2\n  //   {\n  //       TimeBounds* timeBounds;\n  //   \n  //       // Transaction only valid for ledger numbers n such that\n  //       // minLedger <= n < maxLedger (if maxLedger == 0, then\n  //       // only minLedger is checked)\n  //       LedgerBounds* ledgerBounds;\n  //   \n  //       // If NULL, only valid when sourceAccount's sequence number\n  //       // is seqNum - 1.  Otherwise, valid when sourceAccount's\n  //       // sequence number n satisfies minSeqNum <= n < tx.seqNum.\n  //       // Note that after execution the account's sequence number\n  //       // is always raised to tx.seqNum, and a transaction is not\n  //       // valid if tx.seqNum is too high to ensure replay protection.\n  //       SequenceNumber* minSeqNum;\n  //   \n  //       // For the transaction to be valid, the current ledger time must\n  //       // be at least minSeqAge greater than sourceAccount's seqTime.\n  //       Duration minSeqAge;\n  //   \n  //       // For the transaction to be valid, the current ledger number\n  //       // must be at least minSeqLedgerGap greater than sourceAccount's\n  //       // seqLedger.\n  //       uint32 minSeqLedgerGap;\n  //   \n  //       // For the transaction to be valid, there must be a signature\n  //       // corresponding to every Signer in this array, even if the\n  //       // signature is not otherwise required by the sourceAccount or\n  //       // operations.\n  //       SignerKey extraSigners<2>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PreconditionsV2\", [[\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"ledgerBounds\", xdr.option(xdr.lookup(\"LedgerBounds\"))], [\"minSeqNum\", xdr.option(xdr.lookup(\"SequenceNumber\"))], [\"minSeqAge\", xdr.lookup(\"Duration\")], [\"minSeqLedgerGap\", xdr.lookup(\"Uint32\")], [\"extraSigners\", xdr.varArray(xdr.lookup(\"SignerKey\"), 2)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum PreconditionType\n  //   {\n  //       PRECOND_NONE = 0,\n  //       PRECOND_TIME = 1,\n  //       PRECOND_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PreconditionType\", {\n    precondNone: 0,\n    precondTime: 1,\n    precondV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Preconditions switch (PreconditionType type)\n  //   {\n  //   case PRECOND_NONE:\n  //       void;\n  //   case PRECOND_TIME:\n  //       TimeBounds timeBounds;\n  //   case PRECOND_V2:\n  //       PreconditionsV2 v2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Preconditions\", {\n    switchOn: xdr.lookup(\"PreconditionType\"),\n    switchName: \"type\",\n    switches: [[\"precondNone\", xdr.void()], [\"precondTime\", \"timeBounds\"], [\"precondV2\", \"v2\"]],\n    arms: {\n      timeBounds: xdr.lookup(\"TimeBounds\"),\n      v2: xdr.lookup(\"PreconditionsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_OPS_PER_TX = 100;\n  //\n  // ===========================================================================\n  xdr.const(\"MAX_OPS_PER_TX\", 100);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionV0Ext\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0\n  //   {\n  //       uint256 sourceAccountEd25519;\n  //       uint32 fee;\n  //       SequenceNumber seqNum;\n  //       TimeBounds* timeBounds;\n  //       Memo memo;\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0\", [[\"sourceAccountEd25519\", xdr.lookup(\"Uint256\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionV0Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0Envelope\n  //   {\n  //       TransactionV0 tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0Envelope\", [[\"tx\", xdr.lookup(\"TransactionV0\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Transaction\n  //   {\n  //       // account used to run the transaction\n  //       MuxedAccount sourceAccount;\n  //   \n  //       // the fee the sourceAccount will pay\n  //       uint32 fee;\n  //   \n  //       // sequence number to consume in the account\n  //       SequenceNumber seqNum;\n  //   \n  //       // validity conditions\n  //       Preconditions cond;\n  //   \n  //       Memo memo;\n  //   \n  //       Operation operations<MAX_OPS_PER_TX>;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Transaction\", [[\"sourceAccount\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"cond\", xdr.lookup(\"Preconditions\")], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV1Envelope\n  //   {\n  //       Transaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV1Envelope\", [[\"tx\", xdr.lookup(\"Transaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionInnerTx\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TransactionV1Envelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransaction\n  //   {\n  //       MuxedAccount feeSource;\n  //       int64 fee;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //       innerTx;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransaction\", [[\"feeSource\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Int64\")], [\"innerTx\", xdr.lookup(\"FeeBumpTransactionInnerTx\")], [\"ext\", xdr.lookup(\"FeeBumpTransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransactionEnvelope\n  //   {\n  //       FeeBumpTransaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransactionEnvelope\", [[\"tx\", xdr.lookup(\"FeeBumpTransaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionEnvelope switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_TX_V0:\n  //       TransactionV0Envelope v0;\n  //   case ENVELOPE_TYPE_TX:\n  //       TransactionV1Envelope v1;\n  //   case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //       FeeBumpTransactionEnvelope feeBump;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionEnvelope\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTxV0\", \"v0\"], [\"envelopeTypeTx\", \"v1\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      v0: xdr.lookup(\"TransactionV0Envelope\"),\n      v1: xdr.lookup(\"TransactionV1Envelope\"),\n      feeBump: xdr.lookup(\"FeeBumpTransactionEnvelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionSignaturePayloadTaggedTransaction\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"tx\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      tx: xdr.lookup(\"Transaction\"),\n      feeBump: xdr.lookup(\"FeeBumpTransaction\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSignaturePayload\n  //   {\n  //       Hash networkId;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //       taggedTransaction;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSignaturePayload\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"taggedTransaction\", xdr.lookup(\"TransactionSignaturePayloadTaggedTransaction\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimAtomType\n  //   {\n  //       CLAIM_ATOM_TYPE_V0 = 0,\n  //       CLAIM_ATOM_TYPE_ORDER_BOOK = 1,\n  //       CLAIM_ATOM_TYPE_LIQUIDITY_POOL = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimAtomType\", {\n    claimAtomTypeV0: 0,\n    claimAtomTypeOrderBook: 1,\n    claimAtomTypeLiquidityPool: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtomV0\n  //   {\n  //       // emitted to identify the offer\n  //       uint256 sellerEd25519; // Account that owns the offer\n  //       int64 offerID;\n  //   \n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //   \n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtomV0\", [[\"sellerEd25519\", xdr.lookup(\"Uint256\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtom\n  //   {\n  //       // emitted to identify the offer\n  //       AccountID sellerID; // Account that owns the offer\n  //       int64 offerID;\n  //   \n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //   \n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtom\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimLiquidityAtom\n  //   {\n  //       PoolID liquidityPoolID;\n  //   \n  //       // amount and asset taken from the pool\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //   \n  //       // amount and asset sent to the pool\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimLiquidityAtom\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimAtom switch (ClaimAtomType type)\n  //   {\n  //   case CLAIM_ATOM_TYPE_V0:\n  //       ClaimOfferAtomV0 v0;\n  //   case CLAIM_ATOM_TYPE_ORDER_BOOK:\n  //       ClaimOfferAtom orderBook;\n  //   case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:\n  //       ClaimLiquidityAtom liquidityPool;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimAtom\", {\n    switchOn: xdr.lookup(\"ClaimAtomType\"),\n    switchName: \"type\",\n    switches: [[\"claimAtomTypeV0\", \"v0\"], [\"claimAtomTypeOrderBook\", \"orderBook\"], [\"claimAtomTypeLiquidityPool\", \"liquidityPool\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimOfferAtomV0\"),\n      orderBook: xdr.lookup(\"ClaimOfferAtom\"),\n      liquidityPool: xdr.lookup(\"ClaimLiquidityAtom\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateAccountResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CREATE_ACCOUNT_SUCCESS = 0, // account was created\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       CREATE_ACCOUNT_MALFORMED = -1,   // invalid destination\n  //       CREATE_ACCOUNT_UNDERFUNDED = -2, // not enough funds in source account\n  //       CREATE_ACCOUNT_LOW_RESERVE =\n  //           -3, // would create an account below the min reserve\n  //       CREATE_ACCOUNT_ALREADY_EXIST = -4 // account already exists\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"CreateAccountResultCode\", {\n    createAccountSuccess: 0,\n    createAccountMalformed: -1,\n    createAccountUnderfunded: -2,\n    createAccountLowReserve: -3,\n    createAccountAlreadyExist: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateAccountResult switch (CreateAccountResultCode code)\n  //   {\n  //   case CREATE_ACCOUNT_SUCCESS:\n  //       void;\n  //   case CREATE_ACCOUNT_MALFORMED:\n  //   case CREATE_ACCOUNT_UNDERFUNDED:\n  //   case CREATE_ACCOUNT_LOW_RESERVE:\n  //   case CREATE_ACCOUNT_ALREADY_EXIST:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateAccountResult\", {\n    switchOn: xdr.lookup(\"CreateAccountResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createAccountSuccess\", xdr.void()], [\"createAccountMalformed\", xdr.void()], [\"createAccountUnderfunded\", xdr.void()], [\"createAccountLowReserve\", xdr.void()], [\"createAccountAlreadyExist\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PaymentResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PAYMENT_SUCCESS = 0, // payment successfully completed\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       PAYMENT_MALFORMED = -1,          // bad input\n  //       PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account\n  //       PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account\n  //       PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer\n  //       PAYMENT_NO_DESTINATION = -5,     // destination account does not exist\n  //       PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset\n  //       PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset\n  //       PAYMENT_LINE_FULL = -8,      // destination would go above their limit\n  //       PAYMENT_NO_ISSUER = -9       // missing issuer on asset\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PaymentResultCode\", {\n    paymentSuccess: 0,\n    paymentMalformed: -1,\n    paymentUnderfunded: -2,\n    paymentSrcNoTrust: -3,\n    paymentSrcNotAuthorized: -4,\n    paymentNoDestination: -5,\n    paymentNoTrust: -6,\n    paymentNotAuthorized: -7,\n    paymentLineFull: -8,\n    paymentNoIssuer: -9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PaymentResult switch (PaymentResultCode code)\n  //   {\n  //   case PAYMENT_SUCCESS:\n  //       void;\n  //   case PAYMENT_MALFORMED:\n  //   case PAYMENT_UNDERFUNDED:\n  //   case PAYMENT_SRC_NO_TRUST:\n  //   case PAYMENT_SRC_NOT_AUTHORIZED:\n  //   case PAYMENT_NO_DESTINATION:\n  //   case PAYMENT_NO_TRUST:\n  //   case PAYMENT_NOT_AUTHORIZED:\n  //   case PAYMENT_LINE_FULL:\n  //   case PAYMENT_NO_ISSUER:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PaymentResult\", {\n    switchOn: xdr.lookup(\"PaymentResultCode\"),\n    switchName: \"code\",\n    switches: [[\"paymentSuccess\", xdr.void()], [\"paymentMalformed\", xdr.void()], [\"paymentUnderfunded\", xdr.void()], [\"paymentSrcNoTrust\", xdr.void()], [\"paymentSrcNotAuthorized\", xdr.void()], [\"paymentNoDestination\", xdr.void()], [\"paymentNoTrust\", xdr.void()], [\"paymentNotAuthorized\", xdr.void()], [\"paymentLineFull\", xdr.void()], [\"paymentNoIssuer\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictReceiveResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_SUCCESS = 0, // success\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL =\n  //           -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX = -12 // could not satisfy sendmax\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PathPaymentStrictReceiveResultCode\", {\n    pathPaymentStrictReceiveSuccess: 0,\n    pathPaymentStrictReceiveMalformed: -1,\n    pathPaymentStrictReceiveUnderfunded: -2,\n    pathPaymentStrictReceiveSrcNoTrust: -3,\n    pathPaymentStrictReceiveSrcNotAuthorized: -4,\n    pathPaymentStrictReceiveNoDestination: -5,\n    pathPaymentStrictReceiveNoTrust: -6,\n    pathPaymentStrictReceiveNotAuthorized: -7,\n    pathPaymentStrictReceiveLineFull: -8,\n    pathPaymentStrictReceiveNoIssuer: -9,\n    pathPaymentStrictReceiveTooFewOffers: -10,\n    pathPaymentStrictReceiveOfferCrossSelf: -11,\n    pathPaymentStrictReceiveOverSendmax: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SimplePaymentResult\n  //   {\n  //       AccountID destination;\n  //       Asset asset;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SimplePaymentResult\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictReceiveResult switch (\n  //       PathPaymentStrictReceiveResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictReceiveResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictReceiveResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictReceiveSuccess\", \"success\"], [\"pathPaymentStrictReceiveMalformed\", xdr.void()], [\"pathPaymentStrictReceiveUnderfunded\", xdr.void()], [\"pathPaymentStrictReceiveSrcNoTrust\", xdr.void()], [\"pathPaymentStrictReceiveSrcNotAuthorized\", xdr.void()], [\"pathPaymentStrictReceiveNoDestination\", xdr.void()], [\"pathPaymentStrictReceiveNoTrust\", xdr.void()], [\"pathPaymentStrictReceiveNotAuthorized\", xdr.void()], [\"pathPaymentStrictReceiveLineFull\", xdr.void()], [\"pathPaymentStrictReceiveNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictReceiveTooFewOffers\", xdr.void()], [\"pathPaymentStrictReceiveOfferCrossSelf\", xdr.void()], [\"pathPaymentStrictReceiveOverSendmax\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictReceiveResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictSendResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_SUCCESS = 0, // success\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_SEND_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_SEND_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_SEND_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_SEND_LINE_FULL = -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_SEND_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN = -12 // could not satisfy destMin\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PathPaymentStrictSendResultCode\", {\n    pathPaymentStrictSendSuccess: 0,\n    pathPaymentStrictSendMalformed: -1,\n    pathPaymentStrictSendUnderfunded: -2,\n    pathPaymentStrictSendSrcNoTrust: -3,\n    pathPaymentStrictSendSrcNotAuthorized: -4,\n    pathPaymentStrictSendNoDestination: -5,\n    pathPaymentStrictSendNoTrust: -6,\n    pathPaymentStrictSendNotAuthorized: -7,\n    pathPaymentStrictSendLineFull: -8,\n    pathPaymentStrictSendNoIssuer: -9,\n    pathPaymentStrictSendTooFewOffers: -10,\n    pathPaymentStrictSendOfferCrossSelf: -11,\n    pathPaymentStrictSendUnderDestmin: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_SEND_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_SEND_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictSendResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictSendResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictSendSuccess\", \"success\"], [\"pathPaymentStrictSendMalformed\", xdr.void()], [\"pathPaymentStrictSendUnderfunded\", xdr.void()], [\"pathPaymentStrictSendSrcNoTrust\", xdr.void()], [\"pathPaymentStrictSendSrcNotAuthorized\", xdr.void()], [\"pathPaymentStrictSendNoDestination\", xdr.void()], [\"pathPaymentStrictSendNoTrust\", xdr.void()], [\"pathPaymentStrictSendNotAuthorized\", xdr.void()], [\"pathPaymentStrictSendLineFull\", xdr.void()], [\"pathPaymentStrictSendNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictSendTooFewOffers\", xdr.void()], [\"pathPaymentStrictSendOfferCrossSelf\", xdr.void()], [\"pathPaymentStrictSendUnderDestmin\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictSendResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageSellOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_SELL_OFFER_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_SELL_OFFER_MALFORMED = -1, // generated offer would be invalid\n  //       MANAGE_SELL_OFFER_SELL_NO_TRUST =\n  //           -2,                              // no trust line for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_TRUST = -3, // no trust line for what we're buying\n  //       MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_SELL_OFFER_LINE_FULL = -6, // can't receive more of what it's buying\n  //       MANAGE_SELL_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_SELL_OFFER_CROSS_SELF =\n  //           -8, // would cross an offer from the same user\n  //       MANAGE_SELL_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //   \n  //       // update errors\n  //       MANAGE_SELL_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //   \n  //       MANAGE_SELL_OFFER_LOW_RESERVE =\n  //           -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageSellOfferResultCode\", {\n    manageSellOfferSuccess: 0,\n    manageSellOfferMalformed: -1,\n    manageSellOfferSellNoTrust: -2,\n    manageSellOfferBuyNoTrust: -3,\n    manageSellOfferSellNotAuthorized: -4,\n    manageSellOfferBuyNotAuthorized: -5,\n    manageSellOfferLineFull: -6,\n    manageSellOfferUnderfunded: -7,\n    manageSellOfferCrossSelf: -8,\n    manageSellOfferSellNoIssuer: -9,\n    manageSellOfferBuyNoIssuer: -10,\n    manageSellOfferNotFound: -11,\n    manageSellOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageOfferEffect\n  //   {\n  //       MANAGE_OFFER_CREATED = 0,\n  //       MANAGE_OFFER_UPDATED = 1,\n  //       MANAGE_OFFER_DELETED = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageOfferEffect\", {\n    manageOfferCreated: 0,\n    manageOfferUpdated: 1,\n    manageOfferDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ManageOfferSuccessResultOffer\", {\n    switchOn: xdr.lookup(\"ManageOfferEffect\"),\n    switchName: \"effect\",\n    switches: [[\"manageOfferCreated\", \"offer\"], [\"manageOfferUpdated\", \"offer\"], [\"manageOfferDeleted\", xdr.void()]],\n    arms: {\n      offer: xdr.lookup(\"OfferEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageOfferSuccessResult\n  //   {\n  //       // offers that got claimed while creating this offer\n  //       ClaimAtom offersClaimed<>;\n  //   \n  //       union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //       offer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageOfferSuccessResult\", [[\"offersClaimed\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"offer\", xdr.lookup(\"ManageOfferSuccessResultOffer\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ManageSellOfferResult switch (ManageSellOfferResultCode code)\n  //   {\n  //   case MANAGE_SELL_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_SELL_OFFER_MALFORMED:\n  //   case MANAGE_SELL_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_LINE_FULL:\n  //   case MANAGE_SELL_OFFER_UNDERFUNDED:\n  //   case MANAGE_SELL_OFFER_CROSS_SELF:\n  //   case MANAGE_SELL_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_NOT_FOUND:\n  //   case MANAGE_SELL_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageSellOfferResult\", {\n    switchOn: xdr.lookup(\"ManageSellOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageSellOfferSuccess\", \"success\"], [\"manageSellOfferMalformed\", xdr.void()], [\"manageSellOfferSellNoTrust\", xdr.void()], [\"manageSellOfferBuyNoTrust\", xdr.void()], [\"manageSellOfferSellNotAuthorized\", xdr.void()], [\"manageSellOfferBuyNotAuthorized\", xdr.void()], [\"manageSellOfferLineFull\", xdr.void()], [\"manageSellOfferUnderfunded\", xdr.void()], [\"manageSellOfferCrossSelf\", xdr.void()], [\"manageSellOfferSellNoIssuer\", xdr.void()], [\"manageSellOfferBuyNoIssuer\", xdr.void()], [\"manageSellOfferNotFound\", xdr.void()], [\"manageSellOfferLowReserve\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageBuyOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_BUY_OFFER_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_BUY_OFFER_MALFORMED = -1,     // generated offer would be invalid\n  //       MANAGE_BUY_OFFER_SELL_NO_TRUST = -2, // no trust line for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_TRUST = -3,  // no trust line for what we're buying\n  //       MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_BUY_OFFER_LINE_FULL = -6,   // can't receive more of what it's buying\n  //       MANAGE_BUY_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_BUY_OFFER_CROSS_SELF = -8, // would cross an offer from the same user\n  //       MANAGE_BUY_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //   \n  //       // update errors\n  //       MANAGE_BUY_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //   \n  //       MANAGE_BUY_OFFER_LOW_RESERVE = -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageBuyOfferResultCode\", {\n    manageBuyOfferSuccess: 0,\n    manageBuyOfferMalformed: -1,\n    manageBuyOfferSellNoTrust: -2,\n    manageBuyOfferBuyNoTrust: -3,\n    manageBuyOfferSellNotAuthorized: -4,\n    manageBuyOfferBuyNotAuthorized: -5,\n    manageBuyOfferLineFull: -6,\n    manageBuyOfferUnderfunded: -7,\n    manageBuyOfferCrossSelf: -8,\n    manageBuyOfferSellNoIssuer: -9,\n    manageBuyOfferBuyNoIssuer: -10,\n    manageBuyOfferNotFound: -11,\n    manageBuyOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageBuyOfferResult switch (ManageBuyOfferResultCode code)\n  //   {\n  //   case MANAGE_BUY_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_BUY_OFFER_MALFORMED:\n  //   case MANAGE_BUY_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_LINE_FULL:\n  //   case MANAGE_BUY_OFFER_UNDERFUNDED:\n  //   case MANAGE_BUY_OFFER_CROSS_SELF:\n  //   case MANAGE_BUY_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_NOT_FOUND:\n  //   case MANAGE_BUY_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageBuyOfferResult\", {\n    switchOn: xdr.lookup(\"ManageBuyOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageBuyOfferSuccess\", \"success\"], [\"manageBuyOfferMalformed\", xdr.void()], [\"manageBuyOfferSellNoTrust\", xdr.void()], [\"manageBuyOfferBuyNoTrust\", xdr.void()], [\"manageBuyOfferSellNotAuthorized\", xdr.void()], [\"manageBuyOfferBuyNotAuthorized\", xdr.void()], [\"manageBuyOfferLineFull\", xdr.void()], [\"manageBuyOfferUnderfunded\", xdr.void()], [\"manageBuyOfferCrossSelf\", xdr.void()], [\"manageBuyOfferSellNoIssuer\", xdr.void()], [\"manageBuyOfferBuyNoIssuer\", xdr.void()], [\"manageBuyOfferNotFound\", xdr.void()], [\"manageBuyOfferLowReserve\", xdr.void()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetOptionsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_OPTIONS_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       SET_OPTIONS_LOW_RESERVE = -1,      // not enough funds to add a signer\n  //       SET_OPTIONS_TOO_MANY_SIGNERS = -2, // max number of signers already reached\n  //       SET_OPTIONS_BAD_FLAGS = -3,        // invalid combination of clear/set flags\n  //       SET_OPTIONS_INVALID_INFLATION = -4,      // inflation account does not exist\n  //       SET_OPTIONS_CANT_CHANGE = -5,            // can no longer change this option\n  //       SET_OPTIONS_UNKNOWN_FLAG = -6,           // can't set an unknown flag\n  //       SET_OPTIONS_THRESHOLD_OUT_OF_RANGE = -7, // bad value for weight/threshold\n  //       SET_OPTIONS_BAD_SIGNER = -8,             // signer cannot be masterkey\n  //       SET_OPTIONS_INVALID_HOME_DOMAIN = -9,    // malformed home domain\n  //       SET_OPTIONS_AUTH_REVOCABLE_REQUIRED =\n  //           -10 // auth revocable is required for clawback\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SetOptionsResultCode\", {\n    setOptionsSuccess: 0,\n    setOptionsLowReserve: -1,\n    setOptionsTooManySigners: -2,\n    setOptionsBadFlags: -3,\n    setOptionsInvalidInflation: -4,\n    setOptionsCantChange: -5,\n    setOptionsUnknownFlag: -6,\n    setOptionsThresholdOutOfRange: -7,\n    setOptionsBadSigner: -8,\n    setOptionsInvalidHomeDomain: -9,\n    setOptionsAuthRevocableRequired: -10\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetOptionsResult switch (SetOptionsResultCode code)\n  //   {\n  //   case SET_OPTIONS_SUCCESS:\n  //       void;\n  //   case SET_OPTIONS_LOW_RESERVE:\n  //   case SET_OPTIONS_TOO_MANY_SIGNERS:\n  //   case SET_OPTIONS_BAD_FLAGS:\n  //   case SET_OPTIONS_INVALID_INFLATION:\n  //   case SET_OPTIONS_CANT_CHANGE:\n  //   case SET_OPTIONS_UNKNOWN_FLAG:\n  //   case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:\n  //   case SET_OPTIONS_BAD_SIGNER:\n  //   case SET_OPTIONS_INVALID_HOME_DOMAIN:\n  //   case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetOptionsResult\", {\n    switchOn: xdr.lookup(\"SetOptionsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setOptionsSuccess\", xdr.void()], [\"setOptionsLowReserve\", xdr.void()], [\"setOptionsTooManySigners\", xdr.void()], [\"setOptionsBadFlags\", xdr.void()], [\"setOptionsInvalidInflation\", xdr.void()], [\"setOptionsCantChange\", xdr.void()], [\"setOptionsUnknownFlag\", xdr.void()], [\"setOptionsThresholdOutOfRange\", xdr.void()], [\"setOptionsBadSigner\", xdr.void()], [\"setOptionsInvalidHomeDomain\", xdr.void()], [\"setOptionsAuthRevocableRequired\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ChangeTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CHANGE_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       CHANGE_TRUST_MALFORMED = -1,     // bad input\n  //       CHANGE_TRUST_NO_ISSUER = -2,     // could not find issuer\n  //       CHANGE_TRUST_INVALID_LIMIT = -3, // cannot drop limit below balance\n  //                                        // cannot create with a limit of 0\n  //       CHANGE_TRUST_LOW_RESERVE =\n  //           -4, // not enough funds to create a new trust line,\n  //       CHANGE_TRUST_SELF_NOT_ALLOWED = -5,   // trusting self is not allowed\n  //       CHANGE_TRUST_TRUST_LINE_MISSING = -6, // Asset trustline is missing for pool\n  //       CHANGE_TRUST_CANNOT_DELETE =\n  //           -7, // Asset trustline is still referenced in a pool\n  //       CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES =\n  //           -8 // Asset trustline is deauthorized\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ChangeTrustResultCode\", {\n    changeTrustSuccess: 0,\n    changeTrustMalformed: -1,\n    changeTrustNoIssuer: -2,\n    changeTrustInvalidLimit: -3,\n    changeTrustLowReserve: -4,\n    changeTrustSelfNotAllowed: -5,\n    changeTrustTrustLineMissing: -6,\n    changeTrustCannotDelete: -7,\n    changeTrustNotAuthMaintainLiabilities: -8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustResult switch (ChangeTrustResultCode code)\n  //   {\n  //   case CHANGE_TRUST_SUCCESS:\n  //       void;\n  //   case CHANGE_TRUST_MALFORMED:\n  //   case CHANGE_TRUST_NO_ISSUER:\n  //   case CHANGE_TRUST_INVALID_LIMIT:\n  //   case CHANGE_TRUST_LOW_RESERVE:\n  //   case CHANGE_TRUST_SELF_NOT_ALLOWED:\n  //   case CHANGE_TRUST_TRUST_LINE_MISSING:\n  //   case CHANGE_TRUST_CANNOT_DELETE:\n  //   case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustResult\", {\n    switchOn: xdr.lookup(\"ChangeTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"changeTrustSuccess\", xdr.void()], [\"changeTrustMalformed\", xdr.void()], [\"changeTrustNoIssuer\", xdr.void()], [\"changeTrustInvalidLimit\", xdr.void()], [\"changeTrustLowReserve\", xdr.void()], [\"changeTrustSelfNotAllowed\", xdr.void()], [\"changeTrustTrustLineMissing\", xdr.void()], [\"changeTrustCannotDelete\", xdr.void()], [\"changeTrustNotAuthMaintainLiabilities\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AllowTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ALLOW_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ALLOW_TRUST_MALFORMED = -1,     // asset is not ASSET_TYPE_ALPHANUM\n  //       ALLOW_TRUST_NO_TRUST_LINE = -2, // trustor does not have a trustline\n  //                                       // source account does not require trust\n  //       ALLOW_TRUST_TRUST_NOT_REQUIRED = -3,\n  //       ALLOW_TRUST_CANT_REVOKE = -4,      // source account can't revoke trust,\n  //       ALLOW_TRUST_SELF_NOT_ALLOWED = -5, // trusting self is not allowed\n  //       ALLOW_TRUST_LOW_RESERVE = -6       // claimable balances can't be created\n  //                                          // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AllowTrustResultCode\", {\n    allowTrustSuccess: 0,\n    allowTrustMalformed: -1,\n    allowTrustNoTrustLine: -2,\n    allowTrustTrustNotRequired: -3,\n    allowTrustCantRevoke: -4,\n    allowTrustSelfNotAllowed: -5,\n    allowTrustLowReserve: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AllowTrustResult switch (AllowTrustResultCode code)\n  //   {\n  //   case ALLOW_TRUST_SUCCESS:\n  //       void;\n  //   case ALLOW_TRUST_MALFORMED:\n  //   case ALLOW_TRUST_NO_TRUST_LINE:\n  //   case ALLOW_TRUST_TRUST_NOT_REQUIRED:\n  //   case ALLOW_TRUST_CANT_REVOKE:\n  //   case ALLOW_TRUST_SELF_NOT_ALLOWED:\n  //   case ALLOW_TRUST_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AllowTrustResult\", {\n    switchOn: xdr.lookup(\"AllowTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"allowTrustSuccess\", xdr.void()], [\"allowTrustMalformed\", xdr.void()], [\"allowTrustNoTrustLine\", xdr.void()], [\"allowTrustTrustNotRequired\", xdr.void()], [\"allowTrustCantRevoke\", xdr.void()], [\"allowTrustSelfNotAllowed\", xdr.void()], [\"allowTrustLowReserve\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountMergeResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ACCOUNT_MERGE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ACCOUNT_MERGE_MALFORMED = -1,       // can't merge onto itself\n  //       ACCOUNT_MERGE_NO_ACCOUNT = -2,      // destination does not exist\n  //       ACCOUNT_MERGE_IMMUTABLE_SET = -3,   // source account has AUTH_IMMUTABLE set\n  //       ACCOUNT_MERGE_HAS_SUB_ENTRIES = -4, // account has trust lines/offers\n  //       ACCOUNT_MERGE_SEQNUM_TOO_FAR = -5,  // sequence number is over max allowed\n  //       ACCOUNT_MERGE_DEST_FULL = -6,       // can't add source balance to\n  //                                           // destination balance\n  //       ACCOUNT_MERGE_IS_SPONSOR = -7       // can't merge account that is a sponsor\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"AccountMergeResultCode\", {\n    accountMergeSuccess: 0,\n    accountMergeMalformed: -1,\n    accountMergeNoAccount: -2,\n    accountMergeImmutableSet: -3,\n    accountMergeHasSubEntries: -4,\n    accountMergeSeqnumTooFar: -5,\n    accountMergeDestFull: -6,\n    accountMergeIsSponsor: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AccountMergeResult switch (AccountMergeResultCode code)\n  //   {\n  //   case ACCOUNT_MERGE_SUCCESS:\n  //       int64 sourceAccountBalance; // how much got transferred from source account\n  //   case ACCOUNT_MERGE_MALFORMED:\n  //   case ACCOUNT_MERGE_NO_ACCOUNT:\n  //   case ACCOUNT_MERGE_IMMUTABLE_SET:\n  //   case ACCOUNT_MERGE_HAS_SUB_ENTRIES:\n  //   case ACCOUNT_MERGE_SEQNUM_TOO_FAR:\n  //   case ACCOUNT_MERGE_DEST_FULL:\n  //   case ACCOUNT_MERGE_IS_SPONSOR:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AccountMergeResult\", {\n    switchOn: xdr.lookup(\"AccountMergeResultCode\"),\n    switchName: \"code\",\n    switches: [[\"accountMergeSuccess\", \"sourceAccountBalance\"], [\"accountMergeMalformed\", xdr.void()], [\"accountMergeNoAccount\", xdr.void()], [\"accountMergeImmutableSet\", xdr.void()], [\"accountMergeHasSubEntries\", xdr.void()], [\"accountMergeSeqnumTooFar\", xdr.void()], [\"accountMergeDestFull\", xdr.void()], [\"accountMergeIsSponsor\", xdr.void()]],\n    arms: {\n      sourceAccountBalance: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InflationResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INFLATION_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       INFLATION_NOT_TIME = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"InflationResultCode\", {\n    inflationSuccess: 0,\n    inflationNotTime: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InflationPayout // or use PaymentResultAtom to limit types?\n  //   {\n  //       AccountID destination;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InflationPayout\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union InflationResult switch (InflationResultCode code)\n  //   {\n  //   case INFLATION_SUCCESS:\n  //       InflationPayout payouts<>;\n  //   case INFLATION_NOT_TIME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InflationResult\", {\n    switchOn: xdr.lookup(\"InflationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"inflationSuccess\", \"payouts\"], [\"inflationNotTime\", xdr.void()]],\n    arms: {\n      payouts: xdr.varArray(xdr.lookup(\"InflationPayout\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageDataResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_DATA_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_DATA_NOT_SUPPORTED_YET =\n  //           -1, // The network hasn't moved to this protocol change yet\n  //       MANAGE_DATA_NAME_NOT_FOUND =\n  //           -2, // Trying to remove a Data Entry that isn't there\n  //       MANAGE_DATA_LOW_RESERVE = -3, // not enough funds to create a new Data Entry\n  //       MANAGE_DATA_INVALID_NAME = -4 // Name not a valid string\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ManageDataResultCode\", {\n    manageDataSuccess: 0,\n    manageDataNotSupportedYet: -1,\n    manageDataNameNotFound: -2,\n    manageDataLowReserve: -3,\n    manageDataInvalidName: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageDataResult switch (ManageDataResultCode code)\n  //   {\n  //   case MANAGE_DATA_SUCCESS:\n  //       void;\n  //   case MANAGE_DATA_NOT_SUPPORTED_YET:\n  //   case MANAGE_DATA_NAME_NOT_FOUND:\n  //   case MANAGE_DATA_LOW_RESERVE:\n  //   case MANAGE_DATA_INVALID_NAME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageDataResult\", {\n    switchOn: xdr.lookup(\"ManageDataResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageDataSuccess\", xdr.void()], [\"manageDataNotSupportedYet\", xdr.void()], [\"manageDataNameNotFound\", xdr.void()], [\"manageDataLowReserve\", xdr.void()], [\"manageDataInvalidName\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BumpSequenceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BUMP_SEQUENCE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       BUMP_SEQUENCE_BAD_SEQ = -1 // `bumpTo` is not within bounds\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"BumpSequenceResultCode\", {\n    bumpSequenceSuccess: 0,\n    bumpSequenceBadSeq: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BumpSequenceResult switch (BumpSequenceResultCode code)\n  //   {\n  //   case BUMP_SEQUENCE_SUCCESS:\n  //       void;\n  //   case BUMP_SEQUENCE_BAD_SEQ:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BumpSequenceResult\", {\n    switchOn: xdr.lookup(\"BumpSequenceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"bumpSequenceSuccess\", xdr.void()], [\"bumpSequenceBadSeq\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateClaimableBalanceResultCode\n  //   {\n  //       CREATE_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CREATE_CLAIMABLE_BALANCE_MALFORMED = -1,\n  //       CREATE_CLAIMABLE_BALANCE_LOW_RESERVE = -2,\n  //       CREATE_CLAIMABLE_BALANCE_NO_TRUST = -3,\n  //       CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -4,\n  //       CREATE_CLAIMABLE_BALANCE_UNDERFUNDED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"CreateClaimableBalanceResultCode\", {\n    createClaimableBalanceSuccess: 0,\n    createClaimableBalanceMalformed: -1,\n    createClaimableBalanceLowReserve: -2,\n    createClaimableBalanceNoTrust: -3,\n    createClaimableBalanceNotAuthorized: -4,\n    createClaimableBalanceUnderfunded: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateClaimableBalanceResult switch (\n  //       CreateClaimableBalanceResultCode code)\n  //   {\n  //   case CREATE_CLAIMABLE_BALANCE_SUCCESS:\n  //       ClaimableBalanceID balanceID;\n  //   case CREATE_CLAIMABLE_BALANCE_MALFORMED:\n  //   case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:\n  //   case CREATE_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //   case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"CreateClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createClaimableBalanceSuccess\", \"balanceId\"], [\"createClaimableBalanceMalformed\", xdr.void()], [\"createClaimableBalanceLowReserve\", xdr.void()], [\"createClaimableBalanceNoTrust\", xdr.void()], [\"createClaimableBalanceNotAuthorized\", xdr.void()], [\"createClaimableBalanceUnderfunded\", xdr.void()]],\n    arms: {\n      balanceId: xdr.lookup(\"ClaimableBalanceId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimClaimableBalanceResultCode\n  //   {\n  //       CLAIM_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM = -2,\n  //       CLAIM_CLAIMABLE_BALANCE_LINE_FULL = -3,\n  //       CLAIM_CLAIMABLE_BALANCE_NO_TRUST = -4,\n  //       CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClaimClaimableBalanceResultCode\", {\n    claimClaimableBalanceSuccess: 0,\n    claimClaimableBalanceDoesNotExist: -1,\n    claimClaimableBalanceCannotClaim: -2,\n    claimClaimableBalanceLineFull: -3,\n    claimClaimableBalanceNoTrust: -4,\n    claimClaimableBalanceNotAuthorized: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)\n  //   {\n  //   case CLAIM_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:\n  //   case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:\n  //   case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClaimClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"claimClaimableBalanceSuccess\", xdr.void()], [\"claimClaimableBalanceDoesNotExist\", xdr.void()], [\"claimClaimableBalanceCannotClaim\", xdr.void()], [\"claimClaimableBalanceLineFull\", xdr.void()], [\"claimClaimableBalanceNoTrust\", xdr.void()], [\"claimClaimableBalanceNotAuthorized\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BeginSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED = -1,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED = -2,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"BeginSponsoringFutureReservesResultCode\", {\n    beginSponsoringFutureReservesSuccess: 0,\n    beginSponsoringFutureReservesMalformed: -1,\n    beginSponsoringFutureReservesAlreadySponsored: -2,\n    beginSponsoringFutureReservesRecursive: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BeginSponsoringFutureReservesResult switch (\n  //       BeginSponsoringFutureReservesResultCode code)\n  //   {\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BeginSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"BeginSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"beginSponsoringFutureReservesSuccess\", xdr.void()], [\"beginSponsoringFutureReservesMalformed\", xdr.void()], [\"beginSponsoringFutureReservesAlreadySponsored\", xdr.void()], [\"beginSponsoringFutureReservesRecursive\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EndSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"EndSponsoringFutureReservesResultCode\", {\n    endSponsoringFutureReservesSuccess: 0,\n    endSponsoringFutureReservesNotSponsored: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union EndSponsoringFutureReservesResult switch (\n  //       EndSponsoringFutureReservesResultCode code)\n  //   {\n  //   case END_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"EndSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"EndSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"endSponsoringFutureReservesSuccess\", xdr.void()], [\"endSponsoringFutureReservesNotSponsored\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       REVOKE_SPONSORSHIP_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       REVOKE_SPONSORSHIP_DOES_NOT_EXIST = -1,\n  //       REVOKE_SPONSORSHIP_NOT_SPONSOR = -2,\n  //       REVOKE_SPONSORSHIP_LOW_RESERVE = -3,\n  //       REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE = -4,\n  //       REVOKE_SPONSORSHIP_MALFORMED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"RevokeSponsorshipResultCode\", {\n    revokeSponsorshipSuccess: 0,\n    revokeSponsorshipDoesNotExist: -1,\n    revokeSponsorshipNotSponsor: -2,\n    revokeSponsorshipLowReserve: -3,\n    revokeSponsorshipOnlyTransferable: -4,\n    revokeSponsorshipMalformed: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)\n  //   {\n  //   case REVOKE_SPONSORSHIP_SUCCESS:\n  //       void;\n  //   case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:\n  //   case REVOKE_SPONSORSHIP_NOT_SPONSOR:\n  //   case REVOKE_SPONSORSHIP_LOW_RESERVE:\n  //   case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:\n  //   case REVOKE_SPONSORSHIP_MALFORMED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipResult\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipResultCode\"),\n    switchName: \"code\",\n    switches: [[\"revokeSponsorshipSuccess\", xdr.void()], [\"revokeSponsorshipDoesNotExist\", xdr.void()], [\"revokeSponsorshipNotSponsor\", xdr.void()], [\"revokeSponsorshipLowReserve\", xdr.void()], [\"revokeSponsorshipOnlyTransferable\", xdr.void()], [\"revokeSponsorshipMalformed\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_MALFORMED = -1,\n  //       CLAWBACK_NOT_CLAWBACK_ENABLED = -2,\n  //       CLAWBACK_NO_TRUST = -3,\n  //       CLAWBACK_UNDERFUNDED = -4\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClawbackResultCode\", {\n    clawbackSuccess: 0,\n    clawbackMalformed: -1,\n    clawbackNotClawbackEnabled: -2,\n    clawbackNoTrust: -3,\n    clawbackUnderfunded: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackResult switch (ClawbackResultCode code)\n  //   {\n  //   case CLAWBACK_SUCCESS:\n  //       void;\n  //   case CLAWBACK_MALFORMED:\n  //   case CLAWBACK_NOT_CLAWBACK_ENABLED:\n  //   case CLAWBACK_NO_TRUST:\n  //   case CLAWBACK_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackResult\", {\n    switchOn: xdr.lookup(\"ClawbackResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackSuccess\", xdr.void()], [\"clawbackMalformed\", xdr.void()], [\"clawbackNotClawbackEnabled\", xdr.void()], [\"clawbackNoTrust\", xdr.void()], [\"clawbackUnderfunded\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackClaimableBalanceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER = -2,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"ClawbackClaimableBalanceResultCode\", {\n    clawbackClaimableBalanceSuccess: 0,\n    clawbackClaimableBalanceDoesNotExist: -1,\n    clawbackClaimableBalanceNotIssuer: -2,\n    clawbackClaimableBalanceNotClawbackEnabled: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackClaimableBalanceResult switch (\n  //       ClawbackClaimableBalanceResultCode code)\n  //   {\n  //   case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClawbackClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackClaimableBalanceSuccess\", xdr.void()], [\"clawbackClaimableBalanceDoesNotExist\", xdr.void()], [\"clawbackClaimableBalanceNotIssuer\", xdr.void()], [\"clawbackClaimableBalanceNotClawbackEnabled\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetTrustLineFlagsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_TRUST_LINE_FLAGS_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       SET_TRUST_LINE_FLAGS_MALFORMED = -1,\n  //       SET_TRUST_LINE_FLAGS_NO_TRUST_LINE = -2,\n  //       SET_TRUST_LINE_FLAGS_CANT_REVOKE = -3,\n  //       SET_TRUST_LINE_FLAGS_INVALID_STATE = -4,\n  //       SET_TRUST_LINE_FLAGS_LOW_RESERVE = -5 // claimable balances can't be created\n  //                                             // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SetTrustLineFlagsResultCode\", {\n    setTrustLineFlagsSuccess: 0,\n    setTrustLineFlagsMalformed: -1,\n    setTrustLineFlagsNoTrustLine: -2,\n    setTrustLineFlagsCantRevoke: -3,\n    setTrustLineFlagsInvalidState: -4,\n    setTrustLineFlagsLowReserve: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code)\n  //   {\n  //   case SET_TRUST_LINE_FLAGS_SUCCESS:\n  //       void;\n  //   case SET_TRUST_LINE_FLAGS_MALFORMED:\n  //   case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE:\n  //   case SET_TRUST_LINE_FLAGS_CANT_REVOKE:\n  //   case SET_TRUST_LINE_FLAGS_INVALID_STATE:\n  //   case SET_TRUST_LINE_FLAGS_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetTrustLineFlagsResult\", {\n    switchOn: xdr.lookup(\"SetTrustLineFlagsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setTrustLineFlagsSuccess\", xdr.void()], [\"setTrustLineFlagsMalformed\", xdr.void()], [\"setTrustLineFlagsNoTrustLine\", xdr.void()], [\"setTrustLineFlagsCantRevoke\", xdr.void()], [\"setTrustLineFlagsInvalidState\", xdr.void()], [\"setTrustLineFlagsLowReserve\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolDepositResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_MALFORMED = -1,      // bad input\n  //       LIQUIDITY_POOL_DEPOSIT_NO_TRUST = -2,       // no trust line for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED = -3, // not authorized for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED = -4,    // not enough balance for one of\n  //                                                   // the assets\n  //       LIQUIDITY_POOL_DEPOSIT_LINE_FULL = -5,      // pool share trust line doesn't\n  //                                                   // have sufficient limit\n  //       LIQUIDITY_POOL_DEPOSIT_BAD_PRICE = -6,      // deposit price outside bounds\n  //       LIQUIDITY_POOL_DEPOSIT_POOL_FULL = -7       // pool reserves are full\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LiquidityPoolDepositResultCode\", {\n    liquidityPoolDepositSuccess: 0,\n    liquidityPoolDepositMalformed: -1,\n    liquidityPoolDepositNoTrust: -2,\n    liquidityPoolDepositNotAuthorized: -3,\n    liquidityPoolDepositUnderfunded: -4,\n    liquidityPoolDepositLineFull: -5,\n    liquidityPoolDepositBadPrice: -6,\n    liquidityPoolDepositPoolFull: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_DEPOSIT_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_DEPOSIT_MALFORMED:\n  //   case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:\n  //   case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:\n  //   case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:\n  //   case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:\n  //   case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolDepositResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolDepositResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolDepositSuccess\", xdr.void()], [\"liquidityPoolDepositMalformed\", xdr.void()], [\"liquidityPoolDepositNoTrust\", xdr.void()], [\"liquidityPoolDepositNotAuthorized\", xdr.void()], [\"liquidityPoolDepositUnderfunded\", xdr.void()], [\"liquidityPoolDepositLineFull\", xdr.void()], [\"liquidityPoolDepositBadPrice\", xdr.void()], [\"liquidityPoolDepositPoolFull\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolWithdrawResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,\n  //   \n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input\n  //       LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the\n  //                                                  // assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the\n  //                                                  // pool share\n  //       LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one\n  //                                                  // of the assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"LiquidityPoolWithdrawResultCode\", {\n    liquidityPoolWithdrawSuccess: 0,\n    liquidityPoolWithdrawMalformed: -1,\n    liquidityPoolWithdrawNoTrust: -2,\n    liquidityPoolWithdrawUnderfunded: -3,\n    liquidityPoolWithdrawLineFull: -4,\n    liquidityPoolWithdrawUnderMinimum: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_WITHDRAW_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_WITHDRAW_MALFORMED:\n  //   case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolWithdrawResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolWithdrawResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolWithdrawSuccess\", xdr.void()], [\"liquidityPoolWithdrawMalformed\", xdr.void()], [\"liquidityPoolWithdrawNoTrust\", xdr.void()], [\"liquidityPoolWithdrawUnderfunded\", xdr.void()], [\"liquidityPoolWithdrawLineFull\", xdr.void()], [\"liquidityPoolWithdrawUnderMinimum\", xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationResultCode\n  //   {\n  //       opINNER = 0, // inner object result is valid\n  //   \n  //       opBAD_AUTH = -1,            // too few valid signatures / wrong network\n  //       opNO_ACCOUNT = -2,          // source account was not found\n  //       opNOT_SUPPORTED = -3,       // operation not supported at this time\n  //       opTOO_MANY_SUBENTRIES = -4, // max number of subentries already reached\n  //       opEXCEEDED_WORK_LIMIT = -5, // operation did too much work\n  //       opTOO_MANY_SPONSORING = -6  // account is sponsoring too many entries\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"OperationResultCode\", {\n    opInner: 0,\n    opBadAuth: -1,\n    opNoAccount: -2,\n    opNotSupported: -3,\n    opTooManySubentries: -4,\n    opExceededWorkLimit: -5,\n    opTooManySponsoring: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResultTr\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountResult\"], [\"payment\", \"paymentResult\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveResult\"], [\"manageSellOffer\", \"manageSellOfferResult\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferResult\"], [\"setOptions\", \"setOptionsResult\"], [\"changeTrust\", \"changeTrustResult\"], [\"allowTrust\", \"allowTrustResult\"], [\"accountMerge\", \"accountMergeResult\"], [\"inflation\", \"inflationResult\"], [\"manageData\", \"manageDataResult\"], [\"bumpSequence\", \"bumpSeqResult\"], [\"manageBuyOffer\", \"manageBuyOfferResult\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendResult\"], [\"createClaimableBalance\", \"createClaimableBalanceResult\"], [\"claimClaimableBalance\", \"claimClaimableBalanceResult\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesResult\"], [\"endSponsoringFutureReserves\", \"endSponsoringFutureReservesResult\"], [\"revokeSponsorship\", \"revokeSponsorshipResult\"], [\"clawback\", \"clawbackResult\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceResult\"], [\"setTrustLineFlags\", \"setTrustLineFlagsResult\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositResult\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawResult\"]],\n    arms: {\n      createAccountResult: xdr.lookup(\"CreateAccountResult\"),\n      paymentResult: xdr.lookup(\"PaymentResult\"),\n      pathPaymentStrictReceiveResult: xdr.lookup(\"PathPaymentStrictReceiveResult\"),\n      manageSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      createPassiveSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      setOptionsResult: xdr.lookup(\"SetOptionsResult\"),\n      changeTrustResult: xdr.lookup(\"ChangeTrustResult\"),\n      allowTrustResult: xdr.lookup(\"AllowTrustResult\"),\n      accountMergeResult: xdr.lookup(\"AccountMergeResult\"),\n      inflationResult: xdr.lookup(\"InflationResult\"),\n      manageDataResult: xdr.lookup(\"ManageDataResult\"),\n      bumpSeqResult: xdr.lookup(\"BumpSequenceResult\"),\n      manageBuyOfferResult: xdr.lookup(\"ManageBuyOfferResult\"),\n      pathPaymentStrictSendResult: xdr.lookup(\"PathPaymentStrictSendResult\"),\n      createClaimableBalanceResult: xdr.lookup(\"CreateClaimableBalanceResult\"),\n      claimClaimableBalanceResult: xdr.lookup(\"ClaimClaimableBalanceResult\"),\n      beginSponsoringFutureReservesResult: xdr.lookup(\"BeginSponsoringFutureReservesResult\"),\n      endSponsoringFutureReservesResult: xdr.lookup(\"EndSponsoringFutureReservesResult\"),\n      revokeSponsorshipResult: xdr.lookup(\"RevokeSponsorshipResult\"),\n      clawbackResult: xdr.lookup(\"ClawbackResult\"),\n      clawbackClaimableBalanceResult: xdr.lookup(\"ClawbackClaimableBalanceResult\"),\n      setTrustLineFlagsResult: xdr.lookup(\"SetTrustLineFlagsResult\"),\n      liquidityPoolDepositResult: xdr.lookup(\"LiquidityPoolDepositResult\"),\n      liquidityPoolWithdrawResult: xdr.lookup(\"LiquidityPoolWithdrawResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union OperationResult switch (OperationResultCode code)\n  //   {\n  //   case opINNER:\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       }\n  //       tr;\n  //   case opBAD_AUTH:\n  //   case opNO_ACCOUNT:\n  //   case opNOT_SUPPORTED:\n  //   case opTOO_MANY_SUBENTRIES:\n  //   case opEXCEEDED_WORK_LIMIT:\n  //   case opTOO_MANY_SPONSORING:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResult\", {\n    switchOn: xdr.lookup(\"OperationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"opInner\", \"tr\"], [\"opBadAuth\", xdr.void()], [\"opNoAccount\", xdr.void()], [\"opNotSupported\", xdr.void()], [\"opTooManySubentries\", xdr.void()], [\"opExceededWorkLimit\", xdr.void()], [\"opTooManySponsoring\", xdr.void()]],\n    arms: {\n      tr: xdr.lookup(\"OperationResultTr\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum TransactionResultCode\n  //   {\n  //       txFEE_BUMP_INNER_SUCCESS = 1, // fee bump inner transaction succeeded\n  //       txSUCCESS = 0,                // all operations succeeded\n  //   \n  //       txFAILED = -1, // one of the operations failed (none were applied)\n  //   \n  //       txTOO_EARLY = -2,         // ledger closeTime before minTime\n  //       txTOO_LATE = -3,          // ledger closeTime after maxTime\n  //       txMISSING_OPERATION = -4, // no operation was specified\n  //       txBAD_SEQ = -5,           // sequence number does not match source account\n  //   \n  //       txBAD_AUTH = -6,             // too few valid signatures / wrong network\n  //       txINSUFFICIENT_BALANCE = -7, // fee would bring account below reserve\n  //       txNO_ACCOUNT = -8,           // source account not found\n  //       txINSUFFICIENT_FEE = -9,     // fee is too small\n  //       txBAD_AUTH_EXTRA = -10,      // unused signatures attached to transaction\n  //       txINTERNAL_ERROR = -11,      // an unknown error occurred\n  //   \n  //       txNOT_SUPPORTED = -12,         // transaction type not supported\n  //       txFEE_BUMP_INNER_FAILED = -13, // fee bump inner transaction failed\n  //       txBAD_SPONSORSHIP = -14,       // sponsorship not confirmed\n  //       txBAD_MIN_SEQ_AGE_OR_GAP =\n  //           -15, // minSeqAge or minSeqLedgerGap conditions not met\n  //       txMALFORMED = -16 // precondition is invalid\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"TransactionResultCode\", {\n    txFeeBumpInnerSuccess: 1,\n    txSuccess: 0,\n    txFailed: -1,\n    txTooEarly: -2,\n    txTooLate: -3,\n    txMissingOperation: -4,\n    txBadSeq: -5,\n    txBadAuth: -6,\n    txInsufficientBalance: -7,\n    txNoAccount: -8,\n    txInsufficientFee: -9,\n    txBadAuthExtra: -10,\n    txInternalError: -11,\n    txNotSupported: -12,\n    txFeeBumpInnerFailed: -13,\n    txBadSponsorship: -14,\n    txBadMinSeqAgeOrGap: -15,\n    txMalformed: -16\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr.void()], [\"txTooLate\", xdr.void()], [\"txMissingOperation\", xdr.void()], [\"txBadSeq\", xdr.void()], [\"txBadAuth\", xdr.void()], [\"txInsufficientBalance\", xdr.void()], [\"txNoAccount\", xdr.void()], [\"txInsufficientFee\", xdr.void()], [\"txBadAuthExtra\", xdr.void()], [\"txInternalError\", xdr.void()], [\"txNotSupported\", xdr.void()], [\"txBadSponsorship\", xdr.void()], [\"txBadMinSeqAgeOrGap\", xdr.void()], [\"txMalformed\", xdr.void()]],\n    arms: {\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResult\n  //   {\n  //       // Always 0. Here for binary compatibility.\n  //       int64 feeCharged;\n  //   \n  //       union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //       result;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"InnerTransactionResultResult\")], [\"ext\", xdr.lookup(\"InnerTransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResultPair\n  //   {\n  //       Hash transactionHash;          // hash of the inner transaction\n  //       InnerTransactionResult result; // result for the inner transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"InnerTransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txFeeBumpInnerSuccess\", \"innerResultPair\"], [\"txFeeBumpInnerFailed\", \"innerResultPair\"], [\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr.void()], [\"txTooLate\", xdr.void()], [\"txMissingOperation\", xdr.void()], [\"txBadSeq\", xdr.void()], [\"txBadAuth\", xdr.void()], [\"txInsufficientBalance\", xdr.void()], [\"txNoAccount\", xdr.void()], [\"txInsufficientFee\", xdr.void()], [\"txBadAuthExtra\", xdr.void()], [\"txInternalError\", xdr.void()], [\"txNotSupported\", xdr.void()], [\"txBadSponsorship\", xdr.void()], [\"txBadMinSeqAgeOrGap\", xdr.void()], [\"txMalformed\", xdr.void()]],\n    arms: {\n      innerResultPair: xdr.lookup(\"InnerTransactionResultPair\"),\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultExt\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResult\n  //   {\n  //       int64 feeCharged; // actual fee charged for the transaction\n  //   \n  //       union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //           void;\n  //       }\n  //       result;\n  //   \n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"TransactionResultResult\")], [\"ext\", xdr.lookup(\"TransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Hash[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Hash\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque uint256[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint256\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned int uint32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint32\", xdr.uint());\n\n  // === xdr source ============================================================\n  //\n  //   typedef int int32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int32\", xdr.int());\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned hyper uint64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint64\", xdr.uhyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef hyper int64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int64\", xdr.hyper());\n\n  // === xdr source ============================================================\n  //\n  //   union ExtensionPoint switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtensionPoint\", {\n    switchOn: xdr.int(),\n    switchName: \"v\",\n    switches: [[0, xdr.void()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CryptoKeyType\n  //   {\n  //       KEY_TYPE_ED25519 = 0,\n  //       KEY_TYPE_PRE_AUTH_TX = 1,\n  //       KEY_TYPE_HASH_X = 2,\n  //       KEY_TYPE_ED25519_SIGNED_PAYLOAD = 3,\n  //       // MUXED enum values for supported type are derived from the enum values\n  //       // above by ORing them with 0x100\n  //       KEY_TYPE_MUXED_ED25519 = 0x100\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"CryptoKeyType\", {\n    keyTypeEd25519: 0,\n    keyTypePreAuthTx: 1,\n    keyTypeHashX: 2,\n    keyTypeEd25519SignedPayload: 3,\n    keyTypeMuxedEd25519: 256\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PublicKeyType\n  //   {\n  //       PUBLIC_KEY_TYPE_ED25519 = KEY_TYPE_ED25519\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"PublicKeyType\", {\n    publicKeyTypeEd25519: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SignerKeyType\n  //   {\n  //       SIGNER_KEY_TYPE_ED25519 = KEY_TYPE_ED25519,\n  //       SIGNER_KEY_TYPE_PRE_AUTH_TX = KEY_TYPE_PRE_AUTH_TX,\n  //       SIGNER_KEY_TYPE_HASH_X = KEY_TYPE_HASH_X,\n  //       SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD = KEY_TYPE_ED25519_SIGNED_PAYLOAD\n  //   };\n  //\n  // ===========================================================================\n  xdr.enum(\"SignerKeyType\", {\n    signerKeyTypeEd25519: 0,\n    signerKeyTypePreAuthTx: 1,\n    signerKeyTypeHashX: 2,\n    signerKeyTypeEd25519SignedPayload: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PublicKey switch (PublicKeyType type)\n  //   {\n  //   case PUBLIC_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PublicKey\", {\n    switchOn: xdr.lookup(\"PublicKeyType\"),\n    switchName: \"type\",\n    switches: [[\"publicKeyTypeEd25519\", \"ed25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"SignerKeyEd25519SignedPayload\", [[\"ed25519\", xdr.lookup(\"Uint256\")], [\"payload\", xdr.varOpaque(64)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SignerKey switch (SignerKeyType type)\n  //   {\n  //   case SIGNER_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case SIGNER_KEY_TYPE_PRE_AUTH_TX:\n  //       /* SHA-256 Hash of TransactionSignaturePayload structure */\n  //       uint256 preAuthTx;\n  //   case SIGNER_KEY_TYPE_HASH_X:\n  //       /* Hash of random 256 bit preimage X */\n  //       uint256 hashX;\n  //   case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:\n  //       struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       } ed25519SignedPayload;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SignerKey\", {\n    switchOn: xdr.lookup(\"SignerKeyType\"),\n    switchName: \"type\",\n    switches: [[\"signerKeyTypeEd25519\", \"ed25519\"], [\"signerKeyTypePreAuthTx\", \"preAuthTx\"], [\"signerKeyTypeHashX\", \"hashX\"], [\"signerKeyTypeEd25519SignedPayload\", \"ed25519SignedPayload\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      preAuthTx: xdr.lookup(\"Uint256\"),\n      hashX: xdr.lookup(\"Uint256\"),\n      ed25519SignedPayload: xdr.lookup(\"SignerKeyEd25519SignedPayload\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Signature<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Signature\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SignatureHint[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"SignatureHint\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey NodeID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"NodeId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Secret\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Secret\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Public\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Public\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Key\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Key\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Mac\n  //   {\n  //       opaque mac[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Mac\", [[\"mac\", xdr.opaque(32)]]);\n}); // Automatically generated by xdrgen\n// DO NOT EDIT or your changes may be overwritten\n\n/* jshint maxstatements:2147483647  */\n/* jshint esnext:true  */\n\nexports.default = types;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}