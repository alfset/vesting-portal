{"ast":null,"code":"import invariant from 'tiny-invariant';\nimport JSBI from 'jsbi';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nexport let Rounding = /*#__PURE__*/function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n  return Rounding;\n}({});\nexport let RoundingMode = /*#__PURE__*/function (RoundingMode) {\n  RoundingMode[RoundingMode[\"RoundDown\"] = 0] = \"RoundDown\";\n  RoundingMode[RoundingMode[\"RoundHalfUp\"] = 1] = \"RoundHalfUp\";\n  RoundingMode[RoundingMode[\"RoundHalfEven\"] = 2] = \"RoundHalfEven\";\n  RoundingMode[RoundingMode[\"RoundUp\"] = 3] = \"RoundUp\";\n  return RoundingMode;\n}({});\nexport const ONE = JSBI.BigInt(1);\nexport function parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n}\nconst Decimal = toFormat(_Decimal);\nconst Big = toFormat(_Big);\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n};\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n};\nexport class Fraction {\n  constructor(numerator) {\n    let denominator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ONE;\n    this.numerator = void 0;\n    this.denominator = void 0;\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  }\n\n  // performs floor division\n  get quotient() {\n    return JSBI.divide(this.numerator, this.denominator);\n  }\n\n  // remainder after floor division\n  get remainder() {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n  }\n  invert() {\n    return new Fraction(this.denominator, this.numerator);\n  }\n  add(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n  subtract(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n  lessThan(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n  equalTo(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n  greaterThan(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  }\n  multiply(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  }\n  divide(other) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  }\n  toSignificant(significantDigits) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      groupSeparator: ''\n    };\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_HALF_UP;\n    invariant(Number.isInteger(significantDigits), \"\".concat(significantDigits, \" is not an integer.\"));\n    invariant(significantDigits > 0, \"\".concat(significantDigits, \" is not positive.\"));\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n  toFixed(decimalPlaces) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      groupSeparator: ''\n    };\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Rounding.ROUND_HALF_UP;\n    invariant(Number.isInteger(decimalPlaces), \"\".concat(decimalPlaces, \" is not an integer.\"));\n    invariant(decimalPlaces >= 0, \"\".concat(decimalPlaces, \" is negative.\"));\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n}","map":{"version":3,"names":["invariant","JSBI","_Decimal","_Big","toFormat","Rounding","RoundingMode","ONE","BigInt","parseBigintIsh","bigintIsh","toString","Decimal","Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","RoundDown","RoundHalfUp","RoundUp","Fraction","constructor","numerator","denominator","arguments","length","undefined","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","groupSeparator","rounding","Number","isInteger","concat","set","precision","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/formatBignumber/fraction.ts"],"sourcesContent":["import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\n\nexport type BigintIsh = JSBI | bigint | string\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport enum RoundingMode {\n  /**\n   * Rounds towards zero.\n   * I.e. truncate, no rounding.\n   */\n  RoundDown = 0,\n  /**\n   * Rounds towards nearest neighbour.\n   * If equidistant, rounds away from zero.\n   */\n  RoundHalfUp = 1,\n  /**\n   * Rounds towards nearest neighbour.\n   * If equidistant, rounds towards even neighbour.\n   */\n  RoundHalfEven = 2,\n  /**\n   * Rounds away from zero.\n   */\n  RoundUp = 3,\n}\n\nexport const ONE = JSBI.BigInt(1)\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}