{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\n\nimport {\n// fetchTokenList,\nmergeTokenList, updateTokenlistTime } from '../state/lists/actions';\nimport { poolList, updatePoollistTime } from '../state/pools/actions';\nimport { nftlist, updateNftlistTime } from '../state/nft/actions';\nimport { useActiveReact } from './useActiveReact';\nimport config from '../config';\n// import {spportChainArr} from '../config/chainConfig'\n// import {timeout, USE_VERSION, VERSION, bridgeApi} from '../config/constant'\nimport { MAIN_COIN_SORT\n// USE_VERSION,\n// controlConfig\n// VERSION\n} from '../config/constant';\nimport { getUrlData } from '../utils/tools/axios';\nimport { setTokenlist, getTokenlist, setPoollist, getPoollist, setNftlist, getNftlist } from '../utils/indexedDB';\n\n// console.log(controlConfig[USE_VERSION])\n\nfunction getVersion() {\n  return new Promise(resolve => {\n    const url = \"\".concat(config.multiAridgeApi, \"/token/version\");\n    getUrlData(url).then(version => {\n      resolve(version);\n    });\n  });\n}\nfunction getServerTokenlist(chainId) {\n  return new Promise(resolve => {\n    let list = {};\n    if (chainId) {\n      const url = \"\".concat(config.multiAridgeApi, \"/v4/tokenlistv4/\").concat(chainId);\n      getUrlData(url).then(tokenList => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          list = tokenList.data;\n          resolve(list);\n        } else {\n          resolve('');\n        }\n      });\n    } else {\n      resolve('');\n    }\n  });\n}\nfunction getServerPoolTokenlist(chainId) {\n  return new Promise(resolve => {\n    const list = {};\n    if (chainId) {\n      const url = \"\".concat(config.multiAridgeApi, \"/v4/poollist/\").concat(chainId);\n      getUrlData(url).then(tokenList => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          const tList = tokenList.data;\n          for (const tokenKey in tList) {\n            var _MAIN_COIN_SORT$tList, _MAIN_COIN_SORT$tList2;\n            // if (controlConfig[USE_VERSION].hiddenCoin.includes(tokenKey)) continue\n            list[tokenKey] = {\n              ...tList[tokenKey],\n              key: tokenKey,\n              sort: (_MAIN_COIN_SORT$tList = MAIN_COIN_SORT === null || MAIN_COIN_SORT === void 0 ? void 0 : (_MAIN_COIN_SORT$tList2 = MAIN_COIN_SORT[tList[tokenKey].symbol]) === null || _MAIN_COIN_SORT$tList2 === void 0 ? void 0 : _MAIN_COIN_SORT$tList2.sort) !== null && _MAIN_COIN_SORT$tList !== void 0 ? _MAIN_COIN_SORT$tList : 1000\n            };\n          }\n          resolve(list);\n        } else {\n          resolve('');\n        }\n      });\n    } else {\n      resolve('');\n    }\n  });\n}\nfunction getServerNftTokenlist(chainId) {\n  return new Promise(resolve => {\n    let list = {};\n    if (chainId) {\n      const url = \"\".concat(config.multiAridgeApi, \"/v4/nft/\").concat(chainId);\n      getUrlData(url).then(tokenList => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          list = tokenList.data;\n          resolve(list);\n        } else {\n          resolve('');\n        }\n      });\n    } else {\n      resolve('');\n    }\n  });\n}\nexport function useFetchTokenListVersionCallback() {\n  const dispatch = useDispatch();\n  const {\n    chainId\n  } = useActiveReact();\n  const tokenlists = useSelector(state => state.lists.mergeTokenList);\n  const poollists = useSelector(state => state.pools.poolList);\n  const nftlists = useSelector(state => state.nft.nftlist);\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId;\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID;\n    }\n    return undefined;\n  }, [chainId]);\n  return useCallback(async () => {\n    // console.log(useChain)\n    if (!useChain) return;\n    // console.log(useChain)\n\n    return getVersion().then(async res => {\n      // let curTokenList:any = {}\n\n      if (res.msg === 'Success') {\n        var _curDbTokenList$versi, _curDbPoolList$versio, _curDbNftList$version;\n        const serverVersion = res.data;\n        const curDbTokenList = await getTokenlist(useChain);\n        const curLSTokenList = tokenlists && tokenlists[useChain] ? tokenlists[useChain] : {};\n        const localTokenVersion = (_curDbTokenList$versi = curDbTokenList === null || curDbTokenList === void 0 ? void 0 : curDbTokenList.version) !== null && _curDbTokenList$versi !== void 0 ? _curDbTokenList$versi : curLSTokenList === null || curLSTokenList === void 0 ? void 0 : curLSTokenList.version;\n        // console.log(serverVersion)\n        // console.log(localTokenVersion)\n        // console.log(localTokenVersion !== serverVersion)\n        if (!serverVersion || !localTokenVersion || localTokenVersion !== serverVersion) {\n          getServerTokenlist(useChain).then(res => {\n            if (res) {\n              setTokenlist(useChain, res, serverVersion);\n              dispatch(mergeTokenList({\n                chainId: useChain,\n                tokenList: res,\n                version: serverVersion\n              }));\n              dispatch(updateTokenlistTime({}));\n            }\n          });\n        }\n        const curDbPoolList = await getPoollist(useChain);\n        const curLSPoolList = poollists && poollists[useChain] ? poollists[useChain] : {};\n        const localPoolVersion = (_curDbPoolList$versio = curDbPoolList === null || curDbPoolList === void 0 ? void 0 : curDbPoolList.version) !== null && _curDbPoolList$versio !== void 0 ? _curDbPoolList$versio : curLSPoolList === null || curLSPoolList === void 0 ? void 0 : curLSPoolList.version;\n        if (!serverVersion || !localPoolVersion || localPoolVersion !== serverVersion) {\n          getServerPoolTokenlist(useChain).then(res => {\n            // console.log(res)\n            if (res) {\n              setPoollist(useChain, res, serverVersion);\n              dispatch(poolList({\n                chainId: useChain,\n                tokenList: res,\n                version: serverVersion\n              }));\n              dispatch(updatePoollistTime({}));\n            }\n          });\n        }\n        const curDbNftList = await getNftlist(useChain);\n        const curLSNftList = nftlists && nftlists[useChain] ? nftlists[useChain] : {};\n        const localNftVersion = (_curDbNftList$version = curDbNftList === null || curDbNftList === void 0 ? void 0 : curDbNftList.version) !== null && _curDbNftList$version !== void 0 ? _curDbNftList$version : curLSNftList === null || curLSNftList === void 0 ? void 0 : curLSNftList.version;\n        // console.log(curLSNftList)\n        // console.log(curDbNftList)\n        if (\n        // USE_VERSION === VERSION.V7_TEST\n        // && \n\n        !serverVersion || !localNftVersion || localNftVersion !== serverVersion) {\n          getServerNftTokenlist(useChain).then(res => {\n            console.log(res);\n            if (res) {\n              setNftlist(useChain, res, serverVersion);\n              dispatch(nftlist({\n                chainId: useChain,\n                tokenList: res,\n                version: serverVersion\n              }));\n              dispatch(updateNftlistTime({}));\n            }\n          });\n        }\n      }\n    });\n  }, [dispatch, useChain]);\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","mergeTokenList","updateTokenlistTime","poolList","updatePoollistTime","nftlist","updateNftlistTime","useActiveReact","config","MAIN_COIN_SORT","getUrlData","setTokenlist","getTokenlist","setPoollist","getPoollist","setNftlist","getNftlist","getVersion","Promise","resolve","url","concat","multiAridgeApi","then","version","getServerTokenlist","chainId","list","tokenList","msg","data","getServerPoolTokenlist","tList","tokenKey","_MAIN_COIN_SORT$tList","_MAIN_COIN_SORT$tList2","key","sort","symbol","getServerNftTokenlist","useFetchTokenListVersionCallback","dispatch","tokenlists","state","lists","poollists","pools","nftlists","nft","useChain","getCurChainInfo","chainID","undefined","res","_curDbTokenList$versi","_curDbPoolList$versio","_curDbNftList$version","serverVersion","curDbTokenList","curLSTokenList","localTokenVersion","curDbPoolList","curLSPoolList","localPoolVersion","curDbNftList","curLSNftList","localNftVersion","console","log"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/hooks/useFetchListCallback.ts"],"sourcesContent":["\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n// import { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\nimport { AppDispatch } from '../state'\nimport {\n  // fetchTokenList,\n  mergeTokenList,\n  updateTokenlistTime,\n} from '../state/lists/actions'\nimport { poolList, updatePoollistTime } from '../state/pools/actions'\nimport { nftlist, updateNftlistTime } from '../state/nft/actions'\nimport { AppState } from '../state'\n\nimport {useActiveReact} from './useActiveReact'\n\nimport config from '../config'\n// import {spportChainArr} from '../config/chainConfig'\n// import {timeout, USE_VERSION, VERSION, bridgeApi} from '../config/constant'\nimport {\n  MAIN_COIN_SORT,\n  // USE_VERSION,\n  // controlConfig\n  // VERSION\n} from '../config/constant'\nimport {getUrlData} from '../utils/tools/axios'\nimport {\n  setTokenlist,\n  getTokenlist,\n  setPoollist,\n  getPoollist,\n  setNftlist,\n  getNftlist\n} from '../utils/indexedDB'\n\n// console.log(controlConfig[USE_VERSION])\n\nfunction getVersion () {\n  return new Promise(resolve => {\n    const url = `${config.multiAridgeApi}/token/version`\n    getUrlData(url).then((version:any) => {\n      resolve(version)\n    })\n  })\n}\n\nfunction getServerTokenlist (chainId:any) {\n  return new Promise(resolve => {\n    let list:any = {}\n    if (chainId) {\n      const url = `${config.multiAridgeApi}/v4/tokenlistv4/${chainId}`\n      getUrlData(url).then((tokenList:any) => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          list = tokenList.data\n          resolve(list)\n        } else {\n          resolve('')\n        }\n      })\n    } else {\n      resolve('')\n    }\n  })\n}\n\nfunction getServerPoolTokenlist (chainId:any) {\n  return new Promise(resolve => {\n    const list:any = {}\n    if (chainId) {\n      const url = `${config.multiAridgeApi}/v4/poollist/${chainId}`\n      getUrlData(url).then((tokenList:any) => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          const tList = tokenList.data\n          for (const tokenKey in tList) {\n            // if (controlConfig[USE_VERSION].hiddenCoin.includes(tokenKey)) continue\n            list[tokenKey] = {\n              ...tList[tokenKey],\n              key: tokenKey,\n              sort: MAIN_COIN_SORT?.[tList[tokenKey].symbol]?.sort ?? 1000\n            }\n          }\n          resolve(list)\n        } else {\n          resolve('')\n        }\n      })\n    } else {\n      resolve('')\n    }\n  })\n}\n\nfunction getServerNftTokenlist (chainId:any) {\n  return new Promise(resolve => {\n    let list:any = {}\n    if (chainId) {\n      const url = `${config.multiAridgeApi}/v4/nft/${chainId}`\n      getUrlData(url).then((tokenList:any) => {\n        // console.log(tokenList)\n        if (tokenList.msg === 'Success' && tokenList.data) {\n          list = tokenList.data\n          resolve(list)\n        } else {\n          resolve('')\n        }\n      })\n    } else {\n      resolve('')\n    }\n  })\n}\n\nexport function useFetchTokenListVersionCallback(): () => Promise<any> {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const { chainId } = useActiveReact()\n  const tokenlists = useSelector<AppState, AppState['lists']['mergeTokenList']>(state => state.lists.mergeTokenList)\n  const poollists = useSelector<AppState, AppState['pools']['poolList']>(state => state.pools.poolList)\n  const nftlists = useSelector<AppState, AppState['nft']['nftlist']>(state => state.nft.nftlist)\n\n  const useChain = useMemo(() => {\n    if (chainId) {\n      return chainId\n    } else if (config.getCurChainInfo(chainId).chainID) {\n      return config.getCurChainInfo(chainId).chainID\n    }\n    return undefined\n  }, [chainId])\n  \n  return useCallback(\n    async () => {\n      // console.log(useChain)\n      if (!useChain) return\n      // console.log(useChain)\n      \n      return getVersion().then(async(res:any) => {\n        // let curTokenList:any = {}\n\n        if (res.msg === 'Success') {\n          const serverVersion = res.data\n\n          \n          const curDbTokenList:any = await getTokenlist(useChain)\n          const curLSTokenList:any = tokenlists && tokenlists[useChain] ? tokenlists[useChain] : {}\n          const localTokenVersion = curDbTokenList?.version ?? curLSTokenList?.version\n          // console.log(serverVersion)\n          // console.log(localTokenVersion)\n          // console.log(localTokenVersion !== serverVersion)\n          if (\n            !serverVersion\n            || !localTokenVersion\n            || localTokenVersion !== serverVersion\n          ) {\n            getServerTokenlist(useChain).then(res => {\n              if (res) {\n                setTokenlist(useChain, res, serverVersion)\n                dispatch(mergeTokenList({ chainId: useChain, tokenList:res, version: serverVersion }))\n                dispatch(updateTokenlistTime({}))\n              }\n            })\n          }\n\n          const curDbPoolList:any = await getPoollist(useChain)\n          const curLSPoolList:any = poollists && poollists[useChain] ? poollists[useChain] : {}\n          const localPoolVersion = curDbPoolList?.version ?? curLSPoolList?.version\n          if (\n            !serverVersion\n            || !localPoolVersion\n            || localPoolVersion !== serverVersion\n          ) {\n            getServerPoolTokenlist(useChain).then(res => {\n              // console.log(res)\n              if (res) {\n                setPoollist(useChain, res, serverVersion)\n                dispatch(poolList({ chainId: useChain, tokenList:res, version: serverVersion }))\n                dispatch(updatePoollistTime({}))\n              }\n            })\n          }\n\n          const curDbNftList:any = await getNftlist(useChain)\n          const curLSNftList:any = nftlists && nftlists[useChain] ? nftlists[useChain] : {}\n          const localNftVersion = curDbNftList?.version ?? curLSNftList?.version\n          // console.log(curLSNftList)\n          // console.log(curDbNftList)\n          if (\n            // USE_VERSION === VERSION.V7_TEST\n            // && \n            (\n              !serverVersion\n              || !localNftVersion\n              || localNftVersion !== serverVersion\n            )\n          ) {\n            getServerNftTokenlist(useChain).then(res => {\n              console.log(res)\n              if (res) {\n                setNftlist(useChain, res, serverVersion)\n                dispatch(nftlist({ chainId: useChain, tokenList:res, version: serverVersion }))\n                dispatch(updateNftlistTime({}))\n              }\n            })\n          }\n        }\n      })\n    },\n    [dispatch, useChain]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}