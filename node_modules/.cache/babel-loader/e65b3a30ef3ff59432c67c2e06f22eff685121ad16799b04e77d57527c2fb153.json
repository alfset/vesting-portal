{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar createHash = require('create-hash');\nvar BN = require('bn.js');\nvar EC = require('elliptic').ec;\nvar messages = require('../messages.json');\nvar ec = new EC('secp256k1');\nvar ecparams = ec.curve;\nfunction loadCompressedPublicKey(first, xBuffer) {\n  var x = new BN(xBuffer);\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null;\n  x = x.toRed(ecparams.red);\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();\n  if (first === 0x03 !== y.isOdd()) y = y.redNeg();\n  return ec.keyPair({\n    pub: {\n      x: x,\n      y: y\n    }\n  });\n}\nfunction loadUncompressedPublicKey(first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer);\n  var y = new BN(yBuffer);\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;\n  x = x.toRed(ecparams.red);\n  y = y.toRed(ecparams.red);\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x);\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;\n  return ec.keyPair({\n    pub: {\n      x: x,\n      y: y\n    }\n  });\n}\nfunction loadPublicKey(publicKey) {\n  var first = publicKey[0];\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null;\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33));\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null;\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65));\n    default:\n      return null;\n  }\n}\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey);\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero();\n};\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey);\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL);\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true));\n};\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey);\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32);\n};\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey);\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID);\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);\n};\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak);\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);\n  bn.iadd(new BN(privateKey));\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);\n  return bn.toArrayLike(Buffer, 'be', 32);\n};\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak);\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);\n  bn.imul(new BN(privateKey));\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n);\n  return bn.toArrayLike(Buffer, 'be', 32);\n};\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey);\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL);\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true));\n};\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey);\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  return Buffer.from(pair.getPublic(compressed, true));\n};\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null;\n};\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey);\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  tweak = new BN(tweak);\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);\n  var point = ecparams.g.mul(tweak).add(pair.pub);\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);\n  return Buffer.from(point.encode(true, compressed));\n};\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey);\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  tweak = new BN(tweak);\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed));\n};\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length);\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i]);\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  }\n  var point = pairs[0].pub;\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub);\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL);\n  return Buffer.from(point.encode(true, compressed));\n};\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32));\n  var s = new BN(signature.slice(32, 64));\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  var result = Buffer.from(signature);\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32);\n  return result;\n};\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32);\n  var s = signature.slice(32, 64);\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  return {\n    r: r,\n    s: s\n  };\n};\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r);\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0);\n  var s = new BN(sigObj.s);\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0);\n  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);\n};\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn;\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter);\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL);\n      return new BN(nonce);\n    };\n  }\n  var d = new BN(privateKey);\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL);\n  var result = ec.sign(message, privateKey, {\n    canonical: true,\n    k: noncefn,\n    pers: data\n  });\n  return {\n    signature: Buffer.concat([result.r.toArrayLike(Buffer, 'be', 32), result.s.toArrayLike(Buffer, 'be', 32)]),\n    recovery: result.recoveryParam\n  };\n};\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = {\n    r: signature.slice(0, 32),\n    s: signature.slice(32, 64)\n  };\n  var sigr = new BN(sigObj.r);\n  var sigs = new BN(sigObj.s);\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false;\n  var pair = loadPublicKey(publicKey);\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  return ec.verify(message, sigObj, {\n    x: pair.pub.x,\n    y: pair.pub.y\n  });\n};\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = {\n    r: signature.slice(0, 32),\n    s: signature.slice(32, 64)\n  };\n  var sigr = new BN(sigObj.r);\n  var sigs = new BN(sigObj.s);\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error();\n    var point = ec.recoverPubKey(message, sigObj, recovery);\n    return Buffer.from(point.encode(true, compressed));\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL);\n  }\n};\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true);\n  return createHash('sha256').update(shared).digest();\n};\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey);\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  var scalar = new BN(privateKey);\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL);\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed));\n};","map":{"version":3,"names":["Buffer","require","createHash","BN","EC","ec","messages","ecparams","curve","loadCompressedPublicKey","first","xBuffer","x","cmp","p","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadUncompressedPublicKey","yBuffer","x3","redISub","isZero","loadPublicKey","publicKey","length","slice","exports","privateKeyVerify","privateKey","bn","n","privateKeyExport","compressed","d","Error","EC_PRIVATE_KEY_EXPORT_DER_FAIL","from","keyFromPrivate","getPublic","privateKeyNegate","alloc","sub","umod","toArrayLike","privateKeyModInverse","EC_PRIVATE_KEY_RANGE_INVALID","invm","privateKeyTweakAdd","tweak","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","iadd","isub","privateKeyTweakMul","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","imul","publicKeyCreate","EC_PUBLIC_KEY_CREATE_FAIL","publicKeyConvert","pair","EC_PUBLIC_KEY_PARSE_FAIL","publicKeyVerify","publicKeyTweakAdd","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","point","g","mul","add","isInfinity","encode","publicKeyTweakMul","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","publicKeyCombine","publicKeys","pairs","Array","i","j","EC_PUBLIC_KEY_COMBINE_FAIL","signatureNormalize","signature","r","s","ECDSA_SIGNATURE_PARSE_FAIL","result","nh","copy","signatureExport","signatureImport","sigObj","concat","sign","message","noncefn","data","getNonce","counter","nonce","isBuffer","ECDSA_SIGN_FAIL","canonical","k","pers","recovery","recoveryParam","verify","sigr","sigs","recover","recoverPubKey","err","ECDSA_RECOVER_FAIL","ecdh","shared","ecdhUnsafe","update","digest","scalar","ECDH_FAIL"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/nebulas/node_modules/secp256k1/lib/elliptic/index.js"],"sourcesContent":["'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return Buffer.from(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var point = ecparams.g.mul(tweak).add(pair.pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return Buffer.from(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}