{"ast":null,"code":"import{createBrowserHistory}from'history';import{chainInfo,spportChainArr}from'../chainConfig';import{isAddress}from'../../utils';// import {ARBITRUM_MAIN_CHAINID} from './chainConfig/arbitrum'\n// import {AVAX_MAIN_CHAINID} from './chainConfig/avax'\nimport{BNB_MAIN_CHAINID}from'../chainConfig/bsc';import{ETH_MAIN_CHAINID}from'../chainConfig/eth';import{selectNetwork}from'./methods';export function getParams(param){const str=window.location.href.indexOf('?')?window.location.href.split('?')[1]:'';if(str){const arr=str.split('&');let value='';for(const str2 of arr){const arr2=str2.split('=');if(arr2[0]===param){value=arr2[1];break;}}return value;}else{return'';}}export function getInitBridgeChain(destChainID,bridgeToken){const nc={initChain:destChainID,bridgeInitToken:bridgeToken};const dc=getParams('destchainid');const bt=getParams('bridgetoken');if(dc){nc.initChain=dc;}if(bt&&isAddress(bt)){nc.bridgeInitToken=bt;}return nc;}let onlyOne=0;function getParamNode(type,INIT_NODE){var _type,_type$toString;type=(_type=type)===null||_type===void 0?void 0:(_type$toString=_type.toString())===null||_type$toString===void 0?void 0:_type$toString.toLowerCase();const history=createBrowserHistory();// console.log(history)\n// console.log(history.location.hash)\n// history.replace('')\nlet labelStr=INIT_NODE;for(const key in chainInfo){// console.log(key)\nif(type===key||type===chainInfo[key].symbol.toLowerCase()||type===chainInfo[key].name.toLowerCase()){labelStr=chainInfo[key].label;break;}}if(!onlyOne){onlyOne=1;const lpath=history.location.hash.split('?');const pathKey=lpath[0];const paramKey=lpath[1];const paramArr=paramKey.split('&');const paramList=[];for(const k of paramArr){if(k.indexOf('network=')===0)continue;paramList.push(k);}history.replace(pathKey+'?'+paramList.join('&'));if(!isNaN(labelStr)){selectNetwork(labelStr,1).then(res=>{console.log(res);if(res.msg==='Error'){alert(\"Please switch metamask network to\\uFF1A\".concat(chainInfo[labelStr].networkName));}});}}return labelStr;}function getNode(type,INIT_NODE){let labelStr=INIT_NODE;if(type.indexOf('bsc')!==-1){labelStr=chainInfo[BNB_MAIN_CHAINID].label;}else if(type.indexOf('eth')!==-1){labelStr=chainInfo[ETH_MAIN_CHAINID].label;}if(!onlyOne){selectNetwork(labelStr);}return labelStr;}export function getNetwork(ENV_NODE_CONFIG,INIT_NODE){let nc='';const urlParams=getParams('network');const srcchainid=getParams('srcchainid');const localHost=window.location.host;let localStr=window.localStorage.getItem(ENV_NODE_CONFIG);if(localStr&&!spportChainArr.includes(localStr.toString())){localStr=INIT_NODE;}if(urlParams){nc=getParamNode(urlParams,INIT_NODE);// window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n}else if(srcchainid){nc=getParamNode(srcchainid,INIT_NODE);// window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n}else{if(localStr){nc=localStr;}else{nc=getNode(localHost,INIT_NODE);}}window.localStorage.setItem(ENV_NODE_CONFIG,nc);return nc;}const ID_CODE='ID_CODE';export function getIdCode(){const urlParams=getParams('agent');if(urlParams){window.localStorage.setItem(ID_CODE,urlParams);}}","map":{"version":3,"names":["createBrowserHistory","chainInfo","spportChainArr","isAddress","BNB_MAIN_CHAINID","ETH_MAIN_CHAINID","selectNetwork","getParams","param","str","window","location","href","indexOf","split","arr","value","str2","arr2","getInitBridgeChain","destChainID","bridgeToken","nc","initChain","bridgeInitToken","dc","bt","onlyOne","getParamNode","type","INIT_NODE","_type","_type$toString","toString","toLowerCase","history","labelStr","key","symbol","name","label","lpath","hash","pathKey","paramKey","paramArr","paramList","k","push","replace","join","isNaN","then","res","console","log","msg","alert","concat","networkName","getNode","getNetwork","ENV_NODE_CONFIG","urlParams","srcchainid","localHost","host","localStr","localStorage","getItem","includes","setItem","ID_CODE","getIdCode"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/config/tools/getUrlParams.ts"],"sourcesContent":["import { createBrowserHistory } from 'history'\n\nimport { chainInfo,spportChainArr } from '../chainConfig'\nimport { isAddress } from '../../utils'\n\n// import {ARBITRUM_MAIN_CHAINID} from './chainConfig/arbitrum'\n// import {AVAX_MAIN_CHAINID} from './chainConfig/avax'\nimport {BNB_MAIN_CHAINID} from '../chainConfig/bsc'\nimport {ETH_MAIN_CHAINID} from '../chainConfig/eth'\n\n\nimport {selectNetwork} from './methods'\n\n\nexport function getParams(param: any) {\n  const str = window.location.href.indexOf('?') ? window.location.href.split('?')[1] : ''\n  if (str) {\n    const arr = str.split('&')\n    let value = ''\n    for (const str2 of arr) {\n      const arr2 = str2.split('=')\n      if (arr2[0] === param) {\n        value = arr2[1]\n        break\n      }\n    }\n    return value\n  } else {\n    return ''\n  }\n}\n\nexport function getInitBridgeChain(destChainID: any, bridgeToken: any) {\n  const nc = {\n    initChain: destChainID,\n    bridgeInitToken: bridgeToken\n  }\n  const dc = getParams('destchainid')\n  const bt = getParams('bridgetoken')\n  if (dc) {\n    nc.initChain = dc\n  }\n  if (bt && isAddress(bt)) {\n    nc.bridgeInitToken = bt\n  }\n\n  return nc\n}\n\nlet onlyOne = 0\nfunction getParamNode(type: any, INIT_NODE: any) {\n  type = type?.toString()?.toLowerCase()\n  const history = createBrowserHistory()\n  // console.log(history)\n  // console.log(history.location.hash)\n  // history.replace('')\n  let labelStr = INIT_NODE\n  for (const key in chainInfo) {\n    // console.log(key)\n    if (\n      type === key\n      || type === chainInfo[key].symbol.toLowerCase()\n      || type === chainInfo[key].name.toLowerCase()\n    ) {\n      labelStr = chainInfo[key].label\n      break\n    }\n  }\n  if (!onlyOne) {\n    onlyOne = 1\n    const lpath = history.location.hash.split('?')\n    const pathKey = lpath[0]\n    const paramKey = lpath[1]\n    const paramArr = paramKey.split('&')\n    const paramList = []\n    for (const k of paramArr) {\n      if (k.indexOf('network=') === 0) continue\n      paramList.push(k)\n    }\n    history.replace(pathKey + '?' + paramList.join('&'))\n    if (!isNaN(labelStr)) {\n      selectNetwork(labelStr, 1).then((res:any) => {\n        console.log(res)\n        if (res.msg === 'Error') {\n          alert(`Please switch metamask network toï¼š${chainInfo[labelStr].networkName}`)\n        }\n      })\n    }\n  }\n  return labelStr\n}\n\nfunction getNode(type: any, INIT_NODE: any) {\n  let labelStr = INIT_NODE\n  if (type.indexOf('bsc') !== -1) {\n    labelStr = chainInfo[BNB_MAIN_CHAINID].label\n  } else if (type.indexOf('eth') !== -1) {\n    labelStr = chainInfo[ETH_MAIN_CHAINID].label\n  }\n  if (!onlyOne) {\n    selectNetwork(labelStr)\n  }\n  return labelStr\n}\nexport function getNetwork(ENV_NODE_CONFIG: any, INIT_NODE: any) {\n  let nc = ''\n  const urlParams = getParams('network')\n  const srcchainid = getParams('srcchainid')\n  const localHost = window.location.host\n  let localStr = window.localStorage.getItem(ENV_NODE_CONFIG)\n  if (localStr && !spportChainArr.includes(localStr.toString())) {\n    localStr = INIT_NODE\n  }\n  if (urlParams) {\n    nc = getParamNode(urlParams, INIT_NODE)\n    // window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  } else if (srcchainid) {\n    nc = getParamNode(srcchainid, INIT_NODE)\n    // window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  } else {\n    if (localStr) {\n      nc = localStr\n    } else {\n      nc = getNode(localHost, INIT_NODE)\n    }\n  }\n  window.localStorage.setItem(ENV_NODE_CONFIG, nc)\n  return nc\n}\n\nconst ID_CODE = 'ID_CODE'\nexport function getIdCode() {\n  const urlParams = getParams('agent')\n  if (urlParams) {\n    window.localStorage.setItem(ID_CODE, urlParams)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}