{"ast":null,"code":"import{getUrlData,postUrlData}from'../tools/axios';import{USE_VERSION,timeout}from'../../config/constant';import{getLocalConfig}from'../tools/tools';import{CROSSCHAINBRIDGE}from'./type';import config from'../../config';export function registerSwap(hash,chainId){return new Promise(resolve=>{console.log(hash);const url=\"\".concat(config.bridgeApi,\"/v3/register?hash=\").concat(hash,\"&chainId=\").concat(chainId,\"&type=\").concat(USE_VERSION);getUrlData(url).then(res=>{console.log(res);resolve(res);});});}const registerList={};// console.log(window?.navigator)\n// console.log(window)\n// getUrlData('https://api.ipify.org/?format=json').then(res => console.log(res))\nexport function recordsTxns(_ref){let{hash,chainId,selectChain,account,value,formatvalue,to,symbol,version,pairid,routerToken}=_ref;return new Promise(async resolve=>{// console.log(hash)\nconst url=\"\".concat(config.bridgeApi,\"/v3/records\");const useVersion=version?version:USE_VERSION;// console.log(version)\n// console.log(USE_VERSION)\n// const ip:any = await getUrlData('https://api.ipify.org/?format=json')\nconst data={hash:hash,srcChainID:chainId,destChainID:selectChain,token:routerToken?routerToken:'',from:account,version:useVersion,value:value,formatvalue:formatvalue,to:to,symbol:symbol,pairid:pairid// userAgent: window?.navigator?.userAgent,\n// userIP: window?.returnCitySN ? window?.returnCitySN : (ip?.data?.ip ? {cip: ip?.data?.ip} : '')\n};if(!registerList[hash]){registerList[hash]={hash,chainId,selectChain,account,value,formatvalue,to,symbol,version,pairid,routerToken,isRegister:0,timestamp:Date.now()};}postUrlData(url,data).then(res=>{console.log(res);if(res.msg==='Success'||res.data==='Error'){registerList[hash].isRegister=1;}else{if(Date.now()-registerList[hash].timestamp<=3000){setTimeout(()=>{recordsTxns(registerList[hash]);},1000);}}resolve(res);});});}const approveList={};export function recordsApprove(_ref2){let{token,spender,account,amount,symbol,decimals,hash,chainId,type}=_ref2;return new Promise(async resolve=>{// console.log(hash)\nconst url=\"\".concat(config.bridgeApi,\"/v3/records/approved\");const data={token,spender,account,amount,symbol,decimals,hash,chainId,type};if(!approveList[hash]){approveList[hash]={token,spender,account,amount,symbol,decimals,hash,chainId,type,isRegister:0,timestamp:Date.now()};}postUrlData(url,data).then(res=>{console.log(res);if(res.msg==='Success'||res.data==='Error'){approveList[hash].isRegister=1;}else{if(Date.now()-approveList[hash].timestamp<=3000){setTimeout(()=>{recordsApprove(approveList[hash]);},1000);}}resolve(res);});});}// recordsApprove({\n//   token: '',\n//   spender: '0xb153fb3d196a8eb25522705560ac152eeec57901',\n//   account: '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249',\n//   amount: '0x0',\n//   symbol: 'WETH',\n//   decimals: '18',\n//   hash: '0xf31d62838189bae0a40c0420b2d6b79aa502d7850ee0f30abcd7aaa91fadaf3a',\n//   chainId: 1,\n//   type: 'Revoke'\n// })\nexport function getP2PInfo(account,chainId,symbol,token){return new Promise(resolve=>{// console.log(hash)\nconst lData=getLocalConfig(account,token,chainId,CROSSCHAINBRIDGE,timeout,undefined);if(lData){// console.log(lData)\nresolve({p2pAddress:lData.p2pAddress});}else{const url=\"\".concat(config.bridgeApi,\"/v2/register/\").concat(account,\"/\").concat(chainId,\"/\").concat(symbol);getUrlData(url).then(res=>{// console.log(res)\nif(res.msg==='Success'){var _res$data$P2shAddress,_res$data,_res$data2,_res$data2$info;resolve({p2pAddress:(_res$data$P2shAddress=res===null||res===void 0?void 0:(_res$data=res.data)===null||_res$data===void 0?void 0:_res$data.P2shAddress)!==null&&_res$data$P2shAddress!==void 0?_res$data$P2shAddress:res===null||res===void 0?void 0:(_res$data2=res.data)===null||_res$data2===void 0?void 0:(_res$data2$info=_res$data2.info)===null||_res$data2$info===void 0?void 0:_res$data2$info.P2shAddress});}else{resolve('');}});}});}","map":{"version":3,"names":["getUrlData","postUrlData","USE_VERSION","timeout","getLocalConfig","CROSSCHAINBRIDGE","config","registerSwap","hash","chainId","Promise","resolve","console","log","url","concat","bridgeApi","then","res","registerList","recordsTxns","_ref","selectChain","account","value","formatvalue","to","symbol","version","pairid","routerToken","useVersion","data","srcChainID","destChainID","token","from","isRegister","timestamp","Date","now","msg","setTimeout","approveList","recordsApprove","_ref2","spender","amount","decimals","type","getP2PInfo","lData","undefined","p2pAddress","_res$data$P2shAddress","_res$data","_res$data2","_res$data2$info","P2shAddress","info"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/utils/bridge/register.ts"],"sourcesContent":["import {getUrlData, postUrlData} from '../tools/axios'\nimport {USE_VERSION, timeout} from '../../config/constant'\nimport {getLocalConfig} from '../tools/tools'\nimport {CROSSCHAINBRIDGE} from './type'\n\nimport config from '../../config'\n\nexport function registerSwap (hash:string, chainId:any) {\n  return new Promise(resolve => {\n    console.log(hash)\n    const url = `${config.bridgeApi}/v3/register?hash=${hash}&chainId=${chainId}&type=${USE_VERSION}`\n    getUrlData(url).then(res => {\n      console.log(res)\n      resolve(res)\n    })\n  })\n}\n\n\ninterface RecordsTxnsProp {\n  hash: string\n  chainId:any\n  selectChain:any,\n  account: string | null | undefined,\n  value: string,\n  formatvalue: string,\n  to: string,\n  symbol: string | undefined,\n  version?: string | undefined,\n  pairid?: string | undefined,\n  routerToken?: string | undefined,\n}\nconst registerList:any = {}\n\n// console.log(window?.navigator)\n// console.log(window)\n// getUrlData('https://api.ipify.org/?format=json').then(res => console.log(res))\nexport function recordsTxns ({\n  hash,\n  chainId,\n  selectChain,\n  account,\n  value,\n  formatvalue,\n  to,\n  symbol,\n  version,\n  pairid,\n  routerToken\n}: RecordsTxnsProp) {\n  return new Promise(async(resolve) => {\n    // console.log(hash)\n    const url = `${config.bridgeApi}/v3/records`\n    const useVersion = version ? version : USE_VERSION\n    // console.log(version)\n    // console.log(USE_VERSION)\n    // const ip:any = await getUrlData('https://api.ipify.org/?format=json')\n    const data = {\n      hash: hash,\n      srcChainID: chainId,\n      destChainID: selectChain,\n      token: routerToken ? routerToken : '',\n      from: account,\n      version: useVersion,\n      value: value,\n      formatvalue: formatvalue,\n      to: to,\n      symbol: symbol,\n      pairid: pairid,\n      // userAgent: window?.navigator?.userAgent,\n      // userIP: window?.returnCitySN ? window?.returnCitySN : (ip?.data?.ip ? {cip: ip?.data?.ip} : '')\n    }\n    if (!registerList[hash]) {\n      registerList[hash] = {\n        hash,\n        chainId,\n        selectChain,\n        account,\n        value,\n        formatvalue,\n        to,\n        symbol,\n        version,\n        pairid,\n        routerToken,\n        isRegister: 0,\n        timestamp: Date.now()\n      }\n    }\n    postUrlData(url, data).then((res:any) => {\n      console.log(res)\n      if (res.msg === 'Success' || res.data === 'Error') {\n        registerList[hash].isRegister = 1\n      } else {\n        if ((Date.now() - registerList[hash].timestamp) <= 3000) {\n          setTimeout(() => {\n            recordsTxns(registerList[hash])\n          }, 1000)\n        }\n      }\n      resolve(res)\n    })\n  })\n}\n\nconst approveList:any = {}\nexport function recordsApprove ({\n  token,\n  spender,\n  account,\n  amount,\n  symbol,\n  decimals,\n  hash,\n  chainId,\n  type,\n}: {\n  token: any,\n  spender: any,\n  account: any,\n  amount: any,\n  symbol: any,\n  decimals: any,\n  hash: any,\n  chainId: any,\n  type: any,\n}) {\n  return new Promise(async(resolve) => {\n    // console.log(hash)\n    const url = `${config.bridgeApi}/v3/records/approved`\n    const data = {\n      token,\n      spender,\n      account,\n      amount,\n      symbol,\n      decimals,\n      hash,\n      chainId,\n      type,\n    }\n    if (!approveList[hash]) {\n      approveList[hash] = {\n        token,\n        spender,\n        account,\n        amount,\n        symbol,\n        decimals,\n        hash,\n        chainId,\n        type,\n        isRegister: 0,\n        timestamp: Date.now()\n      }\n    }\n    postUrlData(url, data).then((res:any) => {\n      console.log(res)\n      if (res.msg === 'Success' || res.data === 'Error') {\n        approveList[hash].isRegister = 1\n      } else {\n        if ((Date.now() - approveList[hash].timestamp) <= 3000) {\n          setTimeout(() => {\n            recordsApprove(approveList[hash])\n          }, 1000)\n        }\n      }\n      resolve(res)\n    })\n  })\n}\n// recordsApprove({\n//   token: '',\n//   spender: '0xb153fb3d196a8eb25522705560ac152eeec57901',\n//   account: '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249',\n//   amount: '0x0',\n//   symbol: 'WETH',\n//   decimals: '18',\n//   hash: '0xf31d62838189bae0a40c0420b2d6b79aa502d7850ee0f30abcd7aaa91fadaf3a',\n//   chainId: 1,\n//   type: 'Revoke'\n// })\nexport function getP2PInfo (account:any, chainId:any, symbol:string, token:any) {\n  return new Promise(resolve => {\n    // console.log(hash)\n    const lData = getLocalConfig(account, token, chainId, CROSSCHAINBRIDGE, timeout, undefined)\n    if (lData) {\n      // console.log(lData)\n      resolve({p2pAddress: lData.p2pAddress})\n    } else {\n      const url = `${config.bridgeApi}/v2/register/${account}/${chainId}/${symbol}`\n      getUrlData(url).then((res:any) => {\n        // console.log(res)\n        if (res.msg === 'Success') {\n          resolve({p2pAddress: res?.data?.P2shAddress ?? res?.data?.info?.P2shAddress})\n        } else {\n          resolve('')\n        }\n      })\n    }\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}