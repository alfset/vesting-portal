{"ast":null,"code":"// import { TransactionResponse } from '@ethersproject/providers'\nimport{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import axios from'axios';import{useActiveReact}from'../../hooks/useActiveReact';import{addTransaction,updateUnderlyingStatus,noWalletTxList}from'./actions';import config from'../../config';import{useIsGnosisSafeWallet}from'../wallet/hooks';// 可以接受ether库事务响应并将其添加到事务列表的助手\nexport function useTransactionAdder(){const{chainId,account}=useActiveReact();const dispatch=useDispatch();const{isGnosisSafeWallet}=useIsGnosisSafeWallet();return useCallback(function(response){let{summary,approval,claim,value,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// console.log(account, chainId, isGnosisSafeWallet)\nif(!account)return;if(!chainId)return;if(isGnosisSafeWallet)return;const{hash}=response;// console.log(hash)\nif(!hash){throw Error('No transaction hash found.');}dispatch(addTransaction({hash,from:account,chainId,approval,summary,claim,value,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo}));},[dispatch,chainId,account,isGnosisSafeWallet]);}// 返回当前链的所有事务\nexport function useAllTransactions(){var _state$chainId;const{chainId}=useActiveReact();const state=useSelector(state=>state.transactions);return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};}export function useIsTransactionPending(transactionHash){const transactions=useAllTransactions();if(!transactionHash||!transactions[transactionHash])return false;return!transactions[transactionHash].receipt;}/**\n * 返回事务是否发生在最后一天(86400秒* 1000毫秒/秒)\n * @param tx to check for recency\n */export function isTransactionRecent(tx){return new Date().getTime()-tx.addedTime<86400000;}// 返回令牌是否有未决的审批事务\nexport function useHasPendingApproval(tokenAddress,spender){const allTransactions=useAllTransactions();// console.log(allTransactions)\nreturn useMemo(()=>(typeof tokenAddress==='string'||typeof tokenAddress==='number')&&typeof spender==='string'&&Object.keys(allTransactions).some(hash=>{const tx=allTransactions[hash];if(!tx)return false;if(tx.receipt){return false;}else{const approval=tx.approval;if(!approval)return false;return approval.spender===spender&&approval.tokenAddress===tokenAddress&&isTransactionRecent(tx);}}),[allTransactions,spender,tokenAddress]);}// 注意提交索赔\n// 如果没有加载，返回null;如果没有找到，返回undefined\nexport function useUserHasSubmittedClaim(account){const allTransactions=useAllTransactions();// get the txn if it has been submitted\nconst claimTxn=useMemo(()=>{const txnIndex=Object.keys(allTransactions).find(hash=>{const tx=allTransactions[hash];return tx.claim&&tx.claim.recipient===account;});return txnIndex&&allTransactions[txnIndex]?allTransactions[txnIndex]:undefined;},[account,allTransactions]);return{claimSubmitted:Boolean(claimTxn),claimTxn};}export function useHashSwapInfo(hash){return new Promise(resolve=>{const url=\"\".concat(config.bridgeApi,\"/v2/history/details/latest?params=\").concat(hash);axios.get(url).then(res=>{const{status,data}=res;if(status===200){resolve(data);}else{resolve('');}}).catch(err=>{console.log(err);resolve('');});});}export function useUpdateUnderlyingStatus(){const dispatch=useDispatch();// const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\nconst setUnderlyingStatus=useCallback((chainId,hash,isReceiveAnyToken)=>{// console.log(chainId, hash, isReceiveAnyToken)\ndispatch(updateUnderlyingStatus({chainId,hash,isReceiveAnyToken}));},[dispatch]);return{setUnderlyingStatus};}export function useAddNoWalletTx(){const dispatch=useDispatch();const{chainId}=useActiveReact();// const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\nconst setAddNoWalletTx=useCallback(function(response){let{summary,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// console.log(chainId, hash, isReceiveAnyToken)\n// dispatch(noWalletTxList({chainId, hash, version}))\nconst{hash}=response;// console.log(hash)\nif(!hash){throw Error('No transaction hash found.');}dispatch(noWalletTxList({hash,chainId,summary,toChainId,toAddress,symbol,version,routerToken,token,logoUrl,isLiquidity,fromInfo,toInfo}));},[dispatch]);return{setAddNoWalletTx};}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","axios","useActiveReact","addTransaction","updateUnderlyingStatus","noWalletTxList","config","useIsGnosisSafeWallet","useTransactionAdder","chainId","account","dispatch","isGnosisSafeWallet","response","summary","approval","claim","value","toChainId","toAddress","symbol","version","routerToken","token","logoUrl","isLiquidity","fromInfo","toInfo","arguments","length","undefined","hash","Error","from","useAllTransactions","_state$chainId","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","claimSubmitted","Boolean","useHashSwapInfo","Promise","resolve","url","concat","bridgeApi","get","then","res","status","data","catch","err","console","log","useUpdateUnderlyingStatus","setUnderlyingStatus","isReceiveAnyToken","useAddNoWalletTx","setAddNoWalletTx"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/state/transactions/hooks.tsx"],"sourcesContent":["// import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport axios from 'axios'\n\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction, updateUnderlyingStatus, noWalletTxList } from './actions'\nimport { TransactionDetails } from './reducer'\n\nimport config from '../../config'\n\nimport {useIsGnosisSafeWallet} from '../wallet/hooks'\n\ninterface TransactionResponse {\n  hash: string\n}\n\n// 可以接受ether库事务响应并将其添加到事务列表的助手\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: {\n    summary?: string;\n    approval?: { tokenAddress: string; spender: string };\n    claim?: { recipient: string };\n    value?: any;\n    toChainId?: any;\n    toAddress?: any;\n    symbol?: any;\n    version?: any;\n    routerToken?: any;\n    token?: any;\n    logoUrl?: any;\n    isLiquidity?: any;\n    fromInfo?: any;\n    toInfo?: any;\n  }\n) => void {\n  const { chainId, account } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n  const {isGnosisSafeWallet} = useIsGnosisSafeWallet()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        approval,\n        claim,\n        value,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }: {\n        summary?: string;\n        claim?: { recipient: string };\n        approval?: { tokenAddress: string; spender: string },\n        value?: any,\n        toChainId?: any,\n        toAddress?: any,\n        symbol?: any,\n        version?: any,\n        routerToken?: any,\n        token?: any,\n        logoUrl?: any,\n        isLiquidity?: any,\n        fromInfo?: any,\n        toInfo?: any,\n      } = {}\n    ) => {\n      // console.log(account, chainId, isGnosisSafeWallet)\n      if (!account) return\n      if (!chainId) return\n      if (isGnosisSafeWallet) return\n      \n      const { hash } = response\n      // console.log(hash)\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({\n        hash,\n        from: account,\n        chainId,\n        approval,\n        summary,\n        claim,\n        value,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }))\n    },\n    [dispatch, chainId, account, isGnosisSafeWallet]\n  )\n}\n\n// 返回当前链的所有事务\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveReact()\n\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * 返回事务是否发生在最后一天(86400秒* 1000毫秒/秒)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// 返回令牌是否有未决的审批事务\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  // console.log(allTransactions)\n  return useMemo(\n    () =>\n      (typeof tokenAddress === 'string' || typeof tokenAddress === 'number') &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some(hash => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          const approval = tx.approval\n          if (!approval) return false\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n\n// 注意提交索赔\n// 如果没有加载，返回null;如果没有找到，返回undefined\nexport function useUserHasSubmittedClaim(\n  account?: string\n): { claimSubmitted: boolean; claimTxn: TransactionDetails | undefined } {\n  const allTransactions = useAllTransactions()\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find(hash => {\n      const tx = allTransactions[hash]\n      return tx.claim && tx.claim.recipient === account\n    })\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined\n  }, [account, allTransactions])\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn }\n}\n\nexport function useHashSwapInfo (hash:any) {\n  return new Promise(resolve => {\n    const url = `${config.bridgeApi}/v2/history/details/latest?params=${hash}`\n    axios.get(url).then(res => {\n      const {status, data} = res\n      if (status === 200) {\n        resolve(data)\n      } else {\n        resolve('')\n      }\n    }).catch((err) => {\n      console.log(err)\n      resolve('')\n    })\n  })\n}\n\nexport function useUpdateUnderlyingStatus(): {setUnderlyingStatus?: (chainId: any, hash: string, isReceiveAnyToken: any) => void} {\n  const dispatch = useDispatch<AppDispatch>()\n  // const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const setUnderlyingStatus = useCallback(\n    (chainId: any, hash: string, isReceiveAnyToken: any) => {\n      // console.log(chainId, hash, isReceiveAnyToken)\n      dispatch(updateUnderlyingStatus({chainId, hash, isReceiveAnyToken}))\n    },\n    [dispatch]\n  )\n\n  return {\n    setUnderlyingStatus\n  }\n}\n\nexport function useAddNoWalletTx(): any {\n  const dispatch = useDispatch<AppDispatch>()\n  const { chainId } = useActiveReact()\n  // const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\n\n  const setAddNoWalletTx = useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }: {\n        summary?: string;\n        toChainId?: any,\n        toAddress?: any,\n        symbol?: any,\n        version?: any,\n        routerToken?: any,\n        token?: any,\n        logoUrl?: any,\n        isLiquidity?: any,\n        fromInfo?: any,\n        toInfo?: any,\n      } = {}\n    ) => {\n      // console.log(chainId, hash, isReceiveAnyToken)\n      // dispatch(noWalletTxList({chainId, hash, version}))\n      const { hash } = response\n      \n      // console.log(hash)\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(noWalletTxList({\n        hash,\n        chainId,\n        summary,\n        toChainId,\n        toAddress,\n        symbol,\n        version,\n        routerToken,\n        token,\n        logoUrl,\n        isLiquidity,\n        fromInfo,\n        toInfo\n      }))\n    },\n    [dispatch]\n  )\n\n  return {\n    setAddNoWalletTx\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}