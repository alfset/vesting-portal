{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport { ChainId } from '../../config/chainConfig/chainId';\nimport { useActiveReact } from '../../hooks/useActiveReact';\nimport { useDispatch } from 'react-redux';\nimport useInterval from '../../hooks/useInterval';\nimport { useLoginAtom, useAtomBalance } from './index';\nimport { atomBalanceList } from './actions';\nexport default function Updater() {\n  const {\n    chainId,\n    account\n  } = useActiveReact();\n  const dispatch = useDispatch();\n  const {\n    loginAtom\n  } = useLoginAtom();\n  const {\n    getAtomSeiBalance\n  } = useAtomBalance();\n  const getBalance = useCallback(() => {\n    getAtomSeiBalance({\n      chainId,\n      account\n    }).then(res => {\n      const list = {};\n      // console.log(res)\n      if (res && res.length > 0) {\n        for (const obj of res) {\n          // console.log(obj)\n          if ((obj === null || obj === void 0 ? void 0 : obj.denom) === 'usei') {\n            list['NATIVE'] = {\n              balance: obj === null || obj === void 0 ? void 0 : obj.amount\n            };\n          }\n          list[obj === null || obj === void 0 ? void 0 : obj.denom] = {\n            balance: obj === null || obj === void 0 ? void 0 : obj.amount\n          };\n        }\n      }\n      // console.log(list)\n      dispatch(atomBalanceList({\n        list\n      }));\n    });\n  }, [account, chainId, dispatch]);\n  useEffect(() => {\n    getBalance();\n  }, [account, chainId, dispatch]);\n  useInterval(getBalance, 1000 * 5);\n  const getAtomAddress = useCallback(() => {\n    console.log(chainId);\n    if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n      loginAtom(chainId);\n    }\n  }, [chainId]);\n  useEffect(() => {\n    getAtomAddress();\n  }, [chainId]);\n  return null;\n}","map":{"version":3,"names":["useCallback","useEffect","ChainId","useActiveReact","useDispatch","useInterval","useLoginAtom","useAtomBalance","atomBalanceList","Updater","chainId","account","dispatch","loginAtom","getAtomSeiBalance","getBalance","then","res","list","length","obj","denom","balance","amount","getAtomAddress","console","log","ATOM_SEI","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","includes"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/atom/updater.ts"],"sourcesContent":["\nimport { useCallback, useEffect } from 'react'\nimport { ChainId } from '../../config/chainConfig/chainId'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from '../../state'\nimport useInterval from '../../hooks/useInterval'\nimport {\n  useLoginAtom,\n  useAtomBalance\n} from './index'\nimport {\n  atomBalanceList\n} from './actions'\n\nexport default function Updater(): null {\n  const { chainId, account } = useActiveReact()\n  const dispatch = useDispatch<AppDispatch>()\n  const {loginAtom} = useLoginAtom()\n  const {getAtomSeiBalance} = useAtomBalance()\n\n  const getBalance = useCallback(() => {\n    getAtomSeiBalance({chainId, account}).then((res:any) => {\n      const list:any = {}\n      // console.log(res)\n      if (res && res.length > 0) {\n        for (const obj of res) {\n          // console.log(obj)\n          if (obj?.denom === 'usei') {\n            list['NATIVE'] = {\n              balance: obj?.amount\n            }\n          }\n          list[obj?.denom] = {\n            balance: obj?.amount\n          }\n        }\n      }\n      // console.log(list)\n      dispatch(atomBalanceList({list}))\n    })\n  }, [account, chainId, dispatch])\n\n  useEffect(() => {\n    getBalance()\n  }, [account, chainId, dispatch])\n\n  useInterval(getBalance, 1000 * 5)\n\n  const getAtomAddress = useCallback(() => {\n    console.log(chainId)\n    if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST, ChainId.ATOM_DCORE, ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n      loginAtom(chainId)\n    }\n  }, [chainId])\n\n  useEffect(() => {\n    getAtomAddress()\n  }, [chainId])\n\n  return null\n}\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC9C,SAASC,OAAO,QAAQ,kCAAkC;AAC1D,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,WAAW,QAAQ,aAAa;AAEzC,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SACEC,YAAY,EACZC,cAAc,QACT,SAAS;AAChB,SACEC,eAAe,QACV,WAAW;AAElB,eAAe,SAASC,OAAOA,CAAA,EAAS;EACtC,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGR,cAAc,CAAC,CAAC;EAC7C,MAAMS,QAAQ,GAAGR,WAAW,CAAc,CAAC;EAC3C,MAAM;IAACS;EAAS,CAAC,GAAGP,YAAY,CAAC,CAAC;EAClC,MAAM;IAACQ;EAAiB,CAAC,GAAGP,cAAc,CAAC,CAAC;EAE5C,MAAMQ,UAAU,GAAGf,WAAW,CAAC,MAAM;IACnCc,iBAAiB,CAAC;MAACJ,OAAO;MAAEC;IAAO,CAAC,CAAC,CAACK,IAAI,CAAEC,GAAO,IAAK;MACtD,MAAMC,IAAQ,GAAG,CAAC,CAAC;MACnB;MACA,IAAID,GAAG,IAAIA,GAAG,CAACE,MAAM,GAAG,CAAC,EAAE;QACzB,KAAK,MAAMC,GAAG,IAAIH,GAAG,EAAE;UACrB;UACA,IAAI,CAAAG,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,KAAK,MAAK,MAAM,EAAE;YACzBH,IAAI,CAAC,QAAQ,CAAC,GAAG;cACfI,OAAO,EAAEF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEG;YAChB,CAAC;UACH;UACAL,IAAI,CAACE,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,KAAK,CAAC,GAAG;YACjBC,OAAO,EAAEF,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEG;UAChB,CAAC;QACH;MACF;MACA;MACAX,QAAQ,CAACJ,eAAe,CAAC;QAACU;MAAI,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,OAAO,EAAED,OAAO,EAAEE,QAAQ,CAAC,CAAC;EAEhCX,SAAS,CAAC,MAAM;IACdc,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACJ,OAAO,EAAED,OAAO,EAAEE,QAAQ,CAAC,CAAC;EAEhCP,WAAW,CAACU,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC;EAEjC,MAAMS,cAAc,GAAGxB,WAAW,CAAC,MAAM;IACvCyB,OAAO,CAACC,GAAG,CAAChB,OAAO,CAAC;IACpB,IAAI,CAACR,OAAO,CAACyB,QAAQ,EAAEzB,OAAO,CAAC0B,aAAa,EAAE1B,OAAO,CAAC2B,UAAU,EAAE3B,OAAO,CAAC4B,eAAe,CAAC,CAACC,QAAQ,CAACrB,OAAO,CAAC,EAAE;MAC5GG,SAAS,CAACH,OAAO,CAAC;IACpB;EACF,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEbT,SAAS,CAAC,MAAM;IACduB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACd,OAAO,CAAC,CAAC;EAEb,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}