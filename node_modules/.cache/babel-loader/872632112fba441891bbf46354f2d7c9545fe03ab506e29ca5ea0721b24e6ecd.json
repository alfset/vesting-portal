{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactBitArray = void 0;\nvar multisig_1 = require(\"@terra-money/terra.proto/cosmos/crypto/multisig/v1beta1/multisig\");\nvar CompactBitArray = /** @class */function () {\n  function CompactBitArray(extra_bits_stored, elems) {\n    this.extra_bits_stored = extra_bits_stored;\n    this.elems = elems;\n  }\n  CompactBitArray.fromBits = function (bits) {\n    if (bits <= 0) {\n      throw new Error('CompactBitArray bits must be bigger than 0');\n    }\n    var num_elems = (bits + 7) / 8;\n    if (num_elems <= 0 || num_elems > Math.pow(2, 32) - 1) {\n      // We encountered an overflow here, and shouldn't pass negatives\n      // to make, nor should we allow unreasonable limits > maxint32.\n      // See https://github.com/cosmos/cosmos-sdk/issues/9162\n      throw new Error('CompactBitArray overflow');\n    }\n    return new CompactBitArray(bits % 8, Buffer.alloc(num_elems));\n  };\n  // returns the number of bits in the bitarray\n  CompactBitArray.prototype.count = function () {\n    if (this.extra_bits_stored == 0) {\n      return this.elems.length * 8;\n    }\n    return (this.elems.length - 1) * 8 + this.extra_bits_stored;\n  };\n  // returns true if the bit at index i is set; returns false otherwise.\n  // The behavior is undefined if i >= bA.Count()\n  CompactBitArray.prototype.getIndex = function (i) {\n    if (i < 0 || i >= this.count()) {\n      return false;\n    }\n    return (this.elems.readUInt8(i >> 3) & 1 << 7 - i % 8) > 0;\n  };\n  // sets the bit at index i within the bit array. Returns true if and only if the\n  // operation succeeded. The behavior is undefined if i >= bA.Count()\n  CompactBitArray.prototype.setIndex = function (i, v) {\n    if (i < 0 || i >= this.count()) {\n      return false;\n    }\n    if (v) {\n      this.elems[i >> 3] |= 1 << 7 - i % 8;\n    } else {\n      this.elems[i >> 3] &= ~(1 << 7 - i % 8);\n    }\n    return true;\n  };\n  // returns the number of bits set to true before the\n  // given index. e.g. if bA = _XX__XX, NumOfTrueBitsBefore(4) = 2, since\n  // there are two bits set to true before index 4.\n  CompactBitArray.prototype.numTrueBitsBefore = function (index) {\n    var countOneBits = function (n) {\n      return n.toString(2).split('0').join('').length;\n    };\n    var ones_count = 0;\n    var max = this.count();\n    if (index > max) {\n      index = max;\n    }\n    // below we iterate over the bytes then over bits (in low endian) and count bits set to 1\n    for (var elem = 0;; elem++) {\n      if (elem * 8 + 7 >= index) {\n        ones_count += countOneBits(this.elems[elem] >> 7 - index % 8 + 1);\n        return ones_count;\n      }\n      ones_count += countOneBits(this.elems[elem]);\n    }\n  };\n  CompactBitArray.fromData = function (data) {\n    return new CompactBitArray(data.extra_bits_stored, Buffer.from(data.elems, 'base64'));\n  };\n  CompactBitArray.prototype.toData = function () {\n    return {\n      elems: this.elems.toString('base64'),\n      extra_bits_stored: this.extra_bits_stored\n    };\n  };\n  CompactBitArray.fromProto = function (proto) {\n    return new CompactBitArray(proto.extraBitsStored, Buffer.from(proto.elems));\n  };\n  CompactBitArray.prototype.toProto = function () {\n    return multisig_1.CompactBitArray.fromPartial({\n      elems: this.elems,\n      extraBitsStored: this.extra_bits_stored\n    });\n  };\n  return CompactBitArray;\n}();\nexports.CompactBitArray = CompactBitArray;","map":{"version":3,"names":["multisig_1","require","CompactBitArray","extra_bits_stored","elems","fromBits","bits","Error","num_elems","Math","pow","Buffer","alloc","prototype","count","length","getIndex","i","readUInt8","setIndex","v","numTrueBitsBefore","index","countOneBits","n","toString","split","join","ones_count","max","elem","fromData","data","from","toData","fromProto","proto","extraBitsStored","toProto","fromPartial","exports"],"sources":["../../src/core/CompactBitArray.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}