{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a Secp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signAmino(signerAddress, signDoc) {\n    if (signerAddress !== this.address) {\n      throw new Error(\"Address \".concat(signerAddress, \" not found in wallet\"));\n    }\n    const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes)\n    };\n  }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;","map":{"version":3,"names":["crypto_1","require","encoding_1","addresses_1","signature_1","signdoc_1","Secp256k1Wallet","constructor","privkey","pubkey","prefix","fromKey","arguments","length","undefined","uncompressed","Secp256k1","makeKeypair","compressPubkey","address","toBech32","rawSecp256k1PubkeyToRawAddress","getAccounts","algo","signAmino","signerAddress","signDoc","Error","concat","message","Sha256","serializeSignDoc","digest","signature","createSignature","signatureBytes","Uint8Array","r","s","signed","encodeSecp256k1Signature","exports"],"sources":["../src/secp256k1wallet.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAEA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,SAAA,GAAAJ,OAAA;AAGA;;;;;AAKA,MAAaK,eAAe;EAgB1BC,YAAoBC,OAAmB,EAAEC,MAAkB,EAAEC,MAAc;IACzE,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAnBA;;;;;;EAMO,aAAaC,OAAOA,CAACH,OAAmB,EAAmB;IAAA,IAAjBE,MAAM,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;IAChE,MAAMG,YAAY,GAAG,CAAC,MAAMf,QAAA,CAAAgB,SAAS,CAACC,WAAW,CAACT,OAAO,CAAC,EAAEC,MAAM;IAClE,OAAO,IAAIH,eAAe,CAACE,OAAO,EAAER,QAAA,CAAAgB,SAAS,CAACE,cAAc,CAACH,YAAY,CAAC,EAAEL,MAAM,CAAC;EACrF;EAYA,IAAYS,OAAOA,CAAA;IACjB,OAAO,IAAAjB,UAAA,CAAAkB,QAAQ,EAAC,IAAI,CAACV,MAAM,EAAE,IAAAP,WAAA,CAAAkB,8BAA8B,EAAC,IAAI,CAACZ,MAAM,CAAC,CAAC;EAC3E;EAEO,MAAMa,WAAWA,CAAA;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WAAW;MACjBJ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBV,MAAM,EAAE,IAAI,CAACA;KACd,CACF;EACH;EAEO,MAAMe,SAASA,CAACC,aAAqB,EAAEC,OAAmB;IAC/D,IAAID,aAAa,KAAK,IAAI,CAACN,OAAO,EAAE;MAClC,MAAM,IAAIQ,KAAK,YAAAC,MAAA,CAAYH,aAAa,yBAAsB,CAAC;;IAEjE,MAAMI,OAAO,GAAG,IAAI7B,QAAA,CAAA8B,MAAM,CAAC,IAAAzB,SAAA,CAAA0B,gBAAgB,EAACL,OAAO,CAAC,CAAC,CAACM,MAAM,EAAE;IAC9D,MAAMC,SAAS,GAAG,MAAMjC,QAAA,CAAAgB,SAAS,CAACkB,eAAe,CAACL,OAAO,EAAE,IAAI,CAACrB,OAAO,CAAC;IACxE,MAAM2B,cAAc,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAGH,SAAS,CAACI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGJ,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,OAAO;MACLC,MAAM,EAAEb,OAAO;MACfO,SAAS,EAAE,IAAA7B,WAAA,CAAAoC,wBAAwB,EAAC,IAAI,CAAC/B,MAAM,EAAE0B,cAAc;KAChE;EACH;;AA/CFM,OAAA,CAAAnC,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}