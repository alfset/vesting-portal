{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserLocalStorageKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\nconst LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';\n/**\n * This class is used to store keys in the browsers local storage.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores } from 'near-api-js';\n *\n * const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n * const config = {\n *   keyStore, // instance of BrowserLocalStorageKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass BrowserLocalStorageKeyStore extends keystore_1.KeyStore {\n  /**\n   * @param localStorage defaults to window.localStorage\n   * @param prefix defaults to `near-api-js:keystore:`\n   */\n  constructor() {\n    let localStorage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.localStorage;\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LOCAL_STORAGE_KEY_PREFIX;\n    super();\n    this.localStorage = localStorage;\n    this.prefix = prefix;\n  }\n  /**\n   * Stores a {@link KeyPair} in local storage.\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n  async setKey(networkId, accountId, keyPair) {\n    this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n  }\n  /**\n   * Gets a {@link KeyPair} from local storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n  async getKey(networkId, accountId) {\n    const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n    if (!value) {\n      return null;\n    }\n    return key_pair_1.KeyPair.fromString(value);\n  }\n  /**\n   * Removes a {@link KeyPair} from local storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n  async removeKey(networkId, accountId) {\n    this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n  }\n  /**\n   * Removes all items that start with `prefix` from local storage\n   */\n  async clear() {\n    for (const key of this.storageKeys()) {\n      if (key.startsWith(this.prefix)) {\n        this.localStorage.removeItem(key);\n      }\n    }\n  }\n  /**\n   * Get the network(s) from local storage\n   * @returns {Promise<string[]>}\n   */\n  async getNetworks() {\n    const result = new Set();\n    for (const key of this.storageKeys()) {\n      if (key.startsWith(this.prefix)) {\n        const parts = key.substring(this.prefix.length).split(':');\n        result.add(parts[1]);\n      }\n    }\n    return Array.from(result.values());\n  }\n  /**\n   * Gets the account(s) from local storage\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n  async getAccounts(networkId) {\n    const result = new Array();\n    for (const key of this.storageKeys()) {\n      if (key.startsWith(this.prefix)) {\n        const parts = key.substring(this.prefix.length).split(':');\n        if (parts[1] === networkId) {\n          result.push(parts[0]);\n        }\n      }\n    }\n    return result;\n  }\n  /**\n   * @hidden\n   * Helper function to retrieve a local storage key\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the storage keythat's sought\n   * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n   */\n  storageKeyForSecretKey(networkId, accountId) {\n    return \"\".concat(this.prefix).concat(accountId, \":\").concat(networkId);\n  }\n  /** @hidden */\n  *storageKeys() {\n    for (let i = 0; i < this.localStorage.length; i++) {\n      yield this.localStorage.key(i);\n    }\n  }\n}\nexports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","BrowserLocalStorageKeyStore","keystore_1","require","key_pair_1","LOCAL_STORAGE_KEY_PREFIX","KeyStore","constructor","localStorage","arguments","length","undefined","window","prefix","setKey","networkId","accountId","keyPair","setItem","storageKeyForSecretKey","toString","getKey","getItem","KeyPair","fromString","removeKey","removeItem","clear","key","storageKeys","startsWith","getNetworks","result","Set","parts","substring","split","add","Array","from","values","getAccounts","push","concat","i"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/near-api-js/lib/key_stores/browser_local_storage_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserLocalStorageKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\nconst LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';\n/**\n * This class is used to store keys in the browsers local storage.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores } from 'near-api-js';\n *\n * const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n * const config = {\n *   keyStore, // instance of BrowserLocalStorageKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass BrowserLocalStorageKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param localStorage defaults to window.localStorage\n     * @param prefix defaults to `near-api-js:keystore:`\n     */\n    constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX) {\n        super();\n        this.localStorage = localStorage;\n        this.prefix = prefix;\n    }\n    /**\n     * Stores a {@link KeyPair} in local storage.\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n    }\n    /**\n     * Gets a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n        if (!value) {\n            return null;\n        }\n        return key_pair_1.KeyPair.fromString(value);\n    }\n    /**\n     * Removes a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n    }\n    /**\n     * Removes all items that start with `prefix` from local storage\n     */\n    async clear() {\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                this.localStorage.removeItem(key);\n            }\n        }\n    }\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                const parts = key.substring(this.prefix.length).split(':');\n                result.add(parts[1]);\n            }\n        }\n        return Array.from(result.values());\n    }\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Array();\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                const parts = key.substring(this.prefix.length).split(':');\n                if (parts[1] === networkId) {\n                    result.push(parts[0]);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * @hidden\n     * Helper function to retrieve a local storage key\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the storage keythat's sought\n     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n     */\n    storageKeyForSecretKey(networkId, accountId) {\n        return `${this.prefix}${accountId}:${networkId}`;\n    }\n    /** @hidden */\n    *storageKeys() {\n        for (let i = 0; i < this.localStorage.length; i++) {\n            yield this.localStorage.key(i);\n        }\n    }\n}\nexports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}