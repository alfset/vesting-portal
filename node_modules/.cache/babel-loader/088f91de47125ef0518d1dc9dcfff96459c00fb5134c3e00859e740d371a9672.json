{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utils = void 0;\nvar tslib_1 = require(\"tslib\");\nvar clone_1 = tslib_1.__importDefault(require(\"lodash/clone\"));\nvar randombytes_1 = tslib_1.__importDefault(require(\"randombytes\"));\nvar stellar_base_1 = require(\"stellar-base\");\nvar errors_1 = require(\"./errors\");\nvar Utils;\n(function (Utils) {\n  function buildChallengeTx(serverKeypair, clientAccountID, homeDomain, timeout, networkPassphrase, webAuthDomain, memo, clientDomain, clientSigningKey) {\n    if (timeout === void 0) {\n      timeout = 300;\n    }\n    if (memo === void 0) {\n      memo = null;\n    }\n    if (clientDomain === void 0) {\n      clientDomain = null;\n    }\n    if (clientSigningKey === void 0) {\n      clientSigningKey = null;\n    }\n    if (clientAccountID.startsWith(\"M\") && memo) {\n      throw Error(\"memo cannot be used if clientAccountID is a muxed account\");\n    }\n    var account = new stellar_base_1.Account(serverKeypair.publicKey(), \"-1\");\n    var now = Math.floor(Date.now() / 1000);\n    var value = randombytes_1.default(48).toString(\"base64\");\n    var builder = new stellar_base_1.TransactionBuilder(account, {\n      fee: stellar_base_1.BASE_FEE,\n      networkPassphrase: networkPassphrase,\n      timebounds: {\n        minTime: now,\n        maxTime: now + timeout\n      }\n    }).addOperation(stellar_base_1.Operation.manageData({\n      name: homeDomain + \" auth\",\n      value: value,\n      source: clientAccountID\n    })).addOperation(stellar_base_1.Operation.manageData({\n      name: \"web_auth_domain\",\n      value: webAuthDomain,\n      source: account.accountId()\n    }));\n    if (clientDomain) {\n      if (!clientSigningKey) {\n        throw Error(\"clientSigningKey is required if clientDomain is provided\");\n      }\n      builder.addOperation(stellar_base_1.Operation.manageData({\n        name: \"client_domain\",\n        value: clientDomain,\n        source: clientSigningKey\n      }));\n    }\n    if (memo) {\n      builder.addMemo(stellar_base_1.Memo.id(memo));\n    }\n    var transaction = builder.build();\n    transaction.sign(serverKeypair);\n    return transaction.toEnvelope().toXDR(\"base64\").toString();\n  }\n  Utils.buildChallengeTx = buildChallengeTx;\n  function readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain) {\n    var _a;\n    if (serverAccountID.startsWith(\"M\")) {\n      throw Error(\"Invalid serverAccountID: multiplexed accounts are not supported.\");\n    }\n    var transaction;\n    try {\n      transaction = new stellar_base_1.Transaction(challengeTx, networkPassphrase);\n    } catch (_b) {\n      try {\n        transaction = new stellar_base_1.FeeBumpTransaction(challengeTx, networkPassphrase);\n      } catch (_c) {\n        throw new errors_1.InvalidSep10ChallengeError(\"Invalid challenge: unable to deserialize challengeTx transaction string\");\n      }\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid challenge: expected a Transaction but received a FeeBumpTransaction\");\n    }\n    var sequence = Number.parseInt(transaction.sequence, 10);\n    if (sequence !== 0) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction sequence number should be zero\");\n    }\n    if (transaction.source !== serverAccountID) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction source account is not equal to the server's account\");\n    }\n    if (transaction.operations.length < 1) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction should contain at least one operation\");\n    }\n    var _d = transaction.operations,\n      operation = _d[0],\n      subsequentOperations = _d.slice(1);\n    if (!operation.source) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation should contain a source account\");\n    }\n    var clientAccountID = operation.source;\n    var memo = null;\n    if (transaction.memo.type !== stellar_base_1.MemoNone) {\n      if (clientAccountID.startsWith(\"M\")) {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction has a memo but the client account ID is a muxed account\");\n      }\n      if (transaction.memo.type !== stellar_base_1.MemoID) {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction's memo must be of type `id`\");\n      }\n      memo = transaction.memo.value;\n    }\n    if (operation.type !== \"manageData\") {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation type should be 'manageData'\");\n    }\n    if (transaction.timeBounds && Number.parseInt((_a = transaction.timeBounds) === null || _a === void 0 ? void 0 : _a.maxTime, 10) === stellar_base_1.TimeoutInfinite) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction requires non-infinite timebounds\");\n    }\n    if (!validateTimebounds(transaction, 60 * 5)) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction has expired\");\n    }\n    if (operation.value === undefined) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation values should not be null\");\n    }\n    if (!operation.value) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation value should not be null\");\n    }\n    if (Buffer.from(operation.value.toString(), \"base64\").length !== 48) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation value should be a 64 bytes base64 random string\");\n    }\n    if (!homeDomains) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid homeDomains: a home domain must be provided for verification\");\n    }\n    var matchedHomeDomain;\n    if (typeof homeDomains === \"string\") {\n      if (homeDomains + \" auth\" === operation.name) {\n        matchedHomeDomain = homeDomains;\n      }\n    } else if (Array.isArray(homeDomains)) {\n      matchedHomeDomain = homeDomains.find(function (domain) {\n        return domain + \" auth\" === operation.name;\n      });\n    } else {\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid homeDomains: homeDomains type is \" + typeof homeDomains + \" but should be a string or an array\");\n    }\n    if (!matchedHomeDomain) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid homeDomains: the transaction's operation key name does not match the expected home domain\");\n    }\n    for (var _i = 0, subsequentOperations_1 = subsequentOperations; _i < subsequentOperations_1.length; _i++) {\n      var op = subsequentOperations_1[_i];\n      if (op.type !== \"manageData\") {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction has operations that are not of type 'manageData'\");\n      }\n      if (op.source !== serverAccountID && op.name !== \"client_domain\") {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction has operations that are unrecognized\");\n      }\n      if (op.name === \"web_auth_domain\") {\n        if (op.value === undefined) {\n          throw new errors_1.InvalidSep10ChallengeError(\"'web_auth_domain' operation value should not be null\");\n        }\n        if (op.value.compare(Buffer.from(webAuthDomain))) {\n          throw new errors_1.InvalidSep10ChallengeError(\"'web_auth_domain' operation value does not match \" + webAuthDomain);\n        }\n      }\n    }\n    if (!verifyTxSignedBy(transaction, serverAccountID)) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Transaction not signed by server: '\" + serverAccountID + \"'\");\n    }\n    return {\n      tx: transaction,\n      clientAccountID: clientAccountID,\n      matchedHomeDomain: matchedHomeDomain,\n      memo: memo\n    };\n  }\n  Utils.readChallengeTx = readChallengeTx;\n  function verifyChallengeTxThreshold(challengeTx, serverAccountID, networkPassphrase, threshold, signerSummary, homeDomains, webAuthDomain) {\n    var _a;\n    var signers = signerSummary.map(function (signer) {\n      return signer.key;\n    });\n    var signersFound = verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain);\n    var weight = 0;\n    var _loop_1 = function (signer) {\n      var sigWeight = ((_a = signerSummary.find(function (s) {\n        return s.key === signer;\n      })) === null || _a === void 0 ? void 0 : _a.weight) || 0;\n      weight += sigWeight;\n    };\n    for (var _i = 0, signersFound_1 = signersFound; _i < signersFound_1.length; _i++) {\n      var signer = signersFound_1[_i];\n      _loop_1(signer);\n    }\n    if (weight < threshold) {\n      throw new errors_1.InvalidSep10ChallengeError(\"signers with weight \" + weight + \" do not meet threshold \" + threshold + \"\\\"\");\n    }\n    return signersFound;\n  }\n  Utils.verifyChallengeTxThreshold = verifyChallengeTxThreshold;\n  function verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain) {\n    var tx = readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain).tx;\n    var serverKP;\n    try {\n      serverKP = stellar_base_1.Keypair.fromPublicKey(serverAccountID);\n    } catch (err) {\n      throw new Error(\"Couldn't infer keypair from the provided 'serverAccountID': \" + err.message);\n    }\n    var clientSigners = new Set();\n    for (var _i = 0, signers_1 = signers; _i < signers_1.length; _i++) {\n      var signer = signers_1[_i];\n      if (signer === serverKP.publicKey()) {\n        continue;\n      }\n      if (signer.charAt(0) !== \"G\") {\n        continue;\n      }\n      clientSigners.add(signer);\n    }\n    if (clientSigners.size === 0) {\n      throw new errors_1.InvalidSep10ChallengeError(\"No verifiable client signers provided, at least one G... address must be provided\");\n    }\n    var clientSigningKey;\n    for (var _a = 0, _b = tx.operations; _a < _b.length; _a++) {\n      var op = _b[_a];\n      if (op.type === \"manageData\" && op.name === \"client_domain\") {\n        if (clientSigningKey) {\n          throw new errors_1.InvalidSep10ChallengeError(\"Found more than one client_domain operation\");\n        }\n        clientSigningKey = op.source;\n      }\n    }\n    var allSigners = tslib_1.__spreadArrays([serverKP.publicKey()], Array.from(clientSigners));\n    if (clientSigningKey) {\n      allSigners.push(clientSigningKey);\n    }\n    var signersFound = gatherTxSigners(tx, allSigners);\n    var serverSignatureFound = false;\n    var clientSigningKeySignatureFound = false;\n    for (var _c = 0, signersFound_2 = signersFound; _c < signersFound_2.length; _c++) {\n      var signer = signersFound_2[_c];\n      if (signer === serverKP.publicKey()) {\n        serverSignatureFound = true;\n      }\n      if (signer === clientSigningKey) {\n        clientSigningKeySignatureFound = true;\n      }\n    }\n    if (!serverSignatureFound) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Transaction not signed by server: '\" + serverKP.publicKey() + \"'\");\n    }\n    if (clientSigningKey && !clientSigningKeySignatureFound) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Transaction not signed by the source account of the 'client_domain' \" + \"ManageData operation\");\n    }\n    if (signersFound.length === 1) {\n      throw new errors_1.InvalidSep10ChallengeError(\"None of the given signers match the transaction signatures\");\n    }\n    if (signersFound.length !== tx.signatures.length) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Transaction has unrecognized signatures\");\n    }\n    signersFound.splice(signersFound.indexOf(serverKP.publicKey()), 1);\n    if (clientSigningKey) {\n      signersFound.splice(signersFound.indexOf(clientSigningKey), 1);\n    }\n    return signersFound;\n  }\n  Utils.verifyChallengeTxSigners = verifyChallengeTxSigners;\n  function verifyTxSignedBy(transaction, accountID) {\n    return gatherTxSigners(transaction, [accountID]).length !== 0;\n  }\n  Utils.verifyTxSignedBy = verifyTxSignedBy;\n  function gatherTxSigners(transaction, signers) {\n    var hashedSignatureBase = transaction.hash();\n    var txSignatures = clone_1.default(transaction.signatures);\n    var signersFound = new Set();\n    for (var _i = 0, signers_2 = signers; _i < signers_2.length; _i++) {\n      var signer = signers_2[_i];\n      if (txSignatures.length === 0) {\n        break;\n      }\n      var keypair = void 0;\n      try {\n        keypair = stellar_base_1.Keypair.fromPublicKey(signer);\n      } catch (err) {\n        throw new errors_1.InvalidSep10ChallengeError(\"Signer is not a valid address: \" + err.message);\n      }\n      for (var i = 0; i < txSignatures.length; i++) {\n        var decSig = txSignatures[i];\n        if (!decSig.hint().equals(keypair.signatureHint())) {\n          continue;\n        }\n        if (keypair.verify(hashedSignatureBase, decSig.signature())) {\n          signersFound.add(signer);\n          txSignatures.splice(i, 1);\n          break;\n        }\n      }\n    }\n    return Array.from(signersFound);\n  }\n  Utils.gatherTxSigners = gatherTxSigners;\n  function validateTimebounds(transaction, gracePeriod) {\n    if (gracePeriod === void 0) {\n      gracePeriod = 0;\n    }\n    if (!transaction.timeBounds) {\n      return false;\n    }\n    var now = Math.floor(Date.now() / 1000);\n    var _a = transaction.timeBounds,\n      minTime = _a.minTime,\n      maxTime = _a.maxTime;\n    return now >= Number.parseInt(minTime, 10) - gracePeriod && now <= Number.parseInt(maxTime, 10) + gracePeriod;\n  }\n})(Utils = exports.Utils || (exports.Utils = {}));","map":{"version":3,"names":["clone_1","tslib_1","__importDefault","require","randombytes_1","stellar_base_1","errors_1","Utils","buildChallengeTx","serverKeypair","clientAccountID","homeDomain","timeout","networkPassphrase","webAuthDomain","memo","clientDomain","clientSigningKey","startsWith","Error","account","Account","publicKey","now","Math","floor","Date","value","default","toString","builder","TransactionBuilder","fee","BASE_FEE","timebounds","minTime","maxTime","addOperation","Operation","manageData","name","source","accountId","addMemo","Memo","id","transaction","build","sign","toEnvelope","toXDR","readChallengeTx","challengeTx","serverAccountID","homeDomains","Transaction","_b","FeeBumpTransaction","_c","InvalidSep10ChallengeError","sequence","Number","parseInt","operations","length","_d","operation","subsequentOperations","slice","type","MemoNone","MemoID","timeBounds","_a","TimeoutInfinite","validateTimebounds","undefined","Buffer","from","matchedHomeDomain","Array","isArray","find","domain","_i","subsequentOperations_1","op","compare","verifyTxSignedBy","tx","verifyChallengeTxThreshold","threshold","signerSummary","signers","map","signer","key","signersFound","verifyChallengeTxSigners","weight","sigWeight","s","signersFound_1","serverKP","Keypair","fromPublicKey","err","message","clientSigners","Set","signers_1","charAt","add","size","allSigners","__spreadArrays","push","gatherTxSigners","serverSignatureFound","clientSigningKeySignatureFound","signersFound_2","signatures","splice","indexOf","accountID","hashedSignatureBase","hash","txSignatures","signers_2","keypair","i","decSig","hint","equals","signatureHint","verify","signature","gracePeriod","exports"],"sources":["../src/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}