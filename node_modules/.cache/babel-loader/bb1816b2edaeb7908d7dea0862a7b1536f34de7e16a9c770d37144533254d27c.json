{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst varuint = require('./varint');\nexports.range = n => [...Array(n).keys()];\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  let j = buffer.length - 1;\n  let tmp = 0;\n  for (let i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n  return buffer;\n}\nexports.reverseBuffer = reverseBuffer;\nfunction keyValsToBuffer(keyVals) {\n  const buffers = keyVals.map(keyValToBuffer);\n  buffers.push(Buffer.from([0]));\n  return Buffer.concat(buffers);\n}\nexports.keyValsToBuffer = keyValsToBuffer;\nfunction keyValToBuffer(keyVal) {\n  const keyLen = keyVal.key.length;\n  const valLen = keyVal.value.length;\n  const keyVarIntLen = varuint.encodingLength(keyLen);\n  const valVarIntLen = varuint.encodingLength(valLen);\n  const buffer = Buffer.allocUnsafe(keyVarIntLen + keyLen + valVarIntLen + valLen);\n  varuint.encode(keyLen, buffer, 0);\n  keyVal.key.copy(buffer, keyVarIntLen);\n  varuint.encode(valLen, buffer, keyVarIntLen + keyLen);\n  keyVal.value.copy(buffer, keyVarIntLen + keyLen + valVarIntLen);\n  return buffer;\n}\nexports.keyValToBuffer = keyValToBuffer;\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint(value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n}\nfunction readUInt64LE(buffer, offset) {\n  const a = buffer.readUInt32LE(offset);\n  let b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\nexports.readUInt64LE = readUInt64LE;\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\nexports.writeUInt64LE = writeUInt64LE;","map":{"version":3,"names":["Object","defineProperty","exports","value","varuint","require","range","n","Array","keys","reverseBuffer","buffer","length","j","tmp","i","keyValsToBuffer","keyVals","buffers","map","keyValToBuffer","push","Buffer","from","concat","keyVal","keyLen","key","valLen","keyVarIntLen","encodingLength","valVarIntLen","allocUnsafe","encode","copy","verifuint","max","Error","Math","floor","readUInt64LE","offset","a","readUInt32LE","b","writeUInt64LE","writeInt32LE","writeUInt32LE"],"sources":["/workspace/Planq-Dapps/vesting-portal/node_modules/bip174/src/lib/converter/tools.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst varuint = require('./varint');\nexports.range = n => [...Array(n).keys()];\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  let j = buffer.length - 1;\n  let tmp = 0;\n  for (let i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n  return buffer;\n}\nexports.reverseBuffer = reverseBuffer;\nfunction keyValsToBuffer(keyVals) {\n  const buffers = keyVals.map(keyValToBuffer);\n  buffers.push(Buffer.from([0]));\n  return Buffer.concat(buffers);\n}\nexports.keyValsToBuffer = keyValsToBuffer;\nfunction keyValToBuffer(keyVal) {\n  const keyLen = keyVal.key.length;\n  const valLen = keyVal.value.length;\n  const keyVarIntLen = varuint.encodingLength(keyLen);\n  const valVarIntLen = varuint.encodingLength(valLen);\n  const buffer = Buffer.allocUnsafe(\n    keyVarIntLen + keyLen + valVarIntLen + valLen,\n  );\n  varuint.encode(keyLen, buffer, 0);\n  keyVal.key.copy(buffer, keyVarIntLen);\n  varuint.encode(valLen, buffer, keyVarIntLen + keyLen);\n  keyVal.value.copy(buffer, keyVarIntLen + keyLen + valVarIntLen);\n  return buffer;\n}\nexports.keyValToBuffer = keyValToBuffer;\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint(value, max) {\n  if (typeof value !== 'number')\n    throw new Error('cannot write a non-number as a number');\n  if (value < 0)\n    throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value)\n    throw new Error('value has a fractional component');\n}\nfunction readUInt64LE(buffer, offset) {\n  const a = buffer.readUInt32LE(offset);\n  let b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\nexports.readUInt64LE = readUInt64LE;\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\nexports.writeUInt64LE = writeUInt64LE;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}