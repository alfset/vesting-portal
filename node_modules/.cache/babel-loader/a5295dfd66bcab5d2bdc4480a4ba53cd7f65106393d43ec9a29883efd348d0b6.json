{"ast":null,"code":"import{useDispatch,useSelector}from'react-redux';import{useCallback,useEffect,useMemo,useState}from\"react\";import{useTranslation}from'react-i18next';import{getWeb3}from'../../utils/tools/web3UtilsV2';import config from'../../config';import{ChainId}from\"../../config/chainConfig/chainId\";import{BigAmount}from'../../utils/formatBignumber';import{tryParseAmount3}from'../../state/swap/hooks';import{xlmAddress,balanceList}from'./actions';import{recordsTxns}from'../../utils/bridge/register';import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';const StellarSdk=require('stellar-sdk');const NOT_APPLICABLE={};export function formatXlmMemo(address,chainId){if(!address||!chainId)return'';const web3=getWeb3();const totalLength=64;const addressToBytes=web3.utils.hexToBytes(address);const addressBytesLength=addressToBytes.length;const addressBytesStr=Buffer.from([addressBytesLength]).toString('hex');const addressHexStr=address.replace('0x','');const addressLength=addressHexStr.length;const chainIdToHex=web3.utils.numberToHex(chainId);const chainIdHexStr=chainIdToHex.replace('0x','');const chainIdLength=chainIdHexStr.length;const differLength=totalLength-addressLength-chainIdLength-addressBytesStr.length;const zeroArr=[];for(let i=0;i<differLength;i++){zeroArr.push(0);}const zreoStr=zeroArr.join('');return addressBytesStr+addressHexStr+zreoStr+chainIdHexStr;}// function HexString2Bytes(str:any) {\n//   var pos = 0;\n//   var len = str.length;\n//   if (len % 2 != 0) {\n//     return null;\n//   }\n//   len /= 2;\n//   var arrBytes = new Array();\n//   for (var i = 0; i < len; i++) {\n//     var s = str.substr(pos, 2);\n//     var v = intToByte(parseInt(s, 16));\n//     arrBytes.push(v);\n//     pos += 2;\n//   }\n//   return arrBytes;\n// }\n// export function formatXlmMemo (address:any, chainId:any) {\n//   if (!address || !chainId) return ''\n//   const web3 = getWeb3()\n//   const totalLength = 64\n//   const addressToBytes = web3.utils.hexToBytes(address)\n//   // const addressToBytes = Buffer.from(address)\n//   const addressLength = addressToBytes.length\n//   const chainIdToHex = web3.utils.numberToHex(chainId)\n//   // console.log(chainIdToHex)\n//   const chainIdToBytes = web3.utils.hexToBytes(chainIdToHex)\n//   // const chainIdToBytes = Buffer.from(chainId + '')\n//   const chainIdLength = chainIdToBytes.length\n//   // console.log(chainIdToBytes)\n//   // console.log(chainIdToBytes.toString('hex'))\n//   console.log('addressLength', addressLength)\n//   // console.log(chainIdLength)\n//   const differLength = totalLength - 1 - addressLength - chainIdLength\n//   const differLength1 = totalLength - 1 - addressLength\n//   const zeroArr = []\n//   for (let i = 0; i < differLength; i++) {\n//     zeroArr.push(0)\n//   }\n//   const resultArr = [addressLength, ...addressToBytes, ...zeroArr, ...chainIdToBytes]\n//   console.log('differLength1', differLength1)\n//   console.log('differLength', differLength)\n//   console.log(web3.utils.padLeft(chainIdToHex, differLength1 + chainIdLength))\n//   console.log(Buffer.from([addressLength, ...addressToBytes]).toString('hex'))\n//   // console.log(Buffer.from(resultArr).toString('hex'))\n//   return Buffer.from(resultArr).toString('hex')\n// }\n// console.log(formatXlmMemo('0xC5107334A3Ae117E3DaD3570b419618C905Aa5eC', '5777'))\n// console.log(formatXlmMemo('0xC03033d8b833fF7ca08BF2A58C9BC9d711257249', '2000'))\nlet isOpenXlmWallet=0;export function useXlmAddress(){const account=useSelector(state=>state.xlm.xlmAddress);// console.log(account)\nreturn account;}export function connectXlmWallet(){const dispatch=useDispatch();const account=useSelector(state=>state.xlm.xlmAddress);const loginXlm=useCallback(()=>{return new Promise(resolve=>{if(!isOpenXlmWallet){var _window,_window$freighterApi;isOpenXlmWallet=1;if((_window=window)===null||_window===void 0?void 0:(_window$freighterApi=_window.freighterApi)===null||_window$freighterApi===void 0?void 0:_window$freighterApi.isConnected()){var _window2,_window2$freighterApi;(_window2=window)===null||_window2===void 0?void 0:(_window2$freighterApi=_window2.freighterApi)===null||_window2$freighterApi===void 0?void 0:_window2$freighterApi.getPublicKey().then(res=>{// console.log(res)\ndispatch(xlmAddress({address:res}));isOpenXlmWallet=0;resolve(res);}).catch(()=>{isOpenXlmWallet=0;resolve('');});}else{// setAddress('')\nif(confirm('Please install Freighter Wallet.')===true){window.open('https://chrome.google.com/webstore/detail/freighter/bcacfldlkkdogcmkkibnjlakofdplcbk');}isOpenXlmWallet=0;resolve('');}}});},[isOpenXlmWallet]);return{loginXlm,xlmAddress:account};}export function useXlmBalance(){const{xlmAddress}=connectXlmWallet();const dispatch=useDispatch();const balanceListResult=useSelector(state=>state.xlm.balanceList);const TimeKey='timestamp';const getAllBalance=useCallback((chainId,account)=>{return new Promise(resolve=>{const useAccount=account?account:xlmAddress;if([ChainId.XLM,ChainId.XLM_TEST].includes(chainId)&&useAccount){// console.log(useAccount)\nif(balanceListResult&&balanceListResult[TimeKey]&&Date.now()-balanceListResult[TimeKey]<5000){resolve(balanceListResult);}else{const url=\"\".concat(config.chainInfo[chainId].nodeRpc,\"/accounts/\").concat(useAccount);fetch(url).then(res=>res.json()).then(json=>{// console.log(json)\nconst res=json;const list={[TimeKey]:Date.now()};for(const obj of res.balances){let token=obj.asset_code+'/'+obj.asset_issuer;if(obj.asset_type==='native'){token='native';}else if(obj.asset_code&&obj.asset_issuer){token=obj.asset_code+'/'+obj.asset_issuer;}list[token]={balance:obj.balance,limit:obj.limit};}// console.log(list)\ndispatch(balanceList({list}));resolve(list);}).catch(err=>{console.log(err);resolve('');});}}else{resolve('');}});},[xlmAddress,balanceListResult]);return{getAllBalance};}export function updateXlmHash(hash,chainId){const data={msg:'Error',info:''};return new Promise(resolve=>{// const url = 'https://rpc.testnet.near.org'\nconst url=config.chainInfo[chainId].nodeRpc;fetch(\"\".concat(url,\"/transactions/\").concat(hash)).then(res=>res.json()).then(json=>{// console.log(json)\nif(json){if(json.successful){data.msg='Success';data.info=json;}else{data.msg='Failure';data.error='Txns is failure!';}}else{data.msg='Null';data.error='Query is empty!';}resolve(data);}).catch(err=>{console.log(err.toString());data.error='Query is empty!';resolve(data);});});}export function useTrustlines(){const{loginXlm}=connectXlmWallet();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const setTrustlines=useCallback(async(chainId,receiveAddress,typedValue,destConfig)=>{try{const url=config.chainInfo[chainId].nodeRpc;console.log(url);console.log(receiveAddress);console.log(typedValue);const xlmAddress=await loginXlm();if(xlmAddress){console.log(xlmAddress);const server=new StellarSdk.Server(url);console.log(server);const account=await server.loadAccount(xlmAddress);console.log(account);const fee=await server.fetchBaseFee();const network=await window.freighterApi.getNetwork();const tokenArr=destConfig.address.split('/');const asset=new StellarSdk.Asset(tokenArr[0],tokenArr[1]);const transaction=new StellarSdk.TransactionBuilder(account,{fee,networkPassphrase:chainId===ChainId.XLM?StellarSdk.Networks.PUBLIC:StellarSdk.Networks.TESTNET}).addOperation(StellarSdk.Operation.changeTrust({// asset: StellarSdk.Asset.native(),\n// destination: receiveAddress,\nasset:asset,amount:typedValue})).setTimeout(30).build();console.log(transaction);console.log(transaction.toXDR());const signedTransaction=await window.freighterApi.signTransaction(transaction.toXDR(),network);console.log(signedTransaction);// const transaction = new Transaction(transactionXDR, networkPassphrase)\nconst tx=StellarSdk.TransactionBuilder.fromXDR(signedTransaction,chainId===ChainId.XLM?StellarSdk.Networks.PUBLIC:StellarSdk.Networks.TESTNET);const txReceipt=await server.submitTransaction(tx);alert('Set Trustlines Success, hash: '+(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash));}else{alert('Set Trustlines Error, please set trustlines in your wallet.');}}catch(error){console.error(error);onChangeViewErrorTip('Txns failure.',true);}},[]);return{setTrustlines};}export function useXlmCrossChain(chainId,selectCurrency,selectChain,receiveAddress,receiveXlmAddress,typedValue,destConfig,useToChainId){const{t}=useTranslation();const{xlmAddress}=connectXlmWallet();const url=[ChainId.XLM,ChainId.XLM_TEST].includes(chainId)?config.chainInfo[chainId].nodeRpc:'';const server=url?new StellarSdk.Server(url):'';const{getAllBalance}=useXlmBalance();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const addTransaction=useTransactionAdder();const[balance,setBalance]=useState();useEffect(()=>{getAllBalance(chainId,xlmAddress).then(res=>{var _res$token;// console.log(res)\nconst token=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address;const dec=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals;// console.log(token)\n// console.log(res?.[token]?.balance)\nif(res===null||res===void 0?void 0:(_res$token=res[token])===null||_res$token===void 0?void 0:_res$token.balance){var _res$token2;const blvalue=tryParseAmount3(res===null||res===void 0?void 0:(_res$token2=res[token])===null||_res$token2===void 0?void 0:_res$token2.balance,dec);const bl=res?BigAmount.format(dec,blvalue):undefined;setBalance(bl);}else{setBalance(0);}});},[selectCurrency,xlmAddress,chainId]);const inputAmount=useMemo(()=>tryParseAmount3(typedValue,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[typedValue,selectCurrency]);let sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);}catch(error){console.log(error);}// const receiveAddress = '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249'\n// const receiveXlmAddress = 'GC2YB64P5VXJQATUZN7UJOEINHROOIRJLYW3F6Q3AARZJ55UVGHUZRSL'\nreturn useMemo(()=>{if(!xlmAddress||!chainId||!selectCurrency||!receiveXlmAddress||!server||!useToChainId)return NOT_APPLICABLE;return{balance,execute:async()=>{try{const account=await server.loadAccount(xlmAddress);console.log(account);const fee=await server.fetchBaseFee();const network=await window.freighterApi.getNetwork();console.log(fee);let asset=StellarSdk.Asset.native();if(selectCurrency.tokenType==='NATIVE'||selectCurrency.address==='native'){asset=StellarSdk.Asset.native();}else{const tokenArr=selectCurrency.address.split('/');asset=new StellarSdk.Asset(tokenArr[0],tokenArr[1]);}console.log(asset);const memo=formatXlmMemo(receiveAddress,useToChainId);console.log(memo);const transaction=new StellarSdk.TransactionBuilder(account,{fee,networkPassphrase:chainId===ChainId.XLM?StellarSdk.Networks.PUBLIC:StellarSdk.Networks.TESTNET}).addOperation(// this operation funds the new account with XLM\nStellarSdk.Operation.payment({destination:receiveXlmAddress,asset:asset,amount:typedValue})).setTimeout(30).addMemo(StellarSdk.Memo.hash(memo)).build();console.log(transaction);console.log(transaction.toXDR());// console.log(window.freighterApi)\n// console.log(network)\nconst signedTransaction=await window.freighterApi.signTransaction(// const signedTransaction = await signTransaction(\ntransaction.toXDR(),network);console.log(signedTransaction);// const transaction = new Transaction(transactionXDR, networkPassphrase)\nconst tx=StellarSdk.TransactionBuilder.fromXDR(signedTransaction,chainId===ChainId.XLM?StellarSdk.Networks.PUBLIC:StellarSdk.Networks.TESTNET);const txReceipt=await server.submitTransaction(tx);console.log(txReceipt);if(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:xlmAddress,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:receiveXlmAddress};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:receiveAddress.indexOf('0x')===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:'swapin',routerToken:receiveXlmAddress,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}}catch(err){console.error(err);onChangeViewErrorTip('Txns failure.',true);}},inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[xlmAddress,chainId,selectCurrency,selectChain,balance,receiveAddress,receiveXlmAddress,typedValue,destConfig,server,useToChainId]);}","map":{"version":3,"names":["useDispatch","useSelector","useCallback","useEffect","useMemo","useState","useTranslation","getWeb3","config","ChainId","BigAmount","tryParseAmount3","xlmAddress","balanceList","recordsTxns","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","StellarSdk","require","NOT_APPLICABLE","formatXlmMemo","address","chainId","web3","totalLength","addressToBytes","utils","hexToBytes","addressBytesLength","length","addressBytesStr","Buffer","from","toString","addressHexStr","replace","addressLength","chainIdToHex","numberToHex","chainIdHexStr","chainIdLength","differLength","zeroArr","i","push","zreoStr","join","isOpenXlmWallet","useXlmAddress","account","state","xlm","connectXlmWallet","dispatch","loginXlm","Promise","resolve","_window","_window$freighterApi","window","freighterApi","isConnected","_window2","_window2$freighterApi","getPublicKey","then","res","catch","confirm","open","useXlmBalance","balanceListResult","TimeKey","getAllBalance","useAccount","XLM","XLM_TEST","includes","Date","now","url","concat","chainInfo","nodeRpc","fetch","json","list","obj","balances","token","asset_code","asset_issuer","asset_type","balance","limit","err","console","log","updateXlmHash","hash","data","msg","info","successful","error","useTrustlines","onChangeViewErrorTip","setTrustlines","receiveAddress","typedValue","destConfig","server","Server","loadAccount","fee","fetchBaseFee","network","getNetwork","tokenArr","split","asset","Asset","transaction","TransactionBuilder","networkPassphrase","Networks","PUBLIC","TESTNET","addOperation","Operation","changeTrust","amount","setTimeout","build","toXDR","signedTransaction","signTransaction","tx","fromXDR","txReceipt","submitTransaction","alert","useXlmCrossChain","selectCurrency","selectChain","receiveXlmAddress","useToChainId","t","onChangeViewDtil","addTransaction","setBalance","_res$token","dec","decimals","_res$token2","blvalue","bl","format","undefined","inputAmount","sufficientBalance","Number","toExact","execute","native","tokenType","memo","payment","destination","addMemo","Memo","value","formatvalue","to","symbol","version","type","pairid","routerToken","summary","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/stellar/index.ts"],"sourcesContent":["\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {getWeb3} from '../../utils/tools/web3UtilsV2'\nimport config from '../../config'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\nimport { AppState, AppDispatch } from '../../state'\n\nimport { BigAmount } from '../../utils/formatBignumber'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {xlmAddress, balanceList} from './actions'\n\nimport {recordsTxns} from '../../utils/bridge/register'\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\n\nconst StellarSdk = require('stellar-sdk')\nconst NOT_APPLICABLE = { }\n\nexport function formatXlmMemo (address:any, chainId:any) {\n  if (!address || !chainId) return ''\n  const web3 = getWeb3()\n  const totalLength = 64\n\n  const addressToBytes = web3.utils.hexToBytes(address)\n  const addressBytesLength = addressToBytes.length\n  const addressBytesStr = Buffer.from([addressBytesLength]).toString('hex')\n\n  const addressHexStr = address.replace('0x', '')\n  const addressLength = addressHexStr.length\n\n  const chainIdToHex = web3.utils.numberToHex(chainId)\n  const chainIdHexStr = chainIdToHex.replace('0x', '')\n  const chainIdLength = chainIdHexStr.length\n\n  const differLength = totalLength - addressLength - chainIdLength - addressBytesStr.length\n\n  const zeroArr = []\n  for (let i = 0; i < differLength; i++) {\n    zeroArr.push(0)\n  }\n  const zreoStr = zeroArr.join('')\n  return addressBytesStr + addressHexStr + zreoStr + chainIdHexStr\n}\n\n// function HexString2Bytes(str:any) {\n//   var pos = 0;\n//   var len = str.length;\n//   if (len % 2 != 0) {\n//     return null;\n//   }\n//   len /= 2;\n//   var arrBytes = new Array();\n//   for (var i = 0; i < len; i++) {\n//     var s = str.substr(pos, 2);\n//     var v = intToByte(parseInt(s, 16));\n//     arrBytes.push(v);\n//     pos += 2;\n//   }\n//   return arrBytes;\n// }\n// export function formatXlmMemo (address:any, chainId:any) {\n//   if (!address || !chainId) return ''\n//   const web3 = getWeb3()\n//   const totalLength = 64\n\n//   const addressToBytes = web3.utils.hexToBytes(address)\n//   // const addressToBytes = Buffer.from(address)\n//   const addressLength = addressToBytes.length\n\n//   const chainIdToHex = web3.utils.numberToHex(chainId)\n//   // console.log(chainIdToHex)\n//   const chainIdToBytes = web3.utils.hexToBytes(chainIdToHex)\n//   // const chainIdToBytes = Buffer.from(chainId + '')\n//   const chainIdLength = chainIdToBytes.length\n  \n//   // console.log(chainIdToBytes)\n//   // console.log(chainIdToBytes.toString('hex'))\n//   console.log('addressLength', addressLength)\n//   // console.log(chainIdLength)\n//   const differLength = totalLength - 1 - addressLength - chainIdLength\n//   const differLength1 = totalLength - 1 - addressLength\n  \n//   const zeroArr = []\n//   for (let i = 0; i < differLength; i++) {\n//     zeroArr.push(0)\n//   }\n//   const resultArr = [addressLength, ...addressToBytes, ...zeroArr, ...chainIdToBytes]\n//   console.log('differLength1', differLength1)\n//   console.log('differLength', differLength)\n//   console.log(web3.utils.padLeft(chainIdToHex, differLength1 + chainIdLength))\n//   console.log(Buffer.from([addressLength, ...addressToBytes]).toString('hex'))\n//   // console.log(Buffer.from(resultArr).toString('hex'))\n//   return Buffer.from(resultArr).toString('hex')\n// }\n\n// console.log(formatXlmMemo('0xC5107334A3Ae117E3DaD3570b419618C905Aa5eC', '5777'))\n// console.log(formatXlmMemo('0xC03033d8b833fF7ca08BF2A58C9BC9d711257249', '2000'))\n\nlet isOpenXlmWallet = 0\n\nexport function useXlmAddress () {\n  const account:any = useSelector<AppState, AppState['xlm']>(state => state.xlm.xlmAddress)\n  // console.log(account)\n  return account\n}\n\nexport function connectXlmWallet () {\n  const dispatch = useDispatch<AppDispatch>()\n  const account:any = useSelector<AppState, AppState['xlm']>(state => state.xlm.xlmAddress)\n  \n  const loginXlm = useCallback(() => {\n    return new Promise(resolve => {\n      if (!isOpenXlmWallet) {\n        isOpenXlmWallet = 1\n        if (window?.freighterApi?.isConnected()) {\n          window?.freighterApi?.getPublicKey().then((res:any) => {\n            // console.log(res)\n            dispatch(xlmAddress({address: res}))\n            isOpenXlmWallet = 0\n            resolve(res)\n          }).catch(() => {\n            isOpenXlmWallet = 0\n            resolve('')\n          })\n        } else {\n          // setAddress('')\n          if (confirm('Please install Freighter Wallet.') === true) {\n            window.open('https://chrome.google.com/webstore/detail/freighter/bcacfldlkkdogcmkkibnjlakofdplcbk')\n          }\n          isOpenXlmWallet = 0\n          resolve('')\n        }\n      }\n    })\n  }, [isOpenXlmWallet])\n  \n  return {\n    loginXlm,\n    xlmAddress: account\n  }\n}\n\nexport function useXlmBalance () {\n  const {xlmAddress} = connectXlmWallet()\n  const dispatch = useDispatch<AppDispatch>()\n  const balanceListResult:any = useSelector<AppState, AppState['xlm']>(state => state.xlm.balanceList)\n  const TimeKey = 'timestamp'\n  const getAllBalance = useCallback((chainId:any, account?:any) => {\n    return new Promise(resolve => {\n      const useAccount = account ? account : xlmAddress\n      if ([ChainId.XLM, ChainId.XLM_TEST].includes(chainId) && useAccount) {\n        // console.log(useAccount)\n        if (balanceListResult && balanceListResult[TimeKey] && Date.now() - balanceListResult[TimeKey] < 5000) {\n          resolve(balanceListResult)\n        } else {\n          const url = `${config.chainInfo[chainId].nodeRpc}/accounts/${useAccount}`\n          fetch(url).then(res => res.json()).then(json => {\n            // console.log(json)\n            const res = json\n            const list:any = {[TimeKey]: Date.now()}\n            for (const obj of res.balances) {\n              let token = obj.asset_code + '/' + obj.asset_issuer\n              if (obj.asset_type === 'native') {\n                token = 'native'\n              } else if (obj.asset_code && obj.asset_issuer) {\n                token = obj.asset_code + '/' + obj.asset_issuer\n              }\n              list[token] = {\n                balance: obj.balance,\n                limit: obj.limit\n              }\n            }\n            // console.log(list)\n            dispatch(balanceList({list}))\n            resolve(list)\n          }).catch((err) => {\n            console.log(err)\n            resolve('')\n          })\n        }\n      } else {\n        resolve('')\n      }\n    })\n  }, [xlmAddress, balanceListResult])\n\n  return {\n    getAllBalance\n  }\n}\n\n\nexport function updateXlmHash (hash:any, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(resolve => {\n    // const url = 'https://rpc.testnet.near.org'\n    const url = config.chainInfo[chainId].nodeRpc\n    fetch(`${url}/transactions/${hash}`).then(res => res.json()).then(json => {\n      // console.log(json)\n      if (json) {\n        if (json.successful) {\n          data.msg = 'Success'\n          data.info = json\n        } else {\n          data.msg = 'Failure'\n          data.error = 'Txns is failure!'\n        }\n      } else {\n        data.msg = 'Null'\n        data.error = 'Query is empty!'\n      }\n      resolve(data)\n    }).catch(err => {\n      console.log(err.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    })\n  })\n}\n\nexport function useTrustlines() {\n  const {loginXlm} = connectXlmWallet()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  \n  const setTrustlines = useCallback(async(chainId, receiveAddress, typedValue, destConfig) => {\n    try {\n      const url = config.chainInfo[chainId].nodeRpc\n      console.log(url)\n      console.log(receiveAddress)\n      console.log(typedValue)\n      const xlmAddress = await loginXlm()\n      if (xlmAddress) {\n        console.log(xlmAddress)\n        const server = new StellarSdk.Server(url)\n        console.log(server)\n        const account = await server.loadAccount(xlmAddress)\n        console.log(account)\n        const fee = await server.fetchBaseFee();\n        const network = await window.freighterApi.getNetwork()\n        const tokenArr = destConfig.address.split('/')\n        const asset = new StellarSdk.Asset(tokenArr[0], tokenArr[1])\n        \n        const transaction = new StellarSdk.TransactionBuilder(account, { fee, networkPassphrase: chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET })\n        .addOperation(StellarSdk.Operation.changeTrust({\n          // asset: StellarSdk.Asset.native(),\n          // destination: receiveAddress,\n          asset: asset,\n          amount: typedValue\n        }))\n        .setTimeout(30)\n        .build();\n        console.log(transaction)\n        console.log(transaction.toXDR())\n        const signedTransaction = await window.freighterApi.signTransaction(\n          transaction.toXDR(),\n          network,\n        )\n        console.log(signedTransaction)\n        // const transaction = new Transaction(transactionXDR, networkPassphrase)\n        const tx = StellarSdk.TransactionBuilder.fromXDR(signedTransaction, chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET)\n        const txReceipt = await server.submitTransaction(tx);\n        alert('Set Trustlines Success, hash: ' + txReceipt?.hash)\n      } else {\n        alert('Set Trustlines Error, please set trustlines in your wallet.')\n      }\n    } catch (error) {\n      console.error(error);\n      onChangeViewErrorTip('Txns failure.', true)\n    }\n  }, [])\n\n  return {\n    setTrustlines\n  }\n}\n\nexport function useXlmCrossChain (\n  chainId:any,\n  selectCurrency:any,\n  selectChain:any,\n  receiveAddress:any,\n  receiveXlmAddress:any,\n  typedValue:any,\n  destConfig:any,\n  useToChainId:any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { t } = useTranslation()\n  const {xlmAddress} = connectXlmWallet()\n  const url = [ChainId.XLM, ChainId.XLM_TEST].includes(chainId) ? config.chainInfo[chainId].nodeRpc : ''\n  const server = url ? new StellarSdk.Server(url) : ''\n  const {getAllBalance} = useXlmBalance()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const [balance, setBalance] = useState<any>()\n\n  useEffect(() => {\n    getAllBalance(chainId, xlmAddress).then((res:any) => {\n      // console.log(res)\n      const token = selectCurrency?.address\n      const dec = selectCurrency?.decimals\n      // console.log(token)\n      // console.log(res?.[token]?.balance)\n      if (res?.[token]?.balance) {\n        const blvalue = tryParseAmount3(res?.[token]?.balance, dec)\n        const bl = res ? BigAmount.format(dec, blvalue) : undefined\n        setBalance(bl)\n      } else {\n        setBalance(0)\n      }\n    })\n  }, [selectCurrency, xlmAddress, chainId])\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  let sufficientBalance = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n  // const receiveAddress = '0xC03033d8b833fF7ca08BF2A58C9BC9d711257249'\n  // const receiveXlmAddress = 'GC2YB64P5VXJQATUZN7UJOEINHROOIRJLYW3F6Q3AARZJ55UVGHUZRSL'\n  return useMemo(() => {\n    if (!xlmAddress || !chainId || !selectCurrency || !receiveXlmAddress || !server || !useToChainId) return NOT_APPLICABLE\n    return {\n      balance,\n      execute: async () => {\n        try {\n          const account = await server.loadAccount(xlmAddress)\n          console.log(account)\n          const fee = await server.fetchBaseFee();\n          const network = await window.freighterApi.getNetwork()\n          console.log(fee)\n          let asset = StellarSdk.Asset.native()\n          if (selectCurrency.tokenType === 'NATIVE' || selectCurrency.address === 'native') {\n            asset = StellarSdk.Asset.native()\n          } else {\n            const tokenArr = selectCurrency.address.split('/')\n            asset = new StellarSdk.Asset(tokenArr[0], tokenArr[1])\n          }\n          console.log(asset)\n          const memo = formatXlmMemo(receiveAddress, useToChainId)\n          console.log(memo)\n          const transaction = new StellarSdk.TransactionBuilder(account, { fee, networkPassphrase: chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET })\n          .addOperation(\n              // this operation funds the new account with XLM\n              StellarSdk.Operation.payment({\n                  destination: receiveXlmAddress,\n                  asset: asset,\n                  amount: typedValue\n              })\n          )\n          .setTimeout(30)\n          .addMemo(StellarSdk.Memo.hash(memo))\n          .build();\n          console.log(transaction)\n          console.log(transaction.toXDR())\n          // console.log(window.freighterApi)\n          // console.log(network)\n          const signedTransaction = await window.freighterApi.signTransaction(\n          // const signedTransaction = await signTransaction(\n            transaction.toXDR(),\n            network,\n          )\n          console.log(signedTransaction)\n          // const transaction = new Transaction(transactionXDR, networkPassphrase)\n          const tx = StellarSdk.TransactionBuilder.fromXDR(signedTransaction, chainId === ChainId.XLM ? StellarSdk.Networks.PUBLIC : StellarSdk.Networks.TESTNET)\n        \n          const txReceipt = await server.submitTransaction(tx);\n          console.log(txReceipt);\n\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: xlmAddress,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: receiveXlmAddress\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: 'swapin',\n              routerToken: receiveXlmAddress,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (err) {\n          console.error(err);\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [xlmAddress, chainId, selectCurrency, selectChain, balance, receiveAddress, receiveXlmAddress, typedValue, destConfig, server, useToChainId])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}