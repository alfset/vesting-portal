{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompressedNonExistenceProof = exports.CompressedExistenceProof = exports.CompressedBatchEntry = exports.CompressedBatchProof = exports.BatchEntry = exports.BatchProof = exports.InnerSpec = exports.ProofSpec = exports.InnerOp = exports.LeafOp = exports.CommitmentProof = exports.NonExistenceProof = exports.ExistenceProof = exports.lengthOpToJSON = exports.lengthOpFromJSON = exports.LengthOp = exports.hashOpToJSON = exports.hashOpFromJSON = exports.HashOp = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = \"ics23\";\nvar HashOp;\n(function (HashOp) {\n  /** NO_HASH - NO_HASH is the default if no data passed. Note this is an illegal argument some places. */\n  HashOp[HashOp[\"NO_HASH\"] = 0] = \"NO_HASH\";\n  HashOp[HashOp[\"SHA256\"] = 1] = \"SHA256\";\n  HashOp[HashOp[\"SHA512\"] = 2] = \"SHA512\";\n  HashOp[HashOp[\"KECCAK\"] = 3] = \"KECCAK\";\n  HashOp[HashOp[\"RIPEMD160\"] = 4] = \"RIPEMD160\";\n  /** BITCOIN - ripemd160(sha256(x)) */\n  HashOp[HashOp[\"BITCOIN\"] = 5] = \"BITCOIN\";\n  HashOp[HashOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(HashOp = exports.HashOp || (exports.HashOp = {}));\nfunction hashOpFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"NO_HASH\":\n      return HashOp.NO_HASH;\n    case 1:\n    case \"SHA256\":\n      return HashOp.SHA256;\n    case 2:\n    case \"SHA512\":\n      return HashOp.SHA512;\n    case 3:\n    case \"KECCAK\":\n      return HashOp.KECCAK;\n    case 4:\n    case \"RIPEMD160\":\n      return HashOp.RIPEMD160;\n    case 5:\n    case \"BITCOIN\":\n      return HashOp.BITCOIN;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return HashOp.UNRECOGNIZED;\n  }\n}\nexports.hashOpFromJSON = hashOpFromJSON;\nfunction hashOpToJSON(object) {\n  switch (object) {\n    case HashOp.NO_HASH:\n      return \"NO_HASH\";\n    case HashOp.SHA256:\n      return \"SHA256\";\n    case HashOp.SHA512:\n      return \"SHA512\";\n    case HashOp.KECCAK:\n      return \"KECCAK\";\n    case HashOp.RIPEMD160:\n      return \"RIPEMD160\";\n    case HashOp.BITCOIN:\n      return \"BITCOIN\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.hashOpToJSON = hashOpToJSON;\n/**\n * LengthOp defines how to process the key and value of the LeafOp\n * to include length information. After encoding the length with the given\n * algorithm, the length will be prepended to the key and value bytes.\n * (Each one with it's own encoded length)\n */\nvar LengthOp;\n(function (LengthOp) {\n  /** NO_PREFIX - NO_PREFIX don't include any length info */\n  LengthOp[LengthOp[\"NO_PREFIX\"] = 0] = \"NO_PREFIX\";\n  /** VAR_PROTO - VAR_PROTO uses protobuf (and go-amino) varint encoding of the length */\n  LengthOp[LengthOp[\"VAR_PROTO\"] = 1] = \"VAR_PROTO\";\n  /** VAR_RLP - VAR_RLP uses rlp int encoding of the length */\n  LengthOp[LengthOp[\"VAR_RLP\"] = 2] = \"VAR_RLP\";\n  /** FIXED32_BIG - FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer */\n  LengthOp[LengthOp[\"FIXED32_BIG\"] = 3] = \"FIXED32_BIG\";\n  /** FIXED32_LITTLE - FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer */\n  LengthOp[LengthOp[\"FIXED32_LITTLE\"] = 4] = \"FIXED32_LITTLE\";\n  /** FIXED64_BIG - FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer */\n  LengthOp[LengthOp[\"FIXED64_BIG\"] = 5] = \"FIXED64_BIG\";\n  /** FIXED64_LITTLE - FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer */\n  LengthOp[LengthOp[\"FIXED64_LITTLE\"] = 6] = \"FIXED64_LITTLE\";\n  /** REQUIRE_32_BYTES - REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output) */\n  LengthOp[LengthOp[\"REQUIRE_32_BYTES\"] = 7] = \"REQUIRE_32_BYTES\";\n  /** REQUIRE_64_BYTES - REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output) */\n  LengthOp[LengthOp[\"REQUIRE_64_BYTES\"] = 8] = \"REQUIRE_64_BYTES\";\n  LengthOp[LengthOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(LengthOp = exports.LengthOp || (exports.LengthOp = {}));\nfunction lengthOpFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"NO_PREFIX\":\n      return LengthOp.NO_PREFIX;\n    case 1:\n    case \"VAR_PROTO\":\n      return LengthOp.VAR_PROTO;\n    case 2:\n    case \"VAR_RLP\":\n      return LengthOp.VAR_RLP;\n    case 3:\n    case \"FIXED32_BIG\":\n      return LengthOp.FIXED32_BIG;\n    case 4:\n    case \"FIXED32_LITTLE\":\n      return LengthOp.FIXED32_LITTLE;\n    case 5:\n    case \"FIXED64_BIG\":\n      return LengthOp.FIXED64_BIG;\n    case 6:\n    case \"FIXED64_LITTLE\":\n      return LengthOp.FIXED64_LITTLE;\n    case 7:\n    case \"REQUIRE_32_BYTES\":\n      return LengthOp.REQUIRE_32_BYTES;\n    case 8:\n    case \"REQUIRE_64_BYTES\":\n      return LengthOp.REQUIRE_64_BYTES;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return LengthOp.UNRECOGNIZED;\n  }\n}\nexports.lengthOpFromJSON = lengthOpFromJSON;\nfunction lengthOpToJSON(object) {\n  switch (object) {\n    case LengthOp.NO_PREFIX:\n      return \"NO_PREFIX\";\n    case LengthOp.VAR_PROTO:\n      return \"VAR_PROTO\";\n    case LengthOp.VAR_RLP:\n      return \"VAR_RLP\";\n    case LengthOp.FIXED32_BIG:\n      return \"FIXED32_BIG\";\n    case LengthOp.FIXED32_LITTLE:\n      return \"FIXED32_LITTLE\";\n    case LengthOp.FIXED64_BIG:\n      return \"FIXED64_BIG\";\n    case LengthOp.FIXED64_LITTLE:\n      return \"FIXED64_LITTLE\";\n    case LengthOp.REQUIRE_32_BYTES:\n      return \"REQUIRE_32_BYTES\";\n    case LengthOp.REQUIRE_64_BYTES:\n      return \"REQUIRE_64_BYTES\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.lengthOpToJSON = lengthOpToJSON;\nconst baseExistenceProof = {};\nexports.ExistenceProof = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n    if (message.leaf !== undefined) {\n      exports.LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.path) {\n      exports.InnerOp.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseExistenceProof);\n    message.path = [];\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.value = reader.bytes();\n          break;\n        case 3:\n          message.leaf = exports.LeafOp.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.path.push(exports.InnerOp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseExistenceProof);\n    message.path = [];\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = bytesFromBase64(object.value);\n    }\n    if (object.leaf !== undefined && object.leaf !== null) {\n      message.leaf = exports.LeafOp.fromJSON(object.leaf);\n    } else {\n      message.leaf = undefined;\n    }\n    if (object.path !== undefined && object.path !== null) {\n      for (const e of object.path) {\n        message.path.push(exports.InnerOp.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.value !== undefined && (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n    message.leaf !== undefined && (obj.leaf = message.leaf ? exports.LeafOp.toJSON(message.leaf) : undefined);\n    if (message.path) {\n      obj.path = message.path.map(e => e ? exports.InnerOp.toJSON(e) : undefined);\n    } else {\n      obj.path = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseExistenceProof);\n    message.path = [];\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = new Uint8Array();\n    }\n    if (object.leaf !== undefined && object.leaf !== null) {\n      message.leaf = exports.LeafOp.fromPartial(object.leaf);\n    } else {\n      message.leaf = undefined;\n    }\n    if (object.path !== undefined && object.path !== null) {\n      for (const e of object.path) {\n        message.path.push(exports.InnerOp.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseNonExistenceProof = {};\nexports.NonExistenceProof = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.left !== undefined) {\n      exports.ExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.right !== undefined) {\n      exports.ExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseNonExistenceProof);\n    message.key = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.left = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.right = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseNonExistenceProof);\n    message.key = new Uint8Array();\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n    if (object.left !== undefined && object.left !== null) {\n      message.left = exports.ExistenceProof.fromJSON(object.left);\n    } else {\n      message.left = undefined;\n    }\n    if (object.right !== undefined && object.right !== null) {\n      message.right = exports.ExistenceProof.fromJSON(object.right);\n    } else {\n      message.right = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.left !== undefined && (obj.left = message.left ? exports.ExistenceProof.toJSON(message.left) : undefined);\n    message.right !== undefined && (obj.right = message.right ? exports.ExistenceProof.toJSON(message.right) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseNonExistenceProof);\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n    if (object.left !== undefined && object.left !== null) {\n      message.left = exports.ExistenceProof.fromPartial(object.left);\n    } else {\n      message.left = undefined;\n    }\n    if (object.right !== undefined && object.right !== null) {\n      message.right = exports.ExistenceProof.fromPartial(object.right);\n    } else {\n      message.right = undefined;\n    }\n    return message;\n  }\n};\nconst baseCommitmentProof = {};\nexports.CommitmentProof = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.exist !== undefined) {\n      exports.ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.nonexist !== undefined) {\n      exports.NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.batch !== undefined) {\n      exports.BatchProof.encode(message.batch, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.compressed !== undefined) {\n      exports.CompressedBatchProof.encode(message.compressed, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCommitmentProof);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.exist = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.nonexist = exports.NonExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.batch = exports.BatchProof.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.compressed = exports.CompressedBatchProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCommitmentProof);\n    if (object.exist !== undefined && object.exist !== null) {\n      message.exist = exports.ExistenceProof.fromJSON(object.exist);\n    } else {\n      message.exist = undefined;\n    }\n    if (object.nonexist !== undefined && object.nonexist !== null) {\n      message.nonexist = exports.NonExistenceProof.fromJSON(object.nonexist);\n    } else {\n      message.nonexist = undefined;\n    }\n    if (object.batch !== undefined && object.batch !== null) {\n      message.batch = exports.BatchProof.fromJSON(object.batch);\n    } else {\n      message.batch = undefined;\n    }\n    if (object.compressed !== undefined && object.compressed !== null) {\n      message.compressed = exports.CompressedBatchProof.fromJSON(object.compressed);\n    } else {\n      message.compressed = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.exist !== undefined && (obj.exist = message.exist ? exports.ExistenceProof.toJSON(message.exist) : undefined);\n    message.nonexist !== undefined && (obj.nonexist = message.nonexist ? exports.NonExistenceProof.toJSON(message.nonexist) : undefined);\n    message.batch !== undefined && (obj.batch = message.batch ? exports.BatchProof.toJSON(message.batch) : undefined);\n    message.compressed !== undefined && (obj.compressed = message.compressed ? exports.CompressedBatchProof.toJSON(message.compressed) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCommitmentProof);\n    if (object.exist !== undefined && object.exist !== null) {\n      message.exist = exports.ExistenceProof.fromPartial(object.exist);\n    } else {\n      message.exist = undefined;\n    }\n    if (object.nonexist !== undefined && object.nonexist !== null) {\n      message.nonexist = exports.NonExistenceProof.fromPartial(object.nonexist);\n    } else {\n      message.nonexist = undefined;\n    }\n    if (object.batch !== undefined && object.batch !== null) {\n      message.batch = exports.BatchProof.fromPartial(object.batch);\n    } else {\n      message.batch = undefined;\n    }\n    if (object.compressed !== undefined && object.compressed !== null) {\n      message.compressed = exports.CompressedBatchProof.fromPartial(object.compressed);\n    } else {\n      message.compressed = undefined;\n    }\n    return message;\n  }\n};\nconst baseLeafOp = {\n  hash: 0,\n  prehashKey: 0,\n  prehashValue: 0,\n  length: 0\n};\nexports.LeafOp = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.hash !== 0) {\n      writer.uint32(8).int32(message.hash);\n    }\n    if (message.prehashKey !== 0) {\n      writer.uint32(16).int32(message.prehashKey);\n    }\n    if (message.prehashValue !== 0) {\n      writer.uint32(24).int32(message.prehashValue);\n    }\n    if (message.length !== 0) {\n      writer.uint32(32).int32(message.length);\n    }\n    if (message.prefix.length !== 0) {\n      writer.uint32(42).bytes(message.prefix);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseLeafOp);\n    message.prefix = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.int32();\n          break;\n        case 2:\n          message.prehashKey = reader.int32();\n          break;\n        case 3:\n          message.prehashValue = reader.int32();\n          break;\n        case 4:\n          message.length = reader.int32();\n          break;\n        case 5:\n          message.prefix = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseLeafOp);\n    message.prefix = new Uint8Array();\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = hashOpFromJSON(object.hash);\n    } else {\n      message.hash = 0;\n    }\n    if (object.prehashKey !== undefined && object.prehashKey !== null) {\n      message.prehashKey = hashOpFromJSON(object.prehashKey);\n    } else {\n      message.prehashKey = 0;\n    }\n    if (object.prehashValue !== undefined && object.prehashValue !== null) {\n      message.prehashValue = hashOpFromJSON(object.prehashValue);\n    } else {\n      message.prehashValue = 0;\n    }\n    if (object.length !== undefined && object.length !== null) {\n      message.length = lengthOpFromJSON(object.length);\n    } else {\n      message.length = 0;\n    }\n    if (object.prefix !== undefined && object.prefix !== null) {\n      message.prefix = bytesFromBase64(object.prefix);\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n    message.prehashKey !== undefined && (obj.prehashKey = hashOpToJSON(message.prehashKey));\n    message.prehashValue !== undefined && (obj.prehashValue = hashOpToJSON(message.prehashValue));\n    message.length !== undefined && (obj.length = lengthOpToJSON(message.length));\n    message.prefix !== undefined && (obj.prefix = base64FromBytes(message.prefix !== undefined ? message.prefix : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseLeafOp);\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = 0;\n    }\n    if (object.prehashKey !== undefined && object.prehashKey !== null) {\n      message.prehashKey = object.prehashKey;\n    } else {\n      message.prehashKey = 0;\n    }\n    if (object.prehashValue !== undefined && object.prehashValue !== null) {\n      message.prehashValue = object.prehashValue;\n    } else {\n      message.prehashValue = 0;\n    }\n    if (object.length !== undefined && object.length !== null) {\n      message.length = object.length;\n    } else {\n      message.length = 0;\n    }\n    if (object.prefix !== undefined && object.prefix !== null) {\n      message.prefix = object.prefix;\n    } else {\n      message.prefix = new Uint8Array();\n    }\n    return message;\n  }\n};\nconst baseInnerOp = {\n  hash: 0\n};\nexports.InnerOp = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.hash !== 0) {\n      writer.uint32(8).int32(message.hash);\n    }\n    if (message.prefix.length !== 0) {\n      writer.uint32(18).bytes(message.prefix);\n    }\n    if (message.suffix.length !== 0) {\n      writer.uint32(26).bytes(message.suffix);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseInnerOp);\n    message.prefix = new Uint8Array();\n    message.suffix = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.int32();\n          break;\n        case 2:\n          message.prefix = reader.bytes();\n          break;\n        case 3:\n          message.suffix = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseInnerOp);\n    message.prefix = new Uint8Array();\n    message.suffix = new Uint8Array();\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = hashOpFromJSON(object.hash);\n    } else {\n      message.hash = 0;\n    }\n    if (object.prefix !== undefined && object.prefix !== null) {\n      message.prefix = bytesFromBase64(object.prefix);\n    }\n    if (object.suffix !== undefined && object.suffix !== null) {\n      message.suffix = bytesFromBase64(object.suffix);\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n    message.prefix !== undefined && (obj.prefix = base64FromBytes(message.prefix !== undefined ? message.prefix : new Uint8Array()));\n    message.suffix !== undefined && (obj.suffix = base64FromBytes(message.suffix !== undefined ? message.suffix : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseInnerOp);\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = 0;\n    }\n    if (object.prefix !== undefined && object.prefix !== null) {\n      message.prefix = object.prefix;\n    } else {\n      message.prefix = new Uint8Array();\n    }\n    if (object.suffix !== undefined && object.suffix !== null) {\n      message.suffix = object.suffix;\n    } else {\n      message.suffix = new Uint8Array();\n    }\n    return message;\n  }\n};\nconst baseProofSpec = {\n  maxDepth: 0,\n  minDepth: 0\n};\nexports.ProofSpec = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.leafSpec !== undefined) {\n      exports.LeafOp.encode(message.leafSpec, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.innerSpec !== undefined) {\n      exports.InnerSpec.encode(message.innerSpec, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.maxDepth !== 0) {\n      writer.uint32(24).int32(message.maxDepth);\n    }\n    if (message.minDepth !== 0) {\n      writer.uint32(32).int32(message.minDepth);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseProofSpec);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.leafSpec = exports.LeafOp.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.innerSpec = exports.InnerSpec.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.maxDepth = reader.int32();\n          break;\n        case 4:\n          message.minDepth = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseProofSpec);\n    if (object.leafSpec !== undefined && object.leafSpec !== null) {\n      message.leafSpec = exports.LeafOp.fromJSON(object.leafSpec);\n    } else {\n      message.leafSpec = undefined;\n    }\n    if (object.innerSpec !== undefined && object.innerSpec !== null) {\n      message.innerSpec = exports.InnerSpec.fromJSON(object.innerSpec);\n    } else {\n      message.innerSpec = undefined;\n    }\n    if (object.maxDepth !== undefined && object.maxDepth !== null) {\n      message.maxDepth = Number(object.maxDepth);\n    } else {\n      message.maxDepth = 0;\n    }\n    if (object.minDepth !== undefined && object.minDepth !== null) {\n      message.minDepth = Number(object.minDepth);\n    } else {\n      message.minDepth = 0;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.leafSpec !== undefined && (obj.leafSpec = message.leafSpec ? exports.LeafOp.toJSON(message.leafSpec) : undefined);\n    message.innerSpec !== undefined && (obj.innerSpec = message.innerSpec ? exports.InnerSpec.toJSON(message.innerSpec) : undefined);\n    message.maxDepth !== undefined && (obj.maxDepth = message.maxDepth);\n    message.minDepth !== undefined && (obj.minDepth = message.minDepth);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseProofSpec);\n    if (object.leafSpec !== undefined && object.leafSpec !== null) {\n      message.leafSpec = exports.LeafOp.fromPartial(object.leafSpec);\n    } else {\n      message.leafSpec = undefined;\n    }\n    if (object.innerSpec !== undefined && object.innerSpec !== null) {\n      message.innerSpec = exports.InnerSpec.fromPartial(object.innerSpec);\n    } else {\n      message.innerSpec = undefined;\n    }\n    if (object.maxDepth !== undefined && object.maxDepth !== null) {\n      message.maxDepth = object.maxDepth;\n    } else {\n      message.maxDepth = 0;\n    }\n    if (object.minDepth !== undefined && object.minDepth !== null) {\n      message.minDepth = object.minDepth;\n    } else {\n      message.minDepth = 0;\n    }\n    return message;\n  }\n};\nconst baseInnerSpec = {\n  childOrder: 0,\n  childSize: 0,\n  minPrefixLength: 0,\n  maxPrefixLength: 0,\n  hash: 0\n};\nexports.InnerSpec = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    writer.uint32(10).fork();\n    for (const v of message.childOrder) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    if (message.childSize !== 0) {\n      writer.uint32(16).int32(message.childSize);\n    }\n    if (message.minPrefixLength !== 0) {\n      writer.uint32(24).int32(message.minPrefixLength);\n    }\n    if (message.maxPrefixLength !== 0) {\n      writer.uint32(32).int32(message.maxPrefixLength);\n    }\n    if (message.emptyChild.length !== 0) {\n      writer.uint32(42).bytes(message.emptyChild);\n    }\n    if (message.hash !== 0) {\n      writer.uint32(48).int32(message.hash);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseInnerSpec);\n    message.childOrder = [];\n    message.emptyChild = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.childOrder.push(reader.int32());\n            }\n          } else {\n            message.childOrder.push(reader.int32());\n          }\n          break;\n        case 2:\n          message.childSize = reader.int32();\n          break;\n        case 3:\n          message.minPrefixLength = reader.int32();\n          break;\n        case 4:\n          message.maxPrefixLength = reader.int32();\n          break;\n        case 5:\n          message.emptyChild = reader.bytes();\n          break;\n        case 6:\n          message.hash = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseInnerSpec);\n    message.childOrder = [];\n    message.emptyChild = new Uint8Array();\n    if (object.childOrder !== undefined && object.childOrder !== null) {\n      for (const e of object.childOrder) {\n        message.childOrder.push(Number(e));\n      }\n    }\n    if (object.childSize !== undefined && object.childSize !== null) {\n      message.childSize = Number(object.childSize);\n    } else {\n      message.childSize = 0;\n    }\n    if (object.minPrefixLength !== undefined && object.minPrefixLength !== null) {\n      message.minPrefixLength = Number(object.minPrefixLength);\n    } else {\n      message.minPrefixLength = 0;\n    }\n    if (object.maxPrefixLength !== undefined && object.maxPrefixLength !== null) {\n      message.maxPrefixLength = Number(object.maxPrefixLength);\n    } else {\n      message.maxPrefixLength = 0;\n    }\n    if (object.emptyChild !== undefined && object.emptyChild !== null) {\n      message.emptyChild = bytesFromBase64(object.emptyChild);\n    }\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = hashOpFromJSON(object.hash);\n    } else {\n      message.hash = 0;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.childOrder) {\n      obj.childOrder = message.childOrder.map(e => e);\n    } else {\n      obj.childOrder = [];\n    }\n    message.childSize !== undefined && (obj.childSize = message.childSize);\n    message.minPrefixLength !== undefined && (obj.minPrefixLength = message.minPrefixLength);\n    message.maxPrefixLength !== undefined && (obj.maxPrefixLength = message.maxPrefixLength);\n    message.emptyChild !== undefined && (obj.emptyChild = base64FromBytes(message.emptyChild !== undefined ? message.emptyChild : new Uint8Array()));\n    message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseInnerSpec);\n    message.childOrder = [];\n    if (object.childOrder !== undefined && object.childOrder !== null) {\n      for (const e of object.childOrder) {\n        message.childOrder.push(e);\n      }\n    }\n    if (object.childSize !== undefined && object.childSize !== null) {\n      message.childSize = object.childSize;\n    } else {\n      message.childSize = 0;\n    }\n    if (object.minPrefixLength !== undefined && object.minPrefixLength !== null) {\n      message.minPrefixLength = object.minPrefixLength;\n    } else {\n      message.minPrefixLength = 0;\n    }\n    if (object.maxPrefixLength !== undefined && object.maxPrefixLength !== null) {\n      message.maxPrefixLength = object.maxPrefixLength;\n    } else {\n      message.maxPrefixLength = 0;\n    }\n    if (object.emptyChild !== undefined && object.emptyChild !== null) {\n      message.emptyChild = object.emptyChild;\n    } else {\n      message.emptyChild = new Uint8Array();\n    }\n    if (object.hash !== undefined && object.hash !== null) {\n      message.hash = object.hash;\n    } else {\n      message.hash = 0;\n    }\n    return message;\n  }\n};\nconst baseBatchProof = {};\nexports.BatchProof = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.entries) {\n      exports.BatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseBatchProof);\n    message.entries = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.entries.push(exports.BatchEntry.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseBatchProof);\n    message.entries = [];\n    if (object.entries !== undefined && object.entries !== null) {\n      for (const e of object.entries) {\n        message.entries.push(exports.BatchEntry.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.entries) {\n      obj.entries = message.entries.map(e => e ? exports.BatchEntry.toJSON(e) : undefined);\n    } else {\n      obj.entries = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseBatchProof);\n    message.entries = [];\n    if (object.entries !== undefined && object.entries !== null) {\n      for (const e of object.entries) {\n        message.entries.push(exports.BatchEntry.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseBatchEntry = {};\nexports.BatchEntry = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.exist !== undefined) {\n      exports.ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.nonexist !== undefined) {\n      exports.NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseBatchEntry);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.exist = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.nonexist = exports.NonExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseBatchEntry);\n    if (object.exist !== undefined && object.exist !== null) {\n      message.exist = exports.ExistenceProof.fromJSON(object.exist);\n    } else {\n      message.exist = undefined;\n    }\n    if (object.nonexist !== undefined && object.nonexist !== null) {\n      message.nonexist = exports.NonExistenceProof.fromJSON(object.nonexist);\n    } else {\n      message.nonexist = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.exist !== undefined && (obj.exist = message.exist ? exports.ExistenceProof.toJSON(message.exist) : undefined);\n    message.nonexist !== undefined && (obj.nonexist = message.nonexist ? exports.NonExistenceProof.toJSON(message.nonexist) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseBatchEntry);\n    if (object.exist !== undefined && object.exist !== null) {\n      message.exist = exports.ExistenceProof.fromPartial(object.exist);\n    } else {\n      message.exist = undefined;\n    }\n    if (object.nonexist !== undefined && object.nonexist !== null) {\n      message.nonexist = exports.NonExistenceProof.fromPartial(object.nonexist);\n    } else {\n      message.nonexist = undefined;\n    }\n    return message;\n  }\n};\nconst baseCompressedBatchProof = {};\nexports.CompressedBatchProof = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.entries) {\n      exports.CompressedBatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.lookupInners) {\n      exports.InnerOp.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedBatchProof);\n    message.entries = [];\n    message.lookupInners = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.entries.push(exports.CompressedBatchEntry.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.lookupInners.push(exports.InnerOp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCompressedBatchProof);\n    message.entries = [];\n    message.lookupInners = [];\n    if (object.entries !== undefined && object.entries !== null) {\n      for (const e of object.entries) {\n        message.entries.push(exports.CompressedBatchEntry.fromJSON(e));\n      }\n    }\n    if (object.lookupInners !== undefined && object.lookupInners !== null) {\n      for (const e of object.lookupInners) {\n        message.lookupInners.push(exports.InnerOp.fromJSON(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.entries) {\n      obj.entries = message.entries.map(e => e ? exports.CompressedBatchEntry.toJSON(e) : undefined);\n    } else {\n      obj.entries = [];\n    }\n    if (message.lookupInners) {\n      obj.lookupInners = message.lookupInners.map(e => e ? exports.InnerOp.toJSON(e) : undefined);\n    } else {\n      obj.lookupInners = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCompressedBatchProof);\n    message.entries = [];\n    message.lookupInners = [];\n    if (object.entries !== undefined && object.entries !== null) {\n      for (const e of object.entries) {\n        message.entries.push(exports.CompressedBatchEntry.fromPartial(e));\n      }\n    }\n    if (object.lookupInners !== undefined && object.lookupInners !== null) {\n      for (const e of object.lookupInners) {\n        message.lookupInners.push(exports.InnerOp.fromPartial(e));\n      }\n    }\n    return message;\n  }\n};\nconst baseCompressedBatchEntry = {};\nexports.CompressedBatchEntry = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.exist !== undefined) {\n      exports.CompressedExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.nonexist !== undefined) {\n      exports.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedBatchEntry);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.exist = exports.CompressedExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.nonexist = exports.CompressedNonExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCompressedBatchEntry);\n    if (object.exist !== undefined && object.exist !== null) {\n      message.exist = exports.CompressedExistenceProof.fromJSON(object.exist);\n    } else {\n      message.exist = undefined;\n    }\n    if (object.nonexist !== undefined && object.nonexist !== null) {\n      message.nonexist = exports.CompressedNonExistenceProof.fromJSON(object.nonexist);\n    } else {\n      message.nonexist = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.exist !== undefined && (obj.exist = message.exist ? exports.CompressedExistenceProof.toJSON(message.exist) : undefined);\n    message.nonexist !== undefined && (obj.nonexist = message.nonexist ? exports.CompressedNonExistenceProof.toJSON(message.nonexist) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCompressedBatchEntry);\n    if (object.exist !== undefined && object.exist !== null) {\n      message.exist = exports.CompressedExistenceProof.fromPartial(object.exist);\n    } else {\n      message.exist = undefined;\n    }\n    if (object.nonexist !== undefined && object.nonexist !== null) {\n      message.nonexist = exports.CompressedNonExistenceProof.fromPartial(object.nonexist);\n    } else {\n      message.nonexist = undefined;\n    }\n    return message;\n  }\n};\nconst baseCompressedExistenceProof = {\n  path: 0\n};\nexports.CompressedExistenceProof = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n    if (message.leaf !== undefined) {\n      exports.LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n    }\n    writer.uint32(34).fork();\n    for (const v of message.path) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedExistenceProof);\n    message.path = [];\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.value = reader.bytes();\n          break;\n        case 3:\n          message.leaf = exports.LeafOp.decode(reader, reader.uint32());\n          break;\n        case 4:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.path.push(reader.int32());\n            }\n          } else {\n            message.path.push(reader.int32());\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCompressedExistenceProof);\n    message.path = [];\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = bytesFromBase64(object.value);\n    }\n    if (object.leaf !== undefined && object.leaf !== null) {\n      message.leaf = exports.LeafOp.fromJSON(object.leaf);\n    } else {\n      message.leaf = undefined;\n    }\n    if (object.path !== undefined && object.path !== null) {\n      for (const e of object.path) {\n        message.path.push(Number(e));\n      }\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.value !== undefined && (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n    message.leaf !== undefined && (obj.leaf = message.leaf ? exports.LeafOp.toJSON(message.leaf) : undefined);\n    if (message.path) {\n      obj.path = message.path.map(e => e);\n    } else {\n      obj.path = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCompressedExistenceProof);\n    message.path = [];\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n    if (object.value !== undefined && object.value !== null) {\n      message.value = object.value;\n    } else {\n      message.value = new Uint8Array();\n    }\n    if (object.leaf !== undefined && object.leaf !== null) {\n      message.leaf = exports.LeafOp.fromPartial(object.leaf);\n    } else {\n      message.leaf = undefined;\n    }\n    if (object.path !== undefined && object.path !== null) {\n      for (const e of object.path) {\n        message.path.push(e);\n      }\n    }\n    return message;\n  }\n};\nconst baseCompressedNonExistenceProof = {};\nexports.CompressedNonExistenceProof = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.left !== undefined) {\n      exports.CompressedExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.right !== undefined) {\n      exports.CompressedExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedNonExistenceProof);\n    message.key = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.left = exports.CompressedExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.right = exports.CompressedExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCompressedNonExistenceProof);\n    message.key = new Uint8Array();\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n    if (object.left !== undefined && object.left !== null) {\n      message.left = exports.CompressedExistenceProof.fromJSON(object.left);\n    } else {\n      message.left = undefined;\n    }\n    if (object.right !== undefined && object.right !== null) {\n      message.right = exports.CompressedExistenceProof.fromJSON(object.right);\n    } else {\n      message.right = undefined;\n    }\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.left !== undefined && (obj.left = message.left ? exports.CompressedExistenceProof.toJSON(message.left) : undefined);\n    message.right !== undefined && (obj.right = message.right ? exports.CompressedExistenceProof.toJSON(message.right) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCompressedNonExistenceProof);\n    if (object.key !== undefined && object.key !== null) {\n      message.key = object.key;\n    } else {\n      message.key = new Uint8Array();\n    }\n    if (object.left !== undefined && object.left !== null) {\n      message.left = exports.CompressedExistenceProof.fromPartial(object.left);\n    } else {\n      message.left = undefined;\n    }\n    if (object.right !== undefined && object.right !== null) {\n      message.right = exports.CompressedExistenceProof.fromPartial(object.right);\n    } else {\n      message.right = undefined;\n    }\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"names":["long_1","__importDefault","require","minimal_1","exports","protobufPackage","HashOp","hashOpFromJSON","object","NO_HASH","SHA256","SHA512","KECCAK","RIPEMD160","BITCOIN","UNRECOGNIZED","hashOpToJSON","LengthOp","lengthOpFromJSON","NO_PREFIX","VAR_PROTO","VAR_RLP","FIXED32_BIG","FIXED32_LITTLE","FIXED64_BIG","FIXED64_LITTLE","REQUIRE_32_BYTES","REQUIRE_64_BYTES","lengthOpToJSON","baseExistenceProof","ExistenceProof","encode","message","writer","arguments","length","undefined","default","Writer","create","key","uint32","bytes","value","leaf","LeafOp","fork","ldelim","v","path","InnerOp","decode","input","reader","Reader","end","len","pos","Object","assign","Uint8Array","tag","push","skipType","fromJSON","bytesFromBase64","e","toJSON","obj","base64FromBytes","map","fromPartial","baseNonExistenceProof","NonExistenceProof","left","right","baseCommitmentProof","CommitmentProof","exist","nonexist","batch","BatchProof","compressed","CompressedBatchProof","baseLeafOp","hash","prehashKey","prehashValue","int32","prefix","baseInnerOp","suffix","baseProofSpec","maxDepth","minDepth","ProofSpec","leafSpec","innerSpec","InnerSpec","Number","baseInnerSpec","childOrder","childSize","minPrefixLength","maxPrefixLength","emptyChild","end2","baseBatchProof","entries","BatchEntry","baseBatchEntry","baseCompressedBatchProof","CompressedBatchEntry","lookupInners","baseCompressedBatchEntry","CompressedExistenceProof","CompressedNonExistenceProof","baseCompressedExistenceProof","baseCompressedNonExistenceProof","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byte","String","fromCharCode","join","util","Long","configure"],"sources":["../../src/confio/proofs.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}