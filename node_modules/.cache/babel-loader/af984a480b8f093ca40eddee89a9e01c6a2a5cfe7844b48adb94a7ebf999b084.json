{"ast":null,"code":"import{useCallback,useMemo}from\"react\";import{useTranslation}from'react-i18next';import{useDispatch,useSelector}from'react-redux';import{nonevmAddress}from'../hooks/actions';import{useActiveReact}from'../../hooks/useActiveReact';import{ChainId}from\"../../config/chainConfig/chainId\";import{useTxnsDtilOpen,useTxnsErrorTipOpen}from'../../state/application/hooks';import{useTransactionAdder}from'../../state/transactions/hooks';import{tryParseAmount3}from'../../state/swap/hooks';import{BigAmount}from'../../utils/formatBignumber';import{recordsTxns}from'../../utils/bridge/register';import config from'../../config';import{atomChainConfig}from'./walletConfig';import{// assertIsBroadcastTxSuccess,\nSigningStargateClient,StargateClient}from'@cosmjs/stargate';const ChainIdList={[ChainId.ATOM]:'',[ChainId.ATOM_SEI_TEST]:'atlantic-1',[ChainId.ATOM_DCORE]:'',// [ChainId.ATOM_DCORE_TEST]: 'coreum-devnet-1',\n[ChainId.ATOM_DCORE_TEST]:'coreum-testnet-1'};const seiAddressReg=/^sei[0-9A-Za-z]{39}$/;// const devdcoreAddressReg = /^devcore[0-9A-Za-z]{39}$/\nconst devdcoreAddressReg=/^testcore[0-9A-Za-z]{39}$/;const dcoreAddressReg=/^core[0-9A-Za-z]{39}$/;export function isAtomAddress(address,chainId){if([ChainId.ATOM_SEI,ChainId.ATOM_SEI_TEST].includes(chainId)){return seiAddressReg.test(address)?address:false;//true: address; false: false\n}else if([ChainId.ATOM_DCORE].includes(chainId)){return dcoreAddressReg.test(address)?address:false;//true: address; false: false\n}else if([ChainId.ATOM_DCORE_TEST].includes(chainId)){return devdcoreAddressReg.test(address)?address:false;//true: address; false: false\n}return false;}/**\n * Connect wallet and get account address\n */export function useLoginAtom(){const dispatch=useDispatch();const loginAtom=useCallback(chainId=>{var _window,_window$keplr;if((_window=window)===null||_window===void 0?void 0:(_window$keplr=_window.keplr)===null||_window$keplr===void 0?void 0:_window$keplr.enable){var _window2,_window2$keplr;(_window2=window)===null||_window2===void 0?void 0:(_window2$keplr=_window2.keplr)===null||_window2$keplr===void 0?void 0:_window2$keplr.enable(ChainIdList[chainId]).then(()=>{// console.log(res)\nconst offlineSigner=window.getOfflineSigner(ChainIdList[chainId]);offlineSigner.getAccounts().then(res=>{var _res$;console.log(res);if(res===null||res===void 0?void 0:(_res$=res[0])===null||_res$===void 0?void 0:_res$.address){var _res$2;dispatch(nonevmAddress({chainId,account:res===null||res===void 0?void 0:(_res$2=res[0])===null||_res$2===void 0?void 0:_res$2.address}));}else{dispatch(nonevmAddress({chainId,account:''}));}});}).catch(error=>{console.log(error);if(atomChainConfig[chainId]){window.keplr.experimentalSuggestChain(atomChainConfig[chainId]).then(res=>{console.log(res);loginAtom(chainId);}).catch(error=>{console.log(error);dispatch(nonevmAddress({chainId,account:''}));});}else{dispatch(nonevmAddress({chainId,account:''}));}});}else{if(confirm('Please install Petra Wallet.')===true){window.open('https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap');}}},[]);return{loginAtom};}/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */export function useAtomBalance(){const atomBalanceList=useSelector(state=>state.atom.atomBalanceList);const getAtomSeiBalance=useCallback(_ref=>{let{account,chainId}=_ref;return new Promise(async resolve=>{if(account){try{const client=await StargateClient.connect(config.chainInfo[chainId].nodeRpc);client.getAllBalances(account).then(res=>{// console.log(res)\nresolve(res);}).catch(error=>{console.log(error);resolve('');});}catch{// console.log(err.toString())\nresolve('');}}});},[]);return{atomBalanceList,getAtomSeiBalance};}/**\n * Get transaction info\n *\n * @param txid transaction hash\n */export function getAtomTxnsStatus(txid,chainId){const data={msg:'Error',info:''};return new Promise(async resolve=>{try{const client=await StargateClient.connect(config.chainInfo[chainId].nodeRpc);client.getTx(txid).then(json=>{// console.log(json)\nif(json){if(json.status==='ERROR'){data.msg='Null';data.error='Query is empty!';}else if(json.code===0){data.msg='Success';data.info=json;}else{data.msg='Failure';data.error='Txns is failure!';}}else{data.msg='Null';data.error='Query is empty!';}resolve(data);}).catch(err=>{console.log(err.toString());data.error='Query is empty!';resolve(data);});}catch{// console.log(error.toString())\ndata.error='Query is empty!';resolve(data);}});}// getAtomTxnsStatus('5215EAFB54324C2C33DF446AB40CB9A0EECC53891E9A611B12B7CAD46D5C671D', 'ATOM_SEI_TEST')\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */export function useAtomCrossChain(routerToken,inputToken,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,useToChainId){const{account,chainId}=useActiveReact();const{atomBalanceList}=useAtomBalance();const{t}=useTranslation();const{onChangeViewDtil}=useTxnsDtilOpen();const{onChangeViewErrorTip}=useTxnsErrorTipOpen();const addTransaction=useTransactionAdder();const inputAmount=useMemo(()=>tryParseAmount3(typedValue,selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals),[typedValue,selectCurrency]);const balance=useMemo(()=>{const token=selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address;if(token){var _atomBalanceList$NATI,_atomBalanceList$toke;if((selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.tokenType)==='NATIVE'&&(atomBalanceList===null||atomBalanceList===void 0?void 0:(_atomBalanceList$NATI=atomBalanceList['NATIVE'])===null||_atomBalanceList$NATI===void 0?void 0:_atomBalanceList$NATI.balance)){var _atomBalanceList$NATI2;return BigAmount.format(6,atomBalanceList===null||atomBalanceList===void 0?void 0:(_atomBalanceList$NATI2=atomBalanceList['NATIVE'])===null||_atomBalanceList$NATI2===void 0?void 0:_atomBalanceList$NATI2.balance);}else if(atomBalanceList===null||atomBalanceList===void 0?void 0:(_atomBalanceList$toke=atomBalanceList[token])===null||_atomBalanceList$toke===void 0?void 0:_atomBalanceList$toke.balance){var _atomBalanceList$toke2;return BigAmount.format(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,atomBalanceList===null||atomBalanceList===void 0?void 0:(_atomBalanceList$toke2=atomBalanceList[token])===null||_atomBalanceList$toke2===void 0?void 0:_atomBalanceList$toke2.balance);}return BigAmount.format(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,'0');}return undefined;},[selectCurrency,atomBalanceList]);let sufficientBalance=false;try{// sufficientBalance = true\nsufficientBalance=selectCurrency&&typedValue&&balance&&Number(balance===null||balance===void 0?void 0:balance.toExact())>=Number(typedValue);}catch(error){console.log(error);}return useMemo(()=>{if(!account||!chainId||!selectCurrency||!useToChainId)return{};return{balance:balance,execute:async()=>{try{const useChainId=ChainIdList[chainId];// console.log(useChainId)\nconst offlineSigner=window.getOfflineSigner(useChainId);// console.log(offlineSigner)\n// console.log(config.chainInfo[chainId].nodeRpc)\nconst client=await SigningStargateClient.connectWithSigner(config.chainInfo[chainId].nodeRpc,offlineSigner);// console.log(client)\nconst amountFinal={denom:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,amount:inputAmount};const fee={amount:[{denom:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,amount:'5000'}],gas:'200000'};// const txReceipt = await client.sendTokens(account, routerToken, [amountFinal], fee, \"\")\n// const txResult = await client.sendTokens(account, routerToken, [amountFinal], \"auto\", receiveAddress + ':' + selectChain)\nconst txResult=await client.sendTokens(account,routerToken,[amountFinal],fee,receiveAddress+':'+useToChainId);console.log(txResult);const txReceipt={hash:txResult===null||txResult===void 0?void 0:txResult.transactionHash};// resolve({hash: txResult?.hash})\nif(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash){const data={hash:txReceipt.hash,chainId:chainId,selectChain:selectChain,account:account,value:inputAmount,formatvalue:typedValue,to:receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig.type,pairid:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,routerToken:routerToken};addTransaction(txReceipt,{summary:\"Cross bridge \".concat(typedValue,\" \").concat(selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol),value:typedValue,toChainId:selectChain,toAddress:(receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.indexOf('0x'))===0?receiveAddress===null||receiveAddress===void 0?void 0:receiveAddress.toLowerCase():receiveAddress,symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,version:destConfig===null||destConfig===void 0?void 0:destConfig.type,routerToken:routerToken,token:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address,logoUrl:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.logoUrl,isLiquidity:destConfig===null||destConfig===void 0?void 0:destConfig.isLiquidity,fromInfo:{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol,name:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.name,decimals:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.decimals,address:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.address},toInfo:{symbol:destConfig===null||destConfig===void 0?void 0:destConfig.symbol,name:destConfig===null||destConfig===void 0?void 0:destConfig.name,decimals:destConfig===null||destConfig===void 0?void 0:destConfig.decimals,address:destConfig===null||destConfig===void 0?void 0:destConfig.address}});recordsTxns(data);onChangeViewDtil(txReceipt===null||txReceipt===void 0?void 0:txReceipt.hash,true);}}catch(error){// reject(error)\nconsole.log(error);onChangeViewErrorTip('Txns failure.',true);}},inputError:sufficientBalance?undefined:t('Insufficient',{symbol:selectCurrency===null||selectCurrency===void 0?void 0:selectCurrency.symbol})};},[routerToken,inputToken,chainId,selectCurrency,selectChain,receiveAddress,typedValue,destConfig,account,balance,inputAmount,sufficientBalance,useToChainId]);}","map":{"version":3,"names":["useCallback","useMemo","useTranslation","useDispatch","useSelector","nonevmAddress","useActiveReact","ChainId","useTxnsDtilOpen","useTxnsErrorTipOpen","useTransactionAdder","tryParseAmount3","BigAmount","recordsTxns","config","atomChainConfig","SigningStargateClient","StargateClient","ChainIdList","ATOM","ATOM_SEI_TEST","ATOM_DCORE","ATOM_DCORE_TEST","seiAddressReg","devdcoreAddressReg","dcoreAddressReg","isAtomAddress","address","chainId","ATOM_SEI","includes","test","useLoginAtom","dispatch","loginAtom","_window","_window$keplr","window","keplr","enable","_window2","_window2$keplr","then","offlineSigner","getOfflineSigner","getAccounts","res","_res$","console","log","_res$2","account","catch","error","experimentalSuggestChain","confirm","open","useAtomBalance","atomBalanceList","state","atom","getAtomSeiBalance","_ref","Promise","resolve","client","connect","chainInfo","nodeRpc","getAllBalances","getAtomTxnsStatus","txid","data","msg","info","getTx","json","status","code","err","toString","useAtomCrossChain","routerToken","inputToken","selectCurrency","selectChain","receiveAddress","typedValue","destConfig","useToChainId","t","onChangeViewDtil","onChangeViewErrorTip","addTransaction","inputAmount","decimals","balance","token","_atomBalanceList$NATI","_atomBalanceList$toke","tokenType","_atomBalanceList$NATI2","format","_atomBalanceList$toke2","undefined","sufficientBalance","Number","toExact","execute","useChainId","connectWithSigner","amountFinal","denom","amount","fee","gas","txResult","sendTokens","txReceipt","hash","transactionHash","value","formatvalue","to","symbol","version","type","pairid","summary","concat","toChainId","toAddress","indexOf","toLowerCase","logoUrl","isLiquidity","fromInfo","name","toInfo","inputError"],"sources":["/workspace/Planq-Dapps/vesting-portal/src/nonevm/atom/index.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useTranslation } from 'react-i18next'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  AppState,\n  AppDispatch\n} from '../../state'\nimport {nonevmAddress} from '../hooks/actions'\nimport { useActiveReact } from '../../hooks/useActiveReact'\nimport { ChainId } from \"../../config/chainConfig/chainId\"\nimport {useTxnsDtilOpen, useTxnsErrorTipOpen} from '../../state/application/hooks'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { tryParseAmount3 } from '../../state/swap/hooks'\nimport {BigAmount} from '../../utils/formatBignumber'\nimport {recordsTxns} from '../../utils/bridge/register'\n\nimport config from '../../config'\n\nimport {atomChainConfig} from './walletConfig'\n\nimport {\n  // assertIsBroadcastTxSuccess,\n  SigningStargateClient,\n  StargateClient\n} from '@cosmjs/stargate'\n\nconst ChainIdList:any = {\n  [ChainId.ATOM]: '',\n  [ChainId.ATOM_SEI_TEST]: 'atlantic-1',\n  [ChainId.ATOM_DCORE]: '',\n  // [ChainId.ATOM_DCORE_TEST]: 'coreum-devnet-1',\n  [ChainId.ATOM_DCORE_TEST]: 'coreum-testnet-1',\n}\nconst seiAddressReg = /^sei[0-9A-Za-z]{39}$/\n// const devdcoreAddressReg = /^devcore[0-9A-Za-z]{39}$/\nconst devdcoreAddressReg = /^testcore[0-9A-Za-z]{39}$/\nconst dcoreAddressReg = /^core[0-9A-Za-z]{39}$/\nexport function isAtomAddress (address:string, chainId:any):boolean | string {\n  if ([ChainId.ATOM_SEI, ChainId.ATOM_SEI_TEST].includes(chainId)) {\n    return seiAddressReg.test(address) ? address : false //true: address; false: false\n  } else if ([ChainId.ATOM_DCORE].includes(chainId)) {\n    return dcoreAddressReg.test(address) ? address : false //true: address; false: false\n  } else if ([ChainId.ATOM_DCORE_TEST].includes(chainId)) {\n    return devdcoreAddressReg.test(address) ? address : false //true: address; false: false\n  }\n  return false\n}\n\n/**\n * Connect wallet and get account address\n */\nexport function useLoginAtom () {\n  const dispatch = useDispatch<AppDispatch>()\n  const loginAtom = useCallback((chainId) => {\n    if (window?.keplr?.enable) {\n      window?.keplr?.enable(ChainIdList[chainId]).then(() => {\n        // console.log(res)\n        const offlineSigner = window.getOfflineSigner(ChainIdList[chainId])\n        offlineSigner.getAccounts().then((res:any) => {\n          console.log(res)\n          if (res?.[0]?.address) {\n            dispatch(nonevmAddress({chainId, account: res?.[0]?.address}))\n          } else {\n            dispatch(nonevmAddress({chainId, account: ''}))\n          }\n        })\n      }).catch((error:any) => {\n        console.log(error)\n        if (atomChainConfig[chainId]) {\n          window.keplr.experimentalSuggestChain(atomChainConfig[chainId]).then((res:any) => {\n            console.log(res)\n            loginAtom(chainId)\n          }).catch((error:any) => {\n            console.log(error)\n            dispatch(nonevmAddress({chainId, account: ''}))\n          })\n        } else {\n          dispatch(nonevmAddress({chainId, account: ''}))\n        }\n      })\n    } else {\n      if (confirm('Please install Petra Wallet.') === true) {\n        window.open('https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap')\n      }\n    }\n  }, [])\n  return {\n    loginAtom\n  }\n}\n\n/**\n * Get native balance and token balance\n *\n * @param account wallet address\n * @param token token address\n */\nexport function useAtomBalance () {\n  const atomBalanceList:any = useSelector<AppState, AppState['atom']>(state => state.atom.atomBalanceList)\n  const getAtomSeiBalance = useCallback(({account, chainId}: {account: any, chainId:any}) => {\n    return new Promise(async(resolve) => {\n      if (account) {\n        try {\n          const client = await StargateClient.connect(\n            config.chainInfo[chainId].nodeRpc\n          )\n          client.getAllBalances(account).then((res:any) => {\n            // console.log(res)\n            resolve(res)\n          }).catch((error:any) => {\n            console.log(error)\n            resolve('')\n          })\n        } catch {\n          // console.log(err.toString())\n          resolve('')\n        }\n      }\n    })\n  }, []) \n\n  return {\n    atomBalanceList,\n    getAtomSeiBalance,\n  }\n}\n\n/**\n * Get transaction info\n *\n * @param txid transaction hash\n */\nexport function getAtomTxnsStatus (txid:string, chainId:any) {\n  const data:any = {\n    msg: 'Error',\n    info: ''\n  }\n  return new Promise(async(resolve) => {\n    try {\n      \n      const client = await StargateClient.connect(\n        config.chainInfo[chainId].nodeRpc\n      )\n      client.getTx(txid).then((json:any) => {\n        // console.log(json)\n        if (json) {\n          if (json.status === 'ERROR') {\n            data.msg = 'Null'\n            data.error = 'Query is empty!'\n          } else if (json.code === 0) {\n            data.msg = 'Success'\n            data.info = json\n          } else {\n            data.msg = 'Failure'\n            data.error = 'Txns is failure!'\n          }\n        } else {\n          data.msg = 'Null'\n          data.error = 'Query is empty!'\n        }\n        resolve(data)\n      }).catch(err => {\n        console.log(err.toString())\n        data.error = 'Query is empty!'\n        resolve(data)\n      })\n    } catch {\n      // console.log(error.toString())\n      data.error = 'Query is empty!'\n      resolve(data)\n    }\n  })\n}\n\n// getAtomTxnsStatus('5215EAFB54324C2C33DF446AB40CB9A0EECC53891E9A611B12B7CAD46D5C671D', 'ATOM_SEI_TEST')\n\n\n/**\n * Cross chain \n *\n * @param routerToken router token address\n * @param inputToken any or underlying address\n * @param selectCurrency select current token info\n * @param selectChain to chainId\n * @param receiveAddress receive address\n * @param typedValue typed Value\n * @param destConfig to chain info\n */\nexport function useAtomCrossChain (\n  routerToken: any,\n  inputToken: any,\n  selectCurrency: any,\n  selectChain: any,\n  receiveAddress: string | null | undefined,\n  typedValue: string | undefined,\n  destConfig: any,\n  useToChainId: any,\n): {\n  inputError?: string\n  balance?: any,\n  execute?: undefined | (() => Promise<void>)\n} {\n  const { account, chainId } = useActiveReact()\n  const {atomBalanceList} = useAtomBalance()\n\n  const { t } = useTranslation()\n  const {onChangeViewDtil} = useTxnsDtilOpen()\n  const {onChangeViewErrorTip} = useTxnsErrorTipOpen()\n  const addTransaction = useTransactionAdder()\n\n  const inputAmount = useMemo(() => tryParseAmount3(typedValue, selectCurrency?.decimals), [typedValue, selectCurrency])\n\n  const balance:any = useMemo(() => {\n    const token = selectCurrency?.address\n    if (token) {\n      if (selectCurrency?.tokenType === 'NATIVE' && atomBalanceList?.['NATIVE']?.balance) {\n        return BigAmount.format(6, atomBalanceList?.['NATIVE']?.balance)\n      } else if (atomBalanceList?.[token]?.balance) {\n        return BigAmount.format(selectCurrency?.decimals, atomBalanceList?.[token]?.balance)\n      }\n      return BigAmount.format(selectCurrency?.decimals, '0')\n    }\n    return undefined\n  }, [selectCurrency, atomBalanceList])\n\n  let sufficientBalance:any = false\n  try {\n    // sufficientBalance = true\n    sufficientBalance = selectCurrency && typedValue && balance && (Number(balance?.toExact()) >= Number(typedValue))\n  } catch (error) {\n    console.log(error)\n  }\n  return useMemo(() => {\n    if (!account || !chainId || !selectCurrency || !useToChainId) return {}\n    return {\n      balance: balance,\n      execute: async () => {\n        try {\n          const useChainId = ChainIdList[chainId]\n          // console.log(useChainId)\n          const offlineSigner = window.getOfflineSigner(useChainId);\n          // console.log(offlineSigner)\n          // console.log(config.chainInfo[chainId].nodeRpc)\n          const client = await SigningStargateClient.connectWithSigner(\n            config.chainInfo[chainId].nodeRpc,\n            offlineSigner\n          )\n          // console.log(client)\n          const amountFinal = {\n            denom: selectCurrency?.address,\n            amount: inputAmount,\n          }\n          const fee = {\n            amount: [{\n              denom: selectCurrency?.address,\n              amount: '5000',\n            }],\n            gas: '200000',\n          }\n          // const txReceipt = await client.sendTokens(account, routerToken, [amountFinal], fee, \"\")\n          // const txResult = await client.sendTokens(account, routerToken, [amountFinal], \"auto\", receiveAddress + ':' + selectChain)\n          const txResult = await client.sendTokens(account, routerToken, [amountFinal], fee, receiveAddress + ':' + useToChainId)\n          console.log(txResult)\n          const txReceipt = {hash: txResult?.transactionHash}\n          // resolve({hash: txResult?.hash})\n          if (txReceipt?.hash) {\n            const data:any = {\n              hash: txReceipt.hash,\n              chainId: chainId,\n              selectChain: selectChain,\n              account: account,\n              value: inputAmount,\n              formatvalue: typedValue,\n              to: receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig.type,\n              pairid: selectCurrency?.symbol,\n              routerToken: routerToken\n            }\n            addTransaction(txReceipt, {\n              summary: `Cross bridge ${typedValue} ${selectCurrency?.symbol}`,\n              value: typedValue,\n              toChainId: selectChain,\n              toAddress: receiveAddress?.indexOf('0x') === 0 ? receiveAddress?.toLowerCase() : receiveAddress,\n              symbol: selectCurrency?.symbol,\n              version: destConfig?.type,\n              routerToken: routerToken,\n              token: selectCurrency?.address,\n              logoUrl: selectCurrency?.logoUrl,\n              isLiquidity: destConfig?.isLiquidity,\n              fromInfo: {\n                symbol: selectCurrency?.symbol,\n                name: selectCurrency?.name,\n                decimals: selectCurrency?.decimals,\n                address: selectCurrency?.address,\n              },\n              toInfo: {\n                symbol: destConfig?.symbol,\n                name: destConfig?.name,\n                decimals: destConfig?.decimals,\n                address: destConfig?.address,\n              },\n            })\n            recordsTxns(data)\n            onChangeViewDtil(txReceipt?.hash, true)\n          }\n        } catch (error) {\n          // reject(error)\n          console.log(error)\n          onChangeViewErrorTip('Txns failure.', true)\n        }\n      },\n      inputError: sufficientBalance ? undefined : t('Insufficient', {symbol: selectCurrency?.symbol})\n    }\n  }, [routerToken, inputToken, chainId, selectCurrency, selectChain, receiveAddress, typedValue, destConfig, account, balance, inputAmount, sufficientBalance, useToChainId])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}