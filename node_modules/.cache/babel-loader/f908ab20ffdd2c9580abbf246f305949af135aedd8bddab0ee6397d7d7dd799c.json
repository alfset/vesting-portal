{"ast":null,"code":"// Config dependency injected into logger to break circular dependency\nlet config = null;\nconst setConfig = _config => {\n  config = _config;\n};\n\n/**\n * The levels of the logger\n */\nlet LEVELS = /*#__PURE__*/function (LEVELS) {\n  LEVELS[LEVELS[\"debug\"] = 5] = \"debug\";\n  LEVELS[LEVELS[\"info\"] = 4] = \"info\";\n  LEVELS[LEVELS[\"log\"] = 3] = \"log\";\n  LEVELS[LEVELS[\"warn\"] = 2] = \"warn\";\n  LEVELS[LEVELS[\"error\"] = 1] = \"error\";\n  return LEVELS;\n}({});\n\n/**\n * Builds a message formatted for the logger\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @returns The message formatted for the logger\n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = options => {\n  const {\n    title,\n    message\n  } = options;\n  return [\"\\n    %c\".concat(title, \"\\n    ============================\\n\\n    \").concat(message, \"\\n\\n    ============================\\n    \").replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(), \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @param options.level - The level of the log\n * @param options.always - Whether to always show the log\n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n */\nconst log = async options => {\n  var _await$config$get, _config2;\n  const {\n    title,\n    message,\n    level,\n    always\n  } = options;\n  const configLoggerLevel = (_await$config$get = await ((_config2 = config) === null || _config2 === void 0 || (_config2 = _config2()) === null || _config2 === void 0 ? void 0 : _config2.get(\"logger.level\"))) !== null && _await$config$get !== void 0 ? _await$config$get : LEVELS.warn;\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice.  If a callback is provided this function returns a function that will call the callback and log the deprecation notice, otherwise it just logs the deprecation notice.\n * @param options - The options for the log\n * @param options.pkg - The package that is being deprecated\n * @param options.subject - The subject of the deprecation\n * @param options.transition - The transition path for the deprecation\n * @param options.level - The level of the log\n * @param options.message - The message of the log\n * @param options.callback - A callback to run after the log\n * @returns A function that will call the callback and log the deprecation notice if the callback is provided\n * @example\n * // Logs a deprecation notice\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * @example\n * function someFunction() { ... }\n * const deprecatedFunction = log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/foo/bar/TRANSITIONS.md\", message: \"Descriptive message\", level: LEVELS.warn, callback: someFunction })\n * deprecatedFunction() // Calls someFunction and logs the deprecation notice\n */\nlog.deprecate = options => {\n  const {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = options;\n  const capitalizeFirstLetter = str => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  const logMessage = () => log({\n    title: \"\".concat(pkg ? pkg + \" \" : \"\", \"Deprecation Notice\"),\n    message: \"\\n      \".concat(subject ? \"\".concat(capitalizeFirstLetter(subject), \" is deprecated and will cease to work in future releases\").concat(pkg ? \" of \" + pkg : \"\", \".\") : \"\").concat(message ? \"\\n\" + message : \"\").concat(transition ? \"\\nYou can learn more (including a guide on common transition paths) here: \".concat(transition) : \"\", \"\\n    \").trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\nexport { LEVELS, log, setConfig };","map":{"version":3,"names":["config","setConfig","_config","LEVELS","buildLoggerMessageArgs","options","title","message","concat","replace","trim","log","_await$config$get","_config2","level","always","configLoggerLevel","get","warn","loggerMessageArgs","debug","console","info","error","deprecate","pkg","subject","transition","callback","capitalizeFirstLetter","str","charAt","toUpperCase","slice","logMessage","arguments"],"sources":["../src/util-logger.ts"],"sourcesContent":["interface IConfig {\n  get: <T>(key: string) => T;\n}\n\ntype Config = IConfig & (() => IConfig) | null\n\n// Config dependency injected into logger to break circular dependency\nlet config: Config = null\nexport const setConfig = (_config: any) => {\n  config = _config\n}\n\n/**\n * The levels of the logger\n */\nexport enum LEVELS {\n  debug = 5,\n  info = 4,\n  log = 3,\n  warn = 2,\n  error = 1,\n}\n\n/**\n * Builds a message formatted for the logger\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @returns The message formatted for the logger\n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = (options: {\n  title: string\n  message: string\n}): string[] => {\n  const {title, message} = options\n  return [\n    `\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `\n      .replace(/\\n[^\\S\\r\\n]+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\",\n  ]\n}\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @param options.level - The level of the log\n * @param options.always - Whether to always show the log\n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n */\nexport const log = async (options: {\n  title: string\n  message: string\n  level: number\n  always?: boolean\n}) => {\n  const {title, message, level, always} = options\n  const configLoggerLevel = (await config?.()?.get<number>(\"logger.level\")) ?? LEVELS.warn\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return\n\n  const loggerMessageArgs = buildLoggerMessageArgs({title, message})\n\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs)\n      break\n    case LEVELS.info:\n      console.info(...loggerMessageArgs)\n      break\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs)\n      break\n    case LEVELS.error:\n      console.error(...loggerMessageArgs)\n      break\n    default:\n      console.log(...loggerMessageArgs)\n  }\n}\n\n/**\n * Logs a deprecation notice.  If a callback is provided this function returns a function that will call the callback and log the deprecation notice, otherwise it just logs the deprecation notice.\n * @param options - The options for the log\n * @param options.pkg - The package that is being deprecated\n * @param options.subject - The subject of the deprecation\n * @param options.transition - The transition path for the deprecation\n * @param options.level - The level of the log\n * @param options.message - The message of the log\n * @param options.callback - A callback to run after the log\n * @returns A function that will call the callback and log the deprecation notice if the callback is provided\n * @example\n * // Logs a deprecation notice\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * @example\n * function someFunction() { ... }\n * const deprecatedFunction = log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/foo/bar/TRANSITIONS.md\", message: \"Descriptive message\", level: LEVELS.warn, callback: someFunction })\n * deprecatedFunction() // Calls someFunction and logs the deprecation notice\n */\nlog.deprecate = <T, U>(options: {\n  pkg?: string\n  subject?: string\n  transition?: string\n  level?: number\n  message?: string\n  callback?: (...args: T[]) => U\n}): ((...args: T[]) => Promise<U>) | Promise<void> => {\n  const {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null,\n  } = options\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  const logMessage = () =>\n    log({\n      title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n      message: `\n      ${\n        subject\n          ? `${capitalizeFirstLetter(\n              subject\n            )} is deprecated and will cease to work in future releases${\n              pkg ? \" of \" + pkg : \"\"\n            }.`\n          : \"\"\n      }${message ? \"\\n\" + message : \"\"}${\n        transition\n          ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}`\n          : \"\"\n      }\n    `.trim(),\n      level,\n    })\n\n  if (typeof callback === \"function\") {\n    return async (...args: T[]) => {\n      await logMessage()\n      return await callback(...args)\n    }\n  }\n  return logMessage()\n}\n"],"mappings":"AAMA;AACA,IAAIA,MAAc,GAAG,IAAI;AACZ,MAAAC,SAAS,GAAIC,OAAY,IAAK;EACzCF,MAAM,GAAGE,OAAO;AAClB;;AAEA;AACA;AACA;AACY,IAAAC,MAAM,0BAANA,MAAM;EAANA,MAAM,CAANA,MAAM;EAANA,MAAM,CAANA,MAAM;EAANA,MAAM,CAANA,MAAM;EAANA,MAAM,CAANA,MAAM;EAANA,MAAM,CAANA,MAAM;EAAA,OAANA,MAAM;AAAA;;AAQlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAIC,OAG/B,IAAe;EACd,MAAM;IAACC,KAAK;IAAEC;EAAO,CAAC,GAAGF,OAAO;EAChC,OAAO,CACJ,WAAAG,MAAA,CACGF,KAAM,gDAAAE,MAAA,CAGRD,OAAQ,gDAIPE,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAC9BC,IAAI,EAAE,EACT,yCAAyC,CAC1C;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,MAAAC,GAAG,GAAG,MAAON,OAKzB,IAAK;EAAA,IAAAO,iBAAA,EAAAC,QAAA;EACJ,MAAM;IAACP,KAAK;IAAEC,OAAO;IAAEO,KAAK;IAAEC;EAAM,CAAC,GAAGV,OAAO;EAC/C,MAAMW,iBAAiB,IAAAJ,iBAAA,GAAI,QAAAC,QAAA,GAAMb,MAAM,cAAAa,QAAA,gBAAAA,QAAA,GAANA,QAAA,CAAM,CAAI,cAAAA,QAAA,uBAAVA,QAAA,CAAYI,GAAG,CAAS,cAAc,CAAC,eAAAL,iBAAA,cAAAA,iBAAA,GAAKT,MAAM,CAACe,IAAI;;EAExF;EACA,IAAI,CAACH,MAAM,IAAIC,iBAAiB,GAAGF,KAAK,EAAE;EAE1C,MAAMK,iBAAiB,GAAGf,sBAAsB,CAAC;IAACE,KAAK;IAAEC;EAAO,CAAC,CAAC;EAElE,QAAQO,KAAK;IACX,KAAKX,MAAM,CAACiB,KAAK;MACfC,OAAO,CAACD,KAAK,CAAC,GAAGD,iBAAiB,CAAC;MACnC;IACF,KAAKhB,MAAM,CAACmB,IAAI;MACdD,OAAO,CAACC,IAAI,CAAC,GAAGH,iBAAiB,CAAC;MAClC;IACF,KAAKhB,MAAM,CAACe,IAAI;MACdG,OAAO,CAACH,IAAI,CAAC,GAAGC,iBAAiB,CAAC;MAClC;IACF,KAAKhB,MAAM,CAACoB,KAAK;MACfF,OAAO,CAACE,KAAK,CAAC,GAAGJ,iBAAiB,CAAC;MACnC;IACF;MACEE,OAAO,CAACV,GAAG,CAAC,GAAGQ,iBAAiB,CAAC;EACrC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,GAAG,CAACa,SAAS,GAAUnB,OAOtB,IAAqD;EACpD,MAAM;IACJoB,GAAG;IACHC,OAAO;IACPC,UAAU;IACVb,KAAK,GAAGX,MAAM,CAACe,IAAI;IACnBX,OAAO,GAAG,EAAE;IACZqB,QAAQ,GAAG;EACb,CAAC,GAAGvB,OAAO;EAEX,MAAMwB,qBAAqB,GAAIC,GAAW,IAAK;IAC7C,OAAOA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;GAClD;EAED,MAAMC,UAAU,GAAGA,CAAA,KACjBvB,GAAG,CAAC;IACFL,KAAK,KAAAE,MAAA,CAAKiB,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAG,EAAG,uBAAmB;IAClDlB,OAAO,EAAG,WAAAC,MAAA,CAERkB,OAAO,MAAAlB,MAAA,CACAqB,qBAAqB,CACtBH,OACF,CAAE,8DAAAlB,MAAA,CACAiB,GAAG,GAAG,MAAM,GAAGA,GAAG,GAAG,EACtB,SACD,EACL,EAAAjB,MAAA,CAAED,OAAO,GAAG,IAAI,GAAGA,OAAO,GAAG,EAAG,EAAAC,MAAA,CAC/BmB,UAAU,gFAAAnB,MAAA,CACuEmB,UAAW,IACxF,EACL,YACDjB,IAAI,EAAE;IACNI;EACF,CAAC,CAAC;EAEJ,IAAI,OAAOc,QAAQ,KAAK,UAAU,EAAE;IAClC,OAAO,kBAAwB;MAC7B,MAAMM,UAAU,EAAE;MAClB,OAAO,MAAMN,QAAQ,CAAC,GAAAO,SAAO,CAAC;KAC/B;EACH;EACA,OAAOD,UAAU,EAAE;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}